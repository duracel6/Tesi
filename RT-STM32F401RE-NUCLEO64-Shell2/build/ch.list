
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	080002d9 	.word	0x080002d9
 8000008:	080002db 	.word	0x080002db
 800000c:	080002db 	.word	0x080002db
 8000010:	080002db 	.word	0x080002db
 8000014:	080002db 	.word	0x080002db
 8000018:	080002db 	.word	0x080002db
 800001c:	080002db 	.word	0x080002db
 8000020:	080002db 	.word	0x080002db
 8000024:	080002db 	.word	0x080002db
 8000028:	080002db 	.word	0x080002db
 800002c:	080049d1 	.word	0x080049d1
 8000030:	080002db 	.word	0x080002db
 8000034:	080002db 	.word	0x080002db
 8000038:	080002db 	.word	0x080002db
 800003c:	080002db 	.word	0x080002db
 8000040:	080002db 	.word	0x080002db
 8000044:	080002db 	.word	0x080002db
 8000048:	080002db 	.word	0x080002db
 800004c:	080002db 	.word	0x080002db
 8000050:	080002db 	.word	0x080002db
 8000054:	080002db 	.word	0x080002db
 8000058:	080002db 	.word	0x080002db
 800005c:	080002db 	.word	0x080002db
 8000060:	080002db 	.word	0x080002db
 8000064:	080002db 	.word	0x080002db
 8000068:	080002db 	.word	0x080002db
 800006c:	080025a1 	.word	0x080025a1
 8000070:	080025e1 	.word	0x080025e1
 8000074:	08002631 	.word	0x08002631
 8000078:	08002681 	.word	0x08002681
 800007c:	080026d1 	.word	0x080026d1
 8000080:	08002711 	.word	0x08002711
 8000084:	08002761 	.word	0x08002761
 8000088:	080002db 	.word	0x080002db
 800008c:	080002db 	.word	0x080002db
 8000090:	080002db 	.word	0x080002db
 8000094:	080002db 	.word	0x080002db
 8000098:	080002db 	.word	0x080002db
 800009c:	080002db 	.word	0x080002db
 80000a0:	080002db 	.word	0x080002db
 80000a4:	080002db 	.word	0x080002db
 80000a8:	080002db 	.word	0x080002db
 80000ac:	080002db 	.word	0x080002db
 80000b0:	08002271 	.word	0x08002271
 80000b4:	080002db 	.word	0x080002db
 80000b8:	080002db 	.word	0x080002db
 80000bc:	080002db 	.word	0x080002db
 80000c0:	080002db 	.word	0x080002db
 80000c4:	080002db 	.word	0x080002db
 80000c8:	080002db 	.word	0x080002db
 80000cc:	080002db 	.word	0x080002db
 80000d0:	080002db 	.word	0x080002db
 80000d4:	08002181 	.word	0x08002181
 80000d8:	080021b1 	.word	0x080021b1
 80000dc:	080002db 	.word	0x080002db
 80000e0:	080002db 	.word	0x080002db
 80000e4:	080002db 	.word	0x080002db
 80000e8:	080002db 	.word	0x080002db
 80000ec:	080002db 	.word	0x080002db
 80000f0:	080002db 	.word	0x080002db
 80000f4:	080002db 	.word	0x080002db
 80000f8:	080002db 	.word	0x080002db
 80000fc:	080027b1 	.word	0x080027b1
 8000100:	080002db 	.word	0x080002db
 8000104:	080002db 	.word	0x080002db
 8000108:	080002db 	.word	0x080002db
 800010c:	080002db 	.word	0x080002db
 8000110:	080002db 	.word	0x080002db
 8000114:	080002db 	.word	0x080002db
 8000118:	080002db 	.word	0x080002db
 800011c:	080002db 	.word	0x080002db
 8000120:	08002801 	.word	0x08002801
 8000124:	08002841 	.word	0x08002841
 8000128:	08002891 	.word	0x08002891
 800012c:	080028e1 	.word	0x080028e1
 8000130:	08002931 	.word	0x08002931
 8000134:	080002db 	.word	0x080002db
 8000138:	080002db 	.word	0x080002db
 800013c:	080002db 	.word	0x080002db
 8000140:	080002db 	.word	0x080002db
 8000144:	080002db 	.word	0x080002db
 8000148:	080002db 	.word	0x080002db
 800014c:	080002db 	.word	0x080002db
 8000150:	08002971 	.word	0x08002971
 8000154:	080029c1 	.word	0x080029c1
 8000158:	08002a11 	.word	0x08002a11
 800015c:	080002db 	.word	0x080002db
 8000160:	080002db 	.word	0x080002db
 8000164:	080002db 	.word	0x080002db
 8000168:	080002db 	.word	0x080002db
 800016c:	080002db 	.word	0x080002db
 8000170:	080002db 	.word	0x080002db
 8000174:	080002db 	.word	0x080002db
 8000178:	080002db 	.word	0x080002db
 800017c:	080002db 	.word	0x080002db
 8000180:	080002db 	.word	0x080002db
 8000184:	080002db 	.word	0x080002db
 8000188:	080002db 	.word	0x080002db
 800018c:	080002db 	.word	0x080002db
 8000190:	080002db 	.word	0x080002db
 8000194:	080002db 	.word	0x080002db
 8000198:	080002db 	.word	0x080002db
 800019c:	080002db 	.word	0x080002db
 80001a0:	080002db 	.word	0x080002db
 80001a4:	080002db 	.word	0x080002db
 80001a8:	080002db 	.word	0x080002db
 80001ac:	080002db 	.word	0x080002db
 80001b0:	080002db 	.word	0x080002db
 80001b4:	080002db 	.word	0x080002db
 80001b8:	080002db 	.word	0x080002db
 80001bc:	080002db 	.word	0x080002db
 80001c0:	080002db 	.word	0x080002db
 80001c4:	080002db 	.word	0x080002db
 80001c8:	080002db 	.word	0x080002db
 80001cc:	080002db 	.word	0x080002db
 80001d0:	080002db 	.word	0x080002db
 80001d4:	080002db 	.word	0x080002db
 80001d8:	080002db 	.word	0x080002db
 80001dc:	080002db 	.word	0x080002db

Disassembly of section .text:

08000200 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 8000200:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 8000202:	4827      	ldr	r0, [pc, #156]	; (80002a0 <endfiniloop+0x4>)
                msr     MSP, r0
 8000204:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 8000208:	4826      	ldr	r0, [pc, #152]	; (80002a4 <endfiniloop+0x8>)
                msr     PSP, r0
 800020a:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 800020e:	4826      	ldr	r0, [pc, #152]	; (80002a8 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 8000210:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 8000214:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 8000218:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 800021a:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 800021c:	f380 8814 	msr	CONTROL, r0
                isb
 8000220:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __cpu_init
 8000224:	f001 f954 	bl	80014d0 <__cpu_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000228:	f003 f8da 	bl	80033e0 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800022c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000230:	491e      	ldr	r1, [pc, #120]	; (80002ac <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 8000232:	4a1b      	ldr	r2, [pc, #108]	; (80002a0 <endfiniloop+0x4>)

08000234 <msloop>:
msloop:
                cmp     r1, r2
 8000234:	4291      	cmp	r1, r2
                itt     lo
 8000236:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000238:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 800023c:	e7fa      	bcc.n	8000234 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 800023e:	491c      	ldr	r1, [pc, #112]	; (80002b0 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 8000240:	4a18      	ldr	r2, [pc, #96]	; (80002a4 <endfiniloop+0x8>)

08000242 <psloop>:
psloop:
                cmp     r1, r2
 8000242:	4291      	cmp	r1, r2
                itt     lo
 8000244:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000246:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 800024a:	e7fa      	bcc.n	8000242 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =__textdata_base__
 800024c:	4919      	ldr	r1, [pc, #100]	; (80002b4 <endfiniloop+0x18>)
                ldr     r2, =__data_base__
 800024e:	4a1a      	ldr	r2, [pc, #104]	; (80002b8 <endfiniloop+0x1c>)
                ldr     r3, =__data_end__
 8000250:	4b1a      	ldr	r3, [pc, #104]	; (80002bc <endfiniloop+0x20>)

08000252 <dloop>:
dloop:
                cmp     r2, r3
 8000252:	429a      	cmp	r2, r3
                ittt    lo
 8000254:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 8000256:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 800025a:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 800025e:	e7f8      	bcc.n	8000252 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 8000260:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 8000262:	4917      	ldr	r1, [pc, #92]	; (80002c0 <endfiniloop+0x24>)
                ldr     r2, =__bss_end__
 8000264:	4a17      	ldr	r2, [pc, #92]	; (80002c4 <endfiniloop+0x28>)

08000266 <bloop>:
bloop:
                cmp     r1, r2
 8000266:	4291      	cmp	r1, r2
                itt     lo
 8000268:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800026a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 800026e:	e7fa      	bcc.n	8000266 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000270:	f001 f946 	bl	8001500 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8000274:	f001 f934 	bl	80014e0 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 8000278:	4c13      	ldr	r4, [pc, #76]	; (80002c8 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end__
 800027a:	4d14      	ldr	r5, [pc, #80]	; (80002cc <endfiniloop+0x30>)

0800027c <initloop>:
initloop:
                cmp     r4, r5
 800027c:	42ac      	cmp	r4, r5
                bge     endinitloop
 800027e:	da03      	bge.n	8000288 <endinitloop>
                ldr     r1, [r4], #4
 8000280:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000284:	4788      	blx	r1
                b       initloop
 8000286:	e7f9      	b.n	800027c <initloop>

08000288 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 8000288:	f006 fab2 	bl	80067f0 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 800028c:	4c10      	ldr	r4, [pc, #64]	; (80002d0 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end__
 800028e:	4d11      	ldr	r5, [pc, #68]	; (80002d4 <endfiniloop+0x38>)

08000290 <finiloop>:
finiloop:
                cmp     r4, r5
 8000290:	42ac      	cmp	r4, r5
                bge     endfiniloop
 8000292:	da03      	bge.n	800029c <endfiniloop>
                ldr     r1, [r4], #4
 8000294:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000298:	4788      	blx	r1
                b       finiloop
 800029a:	e7f9      	b.n	8000290 <finiloop>

0800029c <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 800029c:	f001 b928 	b.w	80014f0 <__default_exit>
                ldr     r0, =__main_stack_end__
 80002a0:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 80002a4:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 80002a8:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 80002ac:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 80002b0:	20000400 	.word	0x20000400
                ldr     r1, =__textdata_base__
 80002b4:	080073f0 	.word	0x080073f0
                ldr     r2, =__data_base__
 80002b8:	20000800 	.word	0x20000800
                ldr     r3, =__data_end__
 80002bc:	20000c80 	.word	0x20000c80
                ldr     r1, =__bss_base__
 80002c0:	20000c80 	.word	0x20000c80
                ldr     r2, =__bss_end__
 80002c4:	20001690 	.word	0x20001690
                ldr     r4, =__init_array_base__
 80002c8:	080001e0 	.word	0x080001e0
                ldr     r5, =__init_array_end__
 80002cc:	080001e0 	.word	0x080001e0
                ldr     r4, =__fini_array_base__
 80002d0:	080001e0 	.word	0x080001e0
                ldr     r5, =__fini_array_end__
 80002d4:	080001e0 	.word	0x080001e0

080002d8 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 80002d8:	e792      	b.n	8000200 <_crt0_entry>

080002da <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 80002da:	f000 f800 	bl	80002de <_unhandled_exception>

080002de <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 80002de:	e7fe      	b.n	80002de <_unhandled_exception>

080002e0 <__port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  __port_switch
__port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 80002e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if PORT_SWITCHED_REGIONS_NUMBER == 4
                push    {r4, r5, r6, r7, r8, r9, r10, r11}
#endif
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 80002e4:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 80002e8:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 80002ea:	469d      	mov	sp, r3

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80002ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002f0 <__port_thread_start>:
                bl      __stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 80002f0:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 80002f2:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 80002f6:	4628      	mov	r0, r5
                blx     r4
 80002f8:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 80002fa:	2000      	movs	r0, #0
                bl      chThdExit
 80002fc:	f004 f888 	bl	8004410 <chThdExit>

08000300 <.zombies>:
.zombies:       b       .zombies
 8000300:	e7fe      	b.n	8000300 <.zombies>

08000302 <__port_switch_from_isr>:
                bl      __stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      __dbg_check_lock
#endif
                bl      chSchDoPreemption
 8000302:	f003 fde5 	bl	8003ed0 <chSchDoPreemption>

08000306 <__port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 8000306:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 8000308:	e7fe      	b.n	8000308 <__port_exit_from_isr+0x2>
	...

0800030c <memcpy>:
 800030c:	4684      	mov	ip, r0
 800030e:	ea41 0300 	orr.w	r3, r1, r0
 8000312:	f013 0303 	ands.w	r3, r3, #3
 8000316:	d16d      	bne.n	80003f4 <memcpy+0xe8>
 8000318:	3a40      	subs	r2, #64	; 0x40
 800031a:	d341      	bcc.n	80003a0 <memcpy+0x94>
 800031c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000320:	f840 3b04 	str.w	r3, [r0], #4
 8000324:	f851 3b04 	ldr.w	r3, [r1], #4
 8000328:	f840 3b04 	str.w	r3, [r0], #4
 800032c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000330:	f840 3b04 	str.w	r3, [r0], #4
 8000334:	f851 3b04 	ldr.w	r3, [r1], #4
 8000338:	f840 3b04 	str.w	r3, [r0], #4
 800033c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000340:	f840 3b04 	str.w	r3, [r0], #4
 8000344:	f851 3b04 	ldr.w	r3, [r1], #4
 8000348:	f840 3b04 	str.w	r3, [r0], #4
 800034c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000350:	f840 3b04 	str.w	r3, [r0], #4
 8000354:	f851 3b04 	ldr.w	r3, [r1], #4
 8000358:	f840 3b04 	str.w	r3, [r0], #4
 800035c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000360:	f840 3b04 	str.w	r3, [r0], #4
 8000364:	f851 3b04 	ldr.w	r3, [r1], #4
 8000368:	f840 3b04 	str.w	r3, [r0], #4
 800036c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000370:	f840 3b04 	str.w	r3, [r0], #4
 8000374:	f851 3b04 	ldr.w	r3, [r1], #4
 8000378:	f840 3b04 	str.w	r3, [r0], #4
 800037c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000380:	f840 3b04 	str.w	r3, [r0], #4
 8000384:	f851 3b04 	ldr.w	r3, [r1], #4
 8000388:	f840 3b04 	str.w	r3, [r0], #4
 800038c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000390:	f840 3b04 	str.w	r3, [r0], #4
 8000394:	f851 3b04 	ldr.w	r3, [r1], #4
 8000398:	f840 3b04 	str.w	r3, [r0], #4
 800039c:	3a40      	subs	r2, #64	; 0x40
 800039e:	d2bd      	bcs.n	800031c <memcpy+0x10>
 80003a0:	3230      	adds	r2, #48	; 0x30
 80003a2:	d311      	bcc.n	80003c8 <memcpy+0xbc>
 80003a4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003a8:	f840 3b04 	str.w	r3, [r0], #4
 80003ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80003b0:	f840 3b04 	str.w	r3, [r0], #4
 80003b4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003b8:	f840 3b04 	str.w	r3, [r0], #4
 80003bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80003c0:	f840 3b04 	str.w	r3, [r0], #4
 80003c4:	3a10      	subs	r2, #16
 80003c6:	d2ed      	bcs.n	80003a4 <memcpy+0x98>
 80003c8:	320c      	adds	r2, #12
 80003ca:	d305      	bcc.n	80003d8 <memcpy+0xcc>
 80003cc:	f851 3b04 	ldr.w	r3, [r1], #4
 80003d0:	f840 3b04 	str.w	r3, [r0], #4
 80003d4:	3a04      	subs	r2, #4
 80003d6:	d2f9      	bcs.n	80003cc <memcpy+0xc0>
 80003d8:	3204      	adds	r2, #4
 80003da:	d008      	beq.n	80003ee <memcpy+0xe2>
 80003dc:	07d2      	lsls	r2, r2, #31
 80003de:	bf1c      	itt	ne
 80003e0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80003e4:	f800 3b01 	strbne.w	r3, [r0], #1
 80003e8:	d301      	bcc.n	80003ee <memcpy+0xe2>
 80003ea:	880b      	ldrh	r3, [r1, #0]
 80003ec:	8003      	strh	r3, [r0, #0]
 80003ee:	4660      	mov	r0, ip
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	2a08      	cmp	r2, #8
 80003f6:	d313      	bcc.n	8000420 <memcpy+0x114>
 80003f8:	078b      	lsls	r3, r1, #30
 80003fa:	d08d      	beq.n	8000318 <memcpy+0xc>
 80003fc:	f010 0303 	ands.w	r3, r0, #3
 8000400:	d08a      	beq.n	8000318 <memcpy+0xc>
 8000402:	f1c3 0304 	rsb	r3, r3, #4
 8000406:	1ad2      	subs	r2, r2, r3
 8000408:	07db      	lsls	r3, r3, #31
 800040a:	bf1c      	itt	ne
 800040c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000410:	f800 3b01 	strbne.w	r3, [r0], #1
 8000414:	d380      	bcc.n	8000318 <memcpy+0xc>
 8000416:	f831 3b02 	ldrh.w	r3, [r1], #2
 800041a:	f820 3b02 	strh.w	r3, [r0], #2
 800041e:	e77b      	b.n	8000318 <memcpy+0xc>
 8000420:	3a04      	subs	r2, #4
 8000422:	d3d9      	bcc.n	80003d8 <memcpy+0xcc>
 8000424:	3a01      	subs	r2, #1
 8000426:	f811 3b01 	ldrb.w	r3, [r1], #1
 800042a:	f800 3b01 	strb.w	r3, [r0], #1
 800042e:	d2f9      	bcs.n	8000424 <memcpy+0x118>
 8000430:	780b      	ldrb	r3, [r1, #0]
 8000432:	7003      	strb	r3, [r0, #0]
 8000434:	784b      	ldrb	r3, [r1, #1]
 8000436:	7043      	strb	r3, [r0, #1]
 8000438:	788b      	ldrb	r3, [r1, #2]
 800043a:	7083      	strb	r3, [r0, #2]
 800043c:	4660      	mov	r0, ip
 800043e:	4770      	bx	lr
 8000440:	eba2 0003 	sub.w	r0, r2, r3
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop

08000448 <strcmp>:
 8000448:	7802      	ldrb	r2, [r0, #0]
 800044a:	780b      	ldrb	r3, [r1, #0]
 800044c:	2a01      	cmp	r2, #1
 800044e:	bf28      	it	cs
 8000450:	429a      	cmpcs	r2, r3
 8000452:	d1f5      	bne.n	8000440 <memcpy+0x134>
 8000454:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 8000458:	ea40 0401 	orr.w	r4, r0, r1
 800045c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8000460:	f06f 0c00 	mvn.w	ip, #0
 8000464:	ea4f 7244 	mov.w	r2, r4, lsl #29
 8000468:	b312      	cbz	r2, 80004b0 <strcmp+0x68>
 800046a:	ea80 0401 	eor.w	r4, r0, r1
 800046e:	f014 0f07 	tst.w	r4, #7
 8000472:	d16a      	bne.n	800054a <strcmp+0x102>
 8000474:	f000 0407 	and.w	r4, r0, #7
 8000478:	f020 0007 	bic.w	r0, r0, #7
 800047c:	f004 0503 	and.w	r5, r4, #3
 8000480:	f021 0107 	bic.w	r1, r1, #7
 8000484:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8000488:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 800048c:	f014 0f04 	tst.w	r4, #4
 8000490:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8000494:	fa0c f405 	lsl.w	r4, ip, r5
 8000498:	ea62 0204 	orn	r2, r2, r4
 800049c:	ea66 0604 	orn	r6, r6, r4
 80004a0:	d00a      	beq.n	80004b8 <strcmp+0x70>
 80004a2:	ea63 0304 	orn	r3, r3, r4
 80004a6:	4662      	mov	r2, ip
 80004a8:	ea67 0704 	orn	r7, r7, r4
 80004ac:	4666      	mov	r6, ip
 80004ae:	e003      	b.n	80004b8 <strcmp+0x70>
 80004b0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 80004b4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 80004b8:	fa82 f54c 	uadd8	r5, r2, ip
 80004bc:	ea82 0406 	eor.w	r4, r2, r6
 80004c0:	faa4 f48c 	sel	r4, r4, ip
 80004c4:	bb6c      	cbnz	r4, 8000522 <strcmp+0xda>
 80004c6:	fa83 f54c 	uadd8	r5, r3, ip
 80004ca:	ea83 0507 	eor.w	r5, r3, r7
 80004ce:	faa5 f58c 	sel	r5, r5, ip
 80004d2:	b995      	cbnz	r5, 80004fa <strcmp+0xb2>
 80004d4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 80004d8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 80004dc:	fa82 f54c 	uadd8	r5, r2, ip
 80004e0:	ea82 0406 	eor.w	r4, r2, r6
 80004e4:	faa4 f48c 	sel	r4, r4, ip
 80004e8:	fa83 f54c 	uadd8	r5, r3, ip
 80004ec:	ea83 0507 	eor.w	r5, r3, r7
 80004f0:	faa5 f58c 	sel	r5, r5, ip
 80004f4:	4325      	orrs	r5, r4
 80004f6:	d0db      	beq.n	80004b0 <strcmp+0x68>
 80004f8:	b99c      	cbnz	r4, 8000522 <strcmp+0xda>
 80004fa:	ba2d      	rev	r5, r5
 80004fc:	fab5 f485 	clz	r4, r5
 8000500:	f024 0407 	bic.w	r4, r4, #7
 8000504:	fa27 f104 	lsr.w	r1, r7, r4
 8000508:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800050c:	fa23 f304 	lsr.w	r3, r3, r4
 8000510:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8000514:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000518:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800051c:	eba0 0001 	sub.w	r0, r0, r1
 8000520:	4770      	bx	lr
 8000522:	ba24      	rev	r4, r4
 8000524:	fab4 f484 	clz	r4, r4
 8000528:	f024 0407 	bic.w	r4, r4, #7
 800052c:	fa26 f104 	lsr.w	r1, r6, r4
 8000530:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8000534:	fa22 f204 	lsr.w	r2, r2, r4
 8000538:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800053c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000540:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000544:	eba0 0001 	sub.w	r0, r0, r1
 8000548:	4770      	bx	lr
 800054a:	f014 0f03 	tst.w	r4, #3
 800054e:	d13c      	bne.n	80005ca <strcmp+0x182>
 8000550:	f010 0403 	ands.w	r4, r0, #3
 8000554:	d128      	bne.n	80005a8 <strcmp+0x160>
 8000556:	f850 2b08 	ldr.w	r2, [r0], #8
 800055a:	f851 3b08 	ldr.w	r3, [r1], #8
 800055e:	fa82 f54c 	uadd8	r5, r2, ip
 8000562:	ea82 0503 	eor.w	r5, r2, r3
 8000566:	faa5 f58c 	sel	r5, r5, ip
 800056a:	b95d      	cbnz	r5, 8000584 <strcmp+0x13c>
 800056c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8000570:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000574:	fa82 f54c 	uadd8	r5, r2, ip
 8000578:	ea82 0503 	eor.w	r5, r2, r3
 800057c:	faa5 f58c 	sel	r5, r5, ip
 8000580:	2d00      	cmp	r5, #0
 8000582:	d0e8      	beq.n	8000556 <strcmp+0x10e>
 8000584:	ba2d      	rev	r5, r5
 8000586:	fab5 f485 	clz	r4, r5
 800058a:	f024 0407 	bic.w	r4, r4, #7
 800058e:	fa23 f104 	lsr.w	r1, r3, r4
 8000592:	fa22 f204 	lsr.w	r2, r2, r4
 8000596:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800059a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800059e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80005a2:	eba0 0001 	sub.w	r0, r0, r1
 80005a6:	4770      	bx	lr
 80005a8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 80005ac:	f020 0003 	bic.w	r0, r0, #3
 80005b0:	f850 2b08 	ldr.w	r2, [r0], #8
 80005b4:	f021 0103 	bic.w	r1, r1, #3
 80005b8:	f851 3b08 	ldr.w	r3, [r1], #8
 80005bc:	fa0c f404 	lsl.w	r4, ip, r4
 80005c0:	ea62 0204 	orn	r2, r2, r4
 80005c4:	ea63 0304 	orn	r3, r3, r4
 80005c8:	e7c9      	b.n	800055e <strcmp+0x116>
 80005ca:	f010 0403 	ands.w	r4, r0, #3
 80005ce:	d01a      	beq.n	8000606 <strcmp+0x1be>
 80005d0:	eba1 0104 	sub.w	r1, r1, r4
 80005d4:	f020 0003 	bic.w	r0, r0, #3
 80005d8:	07e4      	lsls	r4, r4, #31
 80005da:	f850 2b04 	ldr.w	r2, [r0], #4
 80005de:	d006      	beq.n	80005ee <strcmp+0x1a6>
 80005e0:	d20f      	bcs.n	8000602 <strcmp+0x1ba>
 80005e2:	788b      	ldrb	r3, [r1, #2]
 80005e4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 80005e8:	1ae4      	subs	r4, r4, r3
 80005ea:	d106      	bne.n	80005fa <strcmp+0x1b2>
 80005ec:	b12b      	cbz	r3, 80005fa <strcmp+0x1b2>
 80005ee:	78cb      	ldrb	r3, [r1, #3]
 80005f0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 80005f4:	1ae4      	subs	r4, r4, r3
 80005f6:	d100      	bne.n	80005fa <strcmp+0x1b2>
 80005f8:	b91b      	cbnz	r3, 8000602 <strcmp+0x1ba>
 80005fa:	4620      	mov	r0, r4
 80005fc:	f85d 4b10 	ldr.w	r4, [sp], #16
 8000600:	4770      	bx	lr
 8000602:	f101 0104 	add.w	r1, r1, #4
 8000606:	f850 2b04 	ldr.w	r2, [r0], #4
 800060a:	07cc      	lsls	r4, r1, #31
 800060c:	f021 0103 	bic.w	r1, r1, #3
 8000610:	f851 3b04 	ldr.w	r3, [r1], #4
 8000614:	d848      	bhi.n	80006a8 <strcmp+0x260>
 8000616:	d224      	bcs.n	8000662 <strcmp+0x21a>
 8000618:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 800061c:	fa82 f54c 	uadd8	r5, r2, ip
 8000620:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 8000624:	faa5 f58c 	sel	r5, r5, ip
 8000628:	d10a      	bne.n	8000640 <strcmp+0x1f8>
 800062a:	b965      	cbnz	r5, 8000646 <strcmp+0x1fe>
 800062c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000630:	ea84 0402 	eor.w	r4, r4, r2
 8000634:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 8000638:	d10e      	bne.n	8000658 <strcmp+0x210>
 800063a:	f850 2b04 	ldr.w	r2, [r0], #4
 800063e:	e7eb      	b.n	8000618 <strcmp+0x1d0>
 8000640:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8000644:	e055      	b.n	80006f2 <strcmp+0x2aa>
 8000646:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800064a:	d14d      	bne.n	80006e8 <strcmp+0x2a0>
 800064c:	7808      	ldrb	r0, [r1, #0]
 800064e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000652:	f1c0 0000 	rsb	r0, r0, #0
 8000656:	4770      	bx	lr
 8000658:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800065c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8000660:	e047      	b.n	80006f2 <strcmp+0x2aa>
 8000662:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 8000666:	fa82 f54c 	uadd8	r5, r2, ip
 800066a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 800066e:	faa5 f58c 	sel	r5, r5, ip
 8000672:	d10a      	bne.n	800068a <strcmp+0x242>
 8000674:	b965      	cbnz	r5, 8000690 <strcmp+0x248>
 8000676:	f851 3b04 	ldr.w	r3, [r1], #4
 800067a:	ea84 0402 	eor.w	r4, r4, r2
 800067e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 8000682:	d10c      	bne.n	800069e <strcmp+0x256>
 8000684:	f850 2b04 	ldr.w	r2, [r0], #4
 8000688:	e7eb      	b.n	8000662 <strcmp+0x21a>
 800068a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800068e:	e030      	b.n	80006f2 <strcmp+0x2aa>
 8000690:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 8000694:	d128      	bne.n	80006e8 <strcmp+0x2a0>
 8000696:	880b      	ldrh	r3, [r1, #0]
 8000698:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800069c:	e029      	b.n	80006f2 <strcmp+0x2aa>
 800069e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80006a2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 80006a6:	e024      	b.n	80006f2 <strcmp+0x2aa>
 80006a8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 80006ac:	fa82 f54c 	uadd8	r5, r2, ip
 80006b0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 80006b4:	faa5 f58c 	sel	r5, r5, ip
 80006b8:	d10a      	bne.n	80006d0 <strcmp+0x288>
 80006ba:	b965      	cbnz	r5, 80006d6 <strcmp+0x28e>
 80006bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80006c0:	ea84 0402 	eor.w	r4, r4, r2
 80006c4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 80006c8:	d109      	bne.n	80006de <strcmp+0x296>
 80006ca:	f850 2b04 	ldr.w	r2, [r0], #4
 80006ce:	e7eb      	b.n	80006a8 <strcmp+0x260>
 80006d0:	ea4f 6313 	mov.w	r3, r3, lsr #24
 80006d4:	e00d      	b.n	80006f2 <strcmp+0x2aa>
 80006d6:	f015 0fff 	tst.w	r5, #255	; 0xff
 80006da:	d105      	bne.n	80006e8 <strcmp+0x2a0>
 80006dc:	680b      	ldr	r3, [r1, #0]
 80006de:	ea4f 2212 	mov.w	r2, r2, lsr #8
 80006e2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80006e6:	e004      	b.n	80006f2 <strcmp+0x2aa>
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80006f0:	4770      	bx	lr
 80006f2:	ba12      	rev	r2, r2
 80006f4:	ba1b      	rev	r3, r3
 80006f6:	fa82 f44c 	uadd8	r4, r2, ip
 80006fa:	ea82 0403 	eor.w	r4, r2, r3
 80006fe:	faa4 f58c 	sel	r5, r4, ip
 8000702:	fab5 f485 	clz	r4, r5
 8000706:	fa02 f204 	lsl.w	r2, r2, r4
 800070a:	fa03 f304 	lsl.w	r3, r3, r4
 800070e:	ea4f 6012 	mov.w	r0, r2, lsr #24
 8000712:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000716:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 800071a:	4770      	bx	lr
	...

08000740 <strlen>:
 8000740:	f890 f000 	pld	[r0]
 8000744:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8000748:	f020 0107 	bic.w	r1, r0, #7
 800074c:	f06f 0c00 	mvn.w	ip, #0
 8000750:	f010 0407 	ands.w	r4, r0, #7
 8000754:	f891 f020 	pld	[r1, #32]
 8000758:	f040 8049 	bne.w	80007ee <strlen+0xae>
 800075c:	f04f 0400 	mov.w	r4, #0
 8000760:	f06f 0007 	mvn.w	r0, #7
 8000764:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000768:	f891 f040 	pld	[r1, #64]	; 0x40
 800076c:	f100 0008 	add.w	r0, r0, #8
 8000770:	fa82 f24c 	uadd8	r2, r2, ip
 8000774:	faa4 f28c 	sel	r2, r4, ip
 8000778:	fa83 f34c 	uadd8	r3, r3, ip
 800077c:	faa2 f38c 	sel	r3, r2, ip
 8000780:	bb4b      	cbnz	r3, 80007d6 <strlen+0x96>
 8000782:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8000786:	fa82 f24c 	uadd8	r2, r2, ip
 800078a:	f100 0008 	add.w	r0, r0, #8
 800078e:	faa4 f28c 	sel	r2, r4, ip
 8000792:	fa83 f34c 	uadd8	r3, r3, ip
 8000796:	faa2 f38c 	sel	r3, r2, ip
 800079a:	b9e3      	cbnz	r3, 80007d6 <strlen+0x96>
 800079c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 80007a0:	fa82 f24c 	uadd8	r2, r2, ip
 80007a4:	f100 0008 	add.w	r0, r0, #8
 80007a8:	faa4 f28c 	sel	r2, r4, ip
 80007ac:	fa83 f34c 	uadd8	r3, r3, ip
 80007b0:	faa2 f38c 	sel	r3, r2, ip
 80007b4:	b97b      	cbnz	r3, 80007d6 <strlen+0x96>
 80007b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 80007ba:	f101 0120 	add.w	r1, r1, #32
 80007be:	fa82 f24c 	uadd8	r2, r2, ip
 80007c2:	f100 0008 	add.w	r0, r0, #8
 80007c6:	faa4 f28c 	sel	r2, r4, ip
 80007ca:	fa83 f34c 	uadd8	r3, r3, ip
 80007ce:	faa2 f38c 	sel	r3, r2, ip
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d0c6      	beq.n	8000764 <strlen+0x24>
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	bf04      	itt	eq
 80007da:	3004      	addeq	r0, #4
 80007dc:	461a      	moveq	r2, r3
 80007de:	ba12      	rev	r2, r2
 80007e0:	fab2 f282 	clz	r2, r2
 80007e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 80007e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80007ec:	4770      	bx	lr
 80007ee:	e9d1 2300 	ldrd	r2, r3, [r1]
 80007f2:	f004 0503 	and.w	r5, r4, #3
 80007f6:	f1c4 0000 	rsb	r0, r4, #0
 80007fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80007fe:	f014 0f04 	tst.w	r4, #4
 8000802:	f891 f040 	pld	[r1, #64]	; 0x40
 8000806:	fa0c f505 	lsl.w	r5, ip, r5
 800080a:	ea62 0205 	orn	r2, r2, r5
 800080e:	bf1c      	itt	ne
 8000810:	ea63 0305 	ornne	r3, r3, r5
 8000814:	4662      	movne	r2, ip
 8000816:	f04f 0400 	mov.w	r4, #0
 800081a:	e7a9      	b.n	8000770 <strlen+0x30>

0800081c <__aeabi_drsub>:
 800081c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000820:	e002      	b.n	8000828 <__adddf3>
 8000822:	bf00      	nop

08000824 <__aeabi_dsub>:
 8000824:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000828 <__adddf3>:
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800082e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000832:	ea94 0f05 	teq	r4, r5
 8000836:	bf08      	it	eq
 8000838:	ea90 0f02 	teqeq	r0, r2
 800083c:	bf1f      	itttt	ne
 800083e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000842:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000846:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800084a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800084e:	f000 80e2 	beq.w	8000a16 <__adddf3+0x1ee>
 8000852:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000856:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800085a:	bfb8      	it	lt
 800085c:	426d      	neglt	r5, r5
 800085e:	dd0c      	ble.n	800087a <__adddf3+0x52>
 8000860:	442c      	add	r4, r5
 8000862:	ea80 0202 	eor.w	r2, r0, r2
 8000866:	ea81 0303 	eor.w	r3, r1, r3
 800086a:	ea82 0000 	eor.w	r0, r2, r0
 800086e:	ea83 0101 	eor.w	r1, r3, r1
 8000872:	ea80 0202 	eor.w	r2, r0, r2
 8000876:	ea81 0303 	eor.w	r3, r1, r3
 800087a:	2d36      	cmp	r5, #54	; 0x36
 800087c:	bf88      	it	hi
 800087e:	bd30      	pophi	{r4, r5, pc}
 8000880:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000884:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000888:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800088c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000890:	d002      	beq.n	8000898 <__adddf3+0x70>
 8000892:	4240      	negs	r0, r0
 8000894:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000898:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800089c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80008a4:	d002      	beq.n	80008ac <__adddf3+0x84>
 80008a6:	4252      	negs	r2, r2
 80008a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008ac:	ea94 0f05 	teq	r4, r5
 80008b0:	f000 80a7 	beq.w	8000a02 <__adddf3+0x1da>
 80008b4:	f1a4 0401 	sub.w	r4, r4, #1
 80008b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80008bc:	db0d      	blt.n	80008da <__adddf3+0xb2>
 80008be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80008c2:	fa22 f205 	lsr.w	r2, r2, r5
 80008c6:	1880      	adds	r0, r0, r2
 80008c8:	f141 0100 	adc.w	r1, r1, #0
 80008cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80008d0:	1880      	adds	r0, r0, r2
 80008d2:	fa43 f305 	asr.w	r3, r3, r5
 80008d6:	4159      	adcs	r1, r3
 80008d8:	e00e      	b.n	80008f8 <__adddf3+0xd0>
 80008da:	f1a5 0520 	sub.w	r5, r5, #32
 80008de:	f10e 0e20 	add.w	lr, lr, #32
 80008e2:	2a01      	cmp	r2, #1
 80008e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80008e8:	bf28      	it	cs
 80008ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80008ee:	fa43 f305 	asr.w	r3, r3, r5
 80008f2:	18c0      	adds	r0, r0, r3
 80008f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80008f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80008fc:	d507      	bpl.n	800090e <__adddf3+0xe6>
 80008fe:	f04f 0e00 	mov.w	lr, #0
 8000902:	f1dc 0c00 	rsbs	ip, ip, #0
 8000906:	eb7e 0000 	sbcs.w	r0, lr, r0
 800090a:	eb6e 0101 	sbc.w	r1, lr, r1
 800090e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000912:	d31b      	bcc.n	800094c <__adddf3+0x124>
 8000914:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000918:	d30c      	bcc.n	8000934 <__adddf3+0x10c>
 800091a:	0849      	lsrs	r1, r1, #1
 800091c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000920:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000924:	f104 0401 	add.w	r4, r4, #1
 8000928:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800092c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000930:	f080 809a 	bcs.w	8000a68 <__adddf3+0x240>
 8000934:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000938:	bf08      	it	eq
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	ea41 0105 	orr.w	r1, r1, r5
 800094a:	bd30      	pop	{r4, r5, pc}
 800094c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000950:	4140      	adcs	r0, r0
 8000952:	eb41 0101 	adc.w	r1, r1, r1
 8000956:	3c01      	subs	r4, #1
 8000958:	bf28      	it	cs
 800095a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800095e:	d2e9      	bcs.n	8000934 <__adddf3+0x10c>
 8000960:	f091 0f00 	teq	r1, #0
 8000964:	bf04      	itt	eq
 8000966:	4601      	moveq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	fab1 f381 	clz	r3, r1
 800096e:	bf08      	it	eq
 8000970:	3320      	addeq	r3, #32
 8000972:	f1a3 030b 	sub.w	r3, r3, #11
 8000976:	f1b3 0220 	subs.w	r2, r3, #32
 800097a:	da0c      	bge.n	8000996 <__adddf3+0x16e>
 800097c:	320c      	adds	r2, #12
 800097e:	dd08      	ble.n	8000992 <__adddf3+0x16a>
 8000980:	f102 0c14 	add.w	ip, r2, #20
 8000984:	f1c2 020c 	rsb	r2, r2, #12
 8000988:	fa01 f00c 	lsl.w	r0, r1, ip
 800098c:	fa21 f102 	lsr.w	r1, r1, r2
 8000990:	e00c      	b.n	80009ac <__adddf3+0x184>
 8000992:	f102 0214 	add.w	r2, r2, #20
 8000996:	bfd8      	it	le
 8000998:	f1c2 0c20 	rsble	ip, r2, #32
 800099c:	fa01 f102 	lsl.w	r1, r1, r2
 80009a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80009a4:	bfdc      	itt	le
 80009a6:	ea41 010c 	orrle.w	r1, r1, ip
 80009aa:	4090      	lslle	r0, r2
 80009ac:	1ae4      	subs	r4, r4, r3
 80009ae:	bfa2      	ittt	ge
 80009b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80009b4:	4329      	orrge	r1, r5
 80009b6:	bd30      	popge	{r4, r5, pc}
 80009b8:	ea6f 0404 	mvn.w	r4, r4
 80009bc:	3c1f      	subs	r4, #31
 80009be:	da1c      	bge.n	80009fa <__adddf3+0x1d2>
 80009c0:	340c      	adds	r4, #12
 80009c2:	dc0e      	bgt.n	80009e2 <__adddf3+0x1ba>
 80009c4:	f104 0414 	add.w	r4, r4, #20
 80009c8:	f1c4 0220 	rsb	r2, r4, #32
 80009cc:	fa20 f004 	lsr.w	r0, r0, r4
 80009d0:	fa01 f302 	lsl.w	r3, r1, r2
 80009d4:	ea40 0003 	orr.w	r0, r0, r3
 80009d8:	fa21 f304 	lsr.w	r3, r1, r4
 80009dc:	ea45 0103 	orr.w	r1, r5, r3
 80009e0:	bd30      	pop	{r4, r5, pc}
 80009e2:	f1c4 040c 	rsb	r4, r4, #12
 80009e6:	f1c4 0220 	rsb	r2, r4, #32
 80009ea:	fa20 f002 	lsr.w	r0, r0, r2
 80009ee:	fa01 f304 	lsl.w	r3, r1, r4
 80009f2:	ea40 0003 	orr.w	r0, r0, r3
 80009f6:	4629      	mov	r1, r5
 80009f8:	bd30      	pop	{r4, r5, pc}
 80009fa:	fa21 f004 	lsr.w	r0, r1, r4
 80009fe:	4629      	mov	r1, r5
 8000a00:	bd30      	pop	{r4, r5, pc}
 8000a02:	f094 0f00 	teq	r4, #0
 8000a06:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000a0a:	bf06      	itte	eq
 8000a0c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000a10:	3401      	addeq	r4, #1
 8000a12:	3d01      	subne	r5, #1
 8000a14:	e74e      	b.n	80008b4 <__adddf3+0x8c>
 8000a16:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000a1a:	bf18      	it	ne
 8000a1c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000a20:	d029      	beq.n	8000a76 <__adddf3+0x24e>
 8000a22:	ea94 0f05 	teq	r4, r5
 8000a26:	bf08      	it	eq
 8000a28:	ea90 0f02 	teqeq	r0, r2
 8000a2c:	d005      	beq.n	8000a3a <__adddf3+0x212>
 8000a2e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000a32:	bf04      	itt	eq
 8000a34:	4619      	moveq	r1, r3
 8000a36:	4610      	moveq	r0, r2
 8000a38:	bd30      	pop	{r4, r5, pc}
 8000a3a:	ea91 0f03 	teq	r1, r3
 8000a3e:	bf1e      	ittt	ne
 8000a40:	2100      	movne	r1, #0
 8000a42:	2000      	movne	r0, #0
 8000a44:	bd30      	popne	{r4, r5, pc}
 8000a46:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000a4a:	d105      	bne.n	8000a58 <__adddf3+0x230>
 8000a4c:	0040      	lsls	r0, r0, #1
 8000a4e:	4149      	adcs	r1, r1
 8000a50:	bf28      	it	cs
 8000a52:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000a56:	bd30      	pop	{r4, r5, pc}
 8000a58:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000a5c:	bf3c      	itt	cc
 8000a5e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000a62:	bd30      	popcc	{r4, r5, pc}
 8000a64:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000a68:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000a6c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	bd30      	pop	{r4, r5, pc}
 8000a76:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000a7a:	bf1a      	itte	ne
 8000a7c:	4619      	movne	r1, r3
 8000a7e:	4610      	movne	r0, r2
 8000a80:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000a84:	bf1c      	itt	ne
 8000a86:	460b      	movne	r3, r1
 8000a88:	4602      	movne	r2, r0
 8000a8a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a8e:	bf06      	itte	eq
 8000a90:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000a94:	ea91 0f03 	teqeq	r1, r3
 8000a98:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000a9c:	bd30      	pop	{r4, r5, pc}
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_ui2d>:
 8000aa0:	f090 0f00 	teq	r0, #0
 8000aa4:	bf04      	itt	eq
 8000aa6:	2100      	moveq	r1, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	b530      	push	{r4, r5, lr}
 8000aac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000ab0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000ab4:	f04f 0500 	mov.w	r5, #0
 8000ab8:	f04f 0100 	mov.w	r1, #0
 8000abc:	e750      	b.n	8000960 <__adddf3+0x138>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_i2d>:
 8000ac0:	f090 0f00 	teq	r0, #0
 8000ac4:	bf04      	itt	eq
 8000ac6:	2100      	moveq	r1, #0
 8000ac8:	4770      	bxeq	lr
 8000aca:	b530      	push	{r4, r5, lr}
 8000acc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000ad0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000ad4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000ad8:	bf48      	it	mi
 8000ada:	4240      	negmi	r0, r0
 8000adc:	f04f 0100 	mov.w	r1, #0
 8000ae0:	e73e      	b.n	8000960 <__adddf3+0x138>
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_f2d>:
 8000ae4:	0042      	lsls	r2, r0, #1
 8000ae6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000aea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000aee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000af2:	bf1f      	itttt	ne
 8000af4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000af8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000afc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000b00:	4770      	bxne	lr
 8000b02:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000b06:	bf08      	it	eq
 8000b08:	4770      	bxeq	lr
 8000b0a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000b0e:	bf04      	itt	eq
 8000b10:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000b14:	4770      	bxeq	lr
 8000b16:	b530      	push	{r4, r5, lr}
 8000b18:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000b1c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000b20:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000b24:	e71c      	b.n	8000960 <__adddf3+0x138>
 8000b26:	bf00      	nop

08000b28 <__aeabi_ul2d>:
 8000b28:	ea50 0201 	orrs.w	r2, r0, r1
 8000b2c:	bf08      	it	eq
 8000b2e:	4770      	bxeq	lr
 8000b30:	b530      	push	{r4, r5, lr}
 8000b32:	f04f 0500 	mov.w	r5, #0
 8000b36:	e00a      	b.n	8000b4e <__aeabi_l2d+0x16>

08000b38 <__aeabi_l2d>:
 8000b38:	ea50 0201 	orrs.w	r2, r0, r1
 8000b3c:	bf08      	it	eq
 8000b3e:	4770      	bxeq	lr
 8000b40:	b530      	push	{r4, r5, lr}
 8000b42:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000b46:	d502      	bpl.n	8000b4e <__aeabi_l2d+0x16>
 8000b48:	4240      	negs	r0, r0
 8000b4a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b4e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000b52:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000b56:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000b5a:	f43f aed8 	beq.w	800090e <__adddf3+0xe6>
 8000b5e:	f04f 0203 	mov.w	r2, #3
 8000b62:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000b66:	bf18      	it	ne
 8000b68:	3203      	addne	r2, #3
 8000b6a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000b6e:	bf18      	it	ne
 8000b70:	3203      	addne	r2, #3
 8000b72:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000b76:	f1c2 0320 	rsb	r3, r2, #32
 8000b7a:	fa00 fc03 	lsl.w	ip, r0, r3
 8000b7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b82:	fa01 fe03 	lsl.w	lr, r1, r3
 8000b86:	ea40 000e 	orr.w	r0, r0, lr
 8000b8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000b8e:	4414      	add	r4, r2
 8000b90:	e6bd      	b.n	800090e <__adddf3+0xe6>
 8000b92:	bf00      	nop

08000b94 <__aeabi_dmul>:
 8000b94:	b570      	push	{r4, r5, r6, lr}
 8000b96:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b9a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000b9e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000ba2:	bf1d      	ittte	ne
 8000ba4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000ba8:	ea94 0f0c 	teqne	r4, ip
 8000bac:	ea95 0f0c 	teqne	r5, ip
 8000bb0:	f000 f8de 	bleq	8000d70 <__aeabi_dmul+0x1dc>
 8000bb4:	442c      	add	r4, r5
 8000bb6:	ea81 0603 	eor.w	r6, r1, r3
 8000bba:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000bbe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000bc2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000bc6:	bf18      	it	ne
 8000bc8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000bcc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000bd4:	d038      	beq.n	8000c48 <__aeabi_dmul+0xb4>
 8000bd6:	fba0 ce02 	umull	ip, lr, r0, r2
 8000bda:	f04f 0500 	mov.w	r5, #0
 8000bde:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000be2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000be6:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000bea:	f04f 0600 	mov.w	r6, #0
 8000bee:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000bf2:	f09c 0f00 	teq	ip, #0
 8000bf6:	bf18      	it	ne
 8000bf8:	f04e 0e01 	orrne.w	lr, lr, #1
 8000bfc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000c00:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000c04:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000c08:	d204      	bcs.n	8000c14 <__aeabi_dmul+0x80>
 8000c0a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000c0e:	416d      	adcs	r5, r5
 8000c10:	eb46 0606 	adc.w	r6, r6, r6
 8000c14:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000c18:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000c1c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000c20:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000c24:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000c28:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000c2c:	bf88      	it	hi
 8000c2e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000c32:	d81e      	bhi.n	8000c72 <__aeabi_dmul+0xde>
 8000c34:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000c38:	bf08      	it	eq
 8000c3a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000c3e:	f150 0000 	adcs.w	r0, r0, #0
 8000c42:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000c46:	bd70      	pop	{r4, r5, r6, pc}
 8000c48:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000c4c:	ea46 0101 	orr.w	r1, r6, r1
 8000c50:	ea40 0002 	orr.w	r0, r0, r2
 8000c54:	ea81 0103 	eor.w	r1, r1, r3
 8000c58:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000c5c:	bfc2      	ittt	gt
 8000c5e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000c62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000c66:	bd70      	popgt	{r4, r5, r6, pc}
 8000c68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6c:	f04f 0e00 	mov.w	lr, #0
 8000c70:	3c01      	subs	r4, #1
 8000c72:	f300 80ab 	bgt.w	8000dcc <__aeabi_dmul+0x238>
 8000c76:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000c7a:	bfde      	ittt	le
 8000c7c:	2000      	movle	r0, #0
 8000c7e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000c82:	bd70      	pople	{r4, r5, r6, pc}
 8000c84:	f1c4 0400 	rsb	r4, r4, #0
 8000c88:	3c20      	subs	r4, #32
 8000c8a:	da35      	bge.n	8000cf8 <__aeabi_dmul+0x164>
 8000c8c:	340c      	adds	r4, #12
 8000c8e:	dc1b      	bgt.n	8000cc8 <__aeabi_dmul+0x134>
 8000c90:	f104 0414 	add.w	r4, r4, #20
 8000c94:	f1c4 0520 	rsb	r5, r4, #32
 8000c98:	fa00 f305 	lsl.w	r3, r0, r5
 8000c9c:	fa20 f004 	lsr.w	r0, r0, r4
 8000ca0:	fa01 f205 	lsl.w	r2, r1, r5
 8000ca4:	ea40 0002 	orr.w	r0, r0, r2
 8000ca8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000cac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000cb0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000cb4:	fa21 f604 	lsr.w	r6, r1, r4
 8000cb8:	eb42 0106 	adc.w	r1, r2, r6
 8000cbc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000cc0:	bf08      	it	eq
 8000cc2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000cc6:	bd70      	pop	{r4, r5, r6, pc}
 8000cc8:	f1c4 040c 	rsb	r4, r4, #12
 8000ccc:	f1c4 0520 	rsb	r5, r4, #32
 8000cd0:	fa00 f304 	lsl.w	r3, r0, r4
 8000cd4:	fa20 f005 	lsr.w	r0, r0, r5
 8000cd8:	fa01 f204 	lsl.w	r2, r1, r4
 8000cdc:	ea40 0002 	orr.w	r0, r0, r2
 8000ce0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000ce4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000ce8:	f141 0100 	adc.w	r1, r1, #0
 8000cec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000cf0:	bf08      	it	eq
 8000cf2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000cf6:	bd70      	pop	{r4, r5, r6, pc}
 8000cf8:	f1c4 0520 	rsb	r5, r4, #32
 8000cfc:	fa00 f205 	lsl.w	r2, r0, r5
 8000d00:	ea4e 0e02 	orr.w	lr, lr, r2
 8000d04:	fa20 f304 	lsr.w	r3, r0, r4
 8000d08:	fa01 f205 	lsl.w	r2, r1, r5
 8000d0c:	ea43 0302 	orr.w	r3, r3, r2
 8000d10:	fa21 f004 	lsr.w	r0, r1, r4
 8000d14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000d18:	fa21 f204 	lsr.w	r2, r1, r4
 8000d1c:	ea20 0002 	bic.w	r0, r0, r2
 8000d20:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000d24:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000d28:	bf08      	it	eq
 8000d2a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000d2e:	bd70      	pop	{r4, r5, r6, pc}
 8000d30:	f094 0f00 	teq	r4, #0
 8000d34:	d10f      	bne.n	8000d56 <__aeabi_dmul+0x1c2>
 8000d36:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000d3a:	0040      	lsls	r0, r0, #1
 8000d3c:	eb41 0101 	adc.w	r1, r1, r1
 8000d40:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000d44:	bf08      	it	eq
 8000d46:	3c01      	subeq	r4, #1
 8000d48:	d0f7      	beq.n	8000d3a <__aeabi_dmul+0x1a6>
 8000d4a:	ea41 0106 	orr.w	r1, r1, r6
 8000d4e:	f095 0f00 	teq	r5, #0
 8000d52:	bf18      	it	ne
 8000d54:	4770      	bxne	lr
 8000d56:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000d5a:	0052      	lsls	r2, r2, #1
 8000d5c:	eb43 0303 	adc.w	r3, r3, r3
 8000d60:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000d64:	bf08      	it	eq
 8000d66:	3d01      	subeq	r5, #1
 8000d68:	d0f7      	beq.n	8000d5a <__aeabi_dmul+0x1c6>
 8000d6a:	ea43 0306 	orr.w	r3, r3, r6
 8000d6e:	4770      	bx	lr
 8000d70:	ea94 0f0c 	teq	r4, ip
 8000d74:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000d78:	bf18      	it	ne
 8000d7a:	ea95 0f0c 	teqne	r5, ip
 8000d7e:	d00c      	beq.n	8000d9a <__aeabi_dmul+0x206>
 8000d80:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000d84:	bf18      	it	ne
 8000d86:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000d8a:	d1d1      	bne.n	8000d30 <__aeabi_dmul+0x19c>
 8000d8c:	ea81 0103 	eor.w	r1, r1, r3
 8000d90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000d94:	f04f 0000 	mov.w	r0, #0
 8000d98:	bd70      	pop	{r4, r5, r6, pc}
 8000d9a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000d9e:	bf06      	itte	eq
 8000da0:	4610      	moveq	r0, r2
 8000da2:	4619      	moveq	r1, r3
 8000da4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000da8:	d019      	beq.n	8000dde <__aeabi_dmul+0x24a>
 8000daa:	ea94 0f0c 	teq	r4, ip
 8000dae:	d102      	bne.n	8000db6 <__aeabi_dmul+0x222>
 8000db0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000db4:	d113      	bne.n	8000dde <__aeabi_dmul+0x24a>
 8000db6:	ea95 0f0c 	teq	r5, ip
 8000dba:	d105      	bne.n	8000dc8 <__aeabi_dmul+0x234>
 8000dbc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000dc0:	bf1c      	itt	ne
 8000dc2:	4610      	movne	r0, r2
 8000dc4:	4619      	movne	r1, r3
 8000dc6:	d10a      	bne.n	8000dde <__aeabi_dmul+0x24a>
 8000dc8:	ea81 0103 	eor.w	r1, r1, r3
 8000dcc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000dd0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000dd4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000dd8:	f04f 0000 	mov.w	r0, #0
 8000ddc:	bd70      	pop	{r4, r5, r6, pc}
 8000dde:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000de2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000de6:	bd70      	pop	{r4, r5, r6, pc}

08000de8 <__aeabi_ddiv>:
 8000de8:	b570      	push	{r4, r5, r6, lr}
 8000dea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000df2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000df6:	bf1d      	ittte	ne
 8000df8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000dfc:	ea94 0f0c 	teqne	r4, ip
 8000e00:	ea95 0f0c 	teqne	r5, ip
 8000e04:	f000 f8a7 	bleq	8000f56 <__aeabi_ddiv+0x16e>
 8000e08:	eba4 0405 	sub.w	r4, r4, r5
 8000e0c:	ea81 0e03 	eor.w	lr, r1, r3
 8000e10:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000e14:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000e18:	f000 8088 	beq.w	8000f2c <__aeabi_ddiv+0x144>
 8000e1c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000e20:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000e24:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000e28:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000e2c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000e30:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000e34:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000e38:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000e3c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000e40:	429d      	cmp	r5, r3
 8000e42:	bf08      	it	eq
 8000e44:	4296      	cmpeq	r6, r2
 8000e46:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000e4a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000e4e:	d202      	bcs.n	8000e56 <__aeabi_ddiv+0x6e>
 8000e50:	085b      	lsrs	r3, r3, #1
 8000e52:	ea4f 0232 	mov.w	r2, r2, rrx
 8000e56:	1ab6      	subs	r6, r6, r2
 8000e58:	eb65 0503 	sbc.w	r5, r5, r3
 8000e5c:	085b      	lsrs	r3, r3, #1
 8000e5e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000e62:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000e66:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000e6a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000e6e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000e72:	bf22      	ittt	cs
 8000e74:	1ab6      	subcs	r6, r6, r2
 8000e76:	4675      	movcs	r5, lr
 8000e78:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e7c:	085b      	lsrs	r3, r3, #1
 8000e7e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000e82:	ebb6 0e02 	subs.w	lr, r6, r2
 8000e86:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000e8a:	bf22      	ittt	cs
 8000e8c:	1ab6      	subcs	r6, r6, r2
 8000e8e:	4675      	movcs	r5, lr
 8000e90:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e94:	085b      	lsrs	r3, r3, #1
 8000e96:	ea4f 0232 	mov.w	r2, r2, rrx
 8000e9a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000e9e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000ea2:	bf22      	ittt	cs
 8000ea4:	1ab6      	subcs	r6, r6, r2
 8000ea6:	4675      	movcs	r5, lr
 8000ea8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eac:	085b      	lsrs	r3, r3, #1
 8000eae:	ea4f 0232 	mov.w	r2, r2, rrx
 8000eb2:	ebb6 0e02 	subs.w	lr, r6, r2
 8000eb6:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000eba:	bf22      	ittt	cs
 8000ebc:	1ab6      	subcs	r6, r6, r2
 8000ebe:	4675      	movcs	r5, lr
 8000ec0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec4:	ea55 0e06 	orrs.w	lr, r5, r6
 8000ec8:	d018      	beq.n	8000efc <__aeabi_ddiv+0x114>
 8000eca:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000ece:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000ed2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000ed6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000eda:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000ede:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000ee2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000ee6:	d1c0      	bne.n	8000e6a <__aeabi_ddiv+0x82>
 8000ee8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000eec:	d10b      	bne.n	8000f06 <__aeabi_ddiv+0x11e>
 8000eee:	ea41 0100 	orr.w	r1, r1, r0
 8000ef2:	f04f 0000 	mov.w	r0, #0
 8000ef6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000efa:	e7b6      	b.n	8000e6a <__aeabi_ddiv+0x82>
 8000efc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000f00:	bf04      	itt	eq
 8000f02:	4301      	orreq	r1, r0
 8000f04:	2000      	moveq	r0, #0
 8000f06:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000f0a:	bf88      	it	hi
 8000f0c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000f10:	f63f aeaf 	bhi.w	8000c72 <__aeabi_dmul+0xde>
 8000f14:	ebb5 0c03 	subs.w	ip, r5, r3
 8000f18:	bf04      	itt	eq
 8000f1a:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000f1e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000f22:	f150 0000 	adcs.w	r0, r0, #0
 8000f26:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000f2a:	bd70      	pop	{r4, r5, r6, pc}
 8000f2c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000f30:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000f34:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000f38:	bfc2      	ittt	gt
 8000f3a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000f3e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000f42:	bd70      	popgt	{r4, r5, r6, pc}
 8000f44:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000f48:	f04f 0e00 	mov.w	lr, #0
 8000f4c:	3c01      	subs	r4, #1
 8000f4e:	e690      	b.n	8000c72 <__aeabi_dmul+0xde>
 8000f50:	ea45 0e06 	orr.w	lr, r5, r6
 8000f54:	e68d      	b.n	8000c72 <__aeabi_dmul+0xde>
 8000f56:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000f5a:	ea94 0f0c 	teq	r4, ip
 8000f5e:	bf08      	it	eq
 8000f60:	ea95 0f0c 	teqeq	r5, ip
 8000f64:	f43f af3b 	beq.w	8000dde <__aeabi_dmul+0x24a>
 8000f68:	ea94 0f0c 	teq	r4, ip
 8000f6c:	d10a      	bne.n	8000f84 <__aeabi_ddiv+0x19c>
 8000f6e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000f72:	f47f af34 	bne.w	8000dde <__aeabi_dmul+0x24a>
 8000f76:	ea95 0f0c 	teq	r5, ip
 8000f7a:	f47f af25 	bne.w	8000dc8 <__aeabi_dmul+0x234>
 8000f7e:	4610      	mov	r0, r2
 8000f80:	4619      	mov	r1, r3
 8000f82:	e72c      	b.n	8000dde <__aeabi_dmul+0x24a>
 8000f84:	ea95 0f0c 	teq	r5, ip
 8000f88:	d106      	bne.n	8000f98 <__aeabi_ddiv+0x1b0>
 8000f8a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000f8e:	f43f aefd 	beq.w	8000d8c <__aeabi_dmul+0x1f8>
 8000f92:	4610      	mov	r0, r2
 8000f94:	4619      	mov	r1, r3
 8000f96:	e722      	b.n	8000dde <__aeabi_dmul+0x24a>
 8000f98:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000f9c:	bf18      	it	ne
 8000f9e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000fa2:	f47f aec5 	bne.w	8000d30 <__aeabi_dmul+0x19c>
 8000fa6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000faa:	f47f af0d 	bne.w	8000dc8 <__aeabi_dmul+0x234>
 8000fae:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000fb2:	f47f aeeb 	bne.w	8000d8c <__aeabi_dmul+0x1f8>
 8000fb6:	e712      	b.n	8000dde <__aeabi_dmul+0x24a>

08000fb8 <__aeabi_d2iz>:
 8000fb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000fbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000fc0:	d215      	bcs.n	8000fee <__aeabi_d2iz+0x36>
 8000fc2:	d511      	bpl.n	8000fe8 <__aeabi_d2iz+0x30>
 8000fc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000fc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000fcc:	d912      	bls.n	8000ff4 <__aeabi_d2iz+0x3c>
 8000fce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000fd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000fda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000fde:	fa23 f002 	lsr.w	r0, r3, r2
 8000fe2:	bf18      	it	ne
 8000fe4:	4240      	negne	r0, r0
 8000fe6:	4770      	bx	lr
 8000fe8:	f04f 0000 	mov.w	r0, #0
 8000fec:	4770      	bx	lr
 8000fee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ff2:	d105      	bne.n	8001000 <__aeabi_d2iz+0x48>
 8000ff4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ff8:	bf08      	it	eq
 8000ffa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ffe:	4770      	bx	lr
 8001000:	f04f 0000 	mov.w	r0, #0
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <__aeabi_frsub>:
 8001008:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800100c:	e002      	b.n	8001014 <__addsf3>
 800100e:	bf00      	nop

08001010 <__aeabi_fsub>:
 8001010:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08001014 <__addsf3>:
 8001014:	0042      	lsls	r2, r0, #1
 8001016:	bf1f      	itttt	ne
 8001018:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800101c:	ea92 0f03 	teqne	r2, r3
 8001020:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8001024:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001028:	d06a      	beq.n	8001100 <__addsf3+0xec>
 800102a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800102e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8001032:	bfc1      	itttt	gt
 8001034:	18d2      	addgt	r2, r2, r3
 8001036:	4041      	eorgt	r1, r0
 8001038:	4048      	eorgt	r0, r1
 800103a:	4041      	eorgt	r1, r0
 800103c:	bfb8      	it	lt
 800103e:	425b      	neglt	r3, r3
 8001040:	2b19      	cmp	r3, #25
 8001042:	bf88      	it	hi
 8001044:	4770      	bxhi	lr
 8001046:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800104a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800104e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8001052:	bf18      	it	ne
 8001054:	4240      	negne	r0, r0
 8001056:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800105a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800105e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8001062:	bf18      	it	ne
 8001064:	4249      	negne	r1, r1
 8001066:	ea92 0f03 	teq	r2, r3
 800106a:	d03f      	beq.n	80010ec <__addsf3+0xd8>
 800106c:	f1a2 0201 	sub.w	r2, r2, #1
 8001070:	fa41 fc03 	asr.w	ip, r1, r3
 8001074:	eb10 000c 	adds.w	r0, r0, ip
 8001078:	f1c3 0320 	rsb	r3, r3, #32
 800107c:	fa01 f103 	lsl.w	r1, r1, r3
 8001080:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8001084:	d502      	bpl.n	800108c <__addsf3+0x78>
 8001086:	4249      	negs	r1, r1
 8001088:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800108c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8001090:	d313      	bcc.n	80010ba <__addsf3+0xa6>
 8001092:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001096:	d306      	bcc.n	80010a6 <__addsf3+0x92>
 8001098:	0840      	lsrs	r0, r0, #1
 800109a:	ea4f 0131 	mov.w	r1, r1, rrx
 800109e:	f102 0201 	add.w	r2, r2, #1
 80010a2:	2afe      	cmp	r2, #254	; 0xfe
 80010a4:	d251      	bcs.n	800114a <__addsf3+0x136>
 80010a6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80010aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80010ae:	bf08      	it	eq
 80010b0:	f020 0001 	biceq.w	r0, r0, #1
 80010b4:	ea40 0003 	orr.w	r0, r0, r3
 80010b8:	4770      	bx	lr
 80010ba:	0049      	lsls	r1, r1, #1
 80010bc:	eb40 0000 	adc.w	r0, r0, r0
 80010c0:	3a01      	subs	r2, #1
 80010c2:	bf28      	it	cs
 80010c4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80010c8:	d2ed      	bcs.n	80010a6 <__addsf3+0x92>
 80010ca:	fab0 fc80 	clz	ip, r0
 80010ce:	f1ac 0c08 	sub.w	ip, ip, #8
 80010d2:	ebb2 020c 	subs.w	r2, r2, ip
 80010d6:	fa00 f00c 	lsl.w	r0, r0, ip
 80010da:	bfaa      	itet	ge
 80010dc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80010e0:	4252      	neglt	r2, r2
 80010e2:	4318      	orrge	r0, r3
 80010e4:	bfbc      	itt	lt
 80010e6:	40d0      	lsrlt	r0, r2
 80010e8:	4318      	orrlt	r0, r3
 80010ea:	4770      	bx	lr
 80010ec:	f092 0f00 	teq	r2, #0
 80010f0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80010f4:	bf06      	itte	eq
 80010f6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80010fa:	3201      	addeq	r2, #1
 80010fc:	3b01      	subne	r3, #1
 80010fe:	e7b5      	b.n	800106c <__addsf3+0x58>
 8001100:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001104:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001108:	bf18      	it	ne
 800110a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800110e:	d021      	beq.n	8001154 <__addsf3+0x140>
 8001110:	ea92 0f03 	teq	r2, r3
 8001114:	d004      	beq.n	8001120 <__addsf3+0x10c>
 8001116:	f092 0f00 	teq	r2, #0
 800111a:	bf08      	it	eq
 800111c:	4608      	moveq	r0, r1
 800111e:	4770      	bx	lr
 8001120:	ea90 0f01 	teq	r0, r1
 8001124:	bf1c      	itt	ne
 8001126:	2000      	movne	r0, #0
 8001128:	4770      	bxne	lr
 800112a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800112e:	d104      	bne.n	800113a <__addsf3+0x126>
 8001130:	0040      	lsls	r0, r0, #1
 8001132:	bf28      	it	cs
 8001134:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8001138:	4770      	bx	lr
 800113a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800113e:	bf3c      	itt	cc
 8001140:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8001144:	4770      	bxcc	lr
 8001146:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800114a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800114e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001152:	4770      	bx	lr
 8001154:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8001158:	bf16      	itet	ne
 800115a:	4608      	movne	r0, r1
 800115c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8001160:	4601      	movne	r1, r0
 8001162:	0242      	lsls	r2, r0, #9
 8001164:	bf06      	itte	eq
 8001166:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800116a:	ea90 0f01 	teqeq	r0, r1
 800116e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8001172:	4770      	bx	lr

08001174 <__aeabi_ui2f>:
 8001174:	f04f 0300 	mov.w	r3, #0
 8001178:	e004      	b.n	8001184 <__aeabi_i2f+0x8>
 800117a:	bf00      	nop

0800117c <__aeabi_i2f>:
 800117c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8001180:	bf48      	it	mi
 8001182:	4240      	negmi	r0, r0
 8001184:	ea5f 0c00 	movs.w	ip, r0
 8001188:	bf08      	it	eq
 800118a:	4770      	bxeq	lr
 800118c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8001190:	4601      	mov	r1, r0
 8001192:	f04f 0000 	mov.w	r0, #0
 8001196:	e01c      	b.n	80011d2 <__aeabi_l2f+0x2a>

08001198 <__aeabi_ul2f>:
 8001198:	ea50 0201 	orrs.w	r2, r0, r1
 800119c:	bf08      	it	eq
 800119e:	4770      	bxeq	lr
 80011a0:	f04f 0300 	mov.w	r3, #0
 80011a4:	e00a      	b.n	80011bc <__aeabi_l2f+0x14>
 80011a6:	bf00      	nop

080011a8 <__aeabi_l2f>:
 80011a8:	ea50 0201 	orrs.w	r2, r0, r1
 80011ac:	bf08      	it	eq
 80011ae:	4770      	bxeq	lr
 80011b0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80011b4:	d502      	bpl.n	80011bc <__aeabi_l2f+0x14>
 80011b6:	4240      	negs	r0, r0
 80011b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011bc:	ea5f 0c01 	movs.w	ip, r1
 80011c0:	bf02      	ittt	eq
 80011c2:	4684      	moveq	ip, r0
 80011c4:	4601      	moveq	r1, r0
 80011c6:	2000      	moveq	r0, #0
 80011c8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80011cc:	bf08      	it	eq
 80011ce:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80011d2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80011d6:	fabc f28c 	clz	r2, ip
 80011da:	3a08      	subs	r2, #8
 80011dc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80011e0:	db10      	blt.n	8001204 <__aeabi_l2f+0x5c>
 80011e2:	fa01 fc02 	lsl.w	ip, r1, r2
 80011e6:	4463      	add	r3, ip
 80011e8:	fa00 fc02 	lsl.w	ip, r0, r2
 80011ec:	f1c2 0220 	rsb	r2, r2, #32
 80011f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80011f4:	fa20 f202 	lsr.w	r2, r0, r2
 80011f8:	eb43 0002 	adc.w	r0, r3, r2
 80011fc:	bf08      	it	eq
 80011fe:	f020 0001 	biceq.w	r0, r0, #1
 8001202:	4770      	bx	lr
 8001204:	f102 0220 	add.w	r2, r2, #32
 8001208:	fa01 fc02 	lsl.w	ip, r1, r2
 800120c:	f1c2 0220 	rsb	r2, r2, #32
 8001210:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8001214:	fa21 f202 	lsr.w	r2, r1, r2
 8001218:	eb43 0002 	adc.w	r0, r3, r2
 800121c:	bf08      	it	eq
 800121e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8001222:	4770      	bx	lr

08001224 <__aeabi_fmul>:
 8001224:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8001228:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800122c:	bf1e      	ittt	ne
 800122e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8001232:	ea92 0f0c 	teqne	r2, ip
 8001236:	ea93 0f0c 	teqne	r3, ip
 800123a:	d06f      	beq.n	800131c <__aeabi_fmul+0xf8>
 800123c:	441a      	add	r2, r3
 800123e:	ea80 0c01 	eor.w	ip, r0, r1
 8001242:	0240      	lsls	r0, r0, #9
 8001244:	bf18      	it	ne
 8001246:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800124a:	d01e      	beq.n	800128a <__aeabi_fmul+0x66>
 800124c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001250:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8001254:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8001258:	fba0 3101 	umull	r3, r1, r0, r1
 800125c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8001260:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8001264:	bf3e      	ittt	cc
 8001266:	0049      	lslcc	r1, r1, #1
 8001268:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800126c:	005b      	lslcc	r3, r3, #1
 800126e:	ea40 0001 	orr.w	r0, r0, r1
 8001272:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8001276:	2afd      	cmp	r2, #253	; 0xfd
 8001278:	d81d      	bhi.n	80012b6 <__aeabi_fmul+0x92>
 800127a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800127e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001282:	bf08      	it	eq
 8001284:	f020 0001 	biceq.w	r0, r0, #1
 8001288:	4770      	bx	lr
 800128a:	f090 0f00 	teq	r0, #0
 800128e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001292:	bf08      	it	eq
 8001294:	0249      	lsleq	r1, r1, #9
 8001296:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800129a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800129e:	3a7f      	subs	r2, #127	; 0x7f
 80012a0:	bfc2      	ittt	gt
 80012a2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80012a6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80012aa:	4770      	bxgt	lr
 80012ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80012b0:	f04f 0300 	mov.w	r3, #0
 80012b4:	3a01      	subs	r2, #1
 80012b6:	dc5d      	bgt.n	8001374 <__aeabi_fmul+0x150>
 80012b8:	f112 0f19 	cmn.w	r2, #25
 80012bc:	bfdc      	itt	le
 80012be:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80012c2:	4770      	bxle	lr
 80012c4:	f1c2 0200 	rsb	r2, r2, #0
 80012c8:	0041      	lsls	r1, r0, #1
 80012ca:	fa21 f102 	lsr.w	r1, r1, r2
 80012ce:	f1c2 0220 	rsb	r2, r2, #32
 80012d2:	fa00 fc02 	lsl.w	ip, r0, r2
 80012d6:	ea5f 0031 	movs.w	r0, r1, rrx
 80012da:	f140 0000 	adc.w	r0, r0, #0
 80012de:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80012e2:	bf08      	it	eq
 80012e4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80012e8:	4770      	bx	lr
 80012ea:	f092 0f00 	teq	r2, #0
 80012ee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80012f2:	bf02      	ittt	eq
 80012f4:	0040      	lsleq	r0, r0, #1
 80012f6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80012fa:	3a01      	subeq	r2, #1
 80012fc:	d0f9      	beq.n	80012f2 <__aeabi_fmul+0xce>
 80012fe:	ea40 000c 	orr.w	r0, r0, ip
 8001302:	f093 0f00 	teq	r3, #0
 8001306:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800130a:	bf02      	ittt	eq
 800130c:	0049      	lsleq	r1, r1, #1
 800130e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001312:	3b01      	subeq	r3, #1
 8001314:	d0f9      	beq.n	800130a <__aeabi_fmul+0xe6>
 8001316:	ea41 010c 	orr.w	r1, r1, ip
 800131a:	e78f      	b.n	800123c <__aeabi_fmul+0x18>
 800131c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001320:	ea92 0f0c 	teq	r2, ip
 8001324:	bf18      	it	ne
 8001326:	ea93 0f0c 	teqne	r3, ip
 800132a:	d00a      	beq.n	8001342 <__aeabi_fmul+0x11e>
 800132c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001330:	bf18      	it	ne
 8001332:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001336:	d1d8      	bne.n	80012ea <__aeabi_fmul+0xc6>
 8001338:	ea80 0001 	eor.w	r0, r0, r1
 800133c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8001340:	4770      	bx	lr
 8001342:	f090 0f00 	teq	r0, #0
 8001346:	bf17      	itett	ne
 8001348:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800134c:	4608      	moveq	r0, r1
 800134e:	f091 0f00 	teqne	r1, #0
 8001352:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8001356:	d014      	beq.n	8001382 <__aeabi_fmul+0x15e>
 8001358:	ea92 0f0c 	teq	r2, ip
 800135c:	d101      	bne.n	8001362 <__aeabi_fmul+0x13e>
 800135e:	0242      	lsls	r2, r0, #9
 8001360:	d10f      	bne.n	8001382 <__aeabi_fmul+0x15e>
 8001362:	ea93 0f0c 	teq	r3, ip
 8001366:	d103      	bne.n	8001370 <__aeabi_fmul+0x14c>
 8001368:	024b      	lsls	r3, r1, #9
 800136a:	bf18      	it	ne
 800136c:	4608      	movne	r0, r1
 800136e:	d108      	bne.n	8001382 <__aeabi_fmul+0x15e>
 8001370:	ea80 0001 	eor.w	r0, r0, r1
 8001374:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8001378:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800137c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001380:	4770      	bx	lr
 8001382:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8001386:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800138a:	4770      	bx	lr

0800138c <__aeabi_fdiv>:
 800138c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8001390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8001394:	bf1e      	ittt	ne
 8001396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800139a:	ea92 0f0c 	teqne	r2, ip
 800139e:	ea93 0f0c 	teqne	r3, ip
 80013a2:	d069      	beq.n	8001478 <__aeabi_fdiv+0xec>
 80013a4:	eba2 0203 	sub.w	r2, r2, r3
 80013a8:	ea80 0c01 	eor.w	ip, r0, r1
 80013ac:	0249      	lsls	r1, r1, #9
 80013ae:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80013b2:	d037      	beq.n	8001424 <__aeabi_fdiv+0x98>
 80013b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80013b8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80013bc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80013c0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80013c4:	428b      	cmp	r3, r1
 80013c6:	bf38      	it	cc
 80013c8:	005b      	lslcc	r3, r3, #1
 80013ca:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80013ce:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80013d2:	428b      	cmp	r3, r1
 80013d4:	bf24      	itt	cs
 80013d6:	1a5b      	subcs	r3, r3, r1
 80013d8:	ea40 000c 	orrcs.w	r0, r0, ip
 80013dc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80013e0:	bf24      	itt	cs
 80013e2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80013e6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80013ea:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80013ee:	bf24      	itt	cs
 80013f0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80013f4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80013f8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80013fc:	bf24      	itt	cs
 80013fe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8001402:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001406:	011b      	lsls	r3, r3, #4
 8001408:	bf18      	it	ne
 800140a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800140e:	d1e0      	bne.n	80013d2 <__aeabi_fdiv+0x46>
 8001410:	2afd      	cmp	r2, #253	; 0xfd
 8001412:	f63f af50 	bhi.w	80012b6 <__aeabi_fmul+0x92>
 8001416:	428b      	cmp	r3, r1
 8001418:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800141c:	bf08      	it	eq
 800141e:	f020 0001 	biceq.w	r0, r0, #1
 8001422:	4770      	bx	lr
 8001424:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001428:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800142c:	327f      	adds	r2, #127	; 0x7f
 800142e:	bfc2      	ittt	gt
 8001430:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001434:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001438:	4770      	bxgt	lr
 800143a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800143e:	f04f 0300 	mov.w	r3, #0
 8001442:	3a01      	subs	r2, #1
 8001444:	e737      	b.n	80012b6 <__aeabi_fmul+0x92>
 8001446:	f092 0f00 	teq	r2, #0
 800144a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800144e:	bf02      	ittt	eq
 8001450:	0040      	lsleq	r0, r0, #1
 8001452:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001456:	3a01      	subeq	r2, #1
 8001458:	d0f9      	beq.n	800144e <__aeabi_fdiv+0xc2>
 800145a:	ea40 000c 	orr.w	r0, r0, ip
 800145e:	f093 0f00 	teq	r3, #0
 8001462:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001466:	bf02      	ittt	eq
 8001468:	0049      	lsleq	r1, r1, #1
 800146a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800146e:	3b01      	subeq	r3, #1
 8001470:	d0f9      	beq.n	8001466 <__aeabi_fdiv+0xda>
 8001472:	ea41 010c 	orr.w	r1, r1, ip
 8001476:	e795      	b.n	80013a4 <__aeabi_fdiv+0x18>
 8001478:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800147c:	ea92 0f0c 	teq	r2, ip
 8001480:	d108      	bne.n	8001494 <__aeabi_fdiv+0x108>
 8001482:	0242      	lsls	r2, r0, #9
 8001484:	f47f af7d 	bne.w	8001382 <__aeabi_fmul+0x15e>
 8001488:	ea93 0f0c 	teq	r3, ip
 800148c:	f47f af70 	bne.w	8001370 <__aeabi_fmul+0x14c>
 8001490:	4608      	mov	r0, r1
 8001492:	e776      	b.n	8001382 <__aeabi_fmul+0x15e>
 8001494:	ea93 0f0c 	teq	r3, ip
 8001498:	d104      	bne.n	80014a4 <__aeabi_fdiv+0x118>
 800149a:	024b      	lsls	r3, r1, #9
 800149c:	f43f af4c 	beq.w	8001338 <__aeabi_fmul+0x114>
 80014a0:	4608      	mov	r0, r1
 80014a2:	e76e      	b.n	8001382 <__aeabi_fmul+0x15e>
 80014a4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80014a8:	bf18      	it	ne
 80014aa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80014ae:	d1ca      	bne.n	8001446 <__aeabi_fdiv+0xba>
 80014b0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80014b4:	f47f af5c 	bne.w	8001370 <__aeabi_fmul+0x14c>
 80014b8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80014bc:	f47f af3c 	bne.w	8001338 <__aeabi_fmul+0x114>
 80014c0:	e75f      	b.n	8001382 <__aeabi_fmul+0x15e>
 80014c2:	bf00      	nop
	...

080014d0 <__cpu_init>:

#if CORTEX_MODEL == 7
  SCB_EnableICache();
  SCB_EnableDCache();
#endif
}
 80014d0:	bf00      	nop
 80014d2:	4770      	bx	lr
	...

080014e0 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 80014e0:	bf00      	nop
 80014e2:	4770      	bx	lr
	...

080014f0 <__default_exit>:
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
/*lint -restore*/

  while (true) {
 80014f0:	e7fe      	b.n	80014f0 <__default_exit>
 80014f2:	bf00      	nop
	...

08001500 <__init_ram_areas>:
#endif

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8001500:	b084      	sub	sp, #16
#if CRT0_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
 8001502:	4b17      	ldr	r3, [pc, #92]	; (8001560 <__init_ram_areas+0x60>)
 8001504:	9303      	str	r3, [sp, #12]

  do {
    uint32_t *tp = rap->init_text_area;
 8001506:	9b03      	ldr	r3, [sp, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	9302      	str	r3, [sp, #8]
    uint32_t *p = rap->init_area;
 800150c:	9b03      	ldr	r3, [sp, #12]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	9301      	str	r3, [sp, #4]

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8001512:	e009      	b.n	8001528 <__init_ram_areas+0x28>
      *p = *tp;
 8001514:	9b02      	ldr	r3, [sp, #8]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	9b01      	ldr	r3, [sp, #4]
 800151a:	601a      	str	r2, [r3, #0]
      p++;
 800151c:	9b01      	ldr	r3, [sp, #4]
 800151e:	3304      	adds	r3, #4
 8001520:	9301      	str	r3, [sp, #4]
      tp++;
 8001522:	9b02      	ldr	r3, [sp, #8]
 8001524:	3304      	adds	r3, #4
 8001526:	9302      	str	r3, [sp, #8]
    while (p < rap->clear_area) {
 8001528:	9b03      	ldr	r3, [sp, #12]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	9a01      	ldr	r2, [sp, #4]
 800152e:	429a      	cmp	r2, r3
 8001530:	d3f0      	bcc.n	8001514 <__init_ram_areas+0x14>
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8001532:	e005      	b.n	8001540 <__init_ram_areas+0x40>
      *p = 0;
 8001534:	9b01      	ldr	r3, [sp, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
      p++;
 800153a:	9b01      	ldr	r3, [sp, #4]
 800153c:	3304      	adds	r3, #4
 800153e:	9301      	str	r3, [sp, #4]
    while (p < rap->no_init_area) {
 8001540:	9b03      	ldr	r3, [sp, #12]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	9a01      	ldr	r2, [sp, #4]
 8001546:	429a      	cmp	r2, r3
 8001548:	d3f4      	bcc.n	8001534 <__init_ram_areas+0x34>
    }
    rap++;
 800154a:	9b03      	ldr	r3, [sp, #12]
 800154c:	3310      	adds	r3, #16
 800154e:	9303      	str	r3, [sp, #12]
  }
  while (rap < &ram_areas[CRT0_AREAS_NUMBER]);
 8001550:	9b03      	ldr	r3, [sp, #12]
 8001552:	4a04      	ldr	r2, [pc, #16]	; (8001564 <__init_ram_areas+0x64>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d3d6      	bcc.n	8001506 <__init_ram_areas+0x6>
#endif
}
 8001558:	bf00      	nop
 800155a:	bf00      	nop
 800155c:	b004      	add	sp, #16
 800155e:	4770      	bx	lr
 8001560:	08006a14 	.word	0x08006a14
 8001564:	08006a94 	.word	0x08006a94
	...

08001570 <osalInit>:
 *
 * @api
 */
static inline void osalInit(void) {

}
 8001570:	bf00      	nop
 8001572:	4770      	bx	lr
	...

08001580 <halInit>:
 *          board-specific initialization is performed by invoking
 *          @p boardInit() (usually defined in @p board.c).
 *
 * @init
 */
void halInit(void) {
 8001580:	b508      	push	{r3, lr}

  /* Initializes the OS Abstraction Layer.*/
  osalInit();
 8001582:	f7ff fff5 	bl	8001570 <osalInit>

  /* Platform low level initializations.*/
  hal_lld_init();
 8001586:	f000 ff13 	bl	80023b0 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
#if defined(PAL_NEW_INIT)
  palInit();
 800158a:	f001 faa1 	bl	8002ad0 <_pal_lld_init>
#endif
#if (HAL_USE_PWM == TRUE) || defined(__DOXYGEN__)
  pwmInit();
#endif
#if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  sdInit();
 800158e:	f000 fcb7 	bl	8001f00 <sdInit>
#endif
#if (HAL_USE_TRNG == TRUE) || defined(__DOXYGEN__)
  trngInit();
#endif
#if (HAL_USE_UART == TRUE) || defined(__DOXYGEN__)
  uartInit();
 8001592:	f000 fd2d 	bl	8001ff0 <uartInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
 8001596:	f001 ff2b 	bl	80033f0 <boardInit>
/*
 *  The ST driver is a special case, it is only initialized if the OSAL is
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
 800159a:	f000 f841 	bl	8001620 <stInit>
#endif
}
 800159e:	bf00      	nop
 80015a0:	bd08      	pop	{r3, pc}
 80015a2:	bf00      	nop
	...

080015b0 <st_lld_get_counter>:
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80015b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	0000      	movs	r0, r0
	...

080015c0 <st_lld_start_alarm>:
 *
 * @param[in] abstime   the time to be set for the first alarm
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t abstime) {
 80015c0:	b082      	sub	sp, #8
 80015c2:	9001      	str	r0, [sp, #4]

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80015c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015c8:	9b01      	ldr	r3, [sp, #4]
 80015ca:	6353      	str	r3, [r2, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 80015cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015d0:	2200      	movs	r2, #0
 80015d2:	611a      	str	r2, [r3, #16]
#if ST_LLD_NUM_ALARMS == 1
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 80015d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015d8:	2202      	movs	r2, #2
 80015da:	60da      	str	r2, [r3, #12]
#else
  STM32_ST_TIM->DIER  |= STM32_TIM_DIER_CC1IE;
#endif
}
 80015dc:	bf00      	nop
 80015de:	b002      	add	sp, #8
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
	...

080015f0 <st_lld_stop_alarm>:
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

#if ST_LLD_NUM_ALARMS == 1
  STM32_ST_TIM->DIER = 0U;
 80015f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015f4:	2200      	movs	r2, #0
 80015f6:	60da      	str	r2, [r3, #12]
#else
 STM32_ST_TIM->DIER &= ~STM32_TIM_DIER_CC1IE;
#endif
}
 80015f8:	bf00      	nop
 80015fa:	4770      	bx	lr
 80015fc:	0000      	movs	r0, r0
	...

08001600 <st_lld_set_alarm>:
 *
 * @param[in] abstime   the time to be set for the next alarm
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t abstime) {
 8001600:	b082      	sub	sp, #8
 8001602:	9001      	str	r0, [sp, #4]

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8001604:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001608:	9b01      	ldr	r3, [sp, #4]
 800160a:	6353      	str	r3, [r2, #52]	; 0x34
}
 800160c:	bf00      	nop
 800160e:	b002      	add	sp, #8
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
	...

08001620 <stInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void stInit(void) {
 8001620:	b508      	push	{r3, lr}

  for (i = 0U; i < (unsigned)ST_LLD_NUM_ALARMS; i++) {
    st_callbacks[i] = NULL;
  }
#endif
  st_lld_init();
 8001622:	f001 fb4d 	bl	8002cc0 <st_lld_init>
}
 8001626:	bf00      	nop
 8001628:	bd08      	pop	{r3, pc}
 800162a:	bf00      	nop
 800162c:	0000      	movs	r0, r0
	...

08001630 <stGetCounter>:
 *
 * @return              The counter value.
 *
 * @api
 */
systime_t stGetCounter(void) {
 8001630:	b508      	push	{r3, lr}

  return st_lld_get_counter();
 8001632:	f7ff ffbd 	bl	80015b0 <st_lld_get_counter>
 8001636:	4603      	mov	r3, r0
}
 8001638:	4618      	mov	r0, r3
 800163a:	bd08      	pop	{r3, pc}
 800163c:	0000      	movs	r0, r0
	...

08001640 <stStartAlarm>:
 *
 * @param[in] abstime   the time to be set for the first alarm
 *
 * @api
 */
void stStartAlarm(systime_t abstime) {
 8001640:	b500      	push	{lr}
 8001642:	b083      	sub	sp, #12
 8001644:	9001      	str	r0, [sp, #4]

  osalDbgAssert(stIsAlarmActive() == false, "already active");

  st_lld_start_alarm(abstime);
 8001646:	9801      	ldr	r0, [sp, #4]
 8001648:	f7ff ffba 	bl	80015c0 <st_lld_start_alarm>
}
 800164c:	bf00      	nop
 800164e:	b003      	add	sp, #12
 8001650:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001660 <stStopAlarm>:
 * @note    This functionality is only available in free running mode, the
 *          behavior in periodic mode is undefined.
 *
 * @api
 */
void stStopAlarm(void) {
 8001660:	b508      	push	{r3, lr}

  st_lld_stop_alarm();
 8001662:	f7ff ffc5 	bl	80015f0 <st_lld_stop_alarm>
}
 8001666:	bf00      	nop
 8001668:	bd08      	pop	{r3, pc}
 800166a:	bf00      	nop
 800166c:	0000      	movs	r0, r0
	...

08001670 <stSetAlarm>:
 *
 * @param[in] abstime   the time to be set for the next alarm
 *
 * @api
 */
void stSetAlarm(systime_t abstime) {
 8001670:	b500      	push	{lr}
 8001672:	b083      	sub	sp, #12
 8001674:	9001      	str	r0, [sp, #4]

  osalDbgAssert(stIsAlarmActive() != false, "not active");

  st_lld_set_alarm(abstime);
 8001676:	9801      	ldr	r0, [sp, #4]
 8001678:	f7ff ffc2 	bl	8001600 <st_lld_set_alarm>
}
 800167c:	bf00      	nop
 800167e:	b003      	add	sp, #12
 8001680:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001690 <ch_queue_init.lto_priv.1>:
 *
 * @param[out] qp       pointer to the queue header
 *
 * @notapi
 */
static inline void ch_queue_init(ch_queue_t *qp) {
 8001690:	b082      	sub	sp, #8
 8001692:	9001      	str	r0, [sp, #4]

  qp->next = qp;
 8001694:	9b01      	ldr	r3, [sp, #4]
 8001696:	9a01      	ldr	r2, [sp, #4]
 8001698:	601a      	str	r2, [r3, #0]
  qp->prev = qp;
 800169a:	9b01      	ldr	r3, [sp, #4]
 800169c:	9a01      	ldr	r2, [sp, #4]
 800169e:	605a      	str	r2, [r3, #4]
}
 80016a0:	bf00      	nop
 80016a2:	b002      	add	sp, #8
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
	...

080016b0 <chSysLock.lto_priv.1>:
 * @note    The exact behavior of this function is port-dependent and could
 *          not be limited to disabling interrupts.
 *
 * @special
 */
static inline void chSysLock(void) {
 80016b0:	b082      	sub	sp, #8
 80016b2:	2320      	movs	r3, #32
 80016b4:	9301      	str	r3, [sp, #4]
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80016b6:	9b01      	ldr	r3, [sp, #4]
 80016b8:	f383 8811 	msr	BASEPRI, r3
}
 80016bc:	bf00      	nop
#endif
#endif
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 80016be:	bf00      	nop

  port_lock();
  __stats_start_measure_crit_thd();
  __dbg_check_lock();
}
 80016c0:	bf00      	nop
 80016c2:	b002      	add	sp, #8
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
	...

080016d0 <chSysUnlock.lto_priv.1>:
 * @note    The exact behavior of this function is port-dependent and could
 *          not be limited to enabling interrupts.
 *
 * @special
 */
static inline void chSysUnlock(void) {
 80016d0:	b082      	sub	sp, #8
 80016d2:	2300      	movs	r3, #0
 80016d4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80016d6:	9b01      	ldr	r3, [sp, #4]
 80016d8:	f383 8811 	msr	BASEPRI, r3
}
 80016dc:	bf00      	nop
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 80016de:	bf00      	nop
  chDbgAssert((currcore->rlist.pqueue.next == &currcore->rlist.pqueue) ||
              (currcore->rlist.current->hdr.pqueue.prio >= currcore->rlist.pqueue.next->prio),
              "priority order violation");

  port_unlock();
}
 80016e0:	bf00      	nop
 80016e2:	b002      	add	sp, #8
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
	...

080016f0 <chThdQueueObjectInit.lto_priv.1>:
 *
 * @param[out] tqp      pointer to the threads queue object
 *
 * @init
 */
static inline void chThdQueueObjectInit(threads_queue_t *tqp) {
 80016f0:	b500      	push	{lr}
 80016f2:	b083      	sub	sp, #12
 80016f4:	9001      	str	r0, [sp, #4]

  ch_queue_init(&tqp->queue);
 80016f6:	9b01      	ldr	r3, [sp, #4]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff ffc9 	bl	8001690 <ch_queue_init.lto_priv.1>
}
 80016fe:	bf00      	nop
 8001700:	b003      	add	sp, #12
 8001702:	f85d fb04 	ldr.w	pc, [sp], #4
 8001706:	bf00      	nop
	...

08001710 <osalSysLock.lto_priv.1>:
 * @brief   Enters a critical zone from thread context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysLock(void) {
 8001710:	b508      	push	{r3, lr}

  chSysLock();
 8001712:	f7ff ffcd 	bl	80016b0 <chSysLock.lto_priv.1>
}
 8001716:	bf00      	nop
 8001718:	bd08      	pop	{r3, pc}
 800171a:	bf00      	nop
 800171c:	0000      	movs	r0, r0
	...

08001720 <osalSysUnlock.lto_priv.1>:
 * @brief   Leaves a critical zone from thread context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysUnlock(void) {
 8001720:	b508      	push	{r3, lr}

  chSysUnlock();
 8001722:	f7ff ffd5 	bl	80016d0 <chSysUnlock.lto_priv.1>
}
 8001726:	bf00      	nop
 8001728:	bd08      	pop	{r3, pc}
 800172a:	bf00      	nop
 800172c:	0000      	movs	r0, r0
	...

08001730 <osalThreadQueueObjectInit.lto_priv.1>:
 *
 * @param[out] tqp      pointer to the threads queue object
 *
 * @init
 */
static inline void osalThreadQueueObjectInit(threads_queue_t *tqp) {
 8001730:	b500      	push	{lr}
 8001732:	b083      	sub	sp, #12
 8001734:	9001      	str	r0, [sp, #4]

  chThdQueueObjectInit(tqp);
 8001736:	9801      	ldr	r0, [sp, #4]
 8001738:	f7ff ffda 	bl	80016f0 <chThdQueueObjectInit.lto_priv.1>
}
 800173c:	bf00      	nop
 800173e:	b003      	add	sp, #12
 8001740:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001750 <osalThreadEnqueueTimeoutS.lto_priv.1>:
 *                      specification.
 *
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              sysinterval_t timeout) {
 8001750:	b500      	push	{lr}
 8001752:	b083      	sub	sp, #12
 8001754:	9001      	str	r0, [sp, #4]
 8001756:	9100      	str	r1, [sp, #0]

  return chThdEnqueueTimeoutS(tqp, timeout);
 8001758:	9900      	ldr	r1, [sp, #0]
 800175a:	9801      	ldr	r0, [sp, #4]
 800175c:	f002 feb8 	bl	80044d0 <chThdEnqueueTimeoutS>
 8001760:	4603      	mov	r3, r0
}
 8001762:	4618      	mov	r0, r3
 8001764:	b003      	add	sp, #12
 8001766:	f85d fb04 	ldr.w	pc, [sp], #4
 800176a:	bf00      	nop
 800176c:	0000      	movs	r0, r0
	...

08001770 <osalThreadDequeueNextI.lto_priv.1>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8001770:	b500      	push	{lr}
 8001772:	b083      	sub	sp, #12
 8001774:	9001      	str	r0, [sp, #4]
 8001776:	9100      	str	r1, [sp, #0]

  chThdDequeueNextI(tqp, msg);
 8001778:	9900      	ldr	r1, [sp, #0]
 800177a:	9801      	ldr	r0, [sp, #4]
 800177c:	f002 fec8 	bl	8004510 <chThdDequeueNextI>
}
 8001780:	bf00      	nop
 8001782:	b003      	add	sp, #12
 8001784:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001790 <iq_read>:
 *                      value 0 is reserved
 * @return              The number of bytes effectively transferred.
 *
 * @notapi
 */
static size_t iq_read(input_queue_t *iqp, uint8_t *bp, size_t n) {
 8001790:	b500      	push	{lr}
 8001792:	b087      	sub	sp, #28
 8001794:	9003      	str	r0, [sp, #12]
 8001796:	9102      	str	r1, [sp, #8]
 8001798:	9201      	str	r2, [sp, #4]
  size_t s1, s2;

  osalDbgCheck(n > 0U);

  /* Number of bytes that can be read in a single atomic operation.*/
  if (n > iqGetFullI(iqp)) {
 800179a:	9b03      	ldr	r3, [sp, #12]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	9a01      	ldr	r2, [sp, #4]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d902      	bls.n	80017aa <iq_read+0x1a>
    n = iqGetFullI(iqp);
 80017a4:	9b03      	ldr	r3, [sp, #12]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	9301      	str	r3, [sp, #4]
  }

  /* Number of bytes before buffer limit.*/
  /*lint -save -e9033 [10.8] Checked to be safe.*/
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 80017aa:	9b03      	ldr	r3, [sp, #12]
 80017ac:	691a      	ldr	r2, [r3, #16]
 80017ae:	9b03      	ldr	r3, [sp, #12]
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	9305      	str	r3, [sp, #20]
  /*lint -restore*/
  if (n < s1) {
 80017b6:	9a01      	ldr	r2, [sp, #4]
 80017b8:	9b05      	ldr	r3, [sp, #20]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d20d      	bcs.n	80017da <iq_read+0x4a>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 80017be:	9b03      	ldr	r3, [sp, #12]
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	9a01      	ldr	r2, [sp, #4]
 80017c4:	4619      	mov	r1, r3
 80017c6:	9802      	ldr	r0, [sp, #8]
 80017c8:	f7fe fda0 	bl	800030c <memcpy>
    iqp->q_rdptr += n;
 80017cc:	9b03      	ldr	r3, [sp, #12]
 80017ce:	699a      	ldr	r2, [r3, #24]
 80017d0:	9b01      	ldr	r3, [sp, #4]
 80017d2:	441a      	add	r2, r3
 80017d4:	9b03      	ldr	r3, [sp, #12]
 80017d6:	619a      	str	r2, [r3, #24]
 80017d8:	e02b      	b.n	8001832 <iq_read+0xa2>
  }
  else if (n > s1) {
 80017da:	9a01      	ldr	r2, [sp, #4]
 80017dc:	9b05      	ldr	r3, [sp, #20]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d91c      	bls.n	800181c <iq_read+0x8c>
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 80017e2:	9b03      	ldr	r3, [sp, #12]
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	9a05      	ldr	r2, [sp, #20]
 80017e8:	4619      	mov	r1, r3
 80017ea:	9802      	ldr	r0, [sp, #8]
 80017ec:	f7fe fd8e 	bl	800030c <memcpy>
    bp += s1;
 80017f0:	9a02      	ldr	r2, [sp, #8]
 80017f2:	9b05      	ldr	r3, [sp, #20]
 80017f4:	4413      	add	r3, r2
 80017f6:	9302      	str	r3, [sp, #8]
    s2 = n - s1;
 80017f8:	9a01      	ldr	r2, [sp, #4]
 80017fa:	9b05      	ldr	r3, [sp, #20]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	9304      	str	r3, [sp, #16]
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 8001800:	9b03      	ldr	r3, [sp, #12]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	9a04      	ldr	r2, [sp, #16]
 8001806:	4619      	mov	r1, r3
 8001808:	9802      	ldr	r0, [sp, #8]
 800180a:	f7fe fd7f 	bl	800030c <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
 800180e:	9b03      	ldr	r3, [sp, #12]
 8001810:	68da      	ldr	r2, [r3, #12]
 8001812:	9b04      	ldr	r3, [sp, #16]
 8001814:	441a      	add	r2, r3
 8001816:	9b03      	ldr	r3, [sp, #12]
 8001818:	619a      	str	r2, [r3, #24]
 800181a:	e00a      	b.n	8001832 <iq_read+0xa2>
  }
  else {
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 800181c:	9b03      	ldr	r3, [sp, #12]
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	9a01      	ldr	r2, [sp, #4]
 8001822:	4619      	mov	r1, r3
 8001824:	9802      	ldr	r0, [sp, #8]
 8001826:	f7fe fd71 	bl	800030c <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 800182a:	9b03      	ldr	r3, [sp, #12]
 800182c:	68da      	ldr	r2, [r3, #12]
 800182e:	9b03      	ldr	r3, [sp, #12]
 8001830:	619a      	str	r2, [r3, #24]
  }

  iqp->q_counter -= n;
 8001832:	9b03      	ldr	r3, [sp, #12]
 8001834:	689a      	ldr	r2, [r3, #8]
 8001836:	9b01      	ldr	r3, [sp, #4]
 8001838:	1ad2      	subs	r2, r2, r3
 800183a:	9b03      	ldr	r3, [sp, #12]
 800183c:	609a      	str	r2, [r3, #8]
  return n;
 800183e:	9b01      	ldr	r3, [sp, #4]
}
 8001840:	4618      	mov	r0, r3
 8001842:	b007      	add	sp, #28
 8001844:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001850 <oq_write>:
 *                      value 0 is reserved
 * @return              The number of bytes effectively transferred.
 *
 * @notapi
 */
static size_t oq_write(output_queue_t *oqp, const uint8_t *bp, size_t n) {
 8001850:	b500      	push	{lr}
 8001852:	b087      	sub	sp, #28
 8001854:	9003      	str	r0, [sp, #12]
 8001856:	9102      	str	r1, [sp, #8]
 8001858:	9201      	str	r2, [sp, #4]
  size_t s1, s2;

  osalDbgCheck(n > 0U);

  /* Number of bytes that can be written in a single atomic operation.*/
  if (n > oqGetEmptyI(oqp)) {
 800185a:	9b03      	ldr	r3, [sp, #12]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	9a01      	ldr	r2, [sp, #4]
 8001860:	429a      	cmp	r2, r3
 8001862:	d902      	bls.n	800186a <oq_write+0x1a>
    n = oqGetEmptyI(oqp);
 8001864:	9b03      	ldr	r3, [sp, #12]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	9301      	str	r3, [sp, #4]
  }

  /* Number of bytes before buffer limit.*/
  /*lint -save -e9033 [10.8] Checked to be safe.*/
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 800186a:	9b03      	ldr	r3, [sp, #12]
 800186c:	691a      	ldr	r2, [r3, #16]
 800186e:	9b03      	ldr	r3, [sp, #12]
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	9305      	str	r3, [sp, #20]
  /*lint -restore*/
  if (n < s1) {
 8001876:	9a01      	ldr	r2, [sp, #4]
 8001878:	9b05      	ldr	r3, [sp, #20]
 800187a:	429a      	cmp	r2, r3
 800187c:	d20d      	bcs.n	800189a <oq_write+0x4a>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 800187e:	9b03      	ldr	r3, [sp, #12]
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	9a01      	ldr	r2, [sp, #4]
 8001884:	9902      	ldr	r1, [sp, #8]
 8001886:	4618      	mov	r0, r3
 8001888:	f7fe fd40 	bl	800030c <memcpy>
    oqp->q_wrptr += n;
 800188c:	9b03      	ldr	r3, [sp, #12]
 800188e:	695a      	ldr	r2, [r3, #20]
 8001890:	9b01      	ldr	r3, [sp, #4]
 8001892:	441a      	add	r2, r3
 8001894:	9b03      	ldr	r3, [sp, #12]
 8001896:	615a      	str	r2, [r3, #20]
 8001898:	e02b      	b.n	80018f2 <oq_write+0xa2>
  }
  else if (n > s1) {
 800189a:	9a01      	ldr	r2, [sp, #4]
 800189c:	9b05      	ldr	r3, [sp, #20]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d91c      	bls.n	80018dc <oq_write+0x8c>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 80018a2:	9b03      	ldr	r3, [sp, #12]
 80018a4:	695b      	ldr	r3, [r3, #20]
 80018a6:	9a05      	ldr	r2, [sp, #20]
 80018a8:	9902      	ldr	r1, [sp, #8]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7fe fd2e 	bl	800030c <memcpy>
    bp += s1;
 80018b0:	9a02      	ldr	r2, [sp, #8]
 80018b2:	9b05      	ldr	r3, [sp, #20]
 80018b4:	4413      	add	r3, r2
 80018b6:	9302      	str	r3, [sp, #8]
    s2 = n - s1;
 80018b8:	9a01      	ldr	r2, [sp, #4]
 80018ba:	9b05      	ldr	r3, [sp, #20]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	9304      	str	r3, [sp, #16]
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 80018c0:	9b03      	ldr	r3, [sp, #12]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	9a04      	ldr	r2, [sp, #16]
 80018c6:	9902      	ldr	r1, [sp, #8]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe fd1f 	bl	800030c <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
 80018ce:	9b03      	ldr	r3, [sp, #12]
 80018d0:	68da      	ldr	r2, [r3, #12]
 80018d2:	9b04      	ldr	r3, [sp, #16]
 80018d4:	441a      	add	r2, r3
 80018d6:	9b03      	ldr	r3, [sp, #12]
 80018d8:	615a      	str	r2, [r3, #20]
 80018da:	e00a      	b.n	80018f2 <oq_write+0xa2>
  }
  else {
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 80018dc:	9b03      	ldr	r3, [sp, #12]
 80018de:	695b      	ldr	r3, [r3, #20]
 80018e0:	9a01      	ldr	r2, [sp, #4]
 80018e2:	9902      	ldr	r1, [sp, #8]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7fe fd11 	bl	800030c <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 80018ea:	9b03      	ldr	r3, [sp, #12]
 80018ec:	68da      	ldr	r2, [r3, #12]
 80018ee:	9b03      	ldr	r3, [sp, #12]
 80018f0:	615a      	str	r2, [r3, #20]
  }

  oqp->q_counter -= n;
 80018f2:	9b03      	ldr	r3, [sp, #12]
 80018f4:	689a      	ldr	r2, [r3, #8]
 80018f6:	9b01      	ldr	r3, [sp, #4]
 80018f8:	1ad2      	subs	r2, r2, r3
 80018fa:	9b03      	ldr	r3, [sp, #12]
 80018fc:	609a      	str	r2, [r3, #8]
  return n;
 80018fe:	9b01      	ldr	r3, [sp, #4]
}
 8001900:	4618      	mov	r0, r3
 8001902:	b007      	add	sp, #28
 8001904:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001910 <iqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {
 8001910:	b500      	push	{lr}
 8001912:	b085      	sub	sp, #20
 8001914:	9003      	str	r0, [sp, #12]
 8001916:	9102      	str	r1, [sp, #8]
 8001918:	9201      	str	r2, [sp, #4]
 800191a:	9300      	str	r3, [sp, #0]

  osalThreadQueueObjectInit(&iqp->q_waiting);
 800191c:	9b03      	ldr	r3, [sp, #12]
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff ff06 	bl	8001730 <osalThreadQueueObjectInit.lto_priv.1>
  iqp->q_counter = 0;
 8001924:	9b03      	ldr	r3, [sp, #12]
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]
  iqp->q_buffer  = bp;
 800192a:	9b03      	ldr	r3, [sp, #12]
 800192c:	9a02      	ldr	r2, [sp, #8]
 800192e:	60da      	str	r2, [r3, #12]
  iqp->q_rdptr   = bp;
 8001930:	9b03      	ldr	r3, [sp, #12]
 8001932:	9a02      	ldr	r2, [sp, #8]
 8001934:	619a      	str	r2, [r3, #24]
  iqp->q_wrptr   = bp;
 8001936:	9b03      	ldr	r3, [sp, #12]
 8001938:	9a02      	ldr	r2, [sp, #8]
 800193a:	615a      	str	r2, [r3, #20]
  iqp->q_top     = bp + size;
 800193c:	9a02      	ldr	r2, [sp, #8]
 800193e:	9b01      	ldr	r3, [sp, #4]
 8001940:	441a      	add	r2, r3
 8001942:	9b03      	ldr	r3, [sp, #12]
 8001944:	611a      	str	r2, [r3, #16]
  iqp->q_notify  = infy;
 8001946:	9b03      	ldr	r3, [sp, #12]
 8001948:	9a00      	ldr	r2, [sp, #0]
 800194a:	61da      	str	r2, [r3, #28]
  iqp->q_link    = link;
 800194c:	9b03      	ldr	r3, [sp, #12]
 800194e:	9a06      	ldr	r2, [sp, #24]
 8001950:	621a      	str	r2, [r3, #32]
}
 8001952:	bf00      	nop
 8001954:	b005      	add	sp, #20
 8001956:	f85d fb04 	ldr.w	pc, [sp], #4
 800195a:	bf00      	nop
 800195c:	0000      	movs	r0, r0
	...

08001960 <iqPutI>:
 * @retval MSG_OK       if the operation has been completed with success.
 * @retval MSG_TIMEOUT  if the queue is full.
 *
 * @iclass
 */
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {
 8001960:	b500      	push	{lr}
 8001962:	b083      	sub	sp, #12
 8001964:	9001      	str	r0, [sp, #4]
 8001966:	460b      	mov	r3, r1
 8001968:	f88d 3003 	strb.w	r3, [sp, #3]

  osalDbgCheckClassI();

  /* Queue space check.*/
  if (!iqIsFullI(iqp)) {
 800196c:	9b01      	ldr	r3, [sp, #4]
 800196e:	695a      	ldr	r2, [r3, #20]
 8001970:	9b01      	ldr	r3, [sp, #4]
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	429a      	cmp	r2, r3
 8001976:	d105      	bne.n	8001984 <iqPutI+0x24>
 8001978:	9b01      	ldr	r3, [sp, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <iqPutI+0x24>
 8001980:	2301      	movs	r3, #1
 8001982:	e000      	b.n	8001986 <iqPutI+0x26>
 8001984:	2300      	movs	r3, #0
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	b2db      	uxtb	r3, r3
 800198c:	f083 0301 	eor.w	r3, r3, #1
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	d01d      	beq.n	80019d2 <iqPutI+0x72>
    iqp->q_counter++;
 8001996:	9b01      	ldr	r3, [sp, #4]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	1c5a      	adds	r2, r3, #1
 800199c:	9b01      	ldr	r3, [sp, #4]
 800199e:	609a      	str	r2, [r3, #8]
    *iqp->q_wrptr++ = b;
 80019a0:	9b01      	ldr	r3, [sp, #4]
 80019a2:	695b      	ldr	r3, [r3, #20]
 80019a4:	1c59      	adds	r1, r3, #1
 80019a6:	9a01      	ldr	r2, [sp, #4]
 80019a8:	6151      	str	r1, [r2, #20]
 80019aa:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80019ae:	701a      	strb	r2, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top) {
 80019b0:	9b01      	ldr	r3, [sp, #4]
 80019b2:	695a      	ldr	r2, [r3, #20]
 80019b4:	9b01      	ldr	r3, [sp, #4]
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d303      	bcc.n	80019c4 <iqPutI+0x64>
      iqp->q_wrptr = iqp->q_buffer;
 80019bc:	9b01      	ldr	r3, [sp, #4]
 80019be:	68da      	ldr	r2, [r3, #12]
 80019c0:	9b01      	ldr	r3, [sp, #4]
 80019c2:	615a      	str	r2, [r3, #20]
    }

    osalThreadDequeueNextI(&iqp->q_waiting, MSG_OK);
 80019c4:	9b01      	ldr	r3, [sp, #4]
 80019c6:	2100      	movs	r1, #0
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff fed1 	bl	8001770 <osalThreadDequeueNextI.lto_priv.1>

    return MSG_OK;
 80019ce:	2300      	movs	r3, #0
 80019d0:	e001      	b.n	80019d6 <iqPutI+0x76>
  }

  return MSG_TIMEOUT;
 80019d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	b003      	add	sp, #12
 80019da:	f85d fb04 	ldr.w	pc, [sp], #4
 80019de:	bf00      	nop

080019e0 <iqGetTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 80019e0:	b500      	push	{lr}
 80019e2:	b085      	sub	sp, #20
 80019e4:	9001      	str	r0, [sp, #4]
 80019e6:	9100      	str	r1, [sp, #0]
  uint8_t b;

  osalSysLock();
 80019e8:	f7ff fe92 	bl	8001710 <osalSysLock.lto_priv.1>

  /* Waiting until there is a character available or a timeout occurs.*/
  while (iqIsEmptyI(iqp)) {
 80019ec:	e00c      	b.n	8001a08 <iqGetTimeout+0x28>
    msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
 80019ee:	9b01      	ldr	r3, [sp, #4]
 80019f0:	9900      	ldr	r1, [sp, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff feac 	bl	8001750 <osalThreadEnqueueTimeoutS.lto_priv.1>
 80019f8:	9002      	str	r0, [sp, #8]
    if (msg < MSG_OK) {
 80019fa:	9b02      	ldr	r3, [sp, #8]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	da03      	bge.n	8001a08 <iqGetTimeout+0x28>
      osalSysUnlock();
 8001a00:	f7ff fe8e 	bl	8001720 <osalSysUnlock.lto_priv.1>
      return msg;
 8001a04:	9b02      	ldr	r3, [sp, #8]
 8001a06:	e026      	b.n	8001a56 <iqGetTimeout+0x76>
  while (iqIsEmptyI(iqp)) {
 8001a08:	9b01      	ldr	r3, [sp, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d0ee      	beq.n	80019ee <iqGetTimeout+0xe>
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
 8001a10:	9b01      	ldr	r3, [sp, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	1e5a      	subs	r2, r3, #1
 8001a16:	9b01      	ldr	r3, [sp, #4]
 8001a18:	609a      	str	r2, [r3, #8]
  b = *iqp->q_rdptr++;
 8001a1a:	9b01      	ldr	r3, [sp, #4]
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	1c59      	adds	r1, r3, #1
 8001a20:	9a01      	ldr	r2, [sp, #4]
 8001a22:	6191      	str	r1, [r2, #24]
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	f88d 300f 	strb.w	r3, [sp, #15]
  if (iqp->q_rdptr >= iqp->q_top) {
 8001a2a:	9b01      	ldr	r3, [sp, #4]
 8001a2c:	699a      	ldr	r2, [r3, #24]
 8001a2e:	9b01      	ldr	r3, [sp, #4]
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d303      	bcc.n	8001a3e <iqGetTimeout+0x5e>
    iqp->q_rdptr = iqp->q_buffer;
 8001a36:	9b01      	ldr	r3, [sp, #4]
 8001a38:	68da      	ldr	r2, [r3, #12]
 8001a3a:	9b01      	ldr	r3, [sp, #4]
 8001a3c:	619a      	str	r2, [r3, #24]
  }

  /* Inform the low side that the queue has at least one slot available.*/
  if (iqp->q_notify != NULL) {
 8001a3e:	9b01      	ldr	r3, [sp, #4]
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <iqGetTimeout+0x6e>
    iqp->q_notify(iqp);
 8001a46:	9b01      	ldr	r3, [sp, #4]
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	9801      	ldr	r0, [sp, #4]
 8001a4c:	4798      	blx	r3
  }

  osalSysUnlock();
 8001a4e:	f7ff fe67 	bl	8001720 <osalSysUnlock.lto_priv.1>

  return (msg_t)b;
 8001a52:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	b005      	add	sp, #20
 8001a5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a5e:	bf00      	nop

08001a60 <iqReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t iqReadTimeout(input_queue_t *iqp, uint8_t *bp,
                     size_t n, sysinterval_t timeout) {
 8001a60:	b500      	push	{lr}
 8001a62:	b089      	sub	sp, #36	; 0x24
 8001a64:	9003      	str	r0, [sp, #12]
 8001a66:	9102      	str	r1, [sp, #8]
 8001a68:	9201      	str	r2, [sp, #4]
 8001a6a:	9300      	str	r3, [sp, #0]
  qnotify_t nfy = iqp->q_notify;
 8001a6c:	9b03      	ldr	r3, [sp, #12]
 8001a6e:	69db      	ldr	r3, [r3, #28]
 8001a70:	9307      	str	r3, [sp, #28]
  size_t max = n;
 8001a72:	9b01      	ldr	r3, [sp, #4]
 8001a74:	9306      	str	r3, [sp, #24]

  osalDbgCheck(n > 0U);

  osalSysLock();
 8001a76:	f7ff fe4b 	bl	8001710 <osalSysLock.lto_priv.1>

  while (n > 0U) {
 8001a7a:	e024      	b.n	8001ac6 <iqReadTimeout+0x66>
    size_t done;

    done = iq_read(iqp, bp, n);
 8001a7c:	9a01      	ldr	r2, [sp, #4]
 8001a7e:	9902      	ldr	r1, [sp, #8]
 8001a80:	9803      	ldr	r0, [sp, #12]
 8001a82:	f7ff fe85 	bl	8001790 <iq_read>
 8001a86:	9005      	str	r0, [sp, #20]
    if (done == (size_t)0) {
 8001a88:	9b05      	ldr	r3, [sp, #20]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d109      	bne.n	8001aa2 <iqReadTimeout+0x42>
      msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
 8001a8e:	9b03      	ldr	r3, [sp, #12]
 8001a90:	9900      	ldr	r1, [sp, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff fe5c 	bl	8001750 <osalThreadEnqueueTimeoutS.lto_priv.1>
 8001a98:	9004      	str	r0, [sp, #16]

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 8001a9a:	9b04      	ldr	r3, [sp, #16]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d012      	beq.n	8001ac6 <iqReadTimeout+0x66>
        break;
 8001aa0:	e014      	b.n	8001acc <iqReadTimeout+0x6c>
      }
    }
    else {
      /* Inform the low side that the queue has at least one empty slot
         available.*/
      if (nfy != NULL) {
 8001aa2:	9b07      	ldr	r3, [sp, #28]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d002      	beq.n	8001aae <iqReadTimeout+0x4e>
        nfy(iqp);
 8001aa8:	9b07      	ldr	r3, [sp, #28]
 8001aaa:	9803      	ldr	r0, [sp, #12]
 8001aac:	4798      	blx	r3
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();
 8001aae:	f7ff fe37 	bl	8001720 <osalSysUnlock.lto_priv.1>

      n  -= done;
 8001ab2:	9a01      	ldr	r2, [sp, #4]
 8001ab4:	9b05      	ldr	r3, [sp, #20]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	9301      	str	r3, [sp, #4]
      bp += done;
 8001aba:	9a02      	ldr	r2, [sp, #8]
 8001abc:	9b05      	ldr	r3, [sp, #20]
 8001abe:	4413      	add	r3, r2
 8001ac0:	9302      	str	r3, [sp, #8]

      osalSysLock();
 8001ac2:	f7ff fe25 	bl	8001710 <osalSysLock.lto_priv.1>
  while (n > 0U) {
 8001ac6:	9b01      	ldr	r3, [sp, #4]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d1d7      	bne.n	8001a7c <iqReadTimeout+0x1c>
    }
  }

  osalSysUnlock();
 8001acc:	f7ff fe28 	bl	8001720 <osalSysUnlock.lto_priv.1>
  return max - n;
 8001ad0:	9a06      	ldr	r2, [sp, #24]
 8001ad2:	9b01      	ldr	r3, [sp, #4]
 8001ad4:	1ad3      	subs	r3, r2, r3
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	b009      	add	sp, #36	; 0x24
 8001ada:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ade:	bf00      	nop

08001ae0 <oqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {
 8001ae0:	b500      	push	{lr}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	9003      	str	r0, [sp, #12]
 8001ae6:	9102      	str	r1, [sp, #8]
 8001ae8:	9201      	str	r2, [sp, #4]
 8001aea:	9300      	str	r3, [sp, #0]

  osalThreadQueueObjectInit(&oqp->q_waiting);
 8001aec:	9b03      	ldr	r3, [sp, #12]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff fe1e 	bl	8001730 <osalThreadQueueObjectInit.lto_priv.1>
  oqp->q_counter = size;
 8001af4:	9b03      	ldr	r3, [sp, #12]
 8001af6:	9a01      	ldr	r2, [sp, #4]
 8001af8:	609a      	str	r2, [r3, #8]
  oqp->q_buffer  = bp;
 8001afa:	9b03      	ldr	r3, [sp, #12]
 8001afc:	9a02      	ldr	r2, [sp, #8]
 8001afe:	60da      	str	r2, [r3, #12]
  oqp->q_rdptr   = bp;
 8001b00:	9b03      	ldr	r3, [sp, #12]
 8001b02:	9a02      	ldr	r2, [sp, #8]
 8001b04:	619a      	str	r2, [r3, #24]
  oqp->q_wrptr   = bp;
 8001b06:	9b03      	ldr	r3, [sp, #12]
 8001b08:	9a02      	ldr	r2, [sp, #8]
 8001b0a:	615a      	str	r2, [r3, #20]
  oqp->q_top     = bp + size;
 8001b0c:	9a02      	ldr	r2, [sp, #8]
 8001b0e:	9b01      	ldr	r3, [sp, #4]
 8001b10:	441a      	add	r2, r3
 8001b12:	9b03      	ldr	r3, [sp, #12]
 8001b14:	611a      	str	r2, [r3, #16]
  oqp->q_notify  = onfy;
 8001b16:	9b03      	ldr	r3, [sp, #12]
 8001b18:	9a00      	ldr	r2, [sp, #0]
 8001b1a:	61da      	str	r2, [r3, #28]
  oqp->q_link    = link;
 8001b1c:	9b03      	ldr	r3, [sp, #12]
 8001b1e:	9a06      	ldr	r2, [sp, #24]
 8001b20:	621a      	str	r2, [r3, #32]
}
 8001b22:	bf00      	nop
 8001b24:	b005      	add	sp, #20
 8001b26:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b2a:	bf00      	nop
 8001b2c:	0000      	movs	r0, r0
	...

08001b30 <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8001b30:	b500      	push	{lr}
 8001b32:	b087      	sub	sp, #28
 8001b34:	9003      	str	r0, [sp, #12]
 8001b36:	460b      	mov	r3, r1
 8001b38:	9201      	str	r2, [sp, #4]
 8001b3a:	f88d 300b 	strb.w	r3, [sp, #11]

  osalSysLock();
 8001b3e:	f7ff fde7 	bl	8001710 <osalSysLock.lto_priv.1>

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
 8001b42:	e00c      	b.n	8001b5e <oqPutTimeout+0x2e>
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8001b44:	9b03      	ldr	r3, [sp, #12]
 8001b46:	9901      	ldr	r1, [sp, #4]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff fe01 	bl	8001750 <osalThreadEnqueueTimeoutS.lto_priv.1>
 8001b4e:	9005      	str	r0, [sp, #20]
    if (msg < MSG_OK) {
 8001b50:	9b05      	ldr	r3, [sp, #20]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	da03      	bge.n	8001b5e <oqPutTimeout+0x2e>
      osalSysUnlock();
 8001b56:	f7ff fde3 	bl	8001720 <osalSysUnlock.lto_priv.1>
      return msg;
 8001b5a:	9b05      	ldr	r3, [sp, #20]
 8001b5c:	e025      	b.n	8001baa <oqPutTimeout+0x7a>
  while (oqIsFullI(oqp)) {
 8001b5e:	9b03      	ldr	r3, [sp, #12]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0ee      	beq.n	8001b44 <oqPutTimeout+0x14>
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
 8001b66:	9b03      	ldr	r3, [sp, #12]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	1e5a      	subs	r2, r3, #1
 8001b6c:	9b03      	ldr	r3, [sp, #12]
 8001b6e:	609a      	str	r2, [r3, #8]
  *oqp->q_wrptr++ = b;
 8001b70:	9b03      	ldr	r3, [sp, #12]
 8001b72:	695b      	ldr	r3, [r3, #20]
 8001b74:	1c59      	adds	r1, r3, #1
 8001b76:	9a03      	ldr	r2, [sp, #12]
 8001b78:	6151      	str	r1, [r2, #20]
 8001b7a:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8001b7e:	701a      	strb	r2, [r3, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8001b80:	9b03      	ldr	r3, [sp, #12]
 8001b82:	695a      	ldr	r2, [r3, #20]
 8001b84:	9b03      	ldr	r3, [sp, #12]
 8001b86:	691b      	ldr	r3, [r3, #16]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d303      	bcc.n	8001b94 <oqPutTimeout+0x64>
    oqp->q_wrptr = oqp->q_buffer;
 8001b8c:	9b03      	ldr	r3, [sp, #12]
 8001b8e:	68da      	ldr	r2, [r3, #12]
 8001b90:	9b03      	ldr	r3, [sp, #12]
 8001b92:	615a      	str	r2, [r3, #20]
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
 8001b94:	9b03      	ldr	r3, [sp, #12]
 8001b96:	69db      	ldr	r3, [r3, #28]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d003      	beq.n	8001ba4 <oqPutTimeout+0x74>
    oqp->q_notify(oqp);
 8001b9c:	9b03      	ldr	r3, [sp, #12]
 8001b9e:	69db      	ldr	r3, [r3, #28]
 8001ba0:	9803      	ldr	r0, [sp, #12]
 8001ba2:	4798      	blx	r3
  }

  osalSysUnlock();
 8001ba4:	f7ff fdbc 	bl	8001720 <osalSysUnlock.lto_priv.1>

  return MSG_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	b007      	add	sp, #28
 8001bae:	f85d fb04 	ldr.w	pc, [sp], #4
 8001bb2:	bf00      	nop
	...

08001bc0 <oqGetI>:
 * @return              The byte value from the queue.
 * @retval MSG_TIMEOUT  if the queue is empty.
 *
 * @iclass
 */
msg_t oqGetI(output_queue_t *oqp) {
 8001bc0:	b500      	push	{lr}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	9001      	str	r0, [sp, #4]

  osalDbgCheckClassI();

  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
 8001bc6:	9b01      	ldr	r3, [sp, #4]
 8001bc8:	695a      	ldr	r2, [r3, #20]
 8001bca:	9b01      	ldr	r3, [sp, #4]
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d105      	bne.n	8001bde <oqGetI+0x1e>
 8001bd2:	9b01      	ldr	r3, [sp, #4]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <oqGetI+0x1e>
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e000      	b.n	8001be0 <oqGetI+0x20>
 8001bde:	2300      	movs	r3, #0
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	f083 0301 	eor.w	r3, r3, #1
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d01e      	beq.n	8001c2e <oqGetI+0x6e>
    uint8_t b;

    oqp->q_counter++;
 8001bf0:	9b01      	ldr	r3, [sp, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	1c5a      	adds	r2, r3, #1
 8001bf6:	9b01      	ldr	r3, [sp, #4]
 8001bf8:	609a      	str	r2, [r3, #8]
    b = *oqp->q_rdptr++;
 8001bfa:	9b01      	ldr	r3, [sp, #4]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	1c59      	adds	r1, r3, #1
 8001c00:	9a01      	ldr	r2, [sp, #4]
 8001c02:	6191      	str	r1, [r2, #24]
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	f88d 300f 	strb.w	r3, [sp, #15]
    if (oqp->q_rdptr >= oqp->q_top) {
 8001c0a:	9b01      	ldr	r3, [sp, #4]
 8001c0c:	699a      	ldr	r2, [r3, #24]
 8001c0e:	9b01      	ldr	r3, [sp, #4]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d303      	bcc.n	8001c1e <oqGetI+0x5e>
      oqp->q_rdptr = oqp->q_buffer;
 8001c16:	9b01      	ldr	r3, [sp, #4]
 8001c18:	68da      	ldr	r2, [r3, #12]
 8001c1a:	9b01      	ldr	r3, [sp, #4]
 8001c1c:	619a      	str	r2, [r3, #24]
    }

    osalThreadDequeueNextI(&oqp->q_waiting, MSG_OK);
 8001c1e:	9b01      	ldr	r3, [sp, #4]
 8001c20:	2100      	movs	r1, #0
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff fda4 	bl	8001770 <osalThreadDequeueNextI.lto_priv.1>

    return (msg_t)b;
 8001c28:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8001c2c:	e001      	b.n	8001c32 <oqGetI+0x72>
  }

  return MSG_TIMEOUT;
 8001c2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	b005      	add	sp, #20
 8001c36:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c3a:	bf00      	nop
 8001c3c:	0000      	movs	r0, r0
	...

08001c40 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8001c40:	b500      	push	{lr}
 8001c42:	b089      	sub	sp, #36	; 0x24
 8001c44:	9003      	str	r0, [sp, #12]
 8001c46:	9102      	str	r1, [sp, #8]
 8001c48:	9201      	str	r2, [sp, #4]
 8001c4a:	9300      	str	r3, [sp, #0]
  qnotify_t nfy = oqp->q_notify;
 8001c4c:	9b03      	ldr	r3, [sp, #12]
 8001c4e:	69db      	ldr	r3, [r3, #28]
 8001c50:	9307      	str	r3, [sp, #28]
  size_t max = n;
 8001c52:	9b01      	ldr	r3, [sp, #4]
 8001c54:	9306      	str	r3, [sp, #24]

  osalDbgCheck(n > 0U);

  osalSysLock();
 8001c56:	f7ff fd5b 	bl	8001710 <osalSysLock.lto_priv.1>

  while (n > 0U) {
 8001c5a:	e024      	b.n	8001ca6 <oqWriteTimeout+0x66>
    size_t done;

    done = oq_write(oqp, bp, n);
 8001c5c:	9a01      	ldr	r2, [sp, #4]
 8001c5e:	9902      	ldr	r1, [sp, #8]
 8001c60:	9803      	ldr	r0, [sp, #12]
 8001c62:	f7ff fdf5 	bl	8001850 <oq_write>
 8001c66:	9005      	str	r0, [sp, #20]
    if (done == (size_t)0) {
 8001c68:	9b05      	ldr	r3, [sp, #20]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d109      	bne.n	8001c82 <oqWriteTimeout+0x42>
      msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8001c6e:	9b03      	ldr	r3, [sp, #12]
 8001c70:	9900      	ldr	r1, [sp, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff fd6c 	bl	8001750 <osalThreadEnqueueTimeoutS.lto_priv.1>
 8001c78:	9004      	str	r0, [sp, #16]

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 8001c7a:	9b04      	ldr	r3, [sp, #16]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d012      	beq.n	8001ca6 <oqWriteTimeout+0x66>
        break;
 8001c80:	e014      	b.n	8001cac <oqWriteTimeout+0x6c>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 8001c82:	9b07      	ldr	r3, [sp, #28]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d002      	beq.n	8001c8e <oqWriteTimeout+0x4e>
        nfy(oqp);
 8001c88:	9b07      	ldr	r3, [sp, #28]
 8001c8a:	9803      	ldr	r0, [sp, #12]
 8001c8c:	4798      	blx	r3
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();
 8001c8e:	f7ff fd47 	bl	8001720 <osalSysUnlock.lto_priv.1>

      n  -= done;
 8001c92:	9a01      	ldr	r2, [sp, #4]
 8001c94:	9b05      	ldr	r3, [sp, #20]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	9301      	str	r3, [sp, #4]
      bp += done;
 8001c9a:	9a02      	ldr	r2, [sp, #8]
 8001c9c:	9b05      	ldr	r3, [sp, #20]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	9302      	str	r3, [sp, #8]

      osalSysLock();
 8001ca2:	f7ff fd35 	bl	8001710 <osalSysLock.lto_priv.1>
  while (n > 0U) {
 8001ca6:	9b01      	ldr	r3, [sp, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1d7      	bne.n	8001c5c <oqWriteTimeout+0x1c>
    }
  }

  osalSysUnlock();
 8001cac:	f7ff fd38 	bl	8001720 <osalSysUnlock.lto_priv.1>
  return max - n;
 8001cb0:	9a06      	ldr	r2, [sp, #24]
 8001cb2:	9b01      	ldr	r3, [sp, #4]
 8001cb4:	1ad3      	subs	r3, r2, r3
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	b009      	add	sp, #36	; 0x24
 8001cba:	f85d fb04 	ldr.w	pc, [sp], #4
 8001cbe:	bf00      	nop

08001cc0 <chSysLock.lto_priv.2>:
static inline void chSysLock(void) {
 8001cc0:	b082      	sub	sp, #8
 8001cc2:	2320      	movs	r3, #32
 8001cc4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001cc6:	9b01      	ldr	r3, [sp, #4]
 8001cc8:	f383 8811 	msr	BASEPRI, r3
}
 8001ccc:	bf00      	nop
}
 8001cce:	bf00      	nop
}
 8001cd0:	bf00      	nop
 8001cd2:	b002      	add	sp, #8
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
	...

08001ce0 <chSysUnlock.lto_priv.2>:
static inline void chSysUnlock(void) {
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001ce6:	9b01      	ldr	r3, [sp, #4]
 8001ce8:	f383 8811 	msr	BASEPRI, r3
}
 8001cec:	bf00      	nop
}
 8001cee:	bf00      	nop
}
 8001cf0:	bf00      	nop
 8001cf2:	b002      	add	sp, #8
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
	...

08001d00 <chEvtObjectInit.lto_priv.0>:
 *
 * @param[in] esp       pointer to the @p event_source_t structure
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {
 8001d00:	b082      	sub	sp, #8
 8001d02:	9001      	str	r0, [sp, #4]

  esp->next = (event_listener_t *)esp;
 8001d04:	9b01      	ldr	r3, [sp, #4]
 8001d06:	9a01      	ldr	r2, [sp, #4]
 8001d08:	601a      	str	r2, [r3, #0]
}
 8001d0a:	bf00      	nop
 8001d0c:	b002      	add	sp, #8
 8001d0e:	4770      	bx	lr

08001d10 <osalSysLock.lto_priv.2>:
static inline void osalSysLock(void) {
 8001d10:	b508      	push	{r3, lr}
  chSysLock();
 8001d12:	f7ff ffd5 	bl	8001cc0 <chSysLock.lto_priv.2>
}
 8001d16:	bf00      	nop
 8001d18:	bd08      	pop	{r3, pc}
 8001d1a:	bf00      	nop
 8001d1c:	0000      	movs	r0, r0
	...

08001d20 <osalSysUnlock.lto_priv.2>:
static inline void osalSysUnlock(void) {
 8001d20:	b508      	push	{r3, lr}
  chSysUnlock();
 8001d22:	f7ff ffdd 	bl	8001ce0 <chSysUnlock.lto_priv.2>
}
 8001d26:	bf00      	nop
 8001d28:	bd08      	pop	{r3, pc}
 8001d2a:	bf00      	nop
 8001d2c:	0000      	movs	r0, r0
	...

08001d30 <osalEventObjectInit>:
 *
 * @param[out] esp      pointer to the event source object
 *
 * @init
 */
static inline void osalEventObjectInit(event_source_t *esp) {
 8001d30:	b500      	push	{lr}
 8001d32:	b083      	sub	sp, #12
 8001d34:	9001      	str	r0, [sp, #4]

  chEvtObjectInit(esp);
 8001d36:	9801      	ldr	r0, [sp, #4]
 8001d38:	f7ff ffe2 	bl	8001d00 <chEvtObjectInit.lto_priv.0>
}
 8001d3c:	bf00      	nop
 8001d3e:	b003      	add	sp, #12
 8001d40:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001d50 <osalEventBroadcastFlagsI.lto_priv.0>:
 * @param[in] flags     flags to be ORed to the flags mask
 *
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {
 8001d50:	b500      	push	{lr}
 8001d52:	b083      	sub	sp, #12
 8001d54:	9001      	str	r0, [sp, #4]
 8001d56:	9100      	str	r1, [sp, #0]

  chEvtBroadcastFlagsI(esp, flags);
 8001d58:	9900      	ldr	r1, [sp, #0]
 8001d5a:	9801      	ldr	r0, [sp, #4]
 8001d5c:	f002 fcc0 	bl	80046e0 <chEvtBroadcastFlagsI>
}
 8001d60:	bf00      	nop
 8001d62:	b003      	add	sp, #12
 8001d64:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001d70 <_write>:
/*
 * Interface implementation, the following functions just invoke the equivalent
 * queue-level function or macro.
 */

static size_t _write(void *ip, const uint8_t *bp, size_t n) {
 8001d70:	b500      	push	{lr}
 8001d72:	b085      	sub	sp, #20
 8001d74:	9003      	str	r0, [sp, #12]
 8001d76:	9102      	str	r1, [sp, #8]
 8001d78:	9201      	str	r2, [sp, #4]

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8001d7a:	9b03      	ldr	r3, [sp, #12]
 8001d7c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8001d80:	f04f 33ff 	mov.w	r3, #4294967295
 8001d84:	9a01      	ldr	r2, [sp, #4]
 8001d86:	9902      	ldr	r1, [sp, #8]
 8001d88:	f7ff ff5a 	bl	8001c40 <oqWriteTimeout>
 8001d8c:	4603      	mov	r3, r0
                        n, TIME_INFINITE);
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	b005      	add	sp, #20
 8001d92:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d96:	bf00      	nop
	...

08001da0 <_read>:

static size_t _read(void *ip, uint8_t *bp, size_t n) {
 8001da0:	b500      	push	{lr}
 8001da2:	b085      	sub	sp, #20
 8001da4:	9003      	str	r0, [sp, #12]
 8001da6:	9102      	str	r1, [sp, #8]
 8001da8:	9201      	str	r2, [sp, #4]

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8001daa:	9b03      	ldr	r3, [sp, #12]
 8001dac:	f103 000c 	add.w	r0, r3, #12
 8001db0:	f04f 33ff 	mov.w	r3, #4294967295
 8001db4:	9a01      	ldr	r2, [sp, #4]
 8001db6:	9902      	ldr	r1, [sp, #8]
 8001db8:	f7ff fe52 	bl	8001a60 <iqReadTimeout>
 8001dbc:	4603      	mov	r3, r0
                       n, TIME_INFINITE);
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	b005      	add	sp, #20
 8001dc2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001dc6:	bf00      	nop
	...

08001dd0 <_put.lto_priv.0>:

static msg_t _put(void *ip, uint8_t b) {
 8001dd0:	b500      	push	{lr}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	9001      	str	r0, [sp, #4]
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	f88d 3003 	strb.w	r3, [sp, #3]

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8001ddc:	9b01      	ldr	r3, [sp, #4]
 8001dde:	3330      	adds	r3, #48	; 0x30
 8001de0:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8001de4:	f04f 32ff 	mov.w	r2, #4294967295
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff fea1 	bl	8001b30 <oqPutTimeout>
 8001dee:	4603      	mov	r3, r0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	b003      	add	sp, #12
 8001df4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001e00 <_get.lto_priv.0>:

static msg_t _get(void *ip) {
 8001e00:	b500      	push	{lr}
 8001e02:	b083      	sub	sp, #12
 8001e04:	9001      	str	r0, [sp, #4]

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8001e06:	9b01      	ldr	r3, [sp, #4]
 8001e08:	330c      	adds	r3, #12
 8001e0a:	f04f 31ff 	mov.w	r1, #4294967295
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff fde6 	bl	80019e0 <iqGetTimeout>
 8001e14:	4603      	mov	r3, r0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	b003      	add	sp, #12
 8001e1a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e1e:	bf00      	nop

08001e20 <_putt>:

static msg_t _putt(void *ip, uint8_t b, sysinterval_t timeout) {
 8001e20:	b500      	push	{lr}
 8001e22:	b085      	sub	sp, #20
 8001e24:	9003      	str	r0, [sp, #12]
 8001e26:	460b      	mov	r3, r1
 8001e28:	9201      	str	r2, [sp, #4]
 8001e2a:	f88d 300b 	strb.w	r3, [sp, #11]

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8001e2e:	9b03      	ldr	r3, [sp, #12]
 8001e30:	3330      	adds	r3, #48	; 0x30
 8001e32:	f89d 100b 	ldrb.w	r1, [sp, #11]
 8001e36:	9a01      	ldr	r2, [sp, #4]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff fe79 	bl	8001b30 <oqPutTimeout>
 8001e3e:	4603      	mov	r3, r0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	b005      	add	sp, #20
 8001e44:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001e50 <_gett>:

static msg_t _gett(void *ip, sysinterval_t timeout) {
 8001e50:	b500      	push	{lr}
 8001e52:	b083      	sub	sp, #12
 8001e54:	9001      	str	r0, [sp, #4]
 8001e56:	9100      	str	r1, [sp, #0]

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8001e58:	9b01      	ldr	r3, [sp, #4]
 8001e5a:	330c      	adds	r3, #12
 8001e5c:	9900      	ldr	r1, [sp, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff fdbe 	bl	80019e0 <iqGetTimeout>
 8001e64:	4603      	mov	r3, r0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	b003      	add	sp, #12
 8001e6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e6e:	bf00      	nop

08001e70 <_writet>:

static size_t _writet(void *ip, const uint8_t *bp, size_t n,
                      sysinterval_t timeout) {
 8001e70:	b500      	push	{lr}
 8001e72:	b085      	sub	sp, #20
 8001e74:	9003      	str	r0, [sp, #12]
 8001e76:	9102      	str	r1, [sp, #8]
 8001e78:	9201      	str	r2, [sp, #4]
 8001e7a:	9300      	str	r3, [sp, #0]

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8001e7c:	9b03      	ldr	r3, [sp, #12]
 8001e7e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8001e82:	9b00      	ldr	r3, [sp, #0]
 8001e84:	9a01      	ldr	r2, [sp, #4]
 8001e86:	9902      	ldr	r1, [sp, #8]
 8001e88:	f7ff feda 	bl	8001c40 <oqWriteTimeout>
 8001e8c:	4603      	mov	r3, r0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	b005      	add	sp, #20
 8001e92:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e96:	bf00      	nop
	...

08001ea0 <_readt>:

static size_t _readt(void *ip, uint8_t *bp, size_t n,
                     sysinterval_t timeout) {
 8001ea0:	b500      	push	{lr}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	9003      	str	r0, [sp, #12]
 8001ea6:	9102      	str	r1, [sp, #8]
 8001ea8:	9201      	str	r2, [sp, #4]
 8001eaa:	9300      	str	r3, [sp, #0]

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8001eac:	9b03      	ldr	r3, [sp, #12]
 8001eae:	f103 000c 	add.w	r0, r3, #12
 8001eb2:	9b00      	ldr	r3, [sp, #0]
 8001eb4:	9a01      	ldr	r2, [sp, #4]
 8001eb6:	9902      	ldr	r1, [sp, #8]
 8001eb8:	f7ff fdd2 	bl	8001a60 <iqReadTimeout>
 8001ebc:	4603      	mov	r3, r0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	b005      	add	sp, #20
 8001ec2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ec6:	bf00      	nop
	...

08001ed0 <_ctl>:

static msg_t _ctl(void *ip, unsigned int operation, void *arg) {
 8001ed0:	b086      	sub	sp, #24
 8001ed2:	9003      	str	r0, [sp, #12]
 8001ed4:	9102      	str	r1, [sp, #8]
 8001ed6:	9201      	str	r2, [sp, #4]
  SerialDriver *sdp = (SerialDriver *)ip;
 8001ed8:	9b03      	ldr	r3, [sp, #12]
 8001eda:	9305      	str	r3, [sp, #20]

  osalDbgCheck(sdp != NULL);

  switch (operation) {
 8001edc:	9b02      	ldr	r3, [sp, #8]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d002      	beq.n	8001ee8 <_ctl+0x18>
 8001ee2:	9b02      	ldr	r3, [sp, #8]
 8001ee4:	2b01      	cmp	r3, #1
  default:
#if defined(SD_LLD_IMPLEMENTS_CTL)
    /* Delegating to the LLD if supported.*/
    return sd_lld_control(sdp, operation, arg);
#else
    break;
 8001ee6:	e000      	b.n	8001eea <_ctl+0x1a>
    break;
 8001ee8:	bf00      	nop
#endif
  }
  return MSG_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	b006      	add	sp, #24
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
	...

08001f00 <sdInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void sdInit(void) {
 8001f00:	b508      	push	{r3, lr}

  sd_lld_init();
 8001f02:	f001 f82d 	bl	8002f60 <sd_lld_init>
}
 8001f06:	bf00      	nop
 8001f08:	bd08      	pop	{r3, pc}
 8001f0a:	bf00      	nop
 8001f0c:	0000      	movs	r0, r0
	...

08001f10 <sdObjectInit>:
 * @init
 */
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 8001f10:	b500      	push	{lr}
 8001f12:	b087      	sub	sp, #28
 8001f14:	9005      	str	r0, [sp, #20]
 8001f16:	9104      	str	r1, [sp, #16]
 8001f18:	9203      	str	r2, [sp, #12]

  sdp->vmt = &vmt;
 8001f1a:	9b05      	ldr	r3, [sp, #20]
 8001f1c:	4a12      	ldr	r2, [pc, #72]	; (8001f68 <sdObjectInit+0x58>)
 8001f1e:	601a      	str	r2, [r3, #0]
  osalEventObjectInit(&sdp->event);
 8001f20:	9b05      	ldr	r3, [sp, #20]
 8001f22:	3304      	adds	r3, #4
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff ff03 	bl	8001d30 <osalEventObjectInit>
  sdp->state = SD_STOP;
 8001f2a:	9b05      	ldr	r3, [sp, #20]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	721a      	strb	r2, [r3, #8]
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8001f30:	9b05      	ldr	r3, [sp, #20]
 8001f32:	f103 000c 	add.w	r0, r3, #12
 8001f36:	9b05      	ldr	r3, [sp, #20]
 8001f38:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8001f3c:	9b05      	ldr	r3, [sp, #20]
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	9b04      	ldr	r3, [sp, #16]
 8001f42:	2210      	movs	r2, #16
 8001f44:	f7ff fce4 	bl	8001910 <iqObjectInit>
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
 8001f48:	9b05      	ldr	r3, [sp, #20]
 8001f4a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8001f4e:	9b05      	ldr	r3, [sp, #20]
 8001f50:	f103 0164 	add.w	r1, r3, #100	; 0x64
 8001f54:	9b05      	ldr	r3, [sp, #20]
 8001f56:	9300      	str	r3, [sp, #0]
 8001f58:	9b03      	ldr	r3, [sp, #12]
 8001f5a:	2210      	movs	r2, #16
 8001f5c:	f7ff fdc0 	bl	8001ae0 <oqObjectInit>
}
 8001f60:	bf00      	nop
 8001f62:	b007      	add	sp, #28
 8001f64:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f68:	08006a94 	.word	0x08006a94
 8001f6c:	00000000 	.word	0x00000000

08001f70 <sdStart>:
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @api
 */
void sdStart(SerialDriver *sdp, const SerialConfig *config) {
 8001f70:	b500      	push	{lr}
 8001f72:	b083      	sub	sp, #12
 8001f74:	9001      	str	r0, [sp, #4]
 8001f76:	9100      	str	r1, [sp, #0]

  osalDbgCheck(sdp != NULL);

  osalSysLock();
 8001f78:	f7ff feca 	bl	8001d10 <osalSysLock.lto_priv.2>
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
 8001f7c:	9900      	ldr	r1, [sp, #0]
 8001f7e:	9801      	ldr	r0, [sp, #4]
 8001f80:	f001 f806 	bl	8002f90 <sd_lld_start>
  sdp->state = SD_READY;
 8001f84:	9b01      	ldr	r3, [sp, #4]
 8001f86:	2202      	movs	r2, #2
 8001f88:	721a      	strb	r2, [r3, #8]
  osalSysUnlock();
 8001f8a:	f7ff fec9 	bl	8001d20 <osalSysUnlock.lto_priv.2>
}
 8001f8e:	bf00      	nop
 8001f90:	b003      	add	sp, #12
 8001f92:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f96:	bf00      	nop
	...

08001fa0 <sdIncomingDataI>:
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
 8001fa0:	b500      	push	{lr}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	9001      	str	r0, [sp, #4]
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	f88d 3003 	strb.w	r3, [sp, #3]

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8001fac:	9b01      	ldr	r3, [sp, #4]
 8001fae:	695b      	ldr	r3, [r3, #20]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d105      	bne.n	8001fc0 <sdIncomingDataI+0x20>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
 8001fb4:	9b01      	ldr	r3, [sp, #4]
 8001fb6:	3304      	adds	r3, #4
 8001fb8:	2104      	movs	r1, #4
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff fec8 	bl	8001d50 <osalEventBroadcastFlagsI.lto_priv.0>
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
 8001fc0:	9b01      	ldr	r3, [sp, #4]
 8001fc2:	330c      	adds	r3, #12
 8001fc4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001fc8:	4611      	mov	r1, r2
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff fcc8 	bl	8001960 <iqPutI>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	da06      	bge.n	8001fe4 <sdIncomingDataI+0x44>
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
 8001fd6:	9b01      	ldr	r3, [sp, #4]
 8001fd8:	3304      	adds	r3, #4
 8001fda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff feb6 	bl	8001d50 <osalEventBroadcastFlagsI.lto_priv.0>
}
 8001fe4:	bf00      	nop
 8001fe6:	b003      	add	sp, #12
 8001fe8:	f85d fb04 	ldr.w	pc, [sp], #4
 8001fec:	0000      	movs	r0, r0
	...

08001ff0 <uartInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void uartInit(void) {
 8001ff0:	b508      	push	{r3, lr}

  uart_lld_init();
 8001ff2:	f001 f8ed 	bl	80031d0 <uart_lld_init>
}
 8001ff6:	bf00      	nop
 8001ff8:	bd08      	pop	{r3, pc}
 8001ffa:	bf00      	nop
 8001ffc:	0000      	movs	r0, r0
	...

08002000 <uartObjectInit>:
 *
 * @param[out] uartp    pointer to the @p UARTDriver object
 *
 * @init
 */
void uartObjectInit(UARTDriver *uartp) {
 8002000:	b082      	sub	sp, #8
 8002002:	9001      	str	r0, [sp, #4]

  uartp->state      = UART_STOP;
 8002004:	9b01      	ldr	r3, [sp, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	701a      	strb	r2, [r3, #0]
  uartp->txstate    = UART_TX_IDLE;
 800200a:	9b01      	ldr	r3, [sp, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	705a      	strb	r2, [r3, #1]
  uartp->rxstate    = UART_RX_IDLE;
 8002010:	9b01      	ldr	r3, [sp, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	709a      	strb	r2, [r3, #2]
  uartp->config     = NULL;
 8002016:	9b01      	ldr	r3, [sp, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	605a      	str	r2, [r3, #4]

  /* Optional, user-defined initializer.*/
#if defined(UART_DRIVER_EXT_INIT_HOOK)
  UART_DRIVER_EXT_INIT_HOOK(uartp);
#endif
}
 800201c:	bf00      	nop
 800201e:	b002      	add	sp, #8
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
	...

08002030 <nvicEnableVector>:
 * @brief   Sets the priority of an interrupt handler and enables it.
 *
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {
 8002030:	b082      	sub	sp, #8
 8002032:	9001      	str	r0, [sp, #4]
 8002034:	9100      	str	r1, [sp, #0]
#if defined(__CORE_CM0_H_GENERIC) || defined(__CORE_CM0PLUS_H_GENERIC) ||   \
    defined(__CORE_CM23_H_GENERIC)
  NVIC->__IPR[_IP_IDX(n)] = (NVIC->__IPR[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                            (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8002036:	9b00      	ldr	r3, [sp, #0]
 8002038:	b2db      	uxtb	r3, r3
 800203a:	4a11      	ldr	r2, [pc, #68]	; (8002080 <nvicEnableVector+0x50>)
 800203c:	011b      	lsls	r3, r3, #4
 800203e:	b2d9      	uxtb	r1, r3
 8002040:	9b01      	ldr	r3, [sp, #4]
 8002042:	4413      	add	r3, r2
 8002044:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002048:	460a      	mov	r2, r1
 800204a:	701a      	strb	r2, [r3, #0]
#endif
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800204c:	9b01      	ldr	r3, [sp, #4]
 800204e:	f003 021f 	and.w	r2, r3, #31
 8002052:	490b      	ldr	r1, [pc, #44]	; (8002080 <nvicEnableVector+0x50>)
 8002054:	9b01      	ldr	r3, [sp, #4]
 8002056:	095b      	lsrs	r3, r3, #5
 8002058:	2001      	movs	r0, #1
 800205a:	fa00 f202 	lsl.w	r2, r0, r2
 800205e:	3360      	adds	r3, #96	; 0x60
 8002060:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002064:	9b01      	ldr	r3, [sp, #4]
 8002066:	f003 021f 	and.w	r2, r3, #31
 800206a:	4905      	ldr	r1, [pc, #20]	; (8002080 <nvicEnableVector+0x50>)
 800206c:	9b01      	ldr	r3, [sp, #4]
 800206e:	095b      	lsrs	r3, r3, #5
 8002070:	2001      	movs	r0, #1
 8002072:	fa00 f202 	lsl.w	r2, r0, r2
 8002076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3)
  /* If the IRQ is enabled from secure mode then it is marked as secure
     interrupt in ITNS.*/
  NVIC->__ITNS[n >> 5U] &= ~(1U << (n & 0x1FU));
#endif
}
 800207a:	bf00      	nop
 800207c:	b002      	add	sp, #8
 800207e:	4770      	bx	lr
 8002080:	e000e100 	.word	0xe000e100
	...

08002090 <exti0_irq_init>:

static inline void exti0_irq_init(void) {
#if (HAL_USE_PAL && (PAL_USE_WAIT || PAL_USE_CALLBACKS))
  nvicEnableVector(STM32_EXTI0_NUMBER, STM32_IRQ_EXTI0_PRIORITY);
#endif
}
 8002090:	bf00      	nop
 8002092:	4770      	bx	lr
	...

080020a0 <exti1_irq_init>:

static inline void exti1_irq_init(void) {
#if (HAL_USE_PAL && (PAL_USE_WAIT || PAL_USE_CALLBACKS))
  nvicEnableVector(STM32_EXTI1_NUMBER, STM32_IRQ_EXTI1_PRIORITY);
#endif
}
 80020a0:	bf00      	nop
 80020a2:	4770      	bx	lr
	...

080020b0 <exti2_irq_init>:

static inline void exti2_irq_init(void) {
#if (HAL_USE_PAL && (PAL_USE_WAIT || PAL_USE_CALLBACKS))
  nvicEnableVector(STM32_EXTI2_NUMBER, STM32_IRQ_EXTI2_PRIORITY);
#endif
}
 80020b0:	bf00      	nop
 80020b2:	4770      	bx	lr
	...

080020c0 <exti3_irq_init>:

static inline void exti3_irq_init(void) {
#if (HAL_USE_PAL && (PAL_USE_WAIT || PAL_USE_CALLBACKS))
  nvicEnableVector(STM32_EXTI3_NUMBER, STM32_IRQ_EXTI3_PRIORITY);
#endif
}
 80020c0:	bf00      	nop
 80020c2:	4770      	bx	lr
	...

080020d0 <exti4_irq_init>:

static inline void exti4_irq_init(void) {
#if (HAL_USE_PAL && (PAL_USE_WAIT || PAL_USE_CALLBACKS))
  nvicEnableVector(STM32_EXTI4_NUMBER, STM32_IRQ_EXTI4_PRIORITY);
#endif
}
 80020d0:	bf00      	nop
 80020d2:	4770      	bx	lr
	...

080020e0 <exti5_9_irq_init>:

static inline void exti5_9_irq_init(void) {
#if (HAL_USE_PAL && (PAL_USE_WAIT || PAL_USE_CALLBACKS))
  nvicEnableVector(STM32_EXTI5_9_NUMBER, STM32_IRQ_EXTI5_9_PRIORITY);
#endif
}
 80020e0:	bf00      	nop
 80020e2:	4770      	bx	lr
	...

080020f0 <exti10_15_irq_init>:

static inline void exti10_15_irq_init(void) {
#if (HAL_USE_PAL && (PAL_USE_WAIT || PAL_USE_CALLBACKS))
  nvicEnableVector(STM32_EXTI10_15_NUMBER, STM32_IRQ_EXTI10_15_PRIORITY);
#endif
}
 80020f0:	bf00      	nop
 80020f2:	4770      	bx	lr
	...

08002100 <exti16_irq_init>:

static inline void exti16_irq_init(void) {
#if defined(STM32_EXTI16_IS_USED)
  nvicEnableVector(STM32_EXTI16_NUMBER, STM32_IRQ_EXTI16_PRIORITY);
#endif
}
 8002100:	bf00      	nop
 8002102:	4770      	bx	lr
	...

08002110 <exti17_irq_init>:

static inline void exti17_irq_init(void) {
#if defined(STM32_EXTI17_IS_USED)
  nvicEnableVector(STM32_EXTI17_NUMBER, STM32_IRQ_EXTI17_PRIORITY);
#endif
}
 8002110:	bf00      	nop
 8002112:	4770      	bx	lr
	...

08002120 <exti18_irq_init>:

static inline void exti18_irq_init(void) {
#if defined(STM32_EXTI18_IS_USED)
  nvicEnableVector(STM32_EXTI18_NUMBER, STM32_IRQ_EXTI18_PRIORITY);
#endif
}
 8002120:	bf00      	nop
 8002122:	4770      	bx	lr
	...

08002130 <exti19_irq_init>:

static inline void exti19_irq_init(void) {
#if defined(STM32_EXTI19_IS_USED)
  nvicEnableVector(STM32_EXTI19_NUMBER, STM32_IRQ_EXTI19_PRIORITY);
#endif
}
 8002130:	bf00      	nop
 8002132:	4770      	bx	lr
	...

08002140 <exti20_irq_init>:

static inline void exti20_irq_init(void) {
#if defined(STM32_EXTI20_IS_USED)
  nvicEnableVector(STM32_EXTI20_NUMBER, STM32_IRQ_EXTI20_PRIORITY);
#endif
}
 8002140:	bf00      	nop
 8002142:	4770      	bx	lr
	...

08002150 <exti21_irq_init>:

static inline void exti21_irq_init(void) {
#if defined(STM32_EXTI21_IS_USED)
  nvicEnableVector(STM32_EXTI21_NUMBER, STM32_IRQ_EXTI21_PRIORITY);
#endif
}
 8002150:	bf00      	nop
 8002152:	4770      	bx	lr
	...

08002160 <exti22_irq_init>:

static inline void exti22_irq_init(void) {
#if defined(STM32_EXTI22_IS_USED)
  nvicEnableVector(STM32_EXTI22_NUMBER, STM32_IRQ_EXTI22_PRIORITY);
#endif
}
 8002160:	bf00      	nop
 8002162:	4770      	bx	lr
	...

08002170 <usart1_irq_init>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static inline void usart1_irq_init(void) {
 8002170:	b508      	push	{r3, lr}
#if defined(STM32_USART1_IS_USED)
  nvicEnableVector(STM32_USART1_NUMBER, STM32_IRQ_USART1_PRIORITY);
 8002172:	210c      	movs	r1, #12
 8002174:	2025      	movs	r0, #37	; 0x25
 8002176:	f7ff ff5b 	bl	8002030 <nvicEnableVector>
#endif
}
 800217a:	bf00      	nop
 800217c:	bd08      	pop	{r3, pc}
 800217e:	bf00      	nop

08002180 <VectorD4>:
/**
 * @brief   USART1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8002180:	b508      	push	{r3, lr}
#endif
#endif

#if HAL_USE_UART
#if STM32_UART_USE_USART1
  uart_lld_serve_interrupt(&UARTD1);
 8002182:	4803      	ldr	r0, [pc, #12]	; (8002190 <VectorD4+0x10>)
 8002184:	f001 f844 	bl	8003210 <uart_lld_serve_interrupt>
#endif
#endif

  OSAL_IRQ_EPILOGUE();
 8002188:	f002 fc72 	bl	8004a70 <__port_irq_epilogue>
}
 800218c:	bf00      	nop
 800218e:	bd08      	pop	{r3, pc}
 8002190:	20000d84 	.word	0x20000d84
	...

080021a0 <usart2_irq_init>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static inline void usart2_irq_init(void) {
 80021a0:	b508      	push	{r3, lr}
#if defined(STM32_USART2_IS_USED)
  nvicEnableVector(STM32_USART2_NUMBER, STM32_IRQ_USART2_PRIORITY);
 80021a2:	210c      	movs	r1, #12
 80021a4:	2026      	movs	r0, #38	; 0x26
 80021a6:	f7ff ff43 	bl	8002030 <nvicEnableVector>
#endif
}
 80021aa:	bf00      	nop
 80021ac:	bd08      	pop	{r3, pc}
 80021ae:	bf00      	nop

080021b0 <VectorD8>:
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 80021b0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

#if HAL_USE_SERIAL
#if STM32_SERIAL_USE_USART2
  sd_lld_serve_interrupt(&SD2);
 80021b2:	4803      	ldr	r0, [pc, #12]	; (80021c0 <VectorD8+0x10>)
 80021b4:	f000 ff1c 	bl	8002ff0 <sd_lld_serve_interrupt>
#if STM32_UART_USE_USART2
  uart_lld_serve_interrupt(&UARTD2);
#endif
#endif

  OSAL_IRQ_EPILOGUE();
 80021b8:	f002 fc5a 	bl	8004a70 <__port_irq_epilogue>
}
 80021bc:	bf00      	nop
 80021be:	bd08      	pop	{r3, pc}
 80021c0:	20000d04 	.word	0x20000d04
	...

080021d0 <usart3_irq_init>:

static inline void usart3_irq_init(void) {
#if defined(STM32_USART3_IS_USED)
  nvicEnableVector(STM32_USART3_NUMBER, STM32_IRQ_USART3_PRIORITY);
#endif
}
 80021d0:	bf00      	nop
 80021d2:	4770      	bx	lr
	...

080021e0 <uart4_irq_init>:

static inline void uart4_irq_init(void) {
#if defined(STM32_UART4_IS_USED)
  nvicEnableVector(STM32_UART4_NUMBER, STM32_IRQ_UART4_PRIORITY);
#endif
}
 80021e0:	bf00      	nop
 80021e2:	4770      	bx	lr
	...

080021f0 <uart5_irq_init>:

static inline void uart5_irq_init(void) {
#if defined(STM32_UART5_IS_USED)
  nvicEnableVector(STM32_UART5_NUMBER, STM32_IRQ_UART5_PRIORITY);
#endif
}
 80021f0:	bf00      	nop
 80021f2:	4770      	bx	lr
	...

08002200 <usart6_irq_init>:

static inline void usart6_irq_init(void) {
#if defined(STM32_USART6_IS_USED)
  nvicEnableVector(STM32_USART6_NUMBER, STM32_IRQ_USART6_PRIORITY);
#endif
}
 8002200:	bf00      	nop
 8002202:	4770      	bx	lr
	...

08002210 <uart7_irq_init>:

static inline void uart7_irq_init(void) {
#if defined(STM32_UART7_IS_USED)
  nvicEnableVector(STM32_UART7_NUMBER, STM32_IRQ_UART7_PRIORITY);
#endif
}
 8002210:	bf00      	nop
 8002212:	4770      	bx	lr
	...

08002220 <uart8_irq_init>:

static inline void uart8_irq_init(void) {
#if defined(STM32_UART8_IS_USED)
  nvicEnableVector(STM32_UART8_NUMBER, STM32_IRQ_UART8_PRIORITY);
#endif
}
 8002220:	bf00      	nop
 8002222:	4770      	bx	lr
	...

08002230 <uart9_irq_init>:

static inline void uart9_irq_init(void) {
#if defined(STM32_UART9_IS_USED)
  nvicEnableVector(STM32_UART9_NUMBER, STM32_IRQ_UART9_PRIORITY);
#endif
}
 8002230:	bf00      	nop
 8002232:	4770      	bx	lr
	...

08002240 <uart10_irq_init>:

static inline void uart10_irq_init(void) {
#if defined(STM32_UART10_IS_USED)
  nvicEnableVector(STM32_UART10_NUMBER, STM32_IRQ_UART10_PRIORITY);
#endif
}
 8002240:	bf00      	nop
 8002242:	4770      	bx	lr
	...

08002250 <tim1_tim9_tim10_tim11_irq_init>:
#endif
#if defined(STM32_TIM1_IS_USED)
  nvicEnableVector(STM32_TIM1_CC_NUMBER,
                   STM32_IRQ_TIM1_CC_PRIORITY);
#endif
}
 8002250:	bf00      	nop
 8002252:	4770      	bx	lr
	...

08002260 <tim2_irq_init>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static inline void tim2_irq_init(void) {
 8002260:	b508      	push	{r3, lr}
#if defined(STM32_TIM2_IS_USED)
  nvicEnableVector(STM32_TIM2_NUMBER, STM32_IRQ_TIM2_PRIORITY);
 8002262:	2107      	movs	r1, #7
 8002264:	201c      	movs	r0, #28
 8002266:	f7ff fee3 	bl	8002030 <nvicEnableVector>
#endif
}
 800226a:	bf00      	nop
 800226c:	bd08      	pop	{r3, pc}
 800226e:	bf00      	nop

08002270 <VectorB0>:
/**
 * @brief   TIM2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM2_HANDLER) {
 8002270:	b508      	push	{r3, lr}
  pwm_lld_serve_interrupt(&PWMD2);
#endif
#endif
#if 1
#if STM32_ST_USE_TIM2
  st_lld_serve_interrupt();
 8002272:	f000 fd65 	bl	8002d40 <st_lld_serve_interrupt>
#endif
#endif

  OSAL_IRQ_EPILOGUE();
 8002276:	f002 fbfb 	bl	8004a70 <__port_irq_epilogue>
}
 800227a:	bf00      	nop
 800227c:	bd08      	pop	{r3, pc}
 800227e:	bf00      	nop

08002280 <tim3_irq_init>:

static inline void tim3_irq_init(void) {
#if defined(STM32_TIM3_IS_USED)
  nvicEnableVector(STM32_TIM3_NUMBER, STM32_IRQ_TIM3_PRIORITY);
#endif
}
 8002280:	bf00      	nop
 8002282:	4770      	bx	lr
	...

08002290 <tim4_irq_init>:

static inline void tim4_irq_init(void) {
#if defined(STM32_TIM4_IS_USED)
  nvicEnableVector(STM32_TIM4_NUMBER, STM32_IRQ_TIM4_PRIORITY);
#endif
}
 8002290:	bf00      	nop
 8002292:	4770      	bx	lr
	...

080022a0 <tim5_irq_init>:

static inline void tim5_irq_init(void) {
#if defined(STM32_TIM5_IS_USED)
  nvicEnableVector(STM32_TIM5_NUMBER, STM32_IRQ_TIM5_PRIORITY);
#endif
}
 80022a0:	bf00      	nop
 80022a2:	4770      	bx	lr
	...

080022b0 <tim6_irq_init>:

static inline void tim6_irq_init(void) {
#if defined(STM32_TIM6_IS_USED)
  nvicEnableVector(STM32_TIM6_NUMBER, STM32_IRQ_TIM6_PRIORITY);
#endif
}
 80022b0:	bf00      	nop
 80022b2:	4770      	bx	lr
	...

080022c0 <tim7_irq_init>:

static inline void tim7_irq_init(void) {
#if defined(STM32_TIM7_IS_USED)
  nvicEnableVector(STM32_TIM7_NUMBER, STM32_IRQ_TIM7_PRIORITY);
#endif
}
 80022c0:	bf00      	nop
 80022c2:	4770      	bx	lr
	...

080022d0 <tim8_tim12_tim13_tim14_irq_init>:
#endif
#if defined(STM32_TIM8_IS_USED)
  nvicEnableVector(STM32_TIM8_CC_NUMBER,
                   STM32_IRQ_TIM8_CC_PRIORITY);
#endif
}
 80022d0:	bf00      	nop
 80022d2:	4770      	bx	lr
	...

080022e0 <irqInit>:
/**
 * @brief   Enables IRQ sources.
 *
 * @notapi
 */
void irqInit(void) {
 80022e0:	b508      	push	{r3, lr}

  exti0_irq_init();
 80022e2:	f7ff fed5 	bl	8002090 <exti0_irq_init>
  exti1_irq_init();
 80022e6:	f7ff fedb 	bl	80020a0 <exti1_irq_init>
  exti2_irq_init();
 80022ea:	f7ff fee1 	bl	80020b0 <exti2_irq_init>
  exti3_irq_init();
 80022ee:	f7ff fee7 	bl	80020c0 <exti3_irq_init>
  exti4_irq_init();
 80022f2:	f7ff feed 	bl	80020d0 <exti4_irq_init>
  exti5_9_irq_init();
 80022f6:	f7ff fef3 	bl	80020e0 <exti5_9_irq_init>
  exti10_15_irq_init();
 80022fa:	f7ff fef9 	bl	80020f0 <exti10_15_irq_init>
  exti16_irq_init();
 80022fe:	f7ff feff 	bl	8002100 <exti16_irq_init>
  exti17_irq_init();
 8002302:	f7ff ff05 	bl	8002110 <exti17_irq_init>
  exti18_irq_init();
 8002306:	f7ff ff0b 	bl	8002120 <exti18_irq_init>
  exti19_irq_init();
 800230a:	f7ff ff11 	bl	8002130 <exti19_irq_init>
  exti20_irq_init();
 800230e:	f7ff ff17 	bl	8002140 <exti20_irq_init>
  exti21_irq_init();
 8002312:	f7ff ff1d 	bl	8002150 <exti21_irq_init>
  exti22_irq_init();
 8002316:	f7ff ff23 	bl	8002160 <exti22_irq_init>

  tim1_tim9_tim10_tim11_irq_init();
 800231a:	f7ff ff99 	bl	8002250 <tim1_tim9_tim10_tim11_irq_init>
  tim2_irq_init();
 800231e:	f7ff ff9f 	bl	8002260 <tim2_irq_init>
  tim3_irq_init();
 8002322:	f7ff ffad 	bl	8002280 <tim3_irq_init>
  tim4_irq_init();
 8002326:	f7ff ffb3 	bl	8002290 <tim4_irq_init>
  tim5_irq_init();
 800232a:	f7ff ffb9 	bl	80022a0 <tim5_irq_init>
  tim6_irq_init();
 800232e:	f7ff ffbf 	bl	80022b0 <tim6_irq_init>
  tim7_irq_init();
 8002332:	f7ff ffc5 	bl	80022c0 <tim7_irq_init>
  tim8_tim12_tim13_tim14_irq_init();
 8002336:	f7ff ffcb 	bl	80022d0 <tim8_tim12_tim13_tim14_irq_init>

  usart1_irq_init();
 800233a:	f7ff ff19 	bl	8002170 <usart1_irq_init>
  usart2_irq_init();
 800233e:	f7ff ff2f 	bl	80021a0 <usart2_irq_init>
  usart3_irq_init();
 8002342:	f7ff ff45 	bl	80021d0 <usart3_irq_init>
  uart4_irq_init();
 8002346:	f7ff ff4b 	bl	80021e0 <uart4_irq_init>
  uart5_irq_init();
 800234a:	f7ff ff51 	bl	80021f0 <uart5_irq_init>
  usart6_irq_init();
 800234e:	f7ff ff57 	bl	8002200 <usart6_irq_init>
  uart7_irq_init();
 8002352:	f7ff ff5d 	bl	8002210 <uart7_irq_init>
  uart8_irq_init();
 8002356:	f7ff ff63 	bl	8002220 <uart8_irq_init>
  uart9_irq_init();
 800235a:	f7ff ff69 	bl	8002230 <uart9_irq_init>
  uart10_irq_init();
 800235e:	f7ff ff6f 	bl	8002240 <uart10_irq_init>
}
 8002362:	bf00      	nop
 8002364:	bd08      	pop	{r3, pc}
 8002366:	bf00      	nop
	...

08002370 <hal_lld_backup_domain_init>:
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8002370:	4b0d      	ldr	r3, [pc, #52]	; (80023a8 <hal_lld_backup_domain_init+0x38>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a0c      	ldr	r2, [pc, #48]	; (80023a8 <hal_lld_backup_domain_init+0x38>)
 8002376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800237a:	6013      	str	r3, [r2, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 800237c:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <hal_lld_backup_domain_init+0x3c>)
 800237e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002380:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002384:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002388:	d006      	beq.n	8002398 <hal_lld_backup_domain_init+0x28>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 800238a:	4b08      	ldr	r3, [pc, #32]	; (80023ac <hal_lld_backup_domain_init+0x3c>)
 800238c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002390:	671a      	str	r2, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 8002392:	4b06      	ldr	r3, [pc, #24]	; (80023ac <hal_lld_backup_domain_init+0x3c>)
 8002394:	2200      	movs	r2, #0
 8002396:	671a      	str	r2, [r3, #112]	; 0x70

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 8002398:	4b03      	ldr	r3, [pc, #12]	; (80023a8 <hal_lld_backup_domain_init+0x38>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	4a02      	ldr	r2, [pc, #8]	; (80023a8 <hal_lld_backup_domain_init+0x38>)
 800239e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80023a2:	6053      	str	r3, [r2, #4]
#endif /* STM32_BKPRAM_ENABLE */
}
 80023a4:	bf00      	nop
 80023a6:	4770      	bx	lr
 80023a8:	40007000 	.word	0x40007000
 80023ac:	40023800 	.word	0x40023800

080023b0 <hal_lld_init>:
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
 80023b0:	b508      	push	{r3, lr}

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 80023b2:	4b26      	ldr	r3, [pc, #152]	; (800244c <hal_lld_init+0x9c>)
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	4a25      	ldr	r2, [pc, #148]	; (800244c <hal_lld_init+0x9c>)
 80023b8:	f063 031f 	orn	r3, r3, #31
 80023bc:	6113      	str	r3, [r2, #16]
 80023be:	4b23      	ldr	r3, [pc, #140]	; (800244c <hal_lld_init+0x9c>)
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	4a22      	ldr	r2, [pc, #136]	; (800244c <hal_lld_init+0x9c>)
 80023c4:	f003 031f 	and.w	r3, r3, #31
 80023c8:	6113      	str	r3, [r2, #16]
 80023ca:	4b20      	ldr	r3, [pc, #128]	; (800244c <hal_lld_init+0x9c>)
 80023cc:	691b      	ldr	r3, [r3, #16]
#if !defined(STM32F410xx)
  rccResetAHB2(~0);
 80023ce:	4b1f      	ldr	r3, [pc, #124]	; (800244c <hal_lld_init+0x9c>)
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	4b1e      	ldr	r3, [pc, #120]	; (800244c <hal_lld_init+0x9c>)
 80023d4:	f04f 32ff 	mov.w	r2, #4294967295
 80023d8:	615a      	str	r2, [r3, #20]
 80023da:	4b1c      	ldr	r3, [pc, #112]	; (800244c <hal_lld_init+0x9c>)
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	4b1b      	ldr	r3, [pc, #108]	; (800244c <hal_lld_init+0x9c>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	615a      	str	r2, [r3, #20]
 80023e4:	4b19      	ldr	r3, [pc, #100]	; (800244c <hal_lld_init+0x9c>)
 80023e6:	695b      	ldr	r3, [r3, #20]
#endif
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 80023e8:	4b18      	ldr	r3, [pc, #96]	; (800244c <hal_lld_init+0x9c>)
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	4a17      	ldr	r2, [pc, #92]	; (800244c <hal_lld_init+0x9c>)
 80023ee:	f063 5380 	orn	r3, r3, #268435456	; 0x10000000
 80023f2:	6213      	str	r3, [r2, #32]
 80023f4:	4b15      	ldr	r3, [pc, #84]	; (800244c <hal_lld_init+0x9c>)
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	4a14      	ldr	r2, [pc, #80]	; (800244c <hal_lld_init+0x9c>)
 80023fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fe:	6213      	str	r3, [r2, #32]
 8002400:	4b12      	ldr	r3, [pc, #72]	; (800244c <hal_lld_init+0x9c>)
 8002402:	6a1b      	ldr	r3, [r3, #32]
  rccResetAPB2(~0);
 8002404:	4b11      	ldr	r3, [pc, #68]	; (800244c <hal_lld_init+0x9c>)
 8002406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002408:	4b10      	ldr	r3, [pc, #64]	; (800244c <hal_lld_init+0x9c>)
 800240a:	f04f 32ff 	mov.w	r2, #4294967295
 800240e:	625a      	str	r2, [r3, #36]	; 0x24
 8002410:	4b0e      	ldr	r3, [pc, #56]	; (800244c <hal_lld_init+0x9c>)
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002414:	4b0d      	ldr	r3, [pc, #52]	; (800244c <hal_lld_init+0x9c>)
 8002416:	2200      	movs	r2, #0
 8002418:	625a      	str	r2, [r3, #36]	; 0x24
 800241a:	4b0c      	ldr	r3, [pc, #48]	; (800244c <hal_lld_init+0x9c>)
 800241c:	6a5b      	ldr	r3, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(true);
 800241e:	4b0b      	ldr	r3, [pc, #44]	; (800244c <hal_lld_init+0x9c>)
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	4a0a      	ldr	r2, [pc, #40]	; (800244c <hal_lld_init+0x9c>)
 8002424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002428:	6413      	str	r3, [r2, #64]	; 0x40
 800242a:	4b08      	ldr	r3, [pc, #32]	; (800244c <hal_lld_init+0x9c>)
 800242c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800242e:	4a07      	ldr	r2, [pc, #28]	; (800244c <hal_lld_init+0x9c>)
 8002430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002434:	6613      	str	r3, [r2, #96]	; 0x60
 8002436:	4b05      	ldr	r3, [pc, #20]	; (800244c <hal_lld_init+0x9c>)
 8002438:	6e1b      	ldr	r3, [r3, #96]	; 0x60

  /* Initializes the backup domain.*/
  hal_lld_backup_domain_init();
 800243a:	f7ff ff99 	bl	8002370 <hal_lld_backup_domain_init>

  /* DMA subsystems initialization.*/
#if defined(STM32_DMA_REQUIRED)
  dmaInit();
 800243e:	f000 fb0f 	bl	8002a60 <dmaInit>
#endif

  /* IRQ subsystem initialization.*/
  irqInit();
 8002442:	f7ff ff4d 	bl	80022e0 <irqInit>

  /* Programmable voltage detector enable.*/
#if STM32_PVD_ENABLE
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */
}
 8002446:	bf00      	nop
 8002448:	bd08      	pop	{r3, pc}
 800244a:	bf00      	nop
 800244c:	40023800 	.word	0x40023800

08002450 <stm32_clock_init>:
 * @note    All the involved constants come from the file @p board.h.
 * @note    This function should be invoked just after the system reset.
 *
 * @special
 */
void stm32_clock_init(void) {
 8002450:	b082      	sub	sp, #8
#if !STM32_NO_INIT
  /* PWR clock enable.*/
#if defined(HAL_USE_RTC) && defined(RCC_APB1ENR_RTCAPBEN)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCAPBEN;
#else
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8002452:	4b49      	ldr	r3, [pc, #292]	; (8002578 <stm32_clock_init+0x128>)
 8002454:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002458:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 800245a:	4b48      	ldr	r3, [pc, #288]	; (800257c <stm32_clock_init+0x12c>)
 800245c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002460:	601a      	str	r2, [r3, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8002462:	4b45      	ldr	r3, [pc, #276]	; (8002578 <stm32_clock_init+0x128>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a44      	ldr	r2, [pc, #272]	; (8002578 <stm32_clock_init+0x128>)
 8002468:	f043 0301 	orr.w	r3, r3, #1
 800246c:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 800246e:	bf00      	nop
 8002470:	4b41      	ldr	r3, [pc, #260]	; (8002578 <stm32_clock_init+0x128>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d0f9      	beq.n	8002470 <stm32_clock_init+0x20>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 800247c:	4b3e      	ldr	r3, [pc, #248]	; (8002578 <stm32_clock_init+0x128>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	4a3d      	ldr	r2, [pc, #244]	; (8002578 <stm32_clock_init+0x128>)
 8002482:	f023 0303 	bic.w	r3, r3, #3
 8002486:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8002488:	bf00      	nop
 800248a:	4b3b      	ldr	r3, [pc, #236]	; (8002578 <stm32_clock_init+0x128>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 030c 	and.w	r3, r3, #12
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1f9      	bne.n	800248a <stm32_clock_init+0x3a>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8002496:	4b38      	ldr	r3, [pc, #224]	; (8002578 <stm32_clock_init+0x128>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a37      	ldr	r2, [pc, #220]	; (8002578 <stm32_clock_init+0x128>)
 800249c:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
 80024a0:	6013      	str	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 80024a2:	4b35      	ldr	r3, [pc, #212]	; (8002578 <stm32_clock_init+0x128>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	609a      	str	r2, [r3, #8]
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 80024a8:	4b33      	ldr	r3, [pc, #204]	; (8002578 <stm32_clock_init+0x128>)
 80024aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024ac:	4a32      	ldr	r2, [pc, #200]	; (8002578 <stm32_clock_init+0x128>)
 80024ae:	f043 0301 	orr.w	r3, r3, #1
 80024b2:	6753      	str	r3, [r2, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 80024b4:	bf00      	nop
 80024b6:	4b30      	ldr	r3, [pc, #192]	; (8002578 <stm32_clock_init+0x128>)
 80024b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d0f9      	beq.n	80024b6 <stm32_clock_init+0x66>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 80024c2:	4b2d      	ldr	r3, [pc, #180]	; (8002578 <stm32_clock_init+0x128>)
 80024c4:	4a2e      	ldr	r2, [pc, #184]	; (8002580 <stm32_clock_init+0x130>)
 80024c6:	605a      	str	r2, [r3, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 80024c8:	4b2b      	ldr	r3, [pc, #172]	; (8002578 <stm32_clock_init+0x128>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a2a      	ldr	r2, [pc, #168]	; (8002578 <stm32_clock_init+0x128>)
 80024ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024d2:	6013      	str	r3, [r2, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 80024d4:	bf00      	nop
 80024d6:	4b29      	ldr	r3, [pc, #164]	; (800257c <stm32_clock_init+0x12c>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f9      	beq.n	80024d6 <stm32_clock_init+0x86>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 80024e2:	bf00      	nop
 80024e4:	4b24      	ldr	r3, [pc, #144]	; (8002578 <stm32_clock_init+0x128>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d0f9      	beq.n	80024e4 <stm32_clock_init+0x94>
    ;
#endif /* STM32_ACTIVATE_PLLSAI */

  /* Other clock-related settings (dividers, MCO etc).*/
#if !defined(STM32F413xx)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 80024f0:	4b21      	ldr	r3, [pc, #132]	; (8002578 <stm32_clock_init+0x128>)
 80024f2:	4a24      	ldr	r2, [pc, #144]	; (8002584 <stm32_clock_init+0x134>)
 80024f4:	609a      	str	r2, [r3, #8]

#if STM32_HAS_RCC_DCKCFGR
  /* DCKCFGR register initialization, note, must take care of the _OFF
   pseudo settings.*/
  {
    uint32_t dckcfgr = 0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	9301      	str	r3, [sp, #4]
  /* Special case, in those devices STM32_CK48MSEL is located in the
     DCKCFGR register.*/
    dckcfgr |= STM32_CK48MSEL;
#endif
#if !defined(STM32F413xx)
    RCC->DCKCFGR = dckcfgr |
 80024fa:	4a1f      	ldr	r2, [pc, #124]	; (8002578 <stm32_clock_init+0x128>)
                   STM32_TIMPRE | STM32_PLLSAIDIVQ | STM32_PLLI2SDIVQ;
 80024fc:	9b01      	ldr	r3, [sp, #4]
 80024fe:	f043 0303 	orr.w	r3, r3, #3
    RCC->DCKCFGR = dckcfgr |
 8002502:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8002506:	4b20      	ldr	r3, [pc, #128]	; (8002588 <stm32_clock_init+0x138>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a20      	ldr	r2, [pc, #128]	; (800258c <stm32_clock_init+0x13c>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d109      	bne.n	8002524 <stm32_clock_init+0xd4>
 8002510:	4b1f      	ldr	r3, [pc, #124]	; (8002590 <stm32_clock_init+0x140>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a1f      	ldr	r2, [pc, #124]	; (8002594 <stm32_clock_init+0x144>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d104      	bne.n	8002524 <stm32_clock_init+0xd4>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 800251a:	4b1f      	ldr	r3, [pc, #124]	; (8002598 <stm32_clock_init+0x148>)
 800251c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	e003      	b.n	800252c <stm32_clock_init+0xdc>
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8002524:	4b1c      	ldr	r3, [pc, #112]	; (8002598 <stm32_clock_init+0x148>)
 8002526:	f240 7202 	movw	r2, #1794	; 0x702
 800252a:	601a      	str	r2, [r3, #0]
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif
  while ((FLASH->ACR & FLASH_ACR_LATENCY_Msk) !=
 800252c:	bf00      	nop
 800252e:	4b1a      	ldr	r3, [pc, #104]	; (8002598 <stm32_clock_init+0x148>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 030f 	and.w	r3, r3, #15
 8002536:	2b02      	cmp	r3, #2
 8002538:	d1f9      	bne.n	800252e <stm32_clock_init+0xde>
         (STM32_FLASHBITS & FLASH_ACR_LATENCY_Msk)) {
  }

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 800253a:	4b0f      	ldr	r3, [pc, #60]	; (8002578 <stm32_clock_init+0x128>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	4a0e      	ldr	r2, [pc, #56]	; (8002578 <stm32_clock_init+0x128>)
 8002540:	f043 0302 	orr.w	r3, r3, #2
 8002544:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8002546:	bf00      	nop
 8002548:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <stm32_clock_init+0x128>)
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f003 030c 	and.w	r3, r3, #12
 8002550:	2b08      	cmp	r3, #8
 8002552:	d1f9      	bne.n	8002548 <stm32_clock_init+0xf8>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 8002554:	4b08      	ldr	r3, [pc, #32]	; (8002578 <stm32_clock_init+0x128>)
 8002556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002558:	4a07      	ldr	r2, [pc, #28]	; (8002578 <stm32_clock_init+0x128>)
 800255a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800255e:	6453      	str	r3, [r2, #68]	; 0x44
 8002560:	4b05      	ldr	r3, [pc, #20]	; (8002578 <stm32_clock_init+0x128>)
 8002562:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002564:	4a04      	ldr	r2, [pc, #16]	; (8002578 <stm32_clock_init+0x128>)
 8002566:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800256a:	6653      	str	r3, [r2, #100]	; 0x64
 800256c:	4b02      	ldr	r3, [pc, #8]	; (8002578 <stm32_clock_init+0x128>)
 800256e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
 8002570:	bf00      	nop
 8002572:	b002      	add	sp, #8
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	40023800 	.word	0x40023800
 800257c:	40007000 	.word	0x40007000
 8002580:	07015410 	.word	0x07015410
 8002584:	38881000 	.word	0x38881000
 8002588:	e0042000 	.word	0xe0042000
 800258c:	20006411 	.word	0x20006411
 8002590:	e000ed00 	.word	0xe000ed00
 8002594:	410fc241 	.word	0x410fc241
 8002598:	40023c00 	.word	0x40023c00
 800259c:	00000000 	.word	0x00000000

080025a0 <Vector6C>:
/**
 * @brief   DMA1 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 80025a0:	b500      	push	{lr}
 80025a2:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80025a4:	4b0c      	ldr	r3, [pc, #48]	; (80025d8 <Vector6C+0x38>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 80025ac:	9301      	str	r3, [sp, #4]
  DMA1->LIFCR = flags << 0U;
 80025ae:	4a0a      	ldr	r2, [pc, #40]	; (80025d8 <Vector6C+0x38>)
 80025b0:	9b01      	ldr	r3, [sp, #4]
 80025b2:	6093      	str	r3, [r2, #8]
  if (dma.streams[0].func)
 80025b4:	4b09      	ldr	r3, [pc, #36]	; (80025dc <Vector6C+0x3c>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d006      	beq.n	80025ca <Vector6C+0x2a>
    dma.streams[0].func(dma.streams[0].param, flags);
 80025bc:	4b07      	ldr	r3, [pc, #28]	; (80025dc <Vector6C+0x3c>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	4a06      	ldr	r2, [pc, #24]	; (80025dc <Vector6C+0x3c>)
 80025c2:	6892      	ldr	r2, [r2, #8]
 80025c4:	9901      	ldr	r1, [sp, #4]
 80025c6:	4610      	mov	r0, r2
 80025c8:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 80025ca:	f002 fa51 	bl	8004a70 <__port_irq_epilogue>
}
 80025ce:	bf00      	nop
 80025d0:	b003      	add	sp, #12
 80025d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80025d6:	bf00      	nop
 80025d8:	40026000 	.word	0x40026000
 80025dc:	20000c80 	.word	0x20000c80

080025e0 <Vector70>:
/**
 * @brief   DMA1 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 80025e0:	b500      	push	{lr}
 80025e2:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80025e4:	4b0d      	ldr	r3, [pc, #52]	; (800261c <Vector70+0x3c>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	099b      	lsrs	r3, r3, #6
 80025ea:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 80025ee:	9301      	str	r3, [sp, #4]
  DMA1->LIFCR = flags << 6U;
 80025f0:	4a0a      	ldr	r2, [pc, #40]	; (800261c <Vector70+0x3c>)
 80025f2:	9b01      	ldr	r3, [sp, #4]
 80025f4:	019b      	lsls	r3, r3, #6
 80025f6:	6093      	str	r3, [r2, #8]
  if (dma.streams[1].func)
 80025f8:	4b09      	ldr	r3, [pc, #36]	; (8002620 <Vector70+0x40>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d006      	beq.n	800260e <Vector70+0x2e>
    dma.streams[1].func(dma.streams[1].param, flags);
 8002600:	4b07      	ldr	r3, [pc, #28]	; (8002620 <Vector70+0x40>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	4a06      	ldr	r2, [pc, #24]	; (8002620 <Vector70+0x40>)
 8002606:	6912      	ldr	r2, [r2, #16]
 8002608:	9901      	ldr	r1, [sp, #4]
 800260a:	4610      	mov	r0, r2
 800260c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 800260e:	f002 fa2f 	bl	8004a70 <__port_irq_epilogue>
}
 8002612:	bf00      	nop
 8002614:	b003      	add	sp, #12
 8002616:	f85d fb04 	ldr.w	pc, [sp], #4
 800261a:	bf00      	nop
 800261c:	40026000 	.word	0x40026000
 8002620:	20000c80 	.word	0x20000c80
	...

08002630 <Vector74>:
/**
 * @brief   DMA1 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8002630:	b500      	push	{lr}
 8002632:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002634:	4b0d      	ldr	r3, [pc, #52]	; (800266c <Vector74+0x3c>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	0c1b      	lsrs	r3, r3, #16
 800263a:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 800263e:	9301      	str	r3, [sp, #4]
  DMA1->LIFCR = flags << 16U;
 8002640:	4a0a      	ldr	r2, [pc, #40]	; (800266c <Vector74+0x3c>)
 8002642:	9b01      	ldr	r3, [sp, #4]
 8002644:	041b      	lsls	r3, r3, #16
 8002646:	6093      	str	r3, [r2, #8]
  if (dma.streams[2].func)
 8002648:	4b09      	ldr	r3, [pc, #36]	; (8002670 <Vector74+0x40>)
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d006      	beq.n	800265e <Vector74+0x2e>
    dma.streams[2].func(dma.streams[2].param, flags);
 8002650:	4b07      	ldr	r3, [pc, #28]	; (8002670 <Vector74+0x40>)
 8002652:	695b      	ldr	r3, [r3, #20]
 8002654:	4a06      	ldr	r2, [pc, #24]	; (8002670 <Vector74+0x40>)
 8002656:	6992      	ldr	r2, [r2, #24]
 8002658:	9901      	ldr	r1, [sp, #4]
 800265a:	4610      	mov	r0, r2
 800265c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 800265e:	f002 fa07 	bl	8004a70 <__port_irq_epilogue>
}
 8002662:	bf00      	nop
 8002664:	b003      	add	sp, #12
 8002666:	f85d fb04 	ldr.w	pc, [sp], #4
 800266a:	bf00      	nop
 800266c:	40026000 	.word	0x40026000
 8002670:	20000c80 	.word	0x20000c80
	...

08002680 <Vector78>:
/**
 * @brief   DMA1 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 8002680:	b500      	push	{lr}
 8002682:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002684:	4b0d      	ldr	r3, [pc, #52]	; (80026bc <Vector78+0x3c>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	0d9b      	lsrs	r3, r3, #22
 800268a:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 800268e:	9301      	str	r3, [sp, #4]
  DMA1->LIFCR = flags << 22U;
 8002690:	4a0a      	ldr	r2, [pc, #40]	; (80026bc <Vector78+0x3c>)
 8002692:	9b01      	ldr	r3, [sp, #4]
 8002694:	059b      	lsls	r3, r3, #22
 8002696:	6093      	str	r3, [r2, #8]
  if (dma.streams[3].func)
 8002698:	4b09      	ldr	r3, [pc, #36]	; (80026c0 <Vector78+0x40>)
 800269a:	69db      	ldr	r3, [r3, #28]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d006      	beq.n	80026ae <Vector78+0x2e>
    dma.streams[3].func(dma.streams[3].param, flags);
 80026a0:	4b07      	ldr	r3, [pc, #28]	; (80026c0 <Vector78+0x40>)
 80026a2:	69db      	ldr	r3, [r3, #28]
 80026a4:	4a06      	ldr	r2, [pc, #24]	; (80026c0 <Vector78+0x40>)
 80026a6:	6a12      	ldr	r2, [r2, #32]
 80026a8:	9901      	ldr	r1, [sp, #4]
 80026aa:	4610      	mov	r0, r2
 80026ac:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 80026ae:	f002 f9df 	bl	8004a70 <__port_irq_epilogue>
}
 80026b2:	bf00      	nop
 80026b4:	b003      	add	sp, #12
 80026b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80026ba:	bf00      	nop
 80026bc:	40026000 	.word	0x40026000
 80026c0:	20000c80 	.word	0x20000c80
	...

080026d0 <Vector7C>:
/**
 * @brief   DMA1 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 80026d0:	b500      	push	{lr}
 80026d2:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80026d4:	4b0c      	ldr	r3, [pc, #48]	; (8002708 <Vector7C+0x38>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 80026dc:	9301      	str	r3, [sp, #4]
  DMA1->HIFCR = flags << 0U;
 80026de:	4a0a      	ldr	r2, [pc, #40]	; (8002708 <Vector7C+0x38>)
 80026e0:	9b01      	ldr	r3, [sp, #4]
 80026e2:	60d3      	str	r3, [r2, #12]
  if (dma.streams[4].func)
 80026e4:	4b09      	ldr	r3, [pc, #36]	; (800270c <Vector7C+0x3c>)
 80026e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d006      	beq.n	80026fa <Vector7C+0x2a>
    dma.streams[4].func(dma.streams[4].param, flags);
 80026ec:	4b07      	ldr	r3, [pc, #28]	; (800270c <Vector7C+0x3c>)
 80026ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f0:	4a06      	ldr	r2, [pc, #24]	; (800270c <Vector7C+0x3c>)
 80026f2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80026f4:	9901      	ldr	r1, [sp, #4]
 80026f6:	4610      	mov	r0, r2
 80026f8:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 80026fa:	f002 f9b9 	bl	8004a70 <__port_irq_epilogue>
}
 80026fe:	bf00      	nop
 8002700:	b003      	add	sp, #12
 8002702:	f85d fb04 	ldr.w	pc, [sp], #4
 8002706:	bf00      	nop
 8002708:	40026000 	.word	0x40026000
 800270c:	20000c80 	.word	0x20000c80

08002710 <Vector80>:
/**
 * @brief   DMA1 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8002710:	b500      	push	{lr}
 8002712:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002714:	4b0d      	ldr	r3, [pc, #52]	; (800274c <Vector80+0x3c>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	099b      	lsrs	r3, r3, #6
 800271a:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 800271e:	9301      	str	r3, [sp, #4]
  DMA1->HIFCR = flags << 6U;
 8002720:	4a0a      	ldr	r2, [pc, #40]	; (800274c <Vector80+0x3c>)
 8002722:	9b01      	ldr	r3, [sp, #4]
 8002724:	019b      	lsls	r3, r3, #6
 8002726:	60d3      	str	r3, [r2, #12]
  if (dma.streams[5].func)
 8002728:	4b09      	ldr	r3, [pc, #36]	; (8002750 <Vector80+0x40>)
 800272a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272c:	2b00      	cmp	r3, #0
 800272e:	d006      	beq.n	800273e <Vector80+0x2e>
    dma.streams[5].func(dma.streams[5].param, flags);
 8002730:	4b07      	ldr	r3, [pc, #28]	; (8002750 <Vector80+0x40>)
 8002732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002734:	4a06      	ldr	r2, [pc, #24]	; (8002750 <Vector80+0x40>)
 8002736:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002738:	9901      	ldr	r1, [sp, #4]
 800273a:	4610      	mov	r0, r2
 800273c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 800273e:	f002 f997 	bl	8004a70 <__port_irq_epilogue>
}
 8002742:	bf00      	nop
 8002744:	b003      	add	sp, #12
 8002746:	f85d fb04 	ldr.w	pc, [sp], #4
 800274a:	bf00      	nop
 800274c:	40026000 	.word	0x40026000
 8002750:	20000c80 	.word	0x20000c80
	...

08002760 <Vector84>:
/**
 * @brief   DMA1 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8002760:	b500      	push	{lr}
 8002762:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002764:	4b0d      	ldr	r3, [pc, #52]	; (800279c <Vector84+0x3c>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	0c1b      	lsrs	r3, r3, #16
 800276a:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 800276e:	9301      	str	r3, [sp, #4]
  DMA1->HIFCR = flags << 16U;
 8002770:	4a0a      	ldr	r2, [pc, #40]	; (800279c <Vector84+0x3c>)
 8002772:	9b01      	ldr	r3, [sp, #4]
 8002774:	041b      	lsls	r3, r3, #16
 8002776:	60d3      	str	r3, [r2, #12]
  if (dma.streams[6].func)
 8002778:	4b09      	ldr	r3, [pc, #36]	; (80027a0 <Vector84+0x40>)
 800277a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800277c:	2b00      	cmp	r3, #0
 800277e:	d006      	beq.n	800278e <Vector84+0x2e>
    dma.streams[6].func(dma.streams[6].param, flags);
 8002780:	4b07      	ldr	r3, [pc, #28]	; (80027a0 <Vector84+0x40>)
 8002782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002784:	4a06      	ldr	r2, [pc, #24]	; (80027a0 <Vector84+0x40>)
 8002786:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002788:	9901      	ldr	r1, [sp, #4]
 800278a:	4610      	mov	r0, r2
 800278c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 800278e:	f002 f96f 	bl	8004a70 <__port_irq_epilogue>
}
 8002792:	bf00      	nop
 8002794:	b003      	add	sp, #12
 8002796:	f85d fb04 	ldr.w	pc, [sp], #4
 800279a:	bf00      	nop
 800279c:	40026000 	.word	0x40026000
 80027a0:	20000c80 	.word	0x20000c80
	...

080027b0 <VectorFC>:
/**
 * @brief   DMA1 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 80027b0:	b500      	push	{lr}
 80027b2:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80027b4:	4b0d      	ldr	r3, [pc, #52]	; (80027ec <VectorFC+0x3c>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	0d9b      	lsrs	r3, r3, #22
 80027ba:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 80027be:	9301      	str	r3, [sp, #4]
  DMA1->HIFCR = flags << 22U;
 80027c0:	4a0a      	ldr	r2, [pc, #40]	; (80027ec <VectorFC+0x3c>)
 80027c2:	9b01      	ldr	r3, [sp, #4]
 80027c4:	059b      	lsls	r3, r3, #22
 80027c6:	60d3      	str	r3, [r2, #12]
  if (dma.streams[7].func)
 80027c8:	4b09      	ldr	r3, [pc, #36]	; (80027f0 <VectorFC+0x40>)
 80027ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d006      	beq.n	80027de <VectorFC+0x2e>
    dma.streams[7].func(dma.streams[7].param, flags);
 80027d0:	4b07      	ldr	r3, [pc, #28]	; (80027f0 <VectorFC+0x40>)
 80027d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d4:	4a06      	ldr	r2, [pc, #24]	; (80027f0 <VectorFC+0x40>)
 80027d6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80027d8:	9901      	ldr	r1, [sp, #4]
 80027da:	4610      	mov	r0, r2
 80027dc:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 80027de:	f002 f947 	bl	8004a70 <__port_irq_epilogue>
}
 80027e2:	bf00      	nop
 80027e4:	b003      	add	sp, #12
 80027e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80027ea:	bf00      	nop
 80027ec:	40026000 	.word	0x40026000
 80027f0:	20000c80 	.word	0x20000c80
	...

08002800 <Vector120>:
/**
 * @brief   DMA2 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 8002800:	b500      	push	{lr}
 8002802:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002804:	4b0c      	ldr	r3, [pc, #48]	; (8002838 <Vector120+0x38>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 800280c:	9301      	str	r3, [sp, #4]
  DMA2->LIFCR = flags << 0U;
 800280e:	4a0a      	ldr	r2, [pc, #40]	; (8002838 <Vector120+0x38>)
 8002810:	9b01      	ldr	r3, [sp, #4]
 8002812:	6093      	str	r3, [r2, #8]
  if (dma.streams[8].func)
 8002814:	4b09      	ldr	r3, [pc, #36]	; (800283c <Vector120+0x3c>)
 8002816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002818:	2b00      	cmp	r3, #0
 800281a:	d006      	beq.n	800282a <Vector120+0x2a>
    dma.streams[8].func(dma.streams[8].param, flags);
 800281c:	4b07      	ldr	r3, [pc, #28]	; (800283c <Vector120+0x3c>)
 800281e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002820:	4a06      	ldr	r2, [pc, #24]	; (800283c <Vector120+0x3c>)
 8002822:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002824:	9901      	ldr	r1, [sp, #4]
 8002826:	4610      	mov	r0, r2
 8002828:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 800282a:	f002 f921 	bl	8004a70 <__port_irq_epilogue>
}
 800282e:	bf00      	nop
 8002830:	b003      	add	sp, #12
 8002832:	f85d fb04 	ldr.w	pc, [sp], #4
 8002836:	bf00      	nop
 8002838:	40026400 	.word	0x40026400
 800283c:	20000c80 	.word	0x20000c80

08002840 <Vector124>:
/**
 * @brief   DMA2 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 8002840:	b500      	push	{lr}
 8002842:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002844:	4b0d      	ldr	r3, [pc, #52]	; (800287c <Vector124+0x3c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	099b      	lsrs	r3, r3, #6
 800284a:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 800284e:	9301      	str	r3, [sp, #4]
  DMA2->LIFCR = flags << 6U;
 8002850:	4a0a      	ldr	r2, [pc, #40]	; (800287c <Vector124+0x3c>)
 8002852:	9b01      	ldr	r3, [sp, #4]
 8002854:	019b      	lsls	r3, r3, #6
 8002856:	6093      	str	r3, [r2, #8]
  if (dma.streams[9].func)
 8002858:	4b09      	ldr	r3, [pc, #36]	; (8002880 <Vector124+0x40>)
 800285a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285c:	2b00      	cmp	r3, #0
 800285e:	d006      	beq.n	800286e <Vector124+0x2e>
    dma.streams[9].func(dma.streams[9].param, flags);
 8002860:	4b07      	ldr	r3, [pc, #28]	; (8002880 <Vector124+0x40>)
 8002862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002864:	4a06      	ldr	r2, [pc, #24]	; (8002880 <Vector124+0x40>)
 8002866:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002868:	9901      	ldr	r1, [sp, #4]
 800286a:	4610      	mov	r0, r2
 800286c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 800286e:	f002 f8ff 	bl	8004a70 <__port_irq_epilogue>
}
 8002872:	bf00      	nop
 8002874:	b003      	add	sp, #12
 8002876:	f85d fb04 	ldr.w	pc, [sp], #4
 800287a:	bf00      	nop
 800287c:	40026400 	.word	0x40026400
 8002880:	20000c80 	.word	0x20000c80
	...

08002890 <Vector128>:
/**
 * @brief   DMA2 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 8002890:	b500      	push	{lr}
 8002892:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002894:	4b0d      	ldr	r3, [pc, #52]	; (80028cc <Vector128+0x3c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	0c1b      	lsrs	r3, r3, #16
 800289a:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 800289e:	9301      	str	r3, [sp, #4]
  DMA2->LIFCR = flags << 16U;
 80028a0:	4a0a      	ldr	r2, [pc, #40]	; (80028cc <Vector128+0x3c>)
 80028a2:	9b01      	ldr	r3, [sp, #4]
 80028a4:	041b      	lsls	r3, r3, #16
 80028a6:	6093      	str	r3, [r2, #8]
  if (dma.streams[10].func)
 80028a8:	4b09      	ldr	r3, [pc, #36]	; (80028d0 <Vector128+0x40>)
 80028aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d006      	beq.n	80028be <Vector128+0x2e>
    dma.streams[10].func(dma.streams[10].param, flags);
 80028b0:	4b07      	ldr	r3, [pc, #28]	; (80028d0 <Vector128+0x40>)
 80028b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b4:	4a06      	ldr	r2, [pc, #24]	; (80028d0 <Vector128+0x40>)
 80028b6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80028b8:	9901      	ldr	r1, [sp, #4]
 80028ba:	4610      	mov	r0, r2
 80028bc:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 80028be:	f002 f8d7 	bl	8004a70 <__port_irq_epilogue>
}
 80028c2:	bf00      	nop
 80028c4:	b003      	add	sp, #12
 80028c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80028ca:	bf00      	nop
 80028cc:	40026400 	.word	0x40026400
 80028d0:	20000c80 	.word	0x20000c80
	...

080028e0 <Vector12C>:
/**
 * @brief   DMA2 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 80028e0:	b500      	push	{lr}
 80028e2:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80028e4:	4b0d      	ldr	r3, [pc, #52]	; (800291c <Vector12C+0x3c>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	0d9b      	lsrs	r3, r3, #22
 80028ea:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 80028ee:	9301      	str	r3, [sp, #4]
  DMA2->LIFCR = flags << 22U;
 80028f0:	4a0a      	ldr	r2, [pc, #40]	; (800291c <Vector12C+0x3c>)
 80028f2:	9b01      	ldr	r3, [sp, #4]
 80028f4:	059b      	lsls	r3, r3, #22
 80028f6:	6093      	str	r3, [r2, #8]
  if (dma.streams[11].func)
 80028f8:	4b09      	ldr	r3, [pc, #36]	; (8002920 <Vector12C+0x40>)
 80028fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d006      	beq.n	800290e <Vector12C+0x2e>
    dma.streams[11].func(dma.streams[11].param, flags);
 8002900:	4b07      	ldr	r3, [pc, #28]	; (8002920 <Vector12C+0x40>)
 8002902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002904:	4a06      	ldr	r2, [pc, #24]	; (8002920 <Vector12C+0x40>)
 8002906:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8002908:	9901      	ldr	r1, [sp, #4]
 800290a:	4610      	mov	r0, r2
 800290c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 800290e:	f002 f8af 	bl	8004a70 <__port_irq_epilogue>
}
 8002912:	bf00      	nop
 8002914:	b003      	add	sp, #12
 8002916:	f85d fb04 	ldr.w	pc, [sp], #4
 800291a:	bf00      	nop
 800291c:	40026400 	.word	0x40026400
 8002920:	20000c80 	.word	0x20000c80
	...

08002930 <Vector130>:
/**
 * @brief   DMA2 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 8002930:	b500      	push	{lr}
 8002932:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002934:	4b0c      	ldr	r3, [pc, #48]	; (8002968 <Vector130+0x38>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 800293c:	9301      	str	r3, [sp, #4]
  DMA2->HIFCR = flags << 0U;
 800293e:	4a0a      	ldr	r2, [pc, #40]	; (8002968 <Vector130+0x38>)
 8002940:	9b01      	ldr	r3, [sp, #4]
 8002942:	60d3      	str	r3, [r2, #12]
  if (dma.streams[12].func)
 8002944:	4b09      	ldr	r3, [pc, #36]	; (800296c <Vector130+0x3c>)
 8002946:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002948:	2b00      	cmp	r3, #0
 800294a:	d006      	beq.n	800295a <Vector130+0x2a>
    dma.streams[12].func(dma.streams[12].param, flags);
 800294c:	4b07      	ldr	r3, [pc, #28]	; (800296c <Vector130+0x3c>)
 800294e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002950:	4a06      	ldr	r2, [pc, #24]	; (800296c <Vector130+0x3c>)
 8002952:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002954:	9901      	ldr	r1, [sp, #4]
 8002956:	4610      	mov	r0, r2
 8002958:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 800295a:	f002 f889 	bl	8004a70 <__port_irq_epilogue>
}
 800295e:	bf00      	nop
 8002960:	b003      	add	sp, #12
 8002962:	f85d fb04 	ldr.w	pc, [sp], #4
 8002966:	bf00      	nop
 8002968:	40026400 	.word	0x40026400
 800296c:	20000c80 	.word	0x20000c80

08002970 <Vector150>:
/**
 * @brief   DMA2 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 8002970:	b500      	push	{lr}
 8002972:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002974:	4b0d      	ldr	r3, [pc, #52]	; (80029ac <Vector150+0x3c>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	099b      	lsrs	r3, r3, #6
 800297a:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 800297e:	9301      	str	r3, [sp, #4]
  DMA2->HIFCR = flags << 6U;
 8002980:	4a0a      	ldr	r2, [pc, #40]	; (80029ac <Vector150+0x3c>)
 8002982:	9b01      	ldr	r3, [sp, #4]
 8002984:	019b      	lsls	r3, r3, #6
 8002986:	60d3      	str	r3, [r2, #12]
  if (dma.streams[13].func)
 8002988:	4b09      	ldr	r3, [pc, #36]	; (80029b0 <Vector150+0x40>)
 800298a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800298c:	2b00      	cmp	r3, #0
 800298e:	d006      	beq.n	800299e <Vector150+0x2e>
    dma.streams[13].func(dma.streams[13].param, flags);
 8002990:	4b07      	ldr	r3, [pc, #28]	; (80029b0 <Vector150+0x40>)
 8002992:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002994:	4a06      	ldr	r2, [pc, #24]	; (80029b0 <Vector150+0x40>)
 8002996:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002998:	9901      	ldr	r1, [sp, #4]
 800299a:	4610      	mov	r0, r2
 800299c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 800299e:	f002 f867 	bl	8004a70 <__port_irq_epilogue>
}
 80029a2:	bf00      	nop
 80029a4:	b003      	add	sp, #12
 80029a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80029aa:	bf00      	nop
 80029ac:	40026400 	.word	0x40026400
 80029b0:	20000c80 	.word	0x20000c80
	...

080029c0 <Vector154>:
/**
 * @brief   DMA2 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 80029c0:	b500      	push	{lr}
 80029c2:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80029c4:	4b0d      	ldr	r3, [pc, #52]	; (80029fc <Vector154+0x3c>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	0c1b      	lsrs	r3, r3, #16
 80029ca:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 80029ce:	9301      	str	r3, [sp, #4]
  DMA2->HIFCR = flags << 16U;
 80029d0:	4a0a      	ldr	r2, [pc, #40]	; (80029fc <Vector154+0x3c>)
 80029d2:	9b01      	ldr	r3, [sp, #4]
 80029d4:	041b      	lsls	r3, r3, #16
 80029d6:	60d3      	str	r3, [r2, #12]
  if (dma.streams[14].func)
 80029d8:	4b09      	ldr	r3, [pc, #36]	; (8002a00 <Vector154+0x40>)
 80029da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d006      	beq.n	80029ee <Vector154+0x2e>
    dma.streams[14].func(dma.streams[14].param, flags);
 80029e0:	4b07      	ldr	r3, [pc, #28]	; (8002a00 <Vector154+0x40>)
 80029e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029e4:	4a06      	ldr	r2, [pc, #24]	; (8002a00 <Vector154+0x40>)
 80029e6:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80029e8:	9901      	ldr	r1, [sp, #4]
 80029ea:	4610      	mov	r0, r2
 80029ec:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 80029ee:	f002 f83f 	bl	8004a70 <__port_irq_epilogue>
}
 80029f2:	bf00      	nop
 80029f4:	b003      	add	sp, #12
 80029f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80029fa:	bf00      	nop
 80029fc:	40026400 	.word	0x40026400
 8002a00:	20000c80 	.word	0x20000c80
	...

08002a10 <Vector158>:
/**
 * @brief   DMA2 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 8002a10:	b500      	push	{lr}
 8002a12:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002a14:	4b0d      	ldr	r3, [pc, #52]	; (8002a4c <Vector158+0x3c>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	0d9b      	lsrs	r3, r3, #22
 8002a1a:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8002a1e:	9301      	str	r3, [sp, #4]
  DMA2->HIFCR = flags << 22U;
 8002a20:	4a0a      	ldr	r2, [pc, #40]	; (8002a4c <Vector158+0x3c>)
 8002a22:	9b01      	ldr	r3, [sp, #4]
 8002a24:	059b      	lsls	r3, r3, #22
 8002a26:	60d3      	str	r3, [r2, #12]
  if (dma.streams[15].func)
 8002a28:	4b09      	ldr	r3, [pc, #36]	; (8002a50 <Vector158+0x40>)
 8002a2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d007      	beq.n	8002a40 <Vector158+0x30>
    dma.streams[15].func(dma.streams[15].param, flags);
 8002a30:	4b07      	ldr	r3, [pc, #28]	; (8002a50 <Vector158+0x40>)
 8002a32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a34:	4a06      	ldr	r2, [pc, #24]	; (8002a50 <Vector158+0x40>)
 8002a36:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8002a3a:	9901      	ldr	r1, [sp, #4]
 8002a3c:	4610      	mov	r0, r2
 8002a3e:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8002a40:	f002 f816 	bl	8004a70 <__port_irq_epilogue>
}
 8002a44:	bf00      	nop
 8002a46:	b003      	add	sp, #12
 8002a48:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a4c:	40026400 	.word	0x40026400
 8002a50:	20000c80 	.word	0x20000c80
	...

08002a60 <dmaInit>:
/**
 * @brief   STM32 DMA helper initialization.
 *
 * @init
 */
void dmaInit(void) {
 8002a60:	b082      	sub	sp, #8
  unsigned i;

  dma.allocated_mask = 0U;
 8002a62:	4b17      	ldr	r3, [pc, #92]	; (8002ac0 <dmaInit+0x60>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8002a68:	2300      	movs	r3, #0
 8002a6a:	9301      	str	r3, [sp, #4]
 8002a6c:	e012      	b.n	8002a94 <dmaInit+0x34>
    _stm32_dma_streams[i].stream->CR = STM32_DMA_CR_RESET_VALUE;
 8002a6e:	4915      	ldr	r1, [pc, #84]	; (8002ac4 <dmaInit+0x64>)
 8002a70:	9a01      	ldr	r2, [sp, #4]
 8002a72:	4613      	mov	r3, r2
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	4413      	add	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	440b      	add	r3, r1
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	601a      	str	r2, [r3, #0]
    dma.streams[i].func = NULL;
 8002a82:	4a0f      	ldr	r2, [pc, #60]	; (8002ac0 <dmaInit+0x60>)
 8002a84:	9b01      	ldr	r3, [sp, #4]
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	4413      	add	r3, r2
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8002a8e:	9b01      	ldr	r3, [sp, #4]
 8002a90:	3301      	adds	r3, #1
 8002a92:	9301      	str	r3, [sp, #4]
 8002a94:	9b01      	ldr	r3, [sp, #4]
 8002a96:	2b0f      	cmp	r3, #15
 8002a98:	d9e9      	bls.n	8002a6e <dmaInit+0xe>
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
 8002a9a:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <dmaInit+0x68>)
 8002a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002aa0:	609a      	str	r2, [r3, #8]
  DMA1->HIFCR = 0xFFFFFFFFU;
 8002aa2:	4b09      	ldr	r3, [pc, #36]	; (8002ac8 <dmaInit+0x68>)
 8002aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8002aa8:	60da      	str	r2, [r3, #12]
  DMA2->LIFCR = 0xFFFFFFFFU;
 8002aaa:	4b08      	ldr	r3, [pc, #32]	; (8002acc <dmaInit+0x6c>)
 8002aac:	f04f 32ff 	mov.w	r2, #4294967295
 8002ab0:	609a      	str	r2, [r3, #8]
  DMA2->HIFCR = 0xFFFFFFFFU;
 8002ab2:	4b06      	ldr	r3, [pc, #24]	; (8002acc <dmaInit+0x6c>)
 8002ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ab8:	60da      	str	r2, [r3, #12]
}
 8002aba:	bf00      	nop
 8002abc:	b002      	add	sp, #8
 8002abe:	4770      	bx	lr
 8002ac0:	20000c80 	.word	0x20000c80
 8002ac4:	08006abc 	.word	0x08006abc
 8002ac8:	40026000 	.word	0x40026000
 8002acc:	40026400 	.word	0x40026400

08002ad0 <_pal_lld_init>:

  for (i = 0; i < 16; i++) {
    _pal_init_event(i);
  }
#endif
}
 8002ad0:	bf00      	nop
 8002ad2:	4770      	bx	lr
	...

08002ae0 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 8002ae0:	b08e      	sub	sp, #56	; 0x38
 8002ae2:	9003      	str	r0, [sp, #12]
 8002ae4:	9102      	str	r1, [sp, #8]
 8002ae6:	9201      	str	r2, [sp, #4]

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8002ae8:	9b01      	ldr	r3, [sp, #4]
 8002aea:	f003 0303 	and.w	r3, r3, #3
 8002aee:	930d      	str	r3, [sp, #52]	; 0x34
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
 8002af0:	9b01      	ldr	r3, [sp, #4]
 8002af2:	089b      	lsrs	r3, r3, #2
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	930c      	str	r3, [sp, #48]	; 0x30
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 8002afa:	9b01      	ldr	r3, [sp, #4]
 8002afc:	08db      	lsrs	r3, r3, #3
 8002afe:	f003 0303 	and.w	r3, r3, #3
 8002b02:	930b      	str	r3, [sp, #44]	; 0x2c
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
 8002b04:	9b01      	ldr	r3, [sp, #4]
 8002b06:	095b      	lsrs	r3, r3, #5
 8002b08:	f003 0303 	and.w	r3, r3, #3
 8002b0c:	930a      	str	r3, [sp, #40]	; 0x28
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 8002b0e:	9b01      	ldr	r3, [sp, #4]
 8002b10:	09db      	lsrs	r3, r3, #7
 8002b12:	f003 030f 	and.w	r3, r3, #15
 8002b16:	9308      	str	r3, [sp, #32]
  uint32_t bit     = 0;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	9309      	str	r3, [sp, #36]	; 0x24
  while (true) {
    if ((mask & 1) != 0) {
 8002b1c:	9b02      	ldr	r3, [sp, #8]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d079      	beq.n	8002c1a <_pal_lld_setgroupmode+0x13a>
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 8002b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	9a08      	ldr	r2, [sp, #32]
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	9307      	str	r3, [sp, #28]
      m1 = 1 << bit;
 8002b36:	2201      	movs	r2, #1
 8002b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	9306      	str	r3, [sp, #24]
      m2 = 3 << (bit * 2);
 8002b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	2203      	movs	r2, #3
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	9305      	str	r3, [sp, #20]
      m4 = 15 << ((bit & 7) * 4);
 8002b4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	220f      	movs	r2, #15
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	9304      	str	r3, [sp, #16]
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8002b5c:	9b03      	ldr	r3, [sp, #12]
 8002b5e:	685a      	ldr	r2, [r3, #4]
 8002b60:	9b06      	ldr	r3, [sp, #24]
 8002b62:	43db      	mvns	r3, r3
 8002b64:	401a      	ands	r2, r3
 8002b66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002b68:	431a      	orrs	r2, r3
 8002b6a:	9b03      	ldr	r3, [sp, #12]
 8002b6c:	605a      	str	r2, [r3, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8002b6e:	9b03      	ldr	r3, [sp, #12]
 8002b70:	689a      	ldr	r2, [r3, #8]
 8002b72:	9b05      	ldr	r3, [sp, #20]
 8002b74:	43db      	mvns	r3, r3
 8002b76:	401a      	ands	r2, r3
 8002b78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	9b03      	ldr	r3, [sp, #12]
 8002b7e:	609a      	str	r2, [r3, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8002b80:	9b03      	ldr	r3, [sp, #12]
 8002b82:	68da      	ldr	r2, [r3, #12]
 8002b84:	9b05      	ldr	r3, [sp, #20]
 8002b86:	43db      	mvns	r3, r3
 8002b88:	401a      	ands	r2, r3
 8002b8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	9b03      	ldr	r3, [sp, #12]
 8002b90:	60da      	str	r2, [r3, #12]
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8002b92:	9b01      	ldr	r3, [sp, #4]
 8002b94:	f003 0303 	and.w	r3, r3, #3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d11f      	bne.n	8002bdc <_pal_lld_setgroupmode+0xfc>
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
 8002b9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b9e:	2b07      	cmp	r3, #7
 8002ba0:	d809      	bhi.n	8002bb6 <_pal_lld_setgroupmode+0xd6>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8002ba2:	9b03      	ldr	r3, [sp, #12]
 8002ba4:	6a1a      	ldr	r2, [r3, #32]
 8002ba6:	9b04      	ldr	r3, [sp, #16]
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	401a      	ands	r2, r3
 8002bac:	9b07      	ldr	r3, [sp, #28]
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	9b03      	ldr	r3, [sp, #12]
 8002bb2:	621a      	str	r2, [r3, #32]
 8002bb4:	e008      	b.n	8002bc8 <_pal_lld_setgroupmode+0xe8>
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8002bb6:	9b03      	ldr	r3, [sp, #12]
 8002bb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bba:	9b04      	ldr	r3, [sp, #16]
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	401a      	ands	r2, r3
 8002bc0:	9b07      	ldr	r3, [sp, #28]
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	9b03      	ldr	r3, [sp, #12]
 8002bc6:	625a      	str	r2, [r3, #36]	; 0x24
        port->MODER   = (port->MODER & ~m2) | moder;
 8002bc8:	9b03      	ldr	r3, [sp, #12]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	9b05      	ldr	r3, [sp, #20]
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	401a      	ands	r2, r3
 8002bd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	9b03      	ldr	r3, [sp, #12]
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	e01e      	b.n	8002c1a <_pal_lld_setgroupmode+0x13a>
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 8002bdc:	9b03      	ldr	r3, [sp, #12]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	9b05      	ldr	r3, [sp, #20]
 8002be2:	43db      	mvns	r3, r3
 8002be4:	401a      	ands	r2, r3
 8002be6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002be8:	431a      	orrs	r2, r3
 8002bea:	9b03      	ldr	r3, [sp, #12]
 8002bec:	601a      	str	r2, [r3, #0]
        if (bit < 8)
 8002bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bf0:	2b07      	cmp	r3, #7
 8002bf2:	d809      	bhi.n	8002c08 <_pal_lld_setgroupmode+0x128>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8002bf4:	9b03      	ldr	r3, [sp, #12]
 8002bf6:	6a1a      	ldr	r2, [r3, #32]
 8002bf8:	9b04      	ldr	r3, [sp, #16]
 8002bfa:	43db      	mvns	r3, r3
 8002bfc:	401a      	ands	r2, r3
 8002bfe:	9b07      	ldr	r3, [sp, #28]
 8002c00:	431a      	orrs	r2, r3
 8002c02:	9b03      	ldr	r3, [sp, #12]
 8002c04:	621a      	str	r2, [r3, #32]
 8002c06:	e008      	b.n	8002c1a <_pal_lld_setgroupmode+0x13a>
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8002c08:	9b03      	ldr	r3, [sp, #12]
 8002c0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c0c:	9b04      	ldr	r3, [sp, #16]
 8002c0e:	43db      	mvns	r3, r3
 8002c10:	401a      	ands	r2, r3
 8002c12:	9b07      	ldr	r3, [sp, #28]
 8002c14:	431a      	orrs	r2, r3
 8002c16:	9b03      	ldr	r3, [sp, #12]
 8002c18:	625a      	str	r2, [r3, #36]	; 0x24
      }
    }
    mask >>= 1;
 8002c1a:	9b02      	ldr	r3, [sp, #8]
 8002c1c:	085b      	lsrs	r3, r3, #1
 8002c1e:	9302      	str	r3, [sp, #8]
    if (!mask)
 8002c20:	9b02      	ldr	r3, [sp, #8]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00f      	beq.n	8002c46 <_pal_lld_setgroupmode+0x166>
      return;
    otyper <<= 1;
 8002c26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	930c      	str	r3, [sp, #48]	; 0x30
    ospeedr <<= 2;
 8002c2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	930b      	str	r3, [sp, #44]	; 0x2c
    pupdr <<= 2;
 8002c32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	930a      	str	r3, [sp, #40]	; 0x28
    moder <<= 2;
 8002c38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	930d      	str	r3, [sp, #52]	; 0x34
    bit++;
 8002c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c40:	3301      	adds	r3, #1
 8002c42:	9309      	str	r3, [sp, #36]	; 0x24
    if ((mask & 1) != 0) {
 8002c44:	e76a      	b.n	8002b1c <_pal_lld_setgroupmode+0x3c>
      return;
 8002c46:	bf00      	nop
  }
}
 8002c48:	b00e      	add	sp, #56	; 0x38
 8002c4a:	4770      	bx	lr
 8002c4c:	0000      	movs	r0, r0
	...

08002c50 <chSysLockFromISR.lto_priv.0>:
 *          not be limited to disabling interrupts.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysLockFromISR(void) {
 8002c50:	b082      	sub	sp, #8
 8002c52:	2320      	movs	r3, #32
 8002c54:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002c56:	9b01      	ldr	r3, [sp, #4]
 8002c58:	f383 8811 	msr	BASEPRI, r3
}
 8002c5c:	bf00      	nop
}
 8002c5e:	bf00      	nop
 * @note    Same as @p port_lock() in this port.
 */
__STATIC_FORCEINLINE void port_lock_from_isr(void) {

  port_lock();
}
 8002c60:	bf00      	nop

  port_lock_from_isr();
  __stats_start_measure_crit_isr();
  __dbg_check_lock_from_isr();
}
 8002c62:	bf00      	nop
 8002c64:	b002      	add	sp, #8
 8002c66:	4770      	bx	lr
	...

08002c70 <chSysUnlockFromISR.lto_priv.0>:
 *          not be limited to enabling interrupts.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {
 8002c70:	b082      	sub	sp, #8
 8002c72:	2300      	movs	r3, #0
 8002c74:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002c76:	9b01      	ldr	r3, [sp, #4]
 8002c78:	f383 8811 	msr	BASEPRI, r3
}
 8002c7c:	bf00      	nop
}
 8002c7e:	bf00      	nop
 * @note    Same as @p port_unlock() in this port.
 */
__STATIC_FORCEINLINE void port_unlock_from_isr(void) {

  port_unlock();
}
 8002c80:	bf00      	nop

  __dbg_check_unlock_from_isr();
  __stats_stop_measure_crit_isr();
  port_unlock_from_isr();
}
 8002c82:	bf00      	nop
 8002c84:	b002      	add	sp, #8
 8002c86:	4770      	bx	lr
	...

08002c90 <osalSysLockFromISR.lto_priv.0>:
static inline void osalSysLockFromISR(void) {
 8002c90:	b508      	push	{r3, lr}
  chSysLockFromISR();
 8002c92:	f7ff ffdd 	bl	8002c50 <chSysLockFromISR.lto_priv.0>
}
 8002c96:	bf00      	nop
 8002c98:	bd08      	pop	{r3, pc}
 8002c9a:	bf00      	nop
 8002c9c:	0000      	movs	r0, r0
	...

08002ca0 <osalSysUnlockFromISR.lto_priv.0>:
static inline void osalSysUnlockFromISR(void) {
 8002ca0:	b508      	push	{r3, lr}
  chSysUnlockFromISR();
 8002ca2:	f7ff ffe5 	bl	8002c70 <chSysUnlockFromISR.lto_priv.0>
}
 8002ca6:	bf00      	nop
 8002ca8:	bd08      	pop	{r3, pc}
 8002caa:	bf00      	nop
 8002cac:	0000      	movs	r0, r0
	...

08002cb0 <osalOsTimerHandlerI>:
static inline void osalOsTimerHandlerI(void) {
 8002cb0:	b508      	push	{r3, lr}
  chSysTimerHandlerI();
 8002cb2:	f000 fc1d 	bl	80034f0 <chSysTimerHandlerI>
}
 8002cb6:	bf00      	nop
 8002cb8:	bd08      	pop	{r3, pc}
 8002cba:	bf00      	nop
 8002cbc:	0000      	movs	r0, r0
	...

08002cc0 <st_lld_init>:
                "clock rounding error");
  osalDbgAssert(((ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1U) < 0x10000,
                "clock prescaler overflow");

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8002cc0:	4b1b      	ldr	r3, [pc, #108]	; (8002d30 <st_lld_init+0x70>)
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc4:	4a1a      	ldr	r2, [pc, #104]	; (8002d30 <st_lld_init+0x70>)
 8002cc6:	f043 0301 	orr.w	r3, r3, #1
 8002cca:	6413      	str	r3, [r2, #64]	; 0x40
 8002ccc:	4b18      	ldr	r3, [pc, #96]	; (8002d30 <st_lld_init+0x70>)
 8002cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cd0:	4a17      	ldr	r2, [pc, #92]	; (8002d30 <st_lld_init+0x70>)
 8002cd2:	f043 0301 	orr.w	r3, r3, #1
 8002cd6:	6613      	str	r3, [r2, #96]	; 0x60
 8002cd8:	4b15      	ldr	r3, [pc, #84]	; (8002d30 <st_lld_init+0x70>)
 8002cda:	6e1b      	ldr	r3, [r3, #96]	; 0x60

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8002cdc:	4b15      	ldr	r3, [pc, #84]	; (8002d34 <st_lld_init+0x74>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	4a14      	ldr	r2, [pc, #80]	; (8002d34 <st_lld_init+0x74>)
 8002ce2:	f043 0301 	orr.w	r3, r3, #1
 8002ce6:	6093      	str	r3, [r2, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8002ce8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002cec:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8002cf0:	629a      	str	r2, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8002cf2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8002cfa:	62da      	str	r2, [r3, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 8002cfc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d00:	2200      	movs	r2, #0
 8002d02:	619a      	str	r2, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8002d04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d08:	2200      	movs	r2, #0
 8002d0a:	635a      	str	r2, [r3, #52]	; 0x34
  STM32_ST_TIM->CCR[2] = 0;
#endif
#if ST_LLD_NUM_ALARMS > 3
  STM32_ST_TIM->CCR[3] = 0;
#endif
  STM32_ST_TIM->DIER   = 0;
 8002d0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d10:	2200      	movs	r2, #0
 8002d12:	60da      	str	r2, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 8002d14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d18:	2200      	movs	r2, #0
 8002d1a:	605a      	str	r2, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8002d1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d20:	2201      	movs	r2, #1
 8002d22:	615a      	str	r2, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8002d24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d28:	2201      	movs	r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC */
}
 8002d2c:	bf00      	nop
 8002d2e:	4770      	bx	lr
 8002d30:	40023800 	.word	0x40023800
 8002d34:	e0042000 	.word	0xe0042000
	...

08002d40 <st_lld_serve_interrupt>:

/**
 * @brief   IRQ handling code.
 */
void st_lld_serve_interrupt(void) {
 8002d40:	b500      	push	{lr}
 8002d42:	b083      	sub	sp, #12
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;
 8002d44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d48:	9301      	str	r3, [sp, #4]

  sr  = timp->SR;
 8002d4a:	9b01      	ldr	r3, [sp, #4]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	9300      	str	r3, [sp, #0]
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 8002d50:	9b01      	ldr	r3, [sp, #4]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	9a00      	ldr	r2, [sp, #0]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	9300      	str	r3, [sp, #0]
  timp->SR = ~sr;
 8002d5c:	9b00      	ldr	r3, [sp, #0]
 8002d5e:	43da      	mvns	r2, r3
 8002d60:	9b01      	ldr	r3, [sp, #4]
 8002d62:	611a      	str	r2, [r3, #16]

  if ((sr & TIM_SR_CC1IF) != 0U)
 8002d64:	9b00      	ldr	r3, [sp, #0]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d005      	beq.n	8002d7a <st_lld_serve_interrupt+0x3a>
#endif
  {
    osalSysLockFromISR();
 8002d6e:	f7ff ff8f 	bl	8002c90 <osalSysLockFromISR.lto_priv.0>
    osalOsTimerHandlerI();
 8002d72:	f7ff ff9d 	bl	8002cb0 <osalOsTimerHandlerI>
    osalSysUnlockFromISR();
 8002d76:	f7ff ff93 	bl	8002ca0 <osalSysUnlockFromISR.lto_priv.0>
      st_callbacks[2](3U);
    }
  }
#endif
#endif
}
 8002d7a:	bf00      	nop
 8002d7c:	b003      	add	sp, #12
 8002d7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d82:	bf00      	nop
	...

08002d90 <chSysLockFromISR.lto_priv.1>:
static inline void chSysLockFromISR(void) {
 8002d90:	b082      	sub	sp, #8
 8002d92:	2320      	movs	r3, #32
 8002d94:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002d96:	9b01      	ldr	r3, [sp, #4]
 8002d98:	f383 8811 	msr	BASEPRI, r3
}
 8002d9c:	bf00      	nop
}
 8002d9e:	bf00      	nop
}
 8002da0:	bf00      	nop
}
 8002da2:	bf00      	nop
 8002da4:	b002      	add	sp, #8
 8002da6:	4770      	bx	lr
	...

08002db0 <chSysUnlockFromISR.lto_priv.1>:
static inline void chSysUnlockFromISR(void) {
 8002db0:	b082      	sub	sp, #8
 8002db2:	2300      	movs	r3, #0
 8002db4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002db6:	9b01      	ldr	r3, [sp, #4]
 8002db8:	f383 8811 	msr	BASEPRI, r3
}
 8002dbc:	bf00      	nop
}
 8002dbe:	bf00      	nop
}
 8002dc0:	bf00      	nop
}
 8002dc2:	bf00      	nop
 8002dc4:	b002      	add	sp, #8
 8002dc6:	4770      	bx	lr
	...

08002dd0 <osalSysLockFromISR.lto_priv.1>:
static inline void osalSysLockFromISR(void) {
 8002dd0:	b508      	push	{r3, lr}
  chSysLockFromISR();
 8002dd2:	f7ff ffdd 	bl	8002d90 <chSysLockFromISR.lto_priv.1>
}
 8002dd6:	bf00      	nop
 8002dd8:	bd08      	pop	{r3, pc}
 8002dda:	bf00      	nop
 8002ddc:	0000      	movs	r0, r0
	...

08002de0 <osalSysUnlockFromISR.lto_priv.1>:
static inline void osalSysUnlockFromISR(void) {
 8002de0:	b508      	push	{r3, lr}
  chSysUnlockFromISR();
 8002de2:	f7ff ffe5 	bl	8002db0 <chSysUnlockFromISR.lto_priv.1>
}
 8002de6:	bf00      	nop
 8002de8:	bd08      	pop	{r3, pc}
 8002dea:	bf00      	nop
 8002dec:	0000      	movs	r0, r0
	...

08002df0 <osalEventBroadcastFlagsI.lto_priv.1>:
                                            eventflags_t flags) {
 8002df0:	b500      	push	{lr}
 8002df2:	b083      	sub	sp, #12
 8002df4:	9001      	str	r0, [sp, #4]
 8002df6:	9100      	str	r1, [sp, #0]
  chEvtBroadcastFlagsI(esp, flags);
 8002df8:	9900      	ldr	r1, [sp, #0]
 8002dfa:	9801      	ldr	r0, [sp, #4]
 8002dfc:	f001 fc70 	bl	80046e0 <chEvtBroadcastFlagsI>
}
 8002e00:	bf00      	nop
 8002e02:	b003      	add	sp, #12
 8002e04:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002e10 <usart_init>:
 * @details This function must be invoked with interrupts disabled.
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] config    the architecture-dependent serial driver configuration
 */
static void usart_init(SerialDriver *sdp, const SerialConfig *config) {
 8002e10:	b084      	sub	sp, #16
 8002e12:	9001      	str	r0, [sp, #4]
 8002e14:	9100      	str	r1, [sp, #0]
  uint32_t brr;
  USART_TypeDef *u = sdp->usart;
 8002e16:	9b01      	ldr	r3, [sp, #4]
 8002e18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e1a:	9302      	str	r3, [sp, #8]

  brr = (uint32_t)(sdp->clock / config->speed);
 8002e1c:	9b01      	ldr	r3, [sp, #4]
 8002e1e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002e20:	9b00      	ldr	r3, [sp, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e28:	9303      	str	r3, [sp, #12]

#if defined(USART_CR1_OVER8)
  /* Correcting BRR value when oversampling by 8 instead of 16.
     Fraction is still 4 bits wide, but only lower 3 bits used.
     Mantissa is doubled, but Fraction is left the same.*/
  if (config->cr1 & USART_CR1_OVER8)
 8002e2a:	9b00      	ldr	r3, [sp, #0]
 8002e2c:	889b      	ldrh	r3, [r3, #4]
 8002e2e:	b21b      	sxth	r3, r3
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	da08      	bge.n	8002e46 <usart_init+0x36>
    brr = ((brr & ~7) * 2) | (brr & 7);
 8002e34:	9b03      	ldr	r3, [sp, #12]
 8002e36:	f023 0307 	bic.w	r3, r3, #7
 8002e3a:	005a      	lsls	r2, r3, #1
 8002e3c:	9b03      	ldr	r3, [sp, #12]
 8002e3e:	f003 0307 	and.w	r3, r3, #7
 8002e42:	4313      	orrs	r3, r2
 8002e44:	9303      	str	r3, [sp, #12]
#endif

  osalDbgAssert(brr < 0x10000, "invalid BRR value");

  u->BRR = brr;
 8002e46:	9b02      	ldr	r3, [sp, #8]
 8002e48:	9a03      	ldr	r2, [sp, #12]
 8002e4a:	609a      	str	r2, [r3, #8]

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8002e4c:	9b00      	ldr	r3, [sp, #0]
 8002e4e:	88db      	ldrh	r3, [r3, #6]
 8002e50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	461a      	mov	r2, r3
 8002e58:	9b02      	ldr	r3, [sp, #8]
 8002e5a:	611a      	str	r2, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8002e5c:	9b00      	ldr	r3, [sp, #0]
 8002e5e:	891b      	ldrh	r3, [r3, #8]
 8002e60:	f043 0301 	orr.w	r3, r3, #1
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	461a      	mov	r2, r3
 8002e68:	9b02      	ldr	r3, [sp, #8]
 8002e6a:	615a      	str	r2, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8002e6c:	9b00      	ldr	r3, [sp, #0]
 8002e6e:	889b      	ldrh	r3, [r3, #4]
                         USART_CR1_RXNEIE | USART_CR1_TE |
 8002e70:	f443 5304 	orr.w	r3, r3, #8448	; 0x2100
 8002e74:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	461a      	mov	r2, r3
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8002e7c:	9b02      	ldr	r3, [sp, #8]
 8002e7e:	60da      	str	r2, [r3, #12]
                         USART_CR1_RE;
  u->SR = 0;
 8002e80:	9b02      	ldr	r3, [sp, #8]
 8002e82:	2200      	movs	r2, #0
 8002e84:	601a      	str	r2, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 8002e86:	9b02      	ldr	r3, [sp, #8]
 8002e88:	681b      	ldr	r3, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8002e8a:	9b02      	ldr	r3, [sp, #8]
 8002e8c:	685b      	ldr	r3, [r3, #4]

  /* Deciding mask to be applied on the data register on receive, this is
     required in order to mask out the parity bit.*/
  if ((config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_PCE) {
 8002e8e:	9b00      	ldr	r3, [sp, #0]
 8002e90:	889b      	ldrh	r3, [r3, #4]
 8002e92:	f403 53a0 	and.w	r3, r3, #5120	; 0x1400
 8002e96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e9a:	d104      	bne.n	8002ea6 <usart_init+0x96>
    sdp->rxmask = 0x7F;
 8002e9c:	9b01      	ldr	r3, [sp, #4]
 8002e9e:	227f      	movs	r2, #127	; 0x7f
 8002ea0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  }
  else {
    sdp->rxmask = 0xFF;
  }
}
 8002ea4:	e003      	b.n	8002eae <usart_init+0x9e>
    sdp->rxmask = 0xFF;
 8002ea6:	9b01      	ldr	r3, [sp, #4]
 8002ea8:	22ff      	movs	r2, #255	; 0xff
 8002eaa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
}
 8002eae:	bf00      	nop
 8002eb0:	b004      	add	sp, #16
 8002eb2:	4770      	bx	lr
	...

08002ec0 <set_error>:
 * @brief   Error handling routine.
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] sr        USART SR register value
 */
static void set_error(SerialDriver *sdp, uint16_t sr) {
 8002ec0:	b500      	push	{lr}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	9001      	str	r0, [sp, #4]
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	f8ad 3002 	strh.w	r3, [sp, #2]
  eventflags_t sts = 0;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	9303      	str	r3, [sp, #12]

  if (sr & USART_SR_ORE)
 8002ed0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8002ed4:	f003 0308 	and.w	r3, r3, #8
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d003      	beq.n	8002ee4 <set_error+0x24>
    sts |= SD_OVERRUN_ERROR;
 8002edc:	9b03      	ldr	r3, [sp, #12]
 8002ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ee2:	9303      	str	r3, [sp, #12]
  if (sr & USART_SR_PE)
 8002ee4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d003      	beq.n	8002ef8 <set_error+0x38>
    sts |= SD_PARITY_ERROR;
 8002ef0:	9b03      	ldr	r3, [sp, #12]
 8002ef2:	f043 0320 	orr.w	r3, r3, #32
 8002ef6:	9303      	str	r3, [sp, #12]
  if (sr & USART_SR_FE)
 8002ef8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <set_error+0x4c>
    sts |= SD_FRAMING_ERROR;
 8002f04:	9b03      	ldr	r3, [sp, #12]
 8002f06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f0a:	9303      	str	r3, [sp, #12]
  if (sr & USART_SR_NE)
 8002f0c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8002f10:	f003 0304 	and.w	r3, r3, #4
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d003      	beq.n	8002f20 <set_error+0x60>
    sts |= SD_NOISE_ERROR;
 8002f18:	9b03      	ldr	r3, [sp, #12]
 8002f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f1e:	9303      	str	r3, [sp, #12]
  chnAddFlagsI(sdp, sts);
 8002f20:	9b01      	ldr	r3, [sp, #4]
 8002f22:	3304      	adds	r3, #4
 8002f24:	9903      	ldr	r1, [sp, #12]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff ff62 	bl	8002df0 <osalEventBroadcastFlagsI.lto_priv.1>
}
 8002f2c:	bf00      	nop
 8002f2e:	b005      	add	sp, #20
 8002f30:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002f40 <notify2>:
  USART1->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
}
#endif

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {
 8002f40:	b082      	sub	sp, #8
 8002f42:	9001      	str	r0, [sp, #4]

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8002f44:	4b04      	ldr	r3, [pc, #16]	; (8002f58 <notify2+0x18>)
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	4a03      	ldr	r2, [pc, #12]	; (8002f58 <notify2+0x18>)
 8002f4a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002f4e:	60d3      	str	r3, [r2, #12]
}
 8002f50:	bf00      	nop
 8002f52:	b002      	add	sp, #8
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	40004400 	.word	0x40004400
 8002f5c:	00000000 	.word	0x00000000

08002f60 <sd_lld_init>:
/**
 * @brief   Low level serial driver initialization.
 *
 * @notapi
 */
void sd_lld_init(void) {
 8002f60:	b508      	push	{r3, lr}
  nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
#endif
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
 8002f62:	4a06      	ldr	r2, [pc, #24]	; (8002f7c <sd_lld_init+0x1c>)
 8002f64:	2100      	movs	r1, #0
 8002f66:	4806      	ldr	r0, [pc, #24]	; (8002f80 <sd_lld_init+0x20>)
 8002f68:	f7fe ffd2 	bl	8001f10 <sdObjectInit>
  SD2.usart = USART2;
 8002f6c:	4b04      	ldr	r3, [pc, #16]	; (8002f80 <sd_lld_init+0x20>)
 8002f6e:	4a05      	ldr	r2, [pc, #20]	; (8002f84 <sd_lld_init+0x24>)
 8002f70:	675a      	str	r2, [r3, #116]	; 0x74
  SD2.clock = STM32_PCLK1;
 8002f72:	4b03      	ldr	r3, [pc, #12]	; (8002f80 <sd_lld_init+0x20>)
 8002f74:	4a04      	ldr	r2, [pc, #16]	; (8002f88 <sd_lld_init+0x28>)
 8002f76:	679a      	str	r2, [r3, #120]	; 0x78
  SD10.clock = STM32_PCLK2;
#if !defined(STM32_UART10_SUPPRESS_ISR) && defined(STM32_UART10_NUMBER)
  nvicEnableVector(STM32_UART10_NUMBER, STM32_SERIAL_UART10_PRIORITY);
#endif
#endif
}
 8002f78:	bf00      	nop
 8002f7a:	bd08      	pop	{r3, pc}
 8002f7c:	08002f41 	.word	0x08002f41
 8002f80:	20000d04 	.word	0x20000d04
 8002f84:	40004400 	.word	0x40004400
 8002f88:	0280de80 	.word	0x0280de80
 8002f8c:	00000000 	.word	0x00000000

08002f90 <sd_lld_start>:
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {
 8002f90:	b500      	push	{lr}
 8002f92:	b083      	sub	sp, #12
 8002f94:	9001      	str	r0, [sp, #4]
 8002f96:	9100      	str	r1, [sp, #0]

  if (config == NULL)
 8002f98:	9b00      	ldr	r3, [sp, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <sd_lld_start+0x12>
    config = &default_config;
 8002f9e:	4b10      	ldr	r3, [pc, #64]	; (8002fe0 <sd_lld_start+0x50>)
 8002fa0:	9300      	str	r3, [sp, #0]

  if (sdp->state == SD_STOP) {
 8002fa2:	9b01      	ldr	r3, [sp, #4]
 8002fa4:	7a1b      	ldrb	r3, [r3, #8]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d111      	bne.n	8002fce <sd_lld_start+0x3e>
    if (&SD1 == sdp) {
      rccEnableUSART1(true);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
 8002faa:	9b01      	ldr	r3, [sp, #4]
 8002fac:	4a0d      	ldr	r2, [pc, #52]	; (8002fe4 <sd_lld_start+0x54>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d10d      	bne.n	8002fce <sd_lld_start+0x3e>
      rccEnableUSART2(true);
 8002fb2:	4b0d      	ldr	r3, [pc, #52]	; (8002fe8 <sd_lld_start+0x58>)
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	4a0c      	ldr	r2, [pc, #48]	; (8002fe8 <sd_lld_start+0x58>)
 8002fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8002fbe:	4b0a      	ldr	r3, [pc, #40]	; (8002fe8 <sd_lld_start+0x58>)
 8002fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fc2:	4a09      	ldr	r2, [pc, #36]	; (8002fe8 <sd_lld_start+0x58>)
 8002fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fc8:	6613      	str	r3, [r2, #96]	; 0x60
 8002fca:	4b07      	ldr	r3, [pc, #28]	; (8002fe8 <sd_lld_start+0x58>)
 8002fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    if (&SD10 == sdp) {
      rccEnableUART10(true);
    }
#endif
  }
  usart_init(sdp, config);
 8002fce:	9900      	ldr	r1, [sp, #0]
 8002fd0:	9801      	ldr	r0, [sp, #4]
 8002fd2:	f7ff ff1d 	bl	8002e10 <usart_init>
}
 8002fd6:	bf00      	nop
 8002fd8:	b003      	add	sp, #12
 8002fda:	f85d fb04 	ldr.w	pc, [sp], #4
 8002fde:	bf00      	nop
 8002fe0:	08006b7c 	.word	0x08006b7c
 8002fe4:	20000d04 	.word	0x20000d04
 8002fe8:	40023800 	.word	0x40023800
 8002fec:	00000000 	.word	0x00000000

08002ff0 <sd_lld_serve_interrupt>:
/**
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
void sd_lld_serve_interrupt(SerialDriver *sdp) {
 8002ff0:	b500      	push	{lr}
 8002ff2:	b089      	sub	sp, #36	; 0x24
 8002ff4:	9001      	str	r0, [sp, #4]
  USART_TypeDef *u = sdp->usart;
 8002ff6:	9b01      	ldr	r3, [sp, #4]
 8002ff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ffa:	9306      	str	r3, [sp, #24]
  uint16_t cr1 = u->CR1;
 8002ffc:	9b06      	ldr	r3, [sp, #24]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	f8ad 3016 	strh.w	r3, [sp, #22]
  uint16_t sr = u->SR;
 8003004:	9b06      	ldr	r3, [sp, #24]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f8ad 301e 	strh.w	r3, [sp, #30]

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 800300c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8003010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00e      	beq.n	8003036 <sd_lld_serve_interrupt+0x46>
    osalSysLockFromISR();
 8003018:	f7ff feda 	bl	8002dd0 <osalSysLockFromISR.lto_priv.1>
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
 800301c:	9b01      	ldr	r3, [sp, #4]
 800301e:	3304      	adds	r3, #4
 8003020:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003024:	4618      	mov	r0, r3
 8003026:	f7ff fee3 	bl	8002df0 <osalEventBroadcastFlagsI.lto_priv.1>
    u->SR = ~USART_SR_LBD;
 800302a:	9b06      	ldr	r3, [sp, #24]
 800302c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003030:	601a      	str	r2, [r3, #0]
    osalSysUnlockFromISR();
 8003032:	f7ff fed5 	bl	8002de0 <osalSysUnlockFromISR.lto_priv.1>
  }

  /* Data available.*/
  osalSysLockFromISR();
 8003036:	f7ff fecb 	bl	8002dd0 <osalSysLockFromISR.lto_priv.1>
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800303a:	e024      	b.n	8003086 <sd_lld_serve_interrupt+0x96>
               USART_SR_PE)) {
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 800303c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8003040:	f003 030f 	and.w	r3, r3, #15
 8003044:	2b00      	cmp	r3, #0
 8003046:	d005      	beq.n	8003054 <sd_lld_serve_interrupt+0x64>
      set_error(sdp, sr);
 8003048:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800304c:	4619      	mov	r1, r3
 800304e:	9801      	ldr	r0, [sp, #4]
 8003050:	f7ff ff36 	bl	8002ec0 <set_error>
    b = (uint8_t)u->DR & sdp->rxmask;
 8003054:	9b06      	ldr	r3, [sp, #24]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	b2da      	uxtb	r2, r3
 800305a:	9b01      	ldr	r3, [sp, #4]
 800305c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003060:	4013      	ands	r3, r2
 8003062:	f88d 300f 	strb.w	r3, [sp, #15]
    if (sr & USART_SR_RXNE)
 8003066:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800306a:	f003 0320 	and.w	r3, r3, #32
 800306e:	2b00      	cmp	r3, #0
 8003070:	d005      	beq.n	800307e <sd_lld_serve_interrupt+0x8e>
      sdIncomingDataI(sdp, b);
 8003072:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8003076:	4619      	mov	r1, r3
 8003078:	9801      	ldr	r0, [sp, #4]
 800307a:	f7fe ff91 	bl	8001fa0 <sdIncomingDataI>
    sr = u->SR;
 800307e:	9b06      	ldr	r3, [sp, #24]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f8ad 301e 	strh.w	r3, [sp, #30]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8003086:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800308a:	f003 032f 	and.w	r3, r3, #47	; 0x2f
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1d4      	bne.n	800303c <sd_lld_serve_interrupt+0x4c>
  }
  osalSysUnlockFromISR();
 8003092:	f7ff fea5 	bl	8002de0 <osalSysUnlockFromISR.lto_priv.1>

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8003096:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800309a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d022      	beq.n	80030e8 <sd_lld_serve_interrupt+0xf8>
 80030a2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80030a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d01c      	beq.n	80030e8 <sd_lld_serve_interrupt+0xf8>
    msg_t b;
    osalSysLockFromISR();
 80030ae:	f7ff fe8f 	bl	8002dd0 <osalSysLockFromISR.lto_priv.1>
    b = oqGetI(&sdp->oqueue);
 80030b2:	9b01      	ldr	r3, [sp, #4]
 80030b4:	3330      	adds	r3, #48	; 0x30
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7fe fd82 	bl	8001bc0 <oqGetI>
 80030bc:	9004      	str	r0, [sp, #16]
    if (b < MSG_OK) {
 80030be:	9b04      	ldr	r3, [sp, #16]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	da0c      	bge.n	80030de <sd_lld_serve_interrupt+0xee>
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
 80030c4:	9b01      	ldr	r3, [sp, #4]
 80030c6:	3304      	adds	r3, #4
 80030c8:	2108      	movs	r1, #8
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff fe90 	bl	8002df0 <osalEventBroadcastFlagsI.lto_priv.1>
      u->CR1 = cr1 & ~USART_CR1_TXEIE;
 80030d0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80030d4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030d8:	9b06      	ldr	r3, [sp, #24]
 80030da:	60da      	str	r2, [r3, #12]
 80030dc:	e002      	b.n	80030e4 <sd_lld_serve_interrupt+0xf4>
    }
    else
      u->DR = b;
 80030de:	9a04      	ldr	r2, [sp, #16]
 80030e0:	9b06      	ldr	r3, [sp, #24]
 80030e2:	605a      	str	r2, [r3, #4]
    osalSysUnlockFromISR();
 80030e4:	f7ff fe7c 	bl	8002de0 <osalSysUnlockFromISR.lto_priv.1>
  }

  /* Physical transmission end.*/
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 80030e8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80030ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d027      	beq.n	8003144 <sd_lld_serve_interrupt+0x154>
 80030f4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80030f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d021      	beq.n	8003144 <sd_lld_serve_interrupt+0x154>
    osalSysLockFromISR();
 8003100:	f7ff fe66 	bl	8002dd0 <osalSysLockFromISR.lto_priv.1>
    if (oqIsEmptyI(&sdp->oqueue)) {
 8003104:	9b01      	ldr	r3, [sp, #4]
 8003106:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003108:	9b01      	ldr	r3, [sp, #4]
 800310a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800310c:	429a      	cmp	r2, r3
 800310e:	d105      	bne.n	800311c <sd_lld_serve_interrupt+0x12c>
 8003110:	9b01      	ldr	r3, [sp, #4]
 8003112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <sd_lld_serve_interrupt+0x12c>
 8003118:	2301      	movs	r3, #1
 800311a:	e000      	b.n	800311e <sd_lld_serve_interrupt+0x12e>
 800311c:	2300      	movs	r3, #0
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00b      	beq.n	8003140 <sd_lld_serve_interrupt+0x150>
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
 8003128:	9b01      	ldr	r3, [sp, #4]
 800312a:	3304      	adds	r3, #4
 800312c:	2110      	movs	r1, #16
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff fe5e 	bl	8002df0 <osalEventBroadcastFlagsI.lto_priv.1>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 8003134:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8003138:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800313c:	9b06      	ldr	r3, [sp, #24]
 800313e:	60da      	str	r2, [r3, #12]
    }
    osalSysUnlockFromISR();
 8003140:	f7ff fe4e 	bl	8002de0 <osalSysUnlockFromISR.lto_priv.1>
  }
}
 8003144:	bf00      	nop
 8003146:	b009      	add	sp, #36	; 0x24
 8003148:	f85d fb04 	ldr.w	pc, [sp], #4
 800314c:	0000      	movs	r0, r0
	...

08003150 <translate_errors>:
 *
 * @param[in] sr        USART SR register value
 *
 * @return  The error flags.
 */
static uartflags_t translate_errors(uint16_t sr) {
 8003150:	b084      	sub	sp, #16
 8003152:	4603      	mov	r3, r0
 8003154:	f8ad 3006 	strh.w	r3, [sp, #6]
  uartflags_t sts = 0;
 8003158:	2300      	movs	r3, #0
 800315a:	9303      	str	r3, [sp, #12]

  if (sr & USART_SR_ORE)
 800315c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8003160:	f003 0308 	and.w	r3, r3, #8
 8003164:	2b00      	cmp	r3, #0
 8003166:	d003      	beq.n	8003170 <translate_errors+0x20>
    sts |= UART_OVERRUN_ERROR;
 8003168:	9b03      	ldr	r3, [sp, #12]
 800316a:	f043 0310 	orr.w	r3, r3, #16
 800316e:	9303      	str	r3, [sp, #12]
  if (sr & USART_SR_PE)
 8003170:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b00      	cmp	r3, #0
 800317a:	d003      	beq.n	8003184 <translate_errors+0x34>
    sts |= UART_PARITY_ERROR;
 800317c:	9b03      	ldr	r3, [sp, #12]
 800317e:	f043 0304 	orr.w	r3, r3, #4
 8003182:	9303      	str	r3, [sp, #12]
  if (sr & USART_SR_FE)
 8003184:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d003      	beq.n	8003198 <translate_errors+0x48>
    sts |= UART_FRAMING_ERROR;
 8003190:	9b03      	ldr	r3, [sp, #12]
 8003192:	f043 0308 	orr.w	r3, r3, #8
 8003196:	9303      	str	r3, [sp, #12]
  if (sr & USART_SR_NE)
 8003198:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800319c:	f003 0304 	and.w	r3, r3, #4
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <translate_errors+0x5c>
    sts |= UART_NOISE_ERROR;
 80031a4:	9b03      	ldr	r3, [sp, #12]
 80031a6:	f043 0320 	orr.w	r3, r3, #32
 80031aa:	9303      	str	r3, [sp, #12]
  if (sr & USART_SR_LBD)
 80031ac:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80031b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d003      	beq.n	80031c0 <translate_errors+0x70>
    sts |= UART_BREAK_DETECTED;
 80031b8:	9b03      	ldr	r3, [sp, #12]
 80031ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031be:	9303      	str	r3, [sp, #12]
  return sts;
 80031c0:	9b03      	ldr	r3, [sp, #12]
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	b004      	add	sp, #16
 80031c6:	4770      	bx	lr
	...

080031d0 <uart_lld_init>:
/**
 * @brief   Low level UART driver initialization.
 *
 * @notapi
 */
void uart_lld_init(void) {
 80031d0:	b508      	push	{r3, lr}

#if STM32_UART_USE_USART1
  uartObjectInit(&UARTD1);
 80031d2:	480b      	ldr	r0, [pc, #44]	; (8003200 <uart_lld_init+0x30>)
 80031d4:	f7fe ff14 	bl	8002000 <uartObjectInit>
  UARTD1.usart   = USART1;
 80031d8:	4b09      	ldr	r3, [pc, #36]	; (8003200 <uart_lld_init+0x30>)
 80031da:	4a0a      	ldr	r2, [pc, #40]	; (8003204 <uart_lld_init+0x34>)
 80031dc:	609a      	str	r2, [r3, #8]
  UARTD1.clock   = STM32_PCLK2;
 80031de:	4b08      	ldr	r3, [pc, #32]	; (8003200 <uart_lld_init+0x30>)
 80031e0:	4a09      	ldr	r2, [pc, #36]	; (8003208 <uart_lld_init+0x38>)
 80031e2:	60da      	str	r2, [r3, #12]
  UARTD1.dmarxmode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
 80031e4:	4b06      	ldr	r3, [pc, #24]	; (8003200 <uart_lld_init+0x30>)
 80031e6:	2206      	movs	r2, #6
 80031e8:	611a      	str	r2, [r3, #16]
  UARTD1.dmatxmode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
 80031ea:	4b05      	ldr	r3, [pc, #20]	; (8003200 <uart_lld_init+0x30>)
 80031ec:	2206      	movs	r2, #6
 80031ee:	615a      	str	r2, [r3, #20]
  UARTD1.dmarx   = NULL;
 80031f0:	4b03      	ldr	r3, [pc, #12]	; (8003200 <uart_lld_init+0x30>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	619a      	str	r2, [r3, #24]
  UARTD1.dmatx   = NULL;
 80031f6:	4b02      	ldr	r3, [pc, #8]	; (8003200 <uart_lld_init+0x30>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	61da      	str	r2, [r3, #28]
  UARTD10.dmarxmode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
  UARTD10.dmatxmode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
  UARTD10.dmarx   = NULL;
  UARTD10.dmatx   = NULL;
#endif
}
 80031fc:	bf00      	nop
 80031fe:	bd08      	pop	{r3, pc}
 8003200:	20000d84 	.word	0x20000d84
 8003204:	40011000 	.word	0x40011000
 8003208:	0501bd00 	.word	0x0501bd00
 800320c:	00000000 	.word	0x00000000

08003210 <uart_lld_serve_interrupt>:
/**
 * @brief   USART common service routine.
 *
 * @param[in] uartp     pointer to the @p UARTDriver object
 */
void uart_lld_serve_interrupt(UARTDriver *uartp) {
 8003210:	b510      	push	{r4, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	9001      	str	r0, [sp, #4]
  uint16_t sr;
  USART_TypeDef *u = uartp->usart;
 8003216:	9b01      	ldr	r3, [sp, #4]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	9305      	str	r3, [sp, #20]
  uint32_t cr1 = u->CR1;
 800321c:	9b05      	ldr	r3, [sp, #20]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	9304      	str	r3, [sp, #16]

  sr = u->SR;   /* SR reset step 1.*/
 8003222:	9b05      	ldr	r3, [sp, #20]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f8ad 300e 	strh.w	r3, [sp, #14]
  (void)u->DR;  /* SR reset step 2.*/
 800322a:	9b05      	ldr	r3, [sp, #20]
 800322c:	685b      	ldr	r3, [r3, #4]

  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
 800322e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8003232:	f240 130f 	movw	r3, #271	; 0x10f
 8003236:	4013      	ands	r3, r2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d014      	beq.n	8003266 <uart_lld_serve_interrupt+0x56>
            USART_SR_FE  | USART_SR_PE)) {
    u->SR = ~USART_SR_LBD;
 800323c:	9b05      	ldr	r3, [sp, #20]
 800323e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003242:	601a      	str	r2, [r3, #0]
    _uart_rx_error_isr_code(uartp, translate_errors(sr));
 8003244:	9b01      	ldr	r3, [sp, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00b      	beq.n	8003266 <uart_lld_serve_interrupt+0x56>
 800324e:	9b01      	ldr	r3, [sp, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	691c      	ldr	r4, [r3, #16]
 8003254:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff ff79 	bl	8003150 <translate_errors>
 800325e:	4603      	mov	r3, r0
 8003260:	4619      	mov	r1, r3
 8003262:	9801      	ldr	r0, [sp, #4]
 8003264:	47a0      	blx	r4
  }

  if ((sr & USART_SR_TC) && (cr1 & USART_CR1_TCIE)) {
 8003266:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800326a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800326e:	2b00      	cmp	r3, #0
 8003270:	d017      	beq.n	80032a2 <uart_lld_serve_interrupt+0x92>
 8003272:	9b04      	ldr	r3, [sp, #16]
 8003274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003278:	2b00      	cmp	r3, #0
 800327a:	d012      	beq.n	80032a2 <uart_lld_serve_interrupt+0x92>
    /* TC interrupt cleared and disabled.*/
    u->SR = ~USART_SR_TC;
 800327c:	9b05      	ldr	r3, [sp, #20]
 800327e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003282:	601a      	str	r2, [r3, #0]
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8003284:	9b04      	ldr	r3, [sp, #16]
 8003286:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800328a:	9b05      	ldr	r3, [sp, #20]
 800328c:	60da      	str	r2, [r3, #12]

    /* End of transmission, a callback is generated.*/
    _uart_tx2_isr_code(uartp);
 800328e:	9b01      	ldr	r3, [sp, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d004      	beq.n	80032a2 <uart_lld_serve_interrupt+0x92>
 8003298:	9b01      	ldr	r3, [sp, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	9801      	ldr	r0, [sp, #4]
 80032a0:	4798      	blx	r3
  }

  /* Timeout interrupt sources are only checked if enabled in CR1.*/
  if ((cr1 & USART_CR1_IDLEIE) && (sr & USART_SR_IDLE)) {
 80032a2:	9b04      	ldr	r3, [sp, #16]
 80032a4:	f003 0310 	and.w	r3, r3, #16
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00f      	beq.n	80032cc <uart_lld_serve_interrupt+0xbc>
 80032ac:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80032b0:	f003 0310 	and.w	r3, r3, #16
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d009      	beq.n	80032cc <uart_lld_serve_interrupt+0xbc>
    _uart_timeout_isr_code(uartp);
 80032b8:	9b01      	ldr	r3, [sp, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d004      	beq.n	80032cc <uart_lld_serve_interrupt+0xbc>
 80032c2:	9b01      	ldr	r3, [sp, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	9801      	ldr	r0, [sp, #4]
 80032ca:	4798      	blx	r3
  }
}
 80032cc:	bf00      	nop
 80032ce:	b006      	add	sp, #24
 80032d0:	bd10      	pop	{r4, pc}
 80032d2:	bf00      	nop
	...

080032e0 <gpio_init>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {
 80032e0:	b082      	sub	sp, #8
 80032e2:	9001      	str	r0, [sp, #4]
 80032e4:	9100      	str	r1, [sp, #0]

  gpiop->OTYPER  = config->otyper;
 80032e6:	9b00      	ldr	r3, [sp, #0]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	9b01      	ldr	r3, [sp, #4]
 80032ec:	605a      	str	r2, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80032ee:	9b00      	ldr	r3, [sp, #0]
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	9b01      	ldr	r3, [sp, #4]
 80032f4:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 80032f6:	9b00      	ldr	r3, [sp, #0]
 80032f8:	68da      	ldr	r2, [r3, #12]
 80032fa:	9b01      	ldr	r3, [sp, #4]
 80032fc:	60da      	str	r2, [r3, #12]
  gpiop->ODR     = config->odr;
 80032fe:	9b00      	ldr	r3, [sp, #0]
 8003300:	691a      	ldr	r2, [r3, #16]
 8003302:	9b01      	ldr	r3, [sp, #4]
 8003304:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
 8003306:	9b00      	ldr	r3, [sp, #0]
 8003308:	695a      	ldr	r2, [r3, #20]
 800330a:	9b01      	ldr	r3, [sp, #4]
 800330c:	621a      	str	r2, [r3, #32]
  gpiop->AFRH    = config->afrh;
 800330e:	9b00      	ldr	r3, [sp, #0]
 8003310:	699a      	ldr	r2, [r3, #24]
 8003312:	9b01      	ldr	r3, [sp, #4]
 8003314:	625a      	str	r2, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8003316:	9b00      	ldr	r3, [sp, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	9b01      	ldr	r3, [sp, #4]
 800331c:	601a      	str	r2, [r3, #0]
}
 800331e:	bf00      	nop
 8003320:	b002      	add	sp, #8
 8003322:	4770      	bx	lr
	...

08003330 <stm32_gpio_init>:

static void stm32_gpio_init(void) {
 8003330:	b508      	push	{r3, lr}

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8003332:	4b1b      	ldr	r3, [pc, #108]	; (80033a0 <stm32_gpio_init+0x70>)
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	4a1a      	ldr	r2, [pc, #104]	; (80033a0 <stm32_gpio_init+0x70>)
 8003338:	f043 031f 	orr.w	r3, r3, #31
 800333c:	6113      	str	r3, [r2, #16]
 800333e:	4b18      	ldr	r3, [pc, #96]	; (80033a0 <stm32_gpio_init+0x70>)
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	4a17      	ldr	r2, [pc, #92]	; (80033a0 <stm32_gpio_init+0x70>)
 8003344:	f023 031f 	bic.w	r3, r3, #31
 8003348:	6113      	str	r3, [r2, #16]
 800334a:	4b15      	ldr	r3, [pc, #84]	; (80033a0 <stm32_gpio_init+0x70>)
 800334c:	691b      	ldr	r3, [r3, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 800334e:	4b14      	ldr	r3, [pc, #80]	; (80033a0 <stm32_gpio_init+0x70>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	4a13      	ldr	r2, [pc, #76]	; (80033a0 <stm32_gpio_init+0x70>)
 8003354:	f043 031f 	orr.w	r3, r3, #31
 8003358:	6313      	str	r3, [r2, #48]	; 0x30
 800335a:	4b11      	ldr	r3, [pc, #68]	; (80033a0 <stm32_gpio_init+0x70>)
 800335c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800335e:	4a10      	ldr	r2, [pc, #64]	; (80033a0 <stm32_gpio_init+0x70>)
 8003360:	f043 031f 	orr.w	r3, r3, #31
 8003364:	6513      	str	r3, [r2, #80]	; 0x50
 8003366:	4b0e      	ldr	r3, [pc, #56]	; (80033a0 <stm32_gpio_init+0x70>)
 8003368:	6d1b      	ldr	r3, [r3, #80]	; 0x50

  /* Initializing all the defined GPIO ports.*/
#if STM32_HAS_GPIOA
  gpio_init(GPIOA, &gpio_default_config.PAData);
 800336a:	490e      	ldr	r1, [pc, #56]	; (80033a4 <stm32_gpio_init+0x74>)
 800336c:	480e      	ldr	r0, [pc, #56]	; (80033a8 <stm32_gpio_init+0x78>)
 800336e:	f7ff ffb7 	bl	80032e0 <gpio_init>
#endif
#if STM32_HAS_GPIOB
  gpio_init(GPIOB, &gpio_default_config.PBData);
 8003372:	490e      	ldr	r1, [pc, #56]	; (80033ac <stm32_gpio_init+0x7c>)
 8003374:	480e      	ldr	r0, [pc, #56]	; (80033b0 <stm32_gpio_init+0x80>)
 8003376:	f7ff ffb3 	bl	80032e0 <gpio_init>
#endif
#if STM32_HAS_GPIOC
  gpio_init(GPIOC, &gpio_default_config.PCData);
 800337a:	490e      	ldr	r1, [pc, #56]	; (80033b4 <stm32_gpio_init+0x84>)
 800337c:	480e      	ldr	r0, [pc, #56]	; (80033b8 <stm32_gpio_init+0x88>)
 800337e:	f7ff ffaf 	bl	80032e0 <gpio_init>
#endif
#if STM32_HAS_GPIOD
  gpio_init(GPIOD, &gpio_default_config.PDData);
 8003382:	490e      	ldr	r1, [pc, #56]	; (80033bc <stm32_gpio_init+0x8c>)
 8003384:	480e      	ldr	r0, [pc, #56]	; (80033c0 <stm32_gpio_init+0x90>)
 8003386:	f7ff ffab 	bl	80032e0 <gpio_init>
#endif
#if STM32_HAS_GPIOE
  gpio_init(GPIOE, &gpio_default_config.PEData);
 800338a:	490e      	ldr	r1, [pc, #56]	; (80033c4 <stm32_gpio_init+0x94>)
 800338c:	480e      	ldr	r0, [pc, #56]	; (80033c8 <stm32_gpio_init+0x98>)
 800338e:	f7ff ffa7 	bl	80032e0 <gpio_init>
#endif
#if STM32_HAS_GPIOG
  gpio_init(GPIOG, &gpio_default_config.PGData);
#endif
#if STM32_HAS_GPIOH
  gpio_init(GPIOH, &gpio_default_config.PHData);
 8003392:	490e      	ldr	r1, [pc, #56]	; (80033cc <stm32_gpio_init+0x9c>)
 8003394:	480e      	ldr	r0, [pc, #56]	; (80033d0 <stm32_gpio_init+0xa0>)
 8003396:	f7ff ffa3 	bl	80032e0 <gpio_init>
  gpio_init(GPIOJ, &gpio_default_config.PJData);
#endif
#if STM32_HAS_GPIOK
  gpio_init(GPIOK, &gpio_default_config.PKData);
#endif
}
 800339a:	bf00      	nop
 800339c:	bd08      	pop	{r3, pc}
 800339e:	bf00      	nop
 80033a0:	40023800 	.word	0x40023800
 80033a4:	08006b88 	.word	0x08006b88
 80033a8:	40020000 	.word	0x40020000
 80033ac:	08006ba4 	.word	0x08006ba4
 80033b0:	40020400 	.word	0x40020400
 80033b4:	08006bc0 	.word	0x08006bc0
 80033b8:	40020800 	.word	0x40020800
 80033bc:	08006bdc 	.word	0x08006bdc
 80033c0:	40020c00 	.word	0x40020c00
 80033c4:	08006bf8 	.word	0x08006bf8
 80033c8:	40021000 	.word	0x40021000
 80033cc:	08006c14 	.word	0x08006c14
 80033d0:	40021c00 	.word	0x40021c00
	...

080033e0 <__early_init>:
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 80033e0:	b508      	push	{r3, lr}

  stm32_gpio_init();
 80033e2:	f7ff ffa5 	bl	8003330 <stm32_gpio_init>
  stm32_clock_init();
 80033e6:	f7ff f833 	bl	8002450 <stm32_clock_init>
}
 80033ea:	bf00      	nop
 80033ec:	bd08      	pop	{r3, pc}
 80033ee:	bf00      	nop

080033f0 <boardInit>:
 * @brief   Board-specific initialization code.
 * @note    You can add your board-specific code here.
 */
void boardInit(void) {

}
 80033f0:	bf00      	nop
 80033f2:	4770      	bx	lr
	...

08003400 <__tm_calibration_object_init>:
 *
 * @param[out] tcp      pointer to the @p tm_calibration_t structure
 *
 * @notapi
 */
static inline void __tm_calibration_object_init(tm_calibration_t *tcp) {
 8003400:	b500      	push	{lr}
 8003402:	b08b      	sub	sp, #44	; 0x2c
 8003404:	9001      	str	r0, [sp, #4]
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  tcp->offset = (rtcnt_t)0;
 8003406:	9b01      	ldr	r3, [sp, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	601a      	str	r2, [r3, #0]
  chTMObjectInit(&tm);
 800340c:	ab02      	add	r3, sp, #8
 800340e:	4618      	mov	r0, r3
 8003410:	f001 f8ce 	bl	80045b0 <chTMObjectInit>
  i = TM_CALIBRATION_LOOP;
 8003414:	2304      	movs	r3, #4
 8003416:	9309      	str	r3, [sp, #36]	; 0x24
  do {
    chTMStartMeasurementX(&tm);
 8003418:	ab02      	add	r3, sp, #8
 800341a:	4618      	mov	r0, r3
 800341c:	f001 f8e8 	bl	80045f0 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
 8003420:	ab02      	add	r3, sp, #8
 8003422:	4618      	mov	r0, r3
 8003424:	f001 f8f4 	bl	8004610 <chTMStopMeasurementX>
    i--;
 8003428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800342a:	3b01      	subs	r3, #1
 800342c:	9309      	str	r3, [sp, #36]	; 0x24
  } while (i > 0U);
 800342e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1f1      	bne.n	8003418 <__tm_calibration_object_init+0x18>
  tcp->offset = tm.best;
 8003434:	9a02      	ldr	r2, [sp, #8]
 8003436:	9b01      	ldr	r3, [sp, #4]
 8003438:	601a      	str	r2, [r3, #0]
}
 800343a:	bf00      	nop
 800343c:	b00b      	add	sp, #44	; 0x2c
 800343e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003442:	bf00      	nop
	...

08003450 <chSysUnlock.lto_priv.5>:
static inline void chSysUnlock(void) {
 8003450:	b082      	sub	sp, #8
 8003452:	2300      	movs	r3, #0
 8003454:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003456:	9b01      	ldr	r3, [sp, #4]
 8003458:	f383 8811 	msr	BASEPRI, r3
}
 800345c:	bf00      	nop
}
 800345e:	bf00      	nop
}
 8003460:	bf00      	nop
 8003462:	b002      	add	sp, #8
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
	...

08003470 <__oslib_init>:
/**
 * @brief   Initialization of all library modules.
 *
 * @notapi
 */
static inline void __oslib_init(void) {
 8003470:	b508      	push	{r3, lr}

#if CH_CFG_USE_MEMCORE == TRUE
  __core_init();
 8003472:	f001 f985 	bl	8004780 <__core_init>
#endif
#if CH_CFG_USE_HEAP == TRUE
  __heap_init();
 8003476:	f001 f9d3 	bl	8004820 <__heap_init>
#endif
#if CH_CFG_USE_FACTORY == TRUE
  __factory_init();
 800347a:	f001 fa29 	bl	80048d0 <__factory_init>
#endif
}
 800347e:	bf00      	nop
 8003480:	bd08      	pop	{r3, pc}
 8003482:	bf00      	nop
	...

08003490 <chSysInit>:
 *          interrupts are enabled.
 * @post    the system is in @p ch_sys_running state.
 *
 * @special
 */
void chSysInit(void) {
 8003490:	b500      	push	{lr}
 8003492:	b083      	sub	sp, #12
  unsigned i;

  /* System object initialization.*/
  ch_system.state = ch_sys_initializing;
 8003494:	4b11      	ldr	r3, [pc, #68]	; (80034dc <chSysInit+0x4c>)
 8003496:	2201      	movs	r2, #1
 8003498:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < (unsigned)PORT_CORES_NUMBER; i++) {
 800349a:	2300      	movs	r3, #0
 800349c:	9301      	str	r3, [sp, #4]
 800349e:	e008      	b.n	80034b2 <chSysInit+0x22>
    ch_system.instances[i] = NULL;
 80034a0:	4a0e      	ldr	r2, [pc, #56]	; (80034dc <chSysInit+0x4c>)
 80034a2:	9b01      	ldr	r3, [sp, #4]
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4413      	add	r3, r2
 80034a8:	2200      	movs	r2, #0
 80034aa:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < (unsigned)PORT_CORES_NUMBER; i++) {
 80034ac:	9b01      	ldr	r3, [sp, #4]
 80034ae:	3301      	adds	r3, #1
 80034b0:	9301      	str	r3, [sp, #4]
 80034b2:	9b01      	ldr	r3, [sp, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d0f3      	beq.n	80034a0 <chSysInit+0x10>
  }

#if CH_CFG_USE_TM == TRUE
  /* Time Measurement calibration.*/
  __tm_calibration_object_init(&ch_system.tmc);
 80034b8:	4809      	ldr	r0, [pc, #36]	; (80034e0 <chSysInit+0x50>)
 80034ba:	f7ff ffa1 	bl	8003400 <__tm_calibration_object_init>

  /* User system initialization hook.*/
  CH_CFG_SYSTEM_INIT_HOOK();

  /* OS library modules.*/
  __oslib_init();
 80034be:	f7ff ffd7 	bl	8003470 <__oslib_init>

  /* Initializing default OS instance.*/
  chInstanceObjectInit(&ch0, &ch_core0_cfg);
 80034c2:	4908      	ldr	r1, [pc, #32]	; (80034e4 <chSysInit+0x54>)
 80034c4:	4808      	ldr	r0, [pc, #32]	; (80034e8 <chSysInit+0x58>)
 80034c6:	f000 fdab 	bl	8004020 <chInstanceObjectInit>

  /* It is alive now.*/
  ch_system.state = ch_sys_running;
 80034ca:	4b04      	ldr	r3, [pc, #16]	; (80034dc <chSysInit+0x4c>)
 80034cc:	2202      	movs	r2, #2
 80034ce:	701a      	strb	r2, [r3, #0]
  chSysUnlock();
 80034d0:	f7ff ffbe 	bl	8003450 <chSysUnlock.lto_priv.5>
}
 80034d4:	bf00      	nop
 80034d6:	b003      	add	sp, #12
 80034d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80034dc:	20000da8 	.word	0x20000da8
 80034e0:	20000db0 	.word	0x20000db0
 80034e4:	08006cc8 	.word	0x08006cc8
 80034e8:	20000db8 	.word	0x20000db8
 80034ec:	00000000 	.word	0x00000000

080034f0 <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
 80034f0:	b508      	push	{r3, lr}
  }
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  currtp->time++;
#endif
  chVTDoTickI();
 80034f2:	f000 fa4d 	bl	8003990 <chVTDoTickI>
  CH_CFG_SYSTEM_TICK_HOOK();
}
 80034f6:	bf00      	nop
 80034f8:	bd08      	pop	{r3, pc}
 80034fa:	bf00      	nop
 80034fc:	0000      	movs	r0, r0
	...

08003500 <chRFCUCollectFaultsI>:
/**
 * @brief   Adds fault flags to the current mask.
 *
 * @param[in] mask      fault flags to be added
 */
void chRFCUCollectFaultsI(rfcu_mask_t mask) {
 8003500:	b082      	sub	sp, #8
 8003502:	9001      	str	r0, [sp, #4]

#if CH_CFG_SMP_MODE == FALSE
  currcore->rfcu.mask |= mask;
 8003504:	4b04      	ldr	r3, [pc, #16]	; (8003518 <chRFCUCollectFaultsI+0x18>)
 8003506:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003508:	9b01      	ldr	r3, [sp, #4]
 800350a:	4313      	orrs	r3, r2
 800350c:	4a02      	ldr	r2, [pc, #8]	; (8003518 <chRFCUCollectFaultsI+0x18>)
 800350e:	6353      	str	r3, [r2, #52]	; 0x34
#else
  ch_system.rfcu.mask |= mask;
#endif

  CH_CFG_RUNTIME_FAULTS_HOOK(mask);
}
 8003510:	bf00      	nop
 8003512:	b002      	add	sp, #8
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	20000db8 	.word	0x20000db8
 800351c:	00000000 	.word	0x00000000

08003520 <chTimeAddX>:
 * @return              The new system time.
 *
 * @xclass
 */
static inline systime_t chTimeAddX(systime_t systime,
                                   sysinterval_t interval) {
 8003520:	b082      	sub	sp, #8
 8003522:	9001      	str	r0, [sp, #4]
 8003524:	9100      	str	r1, [sp, #0]

#if CH_CFG_ST_RESOLUTION != CH_CFG_INTERVALS_SIZE
  chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
#endif

  return systime + (systime_t)interval;
 8003526:	9a01      	ldr	r2, [sp, #4]
 8003528:	9b00      	ldr	r3, [sp, #0]
 800352a:	4413      	add	r3, r2
}
 800352c:	4618      	mov	r0, r3
 800352e:	b002      	add	sp, #8
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
	...

08003540 <chTimeDiffX.lto_priv.0>:
 * @param[in] end       second system time
 * @return              The interval representing the time difference.
 *
 * @xclass
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {
 8003540:	b082      	sub	sp, #8
 8003542:	9001      	str	r0, [sp, #4]
 8003544:	9100      	str	r1, [sp, #0]

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 8003546:	9a00      	ldr	r2, [sp, #0]
 8003548:	9b01      	ldr	r3, [sp, #4]
 800354a:	1ad3      	subs	r3, r2, r3
  /*lint -restore*/
}
 800354c:	4618      	mov	r0, r3
 800354e:	b002      	add	sp, #8
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
	...

08003560 <ch_dlist_isempty>:
 * @param[in] dlhp      pointer to the delta list header
 * @return              The status of the delta list.
 *
 * @notapi
 */
static inline bool ch_dlist_isempty(ch_delta_list_t *dlhp) {
 8003560:	b082      	sub	sp, #8
 8003562:	9001      	str	r0, [sp, #4]

  return (bool)(dlhp == dlhp->next);
 8003564:	9b01      	ldr	r3, [sp, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	9a01      	ldr	r2, [sp, #4]
 800356a:	429a      	cmp	r2, r3
 800356c:	bf0c      	ite	eq
 800356e:	2301      	moveq	r3, #1
 8003570:	2300      	movne	r3, #0
 8003572:	b2db      	uxtb	r3, r3
}
 8003574:	4618      	mov	r0, r3
 8003576:	b002      	add	sp, #8
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	0000      	movs	r0, r0
	...

08003580 <ch_dlist_isfirst>:
 * @param[in] dlp       pointer to the delta list element
 *
 * @notapi
 */
static inline bool ch_dlist_isfirst(ch_delta_list_t *dlhp,
                                    ch_delta_list_t *dlp) {
 8003580:	b082      	sub	sp, #8
 8003582:	9001      	str	r0, [sp, #4]
 8003584:	9100      	str	r1, [sp, #0]

  return (bool)(dlhp->next == dlp);
 8003586:	9b01      	ldr	r3, [sp, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	9a00      	ldr	r2, [sp, #0]
 800358c:	429a      	cmp	r2, r3
 800358e:	bf0c      	ite	eq
 8003590:	2301      	moveq	r3, #1
 8003592:	2300      	movne	r3, #0
 8003594:	b2db      	uxtb	r3, r3
}
 8003596:	4618      	mov	r0, r3
 8003598:	b002      	add	sp, #8
 800359a:	4770      	bx	lr
 800359c:	0000      	movs	r0, r0
	...

080035a0 <ch_dlist_insert_after>:
 *
 * @notapi
 */
static inline void ch_dlist_insert_after(ch_delta_list_t *dlhp,
                                         ch_delta_list_t *dlp,
                                         sysinterval_t delta) {
 80035a0:	b084      	sub	sp, #16
 80035a2:	9003      	str	r0, [sp, #12]
 80035a4:	9102      	str	r1, [sp, #8]
 80035a6:	9201      	str	r2, [sp, #4]

  dlp->delta      = delta;
 80035a8:	9b02      	ldr	r3, [sp, #8]
 80035aa:	9a01      	ldr	r2, [sp, #4]
 80035ac:	609a      	str	r2, [r3, #8]
  dlp->prev       = dlhp;
 80035ae:	9b02      	ldr	r3, [sp, #8]
 80035b0:	9a03      	ldr	r2, [sp, #12]
 80035b2:	605a      	str	r2, [r3, #4]
  dlp->next       = dlp->prev->next;
 80035b4:	9b02      	ldr	r3, [sp, #8]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	9b02      	ldr	r3, [sp, #8]
 80035bc:	601a      	str	r2, [r3, #0]
  dlp->next->prev = dlp;
 80035be:	9b02      	ldr	r3, [sp, #8]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	9a02      	ldr	r2, [sp, #8]
 80035c4:	605a      	str	r2, [r3, #4]
  dlhp->next      = dlp;
 80035c6:	9b03      	ldr	r3, [sp, #12]
 80035c8:	9a02      	ldr	r2, [sp, #8]
 80035ca:	601a      	str	r2, [r3, #0]
}
 80035cc:	bf00      	nop
 80035ce:	b004      	add	sp, #16
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
	...

080035e0 <ch_dlist_insert_before>:
 *
 * @notapi
 */
static inline void ch_dlist_insert_before(ch_delta_list_t *dlhp,
                                          ch_delta_list_t *dlp,
                                          sysinterval_t delta) {
 80035e0:	b084      	sub	sp, #16
 80035e2:	9003      	str	r0, [sp, #12]
 80035e4:	9102      	str	r1, [sp, #8]
 80035e6:	9201      	str	r2, [sp, #4]

  dlp->delta      = delta;
 80035e8:	9b02      	ldr	r3, [sp, #8]
 80035ea:	9a01      	ldr	r2, [sp, #4]
 80035ec:	609a      	str	r2, [r3, #8]
  dlp->next       = dlhp;
 80035ee:	9b02      	ldr	r3, [sp, #8]
 80035f0:	9a03      	ldr	r2, [sp, #12]
 80035f2:	601a      	str	r2, [r3, #0]
  dlp->prev       = dlp->next->prev;
 80035f4:	9b02      	ldr	r3, [sp, #8]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	9b02      	ldr	r3, [sp, #8]
 80035fc:	605a      	str	r2, [r3, #4]
  dlp->prev->next = dlp;
 80035fe:	9b02      	ldr	r3, [sp, #8]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	9a02      	ldr	r2, [sp, #8]
 8003604:	601a      	str	r2, [r3, #0]
  dlhp->prev      = dlp;
 8003606:	9b03      	ldr	r3, [sp, #12]
 8003608:	9a02      	ldr	r2, [sp, #8]
 800360a:	605a      	str	r2, [r3, #4]
}
 800360c:	bf00      	nop
 800360e:	b004      	add	sp, #16
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
	...

08003620 <ch_dlist_insert>:
 *
 * @notapi
 */
static inline void ch_dlist_insert(ch_delta_list_t *dlhp,
                                   ch_delta_list_t *dlep,
                                   sysinterval_t delta) {
 8003620:	b500      	push	{lr}
 8003622:	b087      	sub	sp, #28
 8003624:	9003      	str	r0, [sp, #12]
 8003626:	9102      	str	r1, [sp, #8]
 8003628:	9201      	str	r2, [sp, #4]
  ch_delta_list_t *dlp;

  /* The delta list is scanned in order to find the correct position for
     this element. */
  dlp = dlhp->next;
 800362a:	9b03      	ldr	r3, [sp, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	9305      	str	r3, [sp, #20]
  while (likely(dlp->delta < delta)) {
 8003630:	e007      	b.n	8003642 <ch_dlist_insert+0x22>
    /* Debug assert if the element is already in the list.*/
    chDbgAssert(dlp != dlep, "element already in list");

    delta -= dlp->delta;
 8003632:	9b05      	ldr	r3, [sp, #20]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	9a01      	ldr	r2, [sp, #4]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	9301      	str	r3, [sp, #4]
    dlp = dlp->next;
 800363c:	9b05      	ldr	r3, [sp, #20]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	9305      	str	r3, [sp, #20]
  while (likely(dlp->delta < delta)) {
 8003642:	9b05      	ldr	r3, [sp, #20]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	9a01      	ldr	r2, [sp, #4]
 8003648:	429a      	cmp	r2, r3
 800364a:	bf8c      	ite	hi
 800364c:	2301      	movhi	r3, #1
 800364e:	2300      	movls	r3, #0
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1ed      	bne.n	8003632 <ch_dlist_insert+0x12>
  }

  /* The timer is inserted in the delta list.*/
  ch_dlist_insert_before(dlp, dlep, delta);
 8003656:	9a01      	ldr	r2, [sp, #4]
 8003658:	9902      	ldr	r1, [sp, #8]
 800365a:	9805      	ldr	r0, [sp, #20]
 800365c:	f7ff ffc0 	bl	80035e0 <ch_dlist_insert_before>

  /* Adjusting delta for the following element.*/
  dlp->delta -= delta;
 8003660:	9b05      	ldr	r3, [sp, #20]
 8003662:	689a      	ldr	r2, [r3, #8]
 8003664:	9b01      	ldr	r3, [sp, #4]
 8003666:	1ad2      	subs	r2, r2, r3
 8003668:	9b05      	ldr	r3, [sp, #20]
 800366a:	609a      	str	r2, [r3, #8]

  /* Special case when the inserted element is in last position in the list,
     the value in the header must be restored, just doing it is faster than
     checking then doing.*/
  dlhp->delta = (sysinterval_t)-1;
 800366c:	9b03      	ldr	r3, [sp, #12]
 800366e:	f04f 32ff 	mov.w	r2, #4294967295
 8003672:	609a      	str	r2, [r3, #8]
}
 8003674:	bf00      	nop
 8003676:	b007      	add	sp, #28
 8003678:	f85d fb04 	ldr.w	pc, [sp], #4
 800367c:	0000      	movs	r0, r0
	...

08003680 <ch_dlist_remove_first>:
 *
 * @param[in] dlhp      pointer to the delta list header
 *
 * @notapi
 */
static inline ch_delta_list_t *ch_dlist_remove_first(ch_delta_list_t *dlhp) {
 8003680:	b084      	sub	sp, #16
 8003682:	9001      	str	r0, [sp, #4]
  ch_delta_list_t *dlp = dlhp->next;
 8003684:	9b01      	ldr	r3, [sp, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	9303      	str	r3, [sp, #12]

  dlhp->next       = dlp->next;
 800368a:	9b03      	ldr	r3, [sp, #12]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	9b01      	ldr	r3, [sp, #4]
 8003690:	601a      	str	r2, [r3, #0]
  dlhp->next->prev = dlhp;
 8003692:	9b01      	ldr	r3, [sp, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	9a01      	ldr	r2, [sp, #4]
 8003698:	605a      	str	r2, [r3, #4]

  return dlp;
 800369a:	9b03      	ldr	r3, [sp, #12]
}
 800369c:	4618      	mov	r0, r3
 800369e:	b004      	add	sp, #16
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
	...

080036b0 <ch_dlist_dequeue>:
 *
 * @param[in] dlp       pointer to the delta list element
 *
 * @notapi
 */
static inline ch_delta_list_t *ch_dlist_dequeue(ch_delta_list_t *dlp) {
 80036b0:	b082      	sub	sp, #8
 80036b2:	9001      	str	r0, [sp, #4]

  dlp->prev->next = dlp->next;
 80036b4:	9b01      	ldr	r3, [sp, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	9a01      	ldr	r2, [sp, #4]
 80036ba:	6812      	ldr	r2, [r2, #0]
 80036bc:	601a      	str	r2, [r3, #0]
  dlp->next->prev = dlp->prev;
 80036be:	9b01      	ldr	r3, [sp, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	9a01      	ldr	r2, [sp, #4]
 80036c4:	6852      	ldr	r2, [r2, #4]
 80036c6:	605a      	str	r2, [r3, #4]

  return dlp;
 80036c8:	9b01      	ldr	r3, [sp, #4]
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	b002      	add	sp, #8
 80036ce:	4770      	bx	lr

080036d0 <port_timer_start_alarm>:
 *
 * @param[in] time      the time to be set for the first alarm
 *
 * @notapi
 */
static inline void port_timer_start_alarm(systime_t time) {
 80036d0:	b500      	push	{lr}
 80036d2:	b083      	sub	sp, #12
 80036d4:	9001      	str	r0, [sp, #4]

  stStartAlarm(time);
 80036d6:	9801      	ldr	r0, [sp, #4]
 80036d8:	f7fd ffb2 	bl	8001640 <stStartAlarm>
}
 80036dc:	bf00      	nop
 80036de:	b003      	add	sp, #12
 80036e0:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080036f0 <port_timer_stop_alarm>:
/**
 * @brief   Stops the alarm interrupt.
 *
 * @notapi
 */
static inline void port_timer_stop_alarm(void) {
 80036f0:	b508      	push	{r3, lr}

  stStopAlarm();
 80036f2:	f7fd ffb5 	bl	8001660 <stStopAlarm>
}
 80036f6:	bf00      	nop
 80036f8:	bd08      	pop	{r3, pc}
 80036fa:	bf00      	nop
 80036fc:	0000      	movs	r0, r0
	...

08003700 <port_timer_set_alarm>:
 *
 * @param[in] time      the time to be set for the next alarm
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {
 8003700:	b500      	push	{lr}
 8003702:	b083      	sub	sp, #12
 8003704:	9001      	str	r0, [sp, #4]

  stSetAlarm(time);
 8003706:	9801      	ldr	r0, [sp, #4]
 8003708:	f7fd ffb2 	bl	8001670 <stSetAlarm>
}
 800370c:	bf00      	nop
 800370e:	b003      	add	sp, #12
 8003710:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003720 <port_timer_get_time.lto_priv.0>:
 *
 * @return              The system time.
 *
 * @notapi
 */
static inline systime_t port_timer_get_time(void) {
 8003720:	b508      	push	{r3, lr}

  return stGetCounter();
 8003722:	f7fd ff85 	bl	8001630 <stGetCounter>
 8003726:	4603      	mov	r3, r0
}
 8003728:	4618      	mov	r0, r3
 800372a:	bd08      	pop	{r3, pc}
 800372c:	0000      	movs	r0, r0
	...

08003730 <chSysLockFromISR.lto_priv.3>:
static inline void chSysLockFromISR(void) {
 8003730:	b082      	sub	sp, #8
 8003732:	2320      	movs	r3, #32
 8003734:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003736:	9b01      	ldr	r3, [sp, #4]
 8003738:	f383 8811 	msr	BASEPRI, r3
}
 800373c:	bf00      	nop
}
 800373e:	bf00      	nop
}
 8003740:	bf00      	nop
}
 8003742:	bf00      	nop
 8003744:	b002      	add	sp, #8
 8003746:	4770      	bx	lr
	...

08003750 <chSysUnlockFromISR.lto_priv.3>:
static inline void chSysUnlockFromISR(void) {
 8003750:	b082      	sub	sp, #8
 8003752:	2300      	movs	r3, #0
 8003754:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003756:	9b01      	ldr	r3, [sp, #4]
 8003758:	f383 8811 	msr	BASEPRI, r3
}
 800375c:	bf00      	nop
}
 800375e:	bf00      	nop
}
 8003760:	bf00      	nop
}
 8003762:	bf00      	nop
 8003764:	b002      	add	sp, #8
 8003766:	4770      	bx	lr
	...

08003770 <chVTGetSystemTimeX.lto_priv.0>:
 *
 * @return              The system time in ticks.
 *
 * @xclass
 */
static inline systime_t chVTGetSystemTimeX(void) {
 8003770:	b508      	push	{r3, lr}

#if CH_CFG_ST_TIMEDELTA == 0
  return currcore->vtlist.systime;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  return port_timer_get_time();
 8003772:	f7ff ffd5 	bl	8003720 <port_timer_get_time.lto_priv.0>
 8003776:	4603      	mov	r3, r0
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8003778:	4618      	mov	r0, r3
 800377a:	bd08      	pop	{r3, pc}
 800377c:	0000      	movs	r0, r0
	...

08003780 <vt_insert_first>:
 * @note    This is the special case when the delta list is initially empty.
 */
static void vt_insert_first(virtual_timers_list_t *vtlp,
                            virtual_timer_t *vtp,
                            systime_t now,
                            sysinterval_t delay) {
 8003780:	b500      	push	{lr}
 8003782:	b085      	sub	sp, #20
 8003784:	9003      	str	r0, [sp, #12]
 8003786:	9102      	str	r1, [sp, #8]
 8003788:	9201      	str	r2, [sp, #4]
 800378a:	9300      	str	r3, [sp, #0]

  /* The delta list is empty, the current time becomes the new
     delta list base time, the timer is inserted.*/
  vtlp->lasttime = now;
 800378c:	9b03      	ldr	r3, [sp, #12]
 800378e:	9a01      	ldr	r2, [sp, #4]
 8003790:	60da      	str	r2, [r3, #12]
  ch_dlist_insert_after(&vtlp->dlist, &vtp->dlist, delay);
 8003792:	9b03      	ldr	r3, [sp, #12]
 8003794:	9902      	ldr	r1, [sp, #8]
 8003796:	9a00      	ldr	r2, [sp, #0]
 8003798:	4618      	mov	r0, r3
 800379a:	f7ff ff01 	bl	80035a0 <ch_dlist_insert_after>

  /* If the requested delay is lower than the minimum safe delta then it
     is raised to the minimum safe value.*/
  if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 800379e:	9b00      	ldr	r3, [sp, #0]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d801      	bhi.n	80037a8 <vt_insert_first+0x28>
    /* We need to avoid that the system time goes past the alarm we are
       going to set before the alarm is actually set.*/
    delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 80037a4:	2302      	movs	r3, #2
 80037a6:	9300      	str	r3, [sp, #0]
  }
#endif

  /* Being the first element inserted in the list the alarm timer
     is started.*/
  port_timer_start_alarm(chTimeAddX(vtlp->lasttime, delay));
 80037a8:	9b03      	ldr	r3, [sp, #12]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	9900      	ldr	r1, [sp, #0]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7ff feb6 	bl	8003520 <chTimeAddX>
 80037b4:	4603      	mov	r3, r0
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7ff ff8a 	bl	80036d0 <port_timer_start_alarm>
}
 80037bc:	bf00      	nop
 80037be:	b005      	add	sp, #20
 80037c0:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080037d0 <vt_enqueue>:
 * @brief   Enqueues a virtual timer in a virtual timers list.
 */
static void vt_enqueue(virtual_timers_list_t *vtlp,
                       virtual_timer_t *vtp,
                       systime_t now,
                       sysinterval_t delay) {
 80037d0:	b500      	push	{lr}
 80037d2:	b089      	sub	sp, #36	; 0x24
 80037d4:	9003      	str	r0, [sp, #12]
 80037d6:	9102      	str	r1, [sp, #8]
 80037d8:	9201      	str	r2, [sp, #4]
 80037da:	9300      	str	r3, [sp, #0]
#if CH_CFG_ST_TIMEDELTA > 0
  {
    sysinterval_t nowdelta;

    /* Special case where the timers list is empty.*/
    if (ch_dlist_isempty(&vtlp->dlist)) {
 80037dc:	9b03      	ldr	r3, [sp, #12]
 80037de:	4618      	mov	r0, r3
 80037e0:	f7ff febe 	bl	8003560 <ch_dlist_isempty>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d006      	beq.n	80037f8 <vt_enqueue+0x28>

      vt_insert_first(vtlp, vtp, now, delay);
 80037ea:	9b00      	ldr	r3, [sp, #0]
 80037ec:	9a01      	ldr	r2, [sp, #4]
 80037ee:	9902      	ldr	r1, [sp, #8]
 80037f0:	9803      	ldr	r0, [sp, #12]
 80037f2:	f7ff ffc5 	bl	8003780 <vt_insert_first>

      return;
 80037f6:	e02d      	b.n	8003854 <vt_enqueue+0x84>
    }

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'deltanow'.*/
    nowdelta = chTimeDiffX(vtlp->lasttime, now);
 80037f8:	9b03      	ldr	r3, [sp, #12]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	9901      	ldr	r1, [sp, #4]
 80037fe:	4618      	mov	r0, r3
 8003800:	f7ff fe9e 	bl	8003540 <chTimeDiffX.lto_priv.0>
 8003804:	9005      	str	r0, [sp, #20]
    delta    = nowdelta + delay;
 8003806:	9a05      	ldr	r2, [sp, #20]
 8003808:	9b00      	ldr	r3, [sp, #0]
 800380a:	4413      	add	r3, r2
 800380c:	9307      	str	r3, [sp, #28]

    /* Scenario where a very large delay exceeded the numeric range, the
       delta is shortened to make it fit the numeric range, the timer
       will be triggered "deltanow" cycles earlier.*/
    if (delta < nowdelta) {
 800380e:	9a07      	ldr	r2, [sp, #28]
 8003810:	9b05      	ldr	r3, [sp, #20]
 8003812:	429a      	cmp	r2, r3
 8003814:	d201      	bcs.n	800381a <vt_enqueue+0x4a>
      delta = delay;
 8003816:	9b00      	ldr	r3, [sp, #0]
 8003818:	9307      	str	r3, [sp, #28]
    }

    /* Checking if this timer would become the first in the delta list, this
       requires changing the current alarm setting.*/
    if (delta < vtlp->dlist.next->delta) {
 800381a:	9b03      	ldr	r3, [sp, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	9a07      	ldr	r2, [sp, #28]
 8003822:	429a      	cmp	r2, r3
 8003824:	d210      	bcs.n	8003848 <vt_enqueue+0x78>
      sysinterval_t deadline_delta;

      /* A small delay that will become the first element in the delta list
         and next deadline.*/
      deadline_delta = delta;
 8003826:	9b07      	ldr	r3, [sp, #28]
 8003828:	9306      	str	r3, [sp, #24]

      /* Limit delta to CH_CFG_ST_TIMEDELTA.*/
      if (deadline_delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 800382a:	9b06      	ldr	r3, [sp, #24]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d801      	bhi.n	8003834 <vt_enqueue+0x64>
        deadline_delta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8003830:	2302      	movs	r3, #2
 8003832:	9306      	str	r3, [sp, #24]
         this can happen when: sizeof (systime_t) < sizeof (sysinterval_t).*/
      else if (deadline_delta > (sysinterval_t)TIME_MAX_SYSTIME) {
        deadline_delta = (sysinterval_t)TIME_MAX_SYSTIME;
      }
#endif
      port_timer_set_alarm(chTimeAddX(vtlp->lasttime, deadline_delta));
 8003834:	9b03      	ldr	r3, [sp, #12]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	9906      	ldr	r1, [sp, #24]
 800383a:	4618      	mov	r0, r3
 800383c:	f7ff fe70 	bl	8003520 <chTimeAddX>
 8003840:	4603      	mov	r3, r0
 8003842:	4618      	mov	r0, r3
 8003844:	f7ff ff5c 	bl	8003700 <port_timer_set_alarm>

  /* Delta is initially equal to the specified delay.*/
  delta = delay;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  ch_dlist_insert(&vtlp->dlist, &vtp->dlist, delta);
 8003848:	9b03      	ldr	r3, [sp, #12]
 800384a:	9902      	ldr	r1, [sp, #8]
 800384c:	9a07      	ldr	r2, [sp, #28]
 800384e:	4618      	mov	r0, r3
 8003850:	f7ff fee6 	bl	8003620 <ch_dlist_insert>
}
 8003854:	b009      	add	sp, #36	; 0x24
 8003856:	f85d fb04 	ldr.w	pc, [sp], #4
 800385a:	bf00      	nop
 800385c:	0000      	movs	r0, r0
	...

08003860 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
                vtfunc_t vtfunc, void *par) {
 8003860:	b500      	push	{lr}
 8003862:	b087      	sub	sp, #28
 8003864:	9003      	str	r0, [sp, #12]
 8003866:	9102      	str	r1, [sp, #8]
 8003868:	9201      	str	r2, [sp, #4]
 800386a:	9300      	str	r3, [sp, #0]
  virtual_timers_list_t *vtlp = &currcore->vtlist;
 800386c:	4b0b      	ldr	r3, [pc, #44]	; (800389c <chVTDoSetI+0x3c>)
 800386e:	9305      	str	r3, [sp, #20]

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  /* Timer initialization.*/
  vtp->par     = par;
 8003870:	9b03      	ldr	r3, [sp, #12]
 8003872:	9a00      	ldr	r2, [sp, #0]
 8003874:	611a      	str	r2, [r3, #16]
  vtp->func    = vtfunc;
 8003876:	9b03      	ldr	r3, [sp, #12]
 8003878:	9a01      	ldr	r2, [sp, #4]
 800387a:	60da      	str	r2, [r3, #12]
  vtp->reload  = (sysinterval_t)0;
 800387c:	9b03      	ldr	r3, [sp, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	615a      	str	r2, [r3, #20]

  /* Inserting the timer in the delta list.*/
  vt_enqueue(vtlp, vtp, chVTGetSystemTimeX(), delay);
 8003882:	f7ff ff75 	bl	8003770 <chVTGetSystemTimeX.lto_priv.0>
 8003886:	4602      	mov	r2, r0
 8003888:	9b02      	ldr	r3, [sp, #8]
 800388a:	9903      	ldr	r1, [sp, #12]
 800388c:	9805      	ldr	r0, [sp, #20]
 800388e:	f7ff ff9f 	bl	80037d0 <vt_enqueue>
}
 8003892:	bf00      	nop
 8003894:	b007      	add	sp, #28
 8003896:	f85d fb04 	ldr.w	pc, [sp], #4
 800389a:	bf00      	nop
 800389c:	20000dc8 	.word	0x20000dc8

080038a0 <chVTDoResetI>:
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 80038a0:	b510      	push	{r4, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	9001      	str	r0, [sp, #4]
  virtual_timers_list_t *vtlp = &currcore->vtlist;
 80038a6:	4b36      	ldr	r3, [pc, #216]	; (8003980 <chVTDoResetI+0xe0>)
 80038a8:	9304      	str	r3, [sp, #16]
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (!ch_dlist_isfirst(&vtlp->dlist, &vtp->dlist)) {
 80038aa:	9b04      	ldr	r3, [sp, #16]
 80038ac:	9a01      	ldr	r2, [sp, #4]
 80038ae:	4611      	mov	r1, r2
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7ff fe65 	bl	8003580 <ch_dlist_isfirst>
 80038b6:	4603      	mov	r3, r0
 80038b8:	f083 0301 	eor.w	r3, r3, #1
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d014      	beq.n	80038ec <chVTDoResetI+0x4c>

    /* Removing the element from the delta list.*/
    (void) ch_dlist_dequeue(&vtp->dlist);
 80038c2:	9b01      	ldr	r3, [sp, #4]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7ff fef3 	bl	80036b0 <ch_dlist_dequeue>

    /* Adding delta to the next element, if it is not the last one.*/
    vtp->dlist.next->delta += vtp->dlist.delta;
 80038ca:	9b01      	ldr	r3, [sp, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	6899      	ldr	r1, [r3, #8]
 80038d0:	9b01      	ldr	r3, [sp, #4]
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	9b01      	ldr	r3, [sp, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	440a      	add	r2, r1
 80038da:	609a      	str	r2, [r3, #8]

    /* Marking timer as not armed.*/
    vtp->dlist.next = NULL;
 80038dc:	9b01      	ldr	r3, [sp, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	601a      	str	r2, [r3, #0]

    /* Special case when the removed element from the last position in the list,
       the value in the header must be restored, just doing it is faster than
       checking then doing.*/
    vtlp->dlist.delta = (sysinterval_t)-1;
 80038e2:	9b04      	ldr	r3, [sp, #16]
 80038e4:	f04f 32ff 	mov.w	r2, #4294967295
 80038e8:	609a      	str	r2, [r3, #8]

    return;
 80038ea:	e046      	b.n	800397a <chVTDoResetI+0xda>
  }

  /* Removing the first timer from the list, marking it as not armed.*/
  ch_dlist_remove_first(&vtlp->dlist);
 80038ec:	9b04      	ldr	r3, [sp, #16]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7ff fec6 	bl	8003680 <ch_dlist_remove_first>
  vtp->dlist.next = NULL;
 80038f4:	9b01      	ldr	r3, [sp, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	601a      	str	r2, [r3, #0]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (ch_dlist_isempty(&vtlp->dlist)) {
 80038fa:	9b04      	ldr	r3, [sp, #16]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7ff fe2f 	bl	8003560 <ch_dlist_isempty>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d002      	beq.n	800390e <chVTDoResetI+0x6e>
    port_timer_stop_alarm();
 8003908:	f7ff fef2 	bl	80036f0 <port_timer_stop_alarm>

    return;
 800390c:	e035      	b.n	800397a <chVTDoResetI+0xda>
  }

  /* The delta of the removed timer is added to the new first timer.*/
  vtlp->dlist.next->delta += vtp->dlist.delta;
 800390e:	9b04      	ldr	r3, [sp, #16]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6899      	ldr	r1, [r3, #8]
 8003914:	9b01      	ldr	r3, [sp, #4]
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	9b04      	ldr	r3, [sp, #16]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	440a      	add	r2, r1
 800391e:	609a      	str	r2, [r3, #8]

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chTimeDiffX(vtlp->lasttime, chVTGetSystemTimeX());
 8003920:	9b04      	ldr	r3, [sp, #16]
 8003922:	68dc      	ldr	r4, [r3, #12]
 8003924:	f7ff ff24 	bl	8003770 <chVTGetSystemTimeX.lto_priv.0>
 8003928:	4603      	mov	r3, r0
 800392a:	4619      	mov	r1, r3
 800392c:	4620      	mov	r0, r4
 800392e:	f7ff fe07 	bl	8003540 <chTimeDiffX.lto_priv.0>
 8003932:	9003      	str	r0, [sp, #12]

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= vtlp->dlist.next->delta) {
 8003934:	9b04      	ldr	r3, [sp, #16]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	9a03      	ldr	r2, [sp, #12]
 800393c:	429a      	cmp	r2, r3
 800393e:	d21b      	bcs.n	8003978 <chVTDoResetI+0xd8>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = vtlp->dlist.next->delta - nowdelta;
 8003940:	9b04      	ldr	r3, [sp, #16]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689a      	ldr	r2, [r3, #8]
 8003946:	9b03      	ldr	r3, [sp, #12]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	9305      	str	r3, [sp, #20]

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 800394c:	9b05      	ldr	r3, [sp, #20]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d803      	bhi.n	800395a <chVTDoResetI+0xba>
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8003952:	9b03      	ldr	r3, [sp, #12]
 8003954:	3302      	adds	r3, #2
 8003956:	9305      	str	r3, [sp, #20]
 8003958:	e003      	b.n	8003962 <chVTDoResetI+0xc2>
  }
  else {
    delta = nowdelta + delta;
 800395a:	9a05      	ldr	r2, [sp, #20]
 800395c:	9b03      	ldr	r3, [sp, #12]
 800395e:	4413      	add	r3, r2
 8003960:	9305      	str	r3, [sp, #20]
    if (delta > (sysinterval_t)TIME_MAX_SYSTIME) {
      delta = (sysinterval_t)TIME_MAX_SYSTIME;
    }
#endif
  }
  port_timer_set_alarm(chTimeAddX(vtlp->lasttime, delta));
 8003962:	9b04      	ldr	r3, [sp, #16]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	9905      	ldr	r1, [sp, #20]
 8003968:	4618      	mov	r0, r3
 800396a:	f7ff fdd9 	bl	8003520 <chTimeAddX>
 800396e:	4603      	mov	r3, r0
 8003970:	4618      	mov	r0, r3
 8003972:	f7ff fec5 	bl	8003700 <port_timer_set_alarm>
 8003976:	e000      	b.n	800397a <chVTDoResetI+0xda>
    return;
 8003978:	bf00      	nop
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 800397a:	b006      	add	sp, #24
 800397c:	bd10      	pop	{r4, pc}
 800397e:	bf00      	nop
 8003980:	20000dc8 	.word	0x20000dc8
	...

08003990 <chVTDoTickI>:
 *          to acquire the lock if needed. This is done in order to reduce
 *          interrupts jitter when many timers are in use.
 *
 * @iclass
 */
void chVTDoTickI(void) {
 8003990:	b510      	push	{r4, lr}
 8003992:	b088      	sub	sp, #32
  virtual_timers_list_t *vtlp = &currcore->vtlist;
 8003994:	4b57      	ldr	r3, [pc, #348]	; (8003af4 <chVTDoTickI+0x164>)
 8003996:	9305      	str	r3, [sp, #20]
     than the interval between "now" and "lasttime".*/
  while (true) {
    systime_t lasttime;

    /* First timer in the delta list.*/
    vtp = (virtual_timer_t *)vtlp->dlist.next;
 8003998:	9b05      	ldr	r3, [sp, #20]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	9304      	str	r3, [sp, #16]

    /* Delta between current time and last execution time.*/
    now = chVTGetSystemTimeX();
 800399e:	f7ff fee7 	bl	8003770 <chVTGetSystemTimeX.lto_priv.0>
 80039a2:	9003      	str	r0, [sp, #12]
    nowdelta = chTimeDiffX(vtlp->lasttime, now);
 80039a4:	9b05      	ldr	r3, [sp, #20]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	9903      	ldr	r1, [sp, #12]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7ff fdc8 	bl	8003540 <chTimeDiffX.lto_priv.0>
 80039b0:	9002      	str	r0, [sp, #8]

    /* Loop break condition.
       Note that the list scan is limited by the delta list header having
       "vtlp->dlist.delta == (sysinterval_t)-1" which is greater than all
       deltas*/
    if (nowdelta < vtp->dlist.delta) {
 80039b2:	9b04      	ldr	r3, [sp, #16]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	9a02      	ldr	r2, [sp, #8]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d366      	bcc.n	8003a8a <chVTDoTickI+0xfa>
      break;
    }

    /* Last time deadline is updated to the next timer's time.*/
    lasttime = chTimeAddX(vtlp->lasttime, vtp->dlist.delta);
 80039bc:	9b05      	ldr	r3, [sp, #20]
 80039be:	68da      	ldr	r2, [r3, #12]
 80039c0:	9b04      	ldr	r3, [sp, #16]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	4619      	mov	r1, r3
 80039c6:	4610      	mov	r0, r2
 80039c8:	f7ff fdaa 	bl	8003520 <chTimeAddX>
 80039cc:	9001      	str	r0, [sp, #4]
    vtlp->lasttime = lasttime;
 80039ce:	9b05      	ldr	r3, [sp, #20]
 80039d0:	9a01      	ldr	r2, [sp, #4]
 80039d2:	60da      	str	r2, [r3, #12]

    /* Removing the timer from the list, marking it as not armed.*/
    (void) ch_dlist_dequeue(&vtp->dlist);
 80039d4:	9b04      	ldr	r3, [sp, #16]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7ff fe6a 	bl	80036b0 <ch_dlist_dequeue>
    vtp->dlist.next = NULL;
 80039dc:	9b04      	ldr	r3, [sp, #16]
 80039de:	2200      	movs	r2, #0
 80039e0:	601a      	str	r2, [r3, #0]

    /* If the list becomes empty then the alarm is disabled.*/
    if (ch_dlist_isempty(&vtlp->dlist)) {
 80039e2:	9b05      	ldr	r3, [sp, #20]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7ff fdbb 	bl	8003560 <ch_dlist_isempty>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <chVTDoTickI+0x64>
      port_timer_stop_alarm();
 80039f0:	f7ff fe7e 	bl	80036f0 <port_timer_stop_alarm>
    }

    /* The callback is invoked outside the kernel critical section, it
       is re-entered on the callback return. Note that "lasttime" can be
       modified within the callback if some timer function is called.*/
    chSysUnlockFromISR();
 80039f4:	f7ff feac 	bl	8003750 <chSysUnlockFromISR.lto_priv.3>
    vtp->func(vtp, vtp->par);
 80039f8:	9b04      	ldr	r3, [sp, #16]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	9a04      	ldr	r2, [sp, #16]
 80039fe:	6912      	ldr	r2, [r2, #16]
 8003a00:	4611      	mov	r1, r2
 8003a02:	9804      	ldr	r0, [sp, #16]
 8003a04:	4798      	blx	r3
    chSysLockFromISR();
 8003a06:	f7ff fe93 	bl	8003730 <chSysLockFromISR.lto_priv.3>

    /* If a reload is defined the timer needs to be restarted.*/
    if (unlikely(vtp->reload > (sysinterval_t)0)) {
 8003a0a:	9b04      	ldr	r3, [sp, #16]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	bf14      	ite	ne
 8003a12:	2301      	movne	r3, #1
 8003a14:	2300      	moveq	r3, #0
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d0bd      	beq.n	8003998 <chVTDoTickI+0x8>
      sysinterval_t delay;

      /* Refreshing the current time after spending time in the callback for
         a more accurate detection of too fast reloads.*/
      now = chVTGetSystemTimeX();
 8003a1c:	f7ff fea8 	bl	8003770 <chVTGetSystemTimeX.lto_priv.0>
 8003a20:	9003      	str	r0, [sp, #12]
      nowdelta = chTimeDiffX(lasttime, now);
 8003a22:	9903      	ldr	r1, [sp, #12]
 8003a24:	9801      	ldr	r0, [sp, #4]
 8003a26:	f7ff fd8b 	bl	8003540 <chTimeDiffX.lto_priv.0>
 8003a2a:	9002      	str	r0, [sp, #8]

#if !defined(CH_VT_RFCU_DISABLED)
      /* Checking if the required reload is feasible.*/
      if (nowdelta > vtp->reload) {
 8003a2c:	9b04      	ldr	r3, [sp, #16]
 8003a2e:	695b      	ldr	r3, [r3, #20]
 8003a30:	9a02      	ldr	r2, [sp, #8]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d905      	bls.n	8003a42 <chVTDoTickI+0xb2>
        /* System time is already past the deadline, logging the fault and
           proceeding with a minimum delay.*/

        chDbgAssert(false, "skipped deadline");
        chRFCUCollectFaultsI(CH_RFCU_VT_SKIPPED_DEADLINE);
 8003a36:	2002      	movs	r0, #2
 8003a38:	f7ff fd62 	bl	8003500 <chRFCUCollectFaultsI>

        delay = (sysinterval_t)0;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	9306      	str	r3, [sp, #24]
 8003a40:	e004      	b.n	8003a4c <chVTDoTickI+0xbc>
      }
      else {
        /* Enqueuing the timer again using the calculated delta.*/
        delay = vtp->reload - nowdelta;
 8003a42:	9b04      	ldr	r3, [sp, #16]
 8003a44:	695a      	ldr	r2, [r3, #20]
 8003a46:	9b02      	ldr	r3, [sp, #8]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	9306      	str	r3, [sp, #24]
      /* Enqueuing the timer again using the calculated delta.*/
      delay = vtp->reload - nowdelta;
#endif

      /* Special case where the timers list is empty.*/
      if (ch_dlist_isempty(&vtlp->dlist)) {
 8003a4c:	9b05      	ldr	r3, [sp, #20]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7ff fd86 	bl	8003560 <ch_dlist_isempty>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d006      	beq.n	8003a68 <chVTDoTickI+0xd8>

        vt_insert_first(vtlp, vtp, now, delay);
 8003a5a:	9b06      	ldr	r3, [sp, #24]
 8003a5c:	9a03      	ldr	r2, [sp, #12]
 8003a5e:	9904      	ldr	r1, [sp, #16]
 8003a60:	9805      	ldr	r0, [sp, #20]
 8003a62:	f7ff fe8d 	bl	8003780 <vt_insert_first>

        return;
 8003a66:	e042      	b.n	8003aee <chVTDoTickI+0x15e>

      /* Delay as delta from 'lasttime'. Note, it can overflow and the value
         becomes lower than 'nowdelta'. In that case the delta is shortened
         to make it fit the numeric range and the timer will be triggered
         "nowdelta" cycles earlier.*/
      delta = nowdelta + delay;
 8003a68:	9a02      	ldr	r2, [sp, #8]
 8003a6a:	9b06      	ldr	r3, [sp, #24]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	9307      	str	r3, [sp, #28]
      if (delta < nowdelta) {
 8003a70:	9a07      	ldr	r2, [sp, #28]
 8003a72:	9b02      	ldr	r3, [sp, #8]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d201      	bcs.n	8003a7c <chVTDoTickI+0xec>
        delta = delay;
 8003a78:	9b06      	ldr	r3, [sp, #24]
 8003a7a:	9307      	str	r3, [sp, #28]
      }

      /* Insert into delta list. */
      ch_dlist_insert(&vtlp->dlist, &vtp->dlist, delta);
 8003a7c:	9b05      	ldr	r3, [sp, #20]
 8003a7e:	9904      	ldr	r1, [sp, #16]
 8003a80:	9a07      	ldr	r2, [sp, #28]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7ff fdcc 	bl	8003620 <ch_dlist_insert>
  while (true) {
 8003a88:	e786      	b.n	8003998 <chVTDoTickI+0x8>
      break;
 8003a8a:	bf00      	nop
    }
  }

  /* If the list is empty, nothing else to do.*/
  if (ch_dlist_isempty(&vtlp->dlist)) {
 8003a8c:	9b05      	ldr	r3, [sp, #20]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7ff fd66 	bl	8003560 <ch_dlist_isempty>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d128      	bne.n	8003aec <chVTDoTickI+0x15c>
    return;
  }

  /* Calculating the delta to the next alarm time.*/
  delta = vtp->dlist.delta - nowdelta;
 8003a9a:	9b04      	ldr	r3, [sp, #16]
 8003a9c:	689a      	ldr	r2, [r3, #8]
 8003a9e:	9b02      	ldr	r3, [sp, #8]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	9307      	str	r3, [sp, #28]

  /* Limit delta to CH_CFG_ST_TIMEDELTA.*/
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 8003aa4:	9b07      	ldr	r3, [sp, #28]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d801      	bhi.n	8003aae <chVTDoTickI+0x11e>
    delta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8003aaa:	2302      	movs	r3, #2
 8003aac:	9307      	str	r3, [sp, #28]
  }
#endif

  /* Update alarm time to next timer.*/
  {
    sysinterval_t next_alarm = chTimeAddX(now, delta);
 8003aae:	9907      	ldr	r1, [sp, #28]
 8003ab0:	9803      	ldr	r0, [sp, #12]
 8003ab2:	f7ff fd35 	bl	8003520 <chTimeAddX>
 8003ab6:	9000      	str	r0, [sp, #0]

    port_timer_set_alarm(next_alarm);
 8003ab8:	9800      	ldr	r0, [sp, #0]
 8003aba:	f7ff fe21 	bl	8003700 <port_timer_set_alarm>

#if !defined(CH_VT_RFCU_DISABLED)
    if (chTimeDiffX(vtlp->lasttime, chVTGetSystemTimeX()) >
 8003abe:	9b05      	ldr	r3, [sp, #20]
 8003ac0:	68dc      	ldr	r4, [r3, #12]
 8003ac2:	f7ff fe55 	bl	8003770 <chVTGetSystemTimeX.lto_priv.0>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	4619      	mov	r1, r3
 8003aca:	4620      	mov	r0, r4
 8003acc:	f7ff fd38 	bl	8003540 <chTimeDiffX.lto_priv.0>
 8003ad0:	4604      	mov	r4, r0
        chTimeDiffX(vtlp->lasttime, next_alarm)) {
 8003ad2:	9b05      	ldr	r3, [sp, #20]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	9900      	ldr	r1, [sp, #0]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7ff fd31 	bl	8003540 <chTimeDiffX.lto_priv.0>
 8003ade:	4603      	mov	r3, r0
    if (chTimeDiffX(vtlp->lasttime, chVTGetSystemTimeX()) >
 8003ae0:	429c      	cmp	r4, r3
 8003ae2:	d904      	bls.n	8003aee <chVTDoTickI+0x15e>

      chDbgAssert(false, "insufficient delta");
      chRFCUCollectFaultsI(CH_RFCU_VT_INSUFFICIENT_DELTA);
 8003ae4:	2001      	movs	r0, #1
 8003ae6:	f7ff fd0b 	bl	8003500 <chRFCUCollectFaultsI>
 8003aea:	e000      	b.n	8003aee <chVTDoTickI+0x15e>
    return;
 8003aec:	bf00      	nop
                chTimeDiffX(vtlp->lasttime, next_alarm),
                "insufficient delta");
#endif
  }
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8003aee:	b008      	add	sp, #32
 8003af0:	bd10      	pop	{r4, pc}
 8003af2:	bf00      	nop
 8003af4:	20000dc8 	.word	0x20000dc8
	...

08003b00 <ch_queue_dequeue.lto_priv.0>:
static inline ch_queue_t *ch_queue_dequeue(ch_queue_t *p) {
 8003b00:	b082      	sub	sp, #8
 8003b02:	9001      	str	r0, [sp, #4]
  p->prev->next = p->next;
 8003b04:	9b01      	ldr	r3, [sp, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	9a01      	ldr	r2, [sp, #4]
 8003b0a:	6812      	ldr	r2, [r2, #0]
 8003b0c:	601a      	str	r2, [r3, #0]
  p->next->prev = p->prev;
 8003b0e:	9b01      	ldr	r3, [sp, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	9a01      	ldr	r2, [sp, #4]
 8003b14:	6852      	ldr	r2, [r2, #4]
 8003b16:	605a      	str	r2, [r3, #4]
  return p;
 8003b18:	9b01      	ldr	r3, [sp, #4]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	b002      	add	sp, #8
 8003b1e:	4770      	bx	lr

08003b20 <ch_pqueue_remove_highest>:
static inline ch_priority_queue_t *ch_pqueue_remove_highest(ch_priority_queue_t *pqp) {
 8003b20:	b084      	sub	sp, #16
 8003b22:	9001      	str	r0, [sp, #4]
  ch_priority_queue_t *p = pqp->next;
 8003b24:	9b01      	ldr	r3, [sp, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	9303      	str	r3, [sp, #12]
  pqp->next       = p->next;
 8003b2a:	9b03      	ldr	r3, [sp, #12]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	9b01      	ldr	r3, [sp, #4]
 8003b30:	601a      	str	r2, [r3, #0]
  pqp->next->prev = pqp;
 8003b32:	9b01      	ldr	r3, [sp, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	9a01      	ldr	r2, [sp, #4]
 8003b38:	605a      	str	r2, [r3, #4]
  return p;
 8003b3a:	9b03      	ldr	r3, [sp, #12]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	b004      	add	sp, #16
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
	...

08003b50 <ch_pqueue_insert_behind>:
                                                           ch_priority_queue_t *p) {
 8003b50:	b082      	sub	sp, #8
 8003b52:	9001      	str	r0, [sp, #4]
 8003b54:	9100      	str	r1, [sp, #0]
    pqp = pqp->next;
 8003b56:	9b01      	ldr	r3, [sp, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	9301      	str	r3, [sp, #4]
  } while (unlikely(pqp->prio >= p->prio));
 8003b5c:	9b01      	ldr	r3, [sp, #4]
 8003b5e:	689a      	ldr	r2, [r3, #8]
 8003b60:	9b00      	ldr	r3, [sp, #0]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	bf2c      	ite	cs
 8003b68:	2301      	movcs	r3, #1
 8003b6a:	2300      	movcc	r3, #0
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1f1      	bne.n	8003b56 <ch_pqueue_insert_behind+0x6>
  p->next       = pqp;
 8003b72:	9b00      	ldr	r3, [sp, #0]
 8003b74:	9a01      	ldr	r2, [sp, #4]
 8003b76:	601a      	str	r2, [r3, #0]
  p->prev       = pqp->prev;
 8003b78:	9b01      	ldr	r3, [sp, #4]
 8003b7a:	685a      	ldr	r2, [r3, #4]
 8003b7c:	9b00      	ldr	r3, [sp, #0]
 8003b7e:	605a      	str	r2, [r3, #4]
  p->prev->next = p;
 8003b80:	9b00      	ldr	r3, [sp, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	9a00      	ldr	r2, [sp, #0]
 8003b86:	601a      	str	r2, [r3, #0]
  pqp->prev     = p;
 8003b88:	9b01      	ldr	r3, [sp, #4]
 8003b8a:	9a00      	ldr	r2, [sp, #0]
 8003b8c:	605a      	str	r2, [r3, #4]
  return p;
 8003b8e:	9b00      	ldr	r3, [sp, #0]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	b002      	add	sp, #8
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
	...

08003ba0 <ch_pqueue_insert_ahead>:
                                                          ch_priority_queue_t *p) {
 8003ba0:	b082      	sub	sp, #8
 8003ba2:	9001      	str	r0, [sp, #4]
 8003ba4:	9100      	str	r1, [sp, #0]
    pqp = pqp->next;
 8003ba6:	9b01      	ldr	r3, [sp, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	9301      	str	r3, [sp, #4]
  } while (unlikely(pqp->prio > p->prio));
 8003bac:	9b01      	ldr	r3, [sp, #4]
 8003bae:	689a      	ldr	r2, [r3, #8]
 8003bb0:	9b00      	ldr	r3, [sp, #0]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	bf8c      	ite	hi
 8003bb8:	2301      	movhi	r3, #1
 8003bba:	2300      	movls	r3, #0
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1f1      	bne.n	8003ba6 <ch_pqueue_insert_ahead+0x6>
  p->next       = pqp;
 8003bc2:	9b00      	ldr	r3, [sp, #0]
 8003bc4:	9a01      	ldr	r2, [sp, #4]
 8003bc6:	601a      	str	r2, [r3, #0]
  p->prev       = pqp->prev;
 8003bc8:	9b01      	ldr	r3, [sp, #4]
 8003bca:	685a      	ldr	r2, [r3, #4]
 8003bcc:	9b00      	ldr	r3, [sp, #0]
 8003bce:	605a      	str	r2, [r3, #4]
  p->prev->next = p;
 8003bd0:	9b00      	ldr	r3, [sp, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	9a00      	ldr	r2, [sp, #0]
 8003bd6:	601a      	str	r2, [r3, #0]
  pqp->prev     = p;
 8003bd8:	9b01      	ldr	r3, [sp, #4]
 8003bda:	9a00      	ldr	r2, [sp, #0]
 8003bdc:	605a      	str	r2, [r3, #4]
  return p;
 8003bde:	9b00      	ldr	r3, [sp, #0]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	b002      	add	sp, #8
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
	...

08003bf0 <chSysLockFromISR.lto_priv.4>:
static inline void chSysLockFromISR(void) {
 8003bf0:	b082      	sub	sp, #8
 8003bf2:	2320      	movs	r3, #32
 8003bf4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003bf6:	9b01      	ldr	r3, [sp, #4]
 8003bf8:	f383 8811 	msr	BASEPRI, r3
}
 8003bfc:	bf00      	nop
}
 8003bfe:	bf00      	nop
}
 8003c00:	bf00      	nop
}
 8003c02:	bf00      	nop
 8003c04:	b002      	add	sp, #8
 8003c06:	4770      	bx	lr
	...

08003c10 <chSysUnlockFromISR.lto_priv.4>:
static inline void chSysUnlockFromISR(void) {
 8003c10:	b082      	sub	sp, #8
 8003c12:	2300      	movs	r3, #0
 8003c14:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003c16:	9b01      	ldr	r3, [sp, #4]
 8003c18:	f383 8811 	msr	BASEPRI, r3
}
 8003c1c:	bf00      	nop
}
 8003c1e:	bf00      	nop
}
 8003c20:	bf00      	nop
}
 8003c22:	bf00      	nop
 8003c24:	b002      	add	sp, #8
 8003c26:	4770      	bx	lr
	...

08003c30 <chVTIsArmedI>:
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 * @return              true if the timer is armed.
 *
 * @iclass
 */
static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {
 8003c30:	b082      	sub	sp, #8
 8003c32:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();

  return (bool)(vtp->dlist.next != NULL);
 8003c34:	9b01      	ldr	r3, [sp, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	bf14      	ite	ne
 8003c3c:	2301      	movne	r3, #1
 8003c3e:	2300      	moveq	r3, #0
 8003c40:	b2db      	uxtb	r3, r3
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	b002      	add	sp, #8
 8003c46:	4770      	bx	lr
	...

08003c50 <chSemFastSignalI.lto_priv.0>:
 *
 * @param[in] sp        pointer to a @p semaphore_t structure
 *
 * @iclass
 */
static inline void chSemFastSignalI(semaphore_t *sp) {
 8003c50:	b082      	sub	sp, #8
 8003c52:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();

  sp->cnt++;
 8003c54:	9b01      	ldr	r3, [sp, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	1c5a      	adds	r2, r3, #1
 8003c5a:	9b01      	ldr	r3, [sp, #4]
 8003c5c:	609a      	str	r2, [r3, #8]
}
 8003c5e:	bf00      	nop
 8003c60:	b002      	add	sp, #8
 8003c62:	4770      	bx	lr
	...

08003c70 <__sch_ready_behind>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @notapi
 */
static thread_t *__sch_ready_behind(thread_t *tp) {
 8003c70:	b500      	push	{lr}
 8003c72:	b083      	sub	sp, #12
 8003c74:	9001      	str	r0, [sp, #4]

  /* Tracing the event.*/
  __trace_ready(tp, tp->u.rdymsg);

  /* The thread is marked ready.*/
  tp->state = CH_STATE_READY;
 8003c76:	9b01      	ldr	r3, [sp, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Insertion in the priority queue.*/
  return (thread_t *)ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8003c7e:	9b01      	ldr	r3, [sp, #4]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	461a      	mov	r2, r3
 8003c84:	9b01      	ldr	r3, [sp, #4]
 8003c86:	4619      	mov	r1, r3
 8003c88:	4610      	mov	r0, r2
 8003c8a:	f7ff ff61 	bl	8003b50 <ch_pqueue_insert_behind>
 8003c8e:	4603      	mov	r3, r0
                                             &tp->hdr.pqueue);
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	b003      	add	sp, #12
 8003c94:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003ca0 <__sch_ready_ahead>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @notapi
 */
static thread_t *__sch_ready_ahead(thread_t *tp) {
 8003ca0:	b500      	push	{lr}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	9001      	str	r0, [sp, #4]

  /* Tracing the event.*/
  __trace_ready(tp, tp->u.rdymsg);

  /* The thread is marked ready.*/
  tp->state = CH_STATE_READY;
 8003ca6:	9b01      	ldr	r3, [sp, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Insertion in the priority queue.*/
  return (thread_t *)ch_pqueue_insert_ahead(&tp->owner->rlist.pqueue,
 8003cae:	9b01      	ldr	r3, [sp, #4]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	9b01      	ldr	r3, [sp, #4]
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	4610      	mov	r0, r2
 8003cba:	f7ff ff71 	bl	8003ba0 <ch_pqueue_insert_ahead>
 8003cbe:	4603      	mov	r3, r0
                                            &tp->hdr.pqueue);
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	b003      	add	sp, #12
 8003cc4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003cd0 <__sch_wakeup>:
}

/*
 * Timeout wakeup callback.
 */
static void __sch_wakeup(virtual_timer_t *vtp, void *p) {
 8003cd0:	b500      	push	{lr}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	9001      	str	r0, [sp, #4]
 8003cd6:	9100      	str	r1, [sp, #0]
  thread_t *tp = (thread_t *)p;
 8003cd8:	9b00      	ldr	r3, [sp, #0]
 8003cda:	9303      	str	r3, [sp, #12]

  (void)vtp;

  chSysLockFromISR();
 8003cdc:	f7ff ff88 	bl	8003bf0 <chSysLockFromISR.lto_priv.4>
  switch (tp->state) {
 8003ce0:	9b03      	ldr	r3, [sp, #12]
 8003ce2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ce6:	2b07      	cmp	r3, #7
 8003ce8:	d824      	bhi.n	8003d34 <__sch_wakeup+0x64>
 8003cea:	a201      	add	r2, pc, #4	; (adr r2, 8003cf0 <__sch_wakeup+0x20>)
 8003cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf0:	08003d11 	.word	0x08003d11
 8003cf4:	08003d35 	.word	0x08003d35
 8003cf8:	08003d35 	.word	0x08003d35
 8003cfc:	08003d17 	.word	0x08003d17
 8003d00:	08003d2b 	.word	0x08003d2b
 8003d04:	08003d21 	.word	0x08003d21
 8003d08:	08003d35 	.word	0x08003d35
 8003d0c:	08003d2b 	.word	0x08003d2b
  case CH_STATE_READY:
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
 8003d10:	f7ff ff7e 	bl	8003c10 <chSysUnlockFromISR.lto_priv.4>
    return;
 8003d14:	e019      	b.n	8003d4a <__sch_wakeup+0x7a>
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
 8003d16:	9b03      	ldr	r3, [sp, #12]
 8003d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	601a      	str	r2, [r3, #0]
    break;
 8003d1e:	e00a      	b.n	8003d36 <__sch_wakeup+0x66>
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
 8003d20:	9b03      	ldr	r3, [sp, #12]
 8003d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7ff ff93 	bl	8003c50 <chSemFastSignalI.lto_priv.0>
    /* Falls through.*/
#if (CH_CFG_USE_CONDVARS == TRUE) && (CH_CFG_USE_CONDVARS_TIMEOUT == TRUE)
  case CH_STATE_WTCOND:
#endif
    /* States requiring dequeuing.*/
    (void) ch_queue_dequeue(&tp->hdr.queue);
 8003d2a:	9b03      	ldr	r3, [sp, #12]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7ff fee7 	bl	8003b00 <ch_queue_dequeue.lto_priv.0>
    break;
 8003d32:	e000      	b.n	8003d36 <__sch_wakeup+0x66>
  default:
    /* Any other state, nothing to do.*/
    break;
 8003d34:	bf00      	nop
  }

  /* Standard message for timeout conditions.*/
  tp->u.rdymsg = MSG_TIMEOUT;
 8003d36:	9b03      	ldr	r3, [sp, #12]
 8003d38:	f04f 32ff 	mov.w	r2, #4294967295
 8003d3c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Goes behind peers because it went to sleep voluntarily.*/
  (void) __sch_ready_behind(tp);
 8003d3e:	9803      	ldr	r0, [sp, #12]
 8003d40:	f7ff ff96 	bl	8003c70 <__sch_ready_behind>
  chSysUnlockFromISR();
 8003d44:	f7ff ff64 	bl	8003c10 <chSysUnlockFromISR.lto_priv.4>

  return;
 8003d48:	bf00      	nop
}
 8003d4a:	b005      	add	sp, #20
 8003d4c:	f85d fb04 	ldr.w	pc, [sp], #4

08003d50 <chSchReadyI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 8003d50:	b500      	push	{lr}
 8003d52:	b083      	sub	sp, #12
 8003d54:	9001      	str	r0, [sp, #4]
       the other core.*/
    chSysNotifyInstance(tp->owner);
  }
#endif

  return __sch_ready_behind(tp);
 8003d56:	9801      	ldr	r0, [sp, #4]
 8003d58:	f7ff ff8a 	bl	8003c70 <__sch_ready_behind>
 8003d5c:	4603      	mov	r3, r0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	b003      	add	sp, #12
 8003d62:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d66:	bf00      	nop
	...

08003d70 <chSchGoSleepS>:
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8003d70:	b500      	push	{lr}
 8003d72:	b087      	sub	sp, #28
 8003d74:	4603      	mov	r3, r0
 8003d76:	f88d 3007 	strb.w	r3, [sp, #7]
  os_instance_t *oip = currcore;
 8003d7a:	4b0f      	ldr	r3, [pc, #60]	; (8003db8 <chSchGoSleepS+0x48>)
 8003d7c:	9304      	str	r3, [sp, #16]
  thread_t *otp = __instance_get_currthread(oip);
 8003d7e:	9b04      	ldr	r3, [sp, #16]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	9303      	str	r3, [sp, #12]

  chDbgAssert(otp != chSysGetIdleThreadX(), "sleeping in idle thread");
  chDbgAssert(otp->owner == oip, "invalid core");

  /* New state.*/
  otp->state = newstate;
 8003d84:	9b03      	ldr	r3, [sp, #12]
 8003d86:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003d8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
     time quantum when it will wakeup.*/
  otp->ticks = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  ntp = (thread_t *)ch_pqueue_remove_highest(&oip->rlist.pqueue);
 8003d8e:	9b04      	ldr	r3, [sp, #16]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7ff fec5 	bl	8003b20 <ch_pqueue_remove_highest>
 8003d96:	9005      	str	r0, [sp, #20]
  ntp->state = CH_STATE_CURRENT;
 8003d98:	9b05      	ldr	r3, [sp, #20]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 8003da0:	9b04      	ldr	r3, [sp, #16]
 8003da2:	9a05      	ldr	r2, [sp, #20]
 8003da4:	60da      	str	r2, [r3, #12]
  if (ntp->hdr.pqueue.prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }

  /* Swap operation as tail call.*/
  chSysSwitch(ntp, otp);
 8003da6:	9903      	ldr	r1, [sp, #12]
 8003da8:	9805      	ldr	r0, [sp, #20]
 8003daa:	f7fc fa99 	bl	80002e0 <__port_switch>
}
 8003dae:	bf00      	nop
 8003db0:	b007      	add	sp, #28
 8003db2:	f85d fb04 	ldr.w	pc, [sp], #4
 8003db6:	bf00      	nop
 8003db8:	20000db8 	.word	0x20000db8
 8003dbc:	00000000 	.word	0x00000000

08003dc0 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8003dc0:	b500      	push	{lr}
 8003dc2:	b08b      	sub	sp, #44	; 0x2c
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	9100      	str	r1, [sp, #0]
 8003dc8:	f88d 3007 	strb.w	r3, [sp, #7]
  thread_t *tp = __instance_get_currthread(currcore);
 8003dcc:	4b15      	ldr	r3, [pc, #84]	; (8003e24 <chSchGoSleepTimeoutS+0x64>)
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	9309      	str	r3, [sp, #36]	; 0x24

  chDbgCheckClassS();

  if (TIME_INFINITE != timeout) {
 8003dd2:	9b00      	ldr	r3, [sp, #0]
 8003dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd8:	d016      	beq.n	8003e08 <chSchGoSleepTimeoutS+0x48>
    virtual_timer_t vt;

    chVTDoSetI(&vt, timeout, __sch_wakeup, (void *)tp);
 8003dda:	a803      	add	r0, sp, #12
 8003ddc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dde:	4a12      	ldr	r2, [pc, #72]	; (8003e28 <chSchGoSleepTimeoutS+0x68>)
 8003de0:	9900      	ldr	r1, [sp, #0]
 8003de2:	f7ff fd3d 	bl	8003860 <chVTDoSetI>
    chSchGoSleepS(newstate);
 8003de6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7ff ffc0 	bl	8003d70 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8003df0:	ab03      	add	r3, sp, #12
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7ff ff1c 	bl	8003c30 <chVTIsArmedI>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d009      	beq.n	8003e12 <chSchGoSleepTimeoutS+0x52>
      chVTDoResetI(&vt);
 8003dfe:	ab03      	add	r3, sp, #12
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7ff fd4d 	bl	80038a0 <chVTDoResetI>
 8003e06:	e004      	b.n	8003e12 <chSchGoSleepTimeoutS+0x52>
    }
  }
  else {
    chSchGoSleepS(newstate);
 8003e08:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7ff ffaf 	bl	8003d70 <chSchGoSleepS>
  }

  return tp->u.rdymsg;
 8003e12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e16:	bf00      	nop
 8003e18:	bf00      	nop
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	b00b      	add	sp, #44	; 0x2c
 8003e1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003e22:	bf00      	nop
 8003e24:	20000db8 	.word	0x20000db8
 8003e28:	08003cd1 	.word	0x08003cd1
 8003e2c:	00000000 	.word	0x00000000

08003e30 <chSchWakeupS>:
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8003e30:	b500      	push	{lr}
 8003e32:	b085      	sub	sp, #20
 8003e34:	9001      	str	r0, [sp, #4]
 8003e36:	9100      	str	r1, [sp, #0]
  os_instance_t *oip = currcore;
 8003e38:	4b14      	ldr	r3, [pc, #80]	; (8003e8c <chSchWakeupS+0x5c>)
 8003e3a:	9302      	str	r3, [sp, #8]
  thread_t *otp = __instance_get_currthread(oip);
 8003e3c:	9b02      	ldr	r3, [sp, #8]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	9303      	str	r3, [sp, #12]
              (oip->rlist.current->hdr.pqueue.prio >= oip->rlist.pqueue.next->prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->u.rdymsg = msg;
 8003e42:	9b01      	ldr	r3, [sp, #4]
 8003e44:	9a00      	ldr	r2, [sp, #0]
 8003e46:	629a      	str	r2, [r3, #40]	; 0x28
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.
     Note, we are favoring the path where the woken thread has higher
     priority.*/
  if (unlikely(ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio)) {
 8003e48:	9b01      	ldr	r3, [sp, #4]
 8003e4a:	689a      	ldr	r2, [r3, #8]
 8003e4c:	9b03      	ldr	r3, [sp, #12]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	bf94      	ite	ls
 8003e54:	2301      	movls	r3, #1
 8003e56:	2300      	movhi	r3, #0
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d003      	beq.n	8003e66 <chSchWakeupS+0x36>
    (void) __sch_ready_behind(ntp);
 8003e5e:	9801      	ldr	r0, [sp, #4]
 8003e60:	f7ff ff06 	bl	8003c70 <__sch_ready_behind>
    __instance_set_currthread(oip, ntp);

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
  }
}
 8003e64:	e00e      	b.n	8003e84 <chSchWakeupS+0x54>
    otp = __sch_ready_ahead(otp);
 8003e66:	9803      	ldr	r0, [sp, #12]
 8003e68:	f7ff ff1a 	bl	8003ca0 <__sch_ready_ahead>
 8003e6c:	9003      	str	r0, [sp, #12]
    ntp->state = CH_STATE_CURRENT;
 8003e6e:	9b01      	ldr	r3, [sp, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    __instance_set_currthread(oip, ntp);
 8003e76:	9b02      	ldr	r3, [sp, #8]
 8003e78:	9a01      	ldr	r2, [sp, #4]
 8003e7a:	60da      	str	r2, [r3, #12]
    chSysSwitch(ntp, otp);
 8003e7c:	9903      	ldr	r1, [sp, #12]
 8003e7e:	9801      	ldr	r0, [sp, #4]
 8003e80:	f7fc fa2e 	bl	80002e0 <__port_switch>
}
 8003e84:	bf00      	nop
 8003e86:	b005      	add	sp, #20
 8003e88:	f85d fb04 	ldr.w	pc, [sp], #4
 8003e8c:	20000db8 	.word	0x20000db8

08003e90 <chSchIsPreemptionRequired>:
 *                      immediately.
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
 8003e90:	b084      	sub	sp, #16
  os_instance_t *oip = currcore;
 8003e92:	4b0b      	ldr	r3, [pc, #44]	; (8003ec0 <chSchIsPreemptionRequired+0x30>)
 8003e94:	9303      	str	r3, [sp, #12]
  thread_t *tp = __instance_get_currthread(oip);
 8003e96:	9b03      	ldr	r3, [sp, #12]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	9302      	str	r3, [sp, #8]

  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8003e9c:	9b03      	ldr	r3, [sp, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	9301      	str	r3, [sp, #4]
  tprio_t p2 = tp->hdr.pqueue.prio;
 8003ea4:	9b02      	ldr	r3, [sp, #8]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	9300      	str	r3, [sp, #0]
     if the first thread on the ready queue has equal or higher priority.*/
  return (tp->ticks > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
#else
  /* If the round robin preemption feature is not enabled then performs a
     simpler comparison.*/
  return p1 > p2;
 8003eaa:	9a01      	ldr	r2, [sp, #4]
 8003eac:	9b00      	ldr	r3, [sp, #0]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	bf8c      	ite	hi
 8003eb2:	2301      	movhi	r3, #1
 8003eb4:	2300      	movls	r3, #0
 8003eb6:	b2db      	uxtb	r3, r3
#endif
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	b004      	add	sp, #16
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	20000db8 	.word	0x20000db8
	...

08003ed0 <chSchDoPreemption>:
 * @note    Not a user function, it is meant to be invoked from within
 *          the port layer in the IRQ-related preemption code.
 *
 * @special
 */
void chSchDoPreemption(void) {
 8003ed0:	b500      	push	{lr}
 8003ed2:	b085      	sub	sp, #20
  os_instance_t *oip = currcore;
 8003ed4:	4b0e      	ldr	r3, [pc, #56]	; (8003f10 <chSchDoPreemption+0x40>)
 8003ed6:	9303      	str	r3, [sp, #12]
  thread_t *otp = __instance_get_currthread(oip);
 8003ed8:	9b03      	ldr	r3, [sp, #12]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	9302      	str	r3, [sp, #8]
  thread_t *ntp;

  /* Picks the first thread from the ready queue and makes it current.*/
  ntp = (thread_t *)ch_pqueue_remove_highest(&oip->rlist.pqueue);
 8003ede:	9b03      	ldr	r3, [sp, #12]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7ff fe1d 	bl	8003b20 <ch_pqueue_remove_highest>
 8003ee6:	9001      	str	r0, [sp, #4]
  ntp->state = CH_STATE_CURRENT;
 8003ee8:	9b01      	ldr	r3, [sp, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 8003ef0:	9b03      	ldr	r3, [sp, #12]
 8003ef2:	9a01      	ldr	r2, [sp, #4]
 8003ef4:	60da      	str	r2, [r3, #12]
    otp = __sch_ready_ahead(otp);
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  otp = __sch_ready_ahead(otp);
 8003ef6:	9802      	ldr	r0, [sp, #8]
 8003ef8:	f7ff fed2 	bl	8003ca0 <__sch_ready_ahead>
 8003efc:	9002      	str	r0, [sp, #8]
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(ntp, otp);
 8003efe:	9902      	ldr	r1, [sp, #8]
 8003f00:	9801      	ldr	r0, [sp, #4]
 8003f02:	f7fc f9ed 	bl	80002e0 <__port_switch>
}
 8003f06:	bf00      	nop
 8003f08:	b005      	add	sp, #20
 8003f0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8003f0e:	bf00      	nop
 8003f10:	20000db8 	.word	0x20000db8
	...

08003f20 <__rfcu_object_init>:
 *
 * @param[out] rfcup    pointer to the @p rfcu_t structure
 *
 * @notapi
 */
static inline void __rfcu_object_init(rfcu_t *rfcup) {
 8003f20:	b082      	sub	sp, #8
 8003f22:	9001      	str	r0, [sp, #4]

  rfcup->mask = (rfcu_mask_t)0;
 8003f24:	9b01      	ldr	r3, [sp, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	601a      	str	r2, [r3, #0]
}
 8003f2a:	bf00      	nop
 8003f2c:	b002      	add	sp, #8
 8003f2e:	4770      	bx	lr

08003f30 <__dbg_object_init>:
 *
 * @param[out] sdp      pointer to the @p system_debug_t structure
 *
 * @notapi
 */
static inline void __dbg_object_init(system_debug_t *sdp) {
 8003f30:	b082      	sub	sp, #8
 8003f32:	9001      	str	r0, [sp, #4]

  sdp->panic_msg = NULL;
 8003f34:	9b01      	ldr	r3, [sp, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	601a      	str	r2, [r3, #0]
#if CH_DBG_SYSTEM_STATE_CHECK == TRUE
  /* The initial state is assumed to be within a critical zone.*/
  sdp->isr_cnt  = (cnt_t)0;
  sdp->lock_cnt = (cnt_t)1;
#endif
}
 8003f3a:	bf00      	nop
 8003f3c:	b002      	add	sp, #8
 8003f3e:	4770      	bx	lr

08003f40 <ch_queue_init.lto_priv.2>:
static inline void ch_queue_init(ch_queue_t *qp) {
 8003f40:	b082      	sub	sp, #8
 8003f42:	9001      	str	r0, [sp, #4]
  qp->next = qp;
 8003f44:	9b01      	ldr	r3, [sp, #4]
 8003f46:	9a01      	ldr	r2, [sp, #4]
 8003f48:	601a      	str	r2, [r3, #0]
  qp->prev = qp;
 8003f4a:	9b01      	ldr	r3, [sp, #4]
 8003f4c:	9a01      	ldr	r2, [sp, #4]
 8003f4e:	605a      	str	r2, [r3, #4]
}
 8003f50:	bf00      	nop
 8003f52:	b002      	add	sp, #8
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
	...

08003f60 <ch_pqueue_init>:
static inline void ch_pqueue_init(ch_priority_queue_t *pqp) {
 8003f60:	b082      	sub	sp, #8
 8003f62:	9001      	str	r0, [sp, #4]
  pqp->next = pqp;
 8003f64:	9b01      	ldr	r3, [sp, #4]
 8003f66:	9a01      	ldr	r2, [sp, #4]
 8003f68:	601a      	str	r2, [r3, #0]
  pqp->prev = pqp;
 8003f6a:	9b01      	ldr	r3, [sp, #4]
 8003f6c:	9a01      	ldr	r2, [sp, #4]
 8003f6e:	605a      	str	r2, [r3, #4]
  pqp->prio = (tprio_t)0;
 8003f70:	9b01      	ldr	r3, [sp, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	609a      	str	r2, [r3, #8]
}
 8003f76:	bf00      	nop
 8003f78:	b002      	add	sp, #8
 8003f7a:	4770      	bx	lr
 8003f7c:	0000      	movs	r0, r0
	...

08003f80 <ch_dlist_init>:
static inline void ch_dlist_init(ch_delta_list_t *dlhp) {
 8003f80:	b082      	sub	sp, #8
 8003f82:	9001      	str	r0, [sp, #4]
  dlhp->next  = dlhp;
 8003f84:	9b01      	ldr	r3, [sp, #4]
 8003f86:	9a01      	ldr	r2, [sp, #4]
 8003f88:	601a      	str	r2, [r3, #0]
  dlhp->prev  = dlhp;
 8003f8a:	9b01      	ldr	r3, [sp, #4]
 8003f8c:	9a01      	ldr	r2, [sp, #4]
 8003f8e:	605a      	str	r2, [r3, #4]
  dlhp->delta = (sysinterval_t)-1;
 8003f90:	9b01      	ldr	r3, [sp, #4]
 8003f92:	f04f 32ff 	mov.w	r2, #4294967295
 8003f96:	609a      	str	r2, [r3, #8]
}
 8003f98:	bf00      	nop
 8003f9a:	b002      	add	sp, #8
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop

08003fa0 <port_timer_get_time.lto_priv.1>:
static inline systime_t port_timer_get_time(void) {
 8003fa0:	b508      	push	{r3, lr}
  return stGetCounter();
 8003fa2:	f7fd fb45 	bl	8001630 <stGetCounter>
 8003fa6:	4603      	mov	r3, r0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	bd08      	pop	{r3, pc}
 8003fac:	0000      	movs	r0, r0
	...

08003fb0 <chVTGetSystemTimeX.lto_priv.1>:
static inline systime_t chVTGetSystemTimeX(void) {
 8003fb0:	b508      	push	{r3, lr}
  return port_timer_get_time();
 8003fb2:	f7ff fff5 	bl	8003fa0 <port_timer_get_time.lto_priv.1>
 8003fb6:	4603      	mov	r3, r0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	bd08      	pop	{r3, pc}
 8003fbc:	0000      	movs	r0, r0
	...

08003fc0 <__vt_object_init>:
 *
 * @param[out] vtlp     pointer to the @p virtual_timers_list_t structure
 *
 * @notapi
 */
static inline void __vt_object_init(virtual_timers_list_t *vtlp) {
 8003fc0:	b530      	push	{r4, r5, lr}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	9001      	str	r0, [sp, #4]

  ch_dlist_init(&vtlp->dlist);
 8003fc6:	9b01      	ldr	r3, [sp, #4]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7ff ffd9 	bl	8003f80 <ch_dlist_init>
#if CH_CFG_ST_TIMEDELTA == 0
  vtlp->systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  vtlp->lasttime = (systime_t)0;
 8003fce:	9b01      	ldr	r3, [sp, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	60da      	str	r2, [r3, #12]
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
#if CH_CFG_USE_TIMESTAMP == TRUE
  vtlp->laststamp = (systimestamp_t)chVTGetSystemTimeX();
 8003fd4:	f7ff ffec 	bl	8003fb0 <chVTGetSystemTimeX.lto_priv.1>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2200      	movs	r2, #0
 8003fdc:	461c      	mov	r4, r3
 8003fde:	4615      	mov	r5, r2
 8003fe0:	9b01      	ldr	r3, [sp, #4]
 8003fe2:	e9c3 4504 	strd	r4, r5, [r3, #16]
#endif
}
 8003fe6:	bf00      	nop
 8003fe8:	b003      	add	sp, #12
 8003fea:	bd30      	pop	{r4, r5, pc}
 8003fec:	0000      	movs	r0, r0
	...

08003ff0 <__reg_object_init>:
 *
 * @param[out] rp       pointer to a @p registry_t structure
 *
 * @init
 */
static inline void __reg_object_init(registry_t *rp) {
 8003ff0:	b500      	push	{lr}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	9001      	str	r0, [sp, #4]

  ch_queue_init(&rp->queue);
 8003ff6:	9b01      	ldr	r3, [sp, #4]
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7ff ffa1 	bl	8003f40 <ch_queue_init.lto_priv.2>
}
 8003ffe:	bf00      	nop
 8004000:	b003      	add	sp, #12
 8004002:	f85d fb04 	ldr.w	pc, [sp], #4
 8004006:	bf00      	nop
	...

08004010 <__idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void __idle_thread(void *p) {
 8004010:	b082      	sub	sp, #8
 8004012:	9001      	str	r0, [sp, #4]
__STATIC_FORCEINLINE void port_wait_for_interrupt(void) {

#if CORTEX_ENABLE_WFI_IDLE == TRUE
  __WFI();
#endif
}
 8004014:	bf00      	nop
  (void)p;

  while (true) {
    /*lint -save -e522 [2.2] Apparently no side effects because it contains
      an asm instruction.*/
    port_wait_for_interrupt();
 8004016:	e7fd      	b.n	8004014 <__idle_thread+0x4>
	...

08004020 <chInstanceObjectInit>:
 * @param[in] oicp      pointer to the @p os_instance_config_t structure
 *
 * @special
 */
void chInstanceObjectInit(os_instance_t *oip,
                          const os_instance_config_t *oicp) {
 8004020:	b500      	push	{lr}
 8004022:	b08b      	sub	sp, #44	; 0x2c
 8004024:	9001      	str	r0, [sp, #4]
 8004026:	9100      	str	r1, [sp, #0]

  /* Registering into the global system structure.*/
#if CH_CFG_SMP_MODE == TRUE
  core_id = port_get_core_id();
#else
  core_id = 0U;
 8004028:	2300      	movs	r3, #0
 800402a:	9309      	str	r3, [sp, #36]	; 0x24
#endif
  chDbgAssert(ch_system.instances[core_id] == NULL, "instance already registered");
  ch_system.instances[core_id] = oip;
 800402c:	4a28      	ldr	r2, [pc, #160]	; (80040d0 <chInstanceObjectInit+0xb0>)
 800402e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	4413      	add	r3, r2
 8004034:	9a01      	ldr	r2, [sp, #4]
 8004036:	605a      	str	r2, [r3, #4]

  /* Core associated to this instance.*/
  oip->core_id = core_id;
 8004038:	9b01      	ldr	r3, [sp, #4]
 800403a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800403c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Keeping a reference to the configuration data.*/
  oip->config = oicp;
 800403e:	9b01      	ldr	r3, [sp, #4]
 8004040:	9a00      	ldr	r2, [sp, #0]
 8004042:	639a      	str	r2, [r3, #56]	; 0x38

  /* Port initialization for the current instance.*/
  port_init(oip);
 8004044:	9801      	ldr	r0, [sp, #4]
 8004046:	f000 fce3 	bl	8004a10 <port_init>

  /* Ready list initialization.*/
  ch_pqueue_init(&oip->rlist.pqueue);
 800404a:	9b01      	ldr	r3, [sp, #4]
 800404c:	4618      	mov	r0, r3
 800404e:	f7ff ff87 	bl	8003f60 <ch_pqueue_init>

#if (CH_CFG_USE_REGISTRY == TRUE) && (CH_CFG_SMP_MODE == FALSE)
  /* Registry initialization when SMP mode is disabled.*/
  __reg_object_init(&oip->reglist);
 8004052:	9b01      	ldr	r3, [sp, #4]
 8004054:	3328      	adds	r3, #40	; 0x28
 8004056:	4618      	mov	r0, r3
 8004058:	f7ff ffca 	bl	8003ff0 <__reg_object_init>
#endif

#if CH_CFG_SMP_MODE == FALSE
  /* RFCU initialization when SMP mode is disabled.*/
  __rfcu_object_init(&oip->rfcu);
 800405c:	9b01      	ldr	r3, [sp, #4]
 800405e:	3334      	adds	r3, #52	; 0x34
 8004060:	4618      	mov	r0, r3
 8004062:	f7ff ff5d 	bl	8003f20 <__rfcu_object_init>
#endif

  /* Virtual timers list initialization.*/
  __vt_object_init(&oip->vtlist);
 8004066:	9b01      	ldr	r3, [sp, #4]
 8004068:	3310      	adds	r3, #16
 800406a:	4618      	mov	r0, r3
 800406c:	f7ff ffa8 	bl	8003fc0 <__vt_object_init>

  /* Debug support initialization.*/
  __dbg_object_init(&oip->dbg);
 8004070:	9b01      	ldr	r3, [sp, #4]
 8004072:	3384      	adds	r3, #132	; 0x84
 8004074:	4618      	mov	r0, r3
 8004076:	f7ff ff5b 	bl	8003f30 <__dbg_object_init>
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  oip->rlist.current = __thd_object_init(oip, &oip->mainthread,
 800407a:	9b01      	ldr	r3, [sp, #4]
 800407c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8004080:	2380      	movs	r3, #128	; 0x80
 8004082:	4a14      	ldr	r2, [pc, #80]	; (80040d4 <chInstanceObjectInit+0xb4>)
 8004084:	9801      	ldr	r0, [sp, #4]
 8004086:	f000 f903 	bl	8004290 <__thd_object_init>
 800408a:	4602      	mov	r2, r0
 800408c:	9b01      	ldr	r3, [sp, #4]
 800408e:	60da      	str	r2, [r3, #12]
  oip->rlist.current = __thd_object_init(oip, &oip->mainthread,
                                         "idle", IDLEPRIO);
#endif

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  oip->rlist.current->wabase = oicp->mainthread_base;
 8004090:	9b01      	ldr	r3, [sp, #4]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	9a00      	ldr	r2, [sp, #0]
 8004096:	6852      	ldr	r2, [r2, #4]
 8004098:	621a      	str	r2, [r3, #32]
#endif

  /* Setting up the caller as current thread.*/
  oip->rlist.current->state = CH_STATE_CURRENT;
 800409a:	9b01      	ldr	r3, [sp, #4]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* User instance initialization hook.*/
  CH_CFG_OS_INSTANCE_INIT_HOOK(oip);

#if CH_CFG_NO_IDLE_THREAD == FALSE
  {
    thread_descriptor_t idle_descriptor = {
 80040a4:	4b0c      	ldr	r3, [pc, #48]	; (80040d8 <chInstanceObjectInit+0xb8>)
 80040a6:	9303      	str	r3, [sp, #12]
      .name     = "idle",
      .wbase    = oicp->idlethread_base,
 80040a8:	9b00      	ldr	r3, [sp, #0]
 80040aa:	68db      	ldr	r3, [r3, #12]
    thread_descriptor_t idle_descriptor = {
 80040ac:	9304      	str	r3, [sp, #16]
      .wend     = oicp->idlethread_end,
 80040ae:	9b00      	ldr	r3, [sp, #0]
 80040b0:	691b      	ldr	r3, [r3, #16]
    thread_descriptor_t idle_descriptor = {
 80040b2:	9305      	str	r3, [sp, #20]
 80040b4:	2301      	movs	r3, #1
 80040b6:	9306      	str	r3, [sp, #24]
 80040b8:	4b08      	ldr	r3, [pc, #32]	; (80040dc <chInstanceObjectInit+0xbc>)
 80040ba:	9307      	str	r3, [sp, #28]
 80040bc:	2300      	movs	r3, #0
 80040be:	9308      	str	r3, [sp, #32]
    };

    /* This thread has the lowest priority in the system, its role is just to
       serve interrupts in its context while keeping the lowest energy saving
       mode compatible with the system status.*/
    (void) chThdCreateI(&idle_descriptor);
 80040c0:	ab03      	add	r3, sp, #12
 80040c2:	4618      	mov	r0, r3
 80040c4:	f000 f954 	bl	8004370 <chThdCreateI>
  }
#endif
}
 80040c8:	bf00      	nop
 80040ca:	b00b      	add	sp, #44	; 0x2c
 80040cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80040d0:	20000da8 	.word	0x20000da8
 80040d4:	08006cec 	.word	0x08006cec
 80040d8:	08006cdc 	.word	0x08006cdc
 80040dc:	08004011 	.word	0x08004011

080040e0 <ch_list_init>:
static inline void ch_list_init(ch_list_t *lp) {
 80040e0:	b082      	sub	sp, #8
 80040e2:	9001      	str	r0, [sp, #4]
  lp->next = lp;
 80040e4:	9b01      	ldr	r3, [sp, #4]
 80040e6:	9a01      	ldr	r2, [sp, #4]
 80040e8:	601a      	str	r2, [r3, #0]
}
 80040ea:	bf00      	nop
 80040ec:	b002      	add	sp, #8
 80040ee:	4770      	bx	lr

080040f0 <ch_list_notempty>:
static inline bool ch_list_notempty(ch_list_t *lp) {
 80040f0:	b082      	sub	sp, #8
 80040f2:	9001      	str	r0, [sp, #4]
  return (bool)(lp->next != lp);
 80040f4:	9b01      	ldr	r3, [sp, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	9a01      	ldr	r2, [sp, #4]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	bf14      	ite	ne
 80040fe:	2301      	movne	r3, #1
 8004100:	2300      	moveq	r3, #0
 8004102:	b2db      	uxtb	r3, r3
}
 8004104:	4618      	mov	r0, r3
 8004106:	b002      	add	sp, #8
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	0000      	movs	r0, r0
	...

08004110 <ch_list_unlink>:
static inline ch_list_t *ch_list_unlink(ch_list_t *lp) {
 8004110:	b084      	sub	sp, #16
 8004112:	9001      	str	r0, [sp, #4]
  ch_list_t *p = lp->next;
 8004114:	9b01      	ldr	r3, [sp, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	9303      	str	r3, [sp, #12]
  lp->next = p->next;
 800411a:	9b03      	ldr	r3, [sp, #12]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	9b01      	ldr	r3, [sp, #4]
 8004120:	601a      	str	r2, [r3, #0]
  return p;
 8004122:	9b03      	ldr	r3, [sp, #12]
}
 8004124:	4618      	mov	r0, r3
 8004126:	b004      	add	sp, #16
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	0000      	movs	r0, r0
	...

08004130 <ch_queue_init.lto_priv.3>:
static inline void ch_queue_init(ch_queue_t *qp) {
 8004130:	b082      	sub	sp, #8
 8004132:	9001      	str	r0, [sp, #4]
  qp->next = qp;
 8004134:	9b01      	ldr	r3, [sp, #4]
 8004136:	9a01      	ldr	r2, [sp, #4]
 8004138:	601a      	str	r2, [r3, #0]
  qp->prev = qp;
 800413a:	9b01      	ldr	r3, [sp, #4]
 800413c:	9a01      	ldr	r2, [sp, #4]
 800413e:	605a      	str	r2, [r3, #4]
}
 8004140:	bf00      	nop
 8004142:	b002      	add	sp, #8
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
	...

08004150 <ch_queue_notempty.lto_priv.0>:
static inline bool ch_queue_notempty(const ch_queue_t *qp) {
 8004150:	b082      	sub	sp, #8
 8004152:	9001      	str	r0, [sp, #4]
  return (bool)(qp->next != qp);
 8004154:	9b01      	ldr	r3, [sp, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	9a01      	ldr	r2, [sp, #4]
 800415a:	429a      	cmp	r2, r3
 800415c:	bf14      	ite	ne
 800415e:	2301      	movne	r3, #1
 8004160:	2300      	moveq	r3, #0
 8004162:	b2db      	uxtb	r3, r3
}
 8004164:	4618      	mov	r0, r3
 8004166:	b002      	add	sp, #8
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	0000      	movs	r0, r0
	...

08004170 <ch_queue_insert.lto_priv.0>:
static inline void ch_queue_insert(ch_queue_t *qp, ch_queue_t *p) {
 8004170:	b082      	sub	sp, #8
 8004172:	9001      	str	r0, [sp, #4]
 8004174:	9100      	str	r1, [sp, #0]
  p->next       = qp;
 8004176:	9b00      	ldr	r3, [sp, #0]
 8004178:	9a01      	ldr	r2, [sp, #4]
 800417a:	601a      	str	r2, [r3, #0]
  p->prev       = qp->prev;
 800417c:	9b01      	ldr	r3, [sp, #4]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	9b00      	ldr	r3, [sp, #0]
 8004182:	605a      	str	r2, [r3, #4]
  p->prev->next = p;
 8004184:	9b00      	ldr	r3, [sp, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	9a00      	ldr	r2, [sp, #0]
 800418a:	601a      	str	r2, [r3, #0]
  qp->prev      = p;
 800418c:	9b01      	ldr	r3, [sp, #4]
 800418e:	9a00      	ldr	r2, [sp, #0]
 8004190:	605a      	str	r2, [r3, #4]
}
 8004192:	bf00      	nop
 8004194:	b002      	add	sp, #8
 8004196:	4770      	bx	lr
	...

080041a0 <ch_queue_fifo_remove.lto_priv.0>:
static inline ch_queue_t *ch_queue_fifo_remove(ch_queue_t *qp) {
 80041a0:	b084      	sub	sp, #16
 80041a2:	9001      	str	r0, [sp, #4]
  ch_queue_t *p = qp->next;
 80041a4:	9b01      	ldr	r3, [sp, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	9303      	str	r3, [sp, #12]
  qp->next       = p->next;
 80041aa:	9b03      	ldr	r3, [sp, #12]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	9b01      	ldr	r3, [sp, #4]
 80041b0:	601a      	str	r2, [r3, #0]
  qp->next->prev = qp;
 80041b2:	9b01      	ldr	r3, [sp, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	9a01      	ldr	r2, [sp, #4]
 80041b8:	605a      	str	r2, [r3, #4]
  return p;
 80041ba:	9b03      	ldr	r3, [sp, #12]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	b004      	add	sp, #16
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
	...

080041d0 <ch_queue_dequeue.lto_priv.1>:
static inline ch_queue_t *ch_queue_dequeue(ch_queue_t *p) {
 80041d0:	b082      	sub	sp, #8
 80041d2:	9001      	str	r0, [sp, #4]
  p->prev->next = p->next;
 80041d4:	9b01      	ldr	r3, [sp, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	9a01      	ldr	r2, [sp, #4]
 80041da:	6812      	ldr	r2, [r2, #0]
 80041dc:	601a      	str	r2, [r3, #0]
  p->next->prev = p->prev;
 80041de:	9b01      	ldr	r3, [sp, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	9a01      	ldr	r2, [sp, #4]
 80041e4:	6852      	ldr	r2, [r2, #4]
 80041e6:	605a      	str	r2, [r3, #4]
  return p;
 80041e8:	9b01      	ldr	r3, [sp, #4]
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	b002      	add	sp, #8
 80041ee:	4770      	bx	lr

080041f0 <chSysLock.lto_priv.6>:
static inline void chSysLock(void) {
 80041f0:	b082      	sub	sp, #8
 80041f2:	2320      	movs	r3, #32
 80041f4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80041f6:	9b01      	ldr	r3, [sp, #4]
 80041f8:	f383 8811 	msr	BASEPRI, r3
}
 80041fc:	bf00      	nop
}
 80041fe:	bf00      	nop
}
 8004200:	bf00      	nop
 8004202:	b002      	add	sp, #8
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
	...

08004210 <chSysUnlock.lto_priv.6>:
static inline void chSysUnlock(void) {
 8004210:	b082      	sub	sp, #8
 8004212:	2300      	movs	r3, #0
 8004214:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004216:	9b01      	ldr	r3, [sp, #4]
 8004218:	f383 8811 	msr	BASEPRI, r3
}
 800421c:	bf00      	nop
}
 800421e:	bf00      	nop
}
 8004220:	bf00      	nop
 8004222:	b002      	add	sp, #8
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
	...

08004230 <chThdGetSelfX.lto_priv.0>:
  return __sch_get_currthread();
 8004230:	4b01      	ldr	r3, [pc, #4]	; (8004238 <chThdGetSelfX.lto_priv.0+0x8>)
 8004232:	68db      	ldr	r3, [r3, #12]
}
 8004234:	4618      	mov	r0, r3
 8004236:	4770      	bx	lr
 8004238:	20000db8 	.word	0x20000db8
 800423c:	00000000 	.word	0x00000000

08004240 <chThdSleepS>:
static inline void chThdSleepS(sysinterval_t ticks) {
 8004240:	b500      	push	{lr}
 8004242:	b083      	sub	sp, #12
 8004244:	9001      	str	r0, [sp, #4]
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8004246:	9901      	ldr	r1, [sp, #4]
 8004248:	2008      	movs	r0, #8
 800424a:	f7ff fdb9 	bl	8003dc0 <chSchGoSleepTimeoutS>
}
 800424e:	bf00      	nop
 8004250:	b003      	add	sp, #12
 8004252:	f85d fb04 	ldr.w	pc, [sp], #4
 8004256:	bf00      	nop
	...

08004260 <chThdDoDequeueNextI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
static inline void chThdDoDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8004260:	b500      	push	{lr}
 8004262:	b085      	sub	sp, #20
 8004264:	9001      	str	r0, [sp, #4]
 8004266:	9100      	str	r1, [sp, #0]
  thread_t *tp;

  chDbgAssert(ch_queue_notempty(&tqp->queue), "empty queue");

  tp = (thread_t *)ch_queue_fifo_remove(&tqp->queue);
 8004268:	9b01      	ldr	r3, [sp, #4]
 800426a:	4618      	mov	r0, r3
 800426c:	f7ff ff98 	bl	80041a0 <ch_queue_fifo_remove.lto_priv.0>
 8004270:	9003      	str	r0, [sp, #12]

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8004272:	9b03      	ldr	r3, [sp, #12]
 8004274:	9a00      	ldr	r2, [sp, #0]
 8004276:	629a      	str	r2, [r3, #40]	; 0x28
  (void) chSchReadyI(tp);
 8004278:	9803      	ldr	r0, [sp, #12]
 800427a:	f7ff fd69 	bl	8003d50 <chSchReadyI>
}
 800427e:	bf00      	nop
 8004280:	b005      	add	sp, #20
 8004282:	f85d fb04 	ldr.w	pc, [sp], #4
 8004286:	bf00      	nop
	...

08004290 <__thd_object_init>:
 * @notapi
 */
thread_t *__thd_object_init(os_instance_t *oip,
                            thread_t *tp,
                            const char *name,
                            tprio_t prio) {
 8004290:	b500      	push	{lr}
 8004292:	b085      	sub	sp, #20
 8004294:	9003      	str	r0, [sp, #12]
 8004296:	9102      	str	r1, [sp, #8]
 8004298:	9201      	str	r2, [sp, #4]
 800429a:	9300      	str	r3, [sp, #0]

  tp->hdr.pqueue.prio   = prio;
 800429c:	9b02      	ldr	r3, [sp, #8]
 800429e:	9a00      	ldr	r2, [sp, #0]
 80042a0:	609a      	str	r2, [r3, #8]
  tp->state             = CH_STATE_WTSTART;
 80042a2:	9b02      	ldr	r3, [sp, #8]
 80042a4:	2202      	movs	r2, #2
 80042a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  tp->flags             = CH_FLAG_MODE_STATIC;
 80042aa:	9b02      	ldr	r3, [sp, #8]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  tp->owner             = oip;
 80042b2:	9b02      	ldr	r3, [sp, #8]
 80042b4:	9a03      	ldr	r2, [sp, #12]
 80042b6:	619a      	str	r2, [r3, #24]
#if CH_CFG_TIME_QUANTUM > 0
  tp->ticks             = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio          = prio;
 80042b8:	9b02      	ldr	r3, [sp, #8]
 80042ba:	9a00      	ldr	r2, [sp, #0]
 80042bc:	641a      	str	r2, [r3, #64]	; 0x40
  tp->mtxlist           = NULL;
 80042be:	9b02      	ldr	r3, [sp, #8]
 80042c0:	2200      	movs	r2, #0
 80042c2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->epending          = (eventmask_t)0;
 80042c4:	9b02      	ldr	r3, [sp, #8]
 80042c6:	2200      	movs	r2, #0
 80042c8:	639a      	str	r2, [r3, #56]	; 0x38
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time              = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs              = (trefs_t)1;
 80042ca:	9b02      	ldr	r3, [sp, #8]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  tp->name              = name;
 80042d2:	9b02      	ldr	r3, [sp, #8]
 80042d4:	9a01      	ldr	r2, [sp, #4]
 80042d6:	61da      	str	r2, [r3, #28]
  REG_INSERT(oip, tp);
 80042d8:	9b03      	ldr	r3, [sp, #12]
 80042da:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80042de:	9b02      	ldr	r3, [sp, #8]
 80042e0:	3310      	adds	r3, #16
 80042e2:	4619      	mov	r1, r3
 80042e4:	4610      	mov	r0, r2
 80042e6:	f7ff ff43 	bl	8004170 <ch_queue_insert.lto_priv.0>
#else
  (void)name;
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  ch_list_init(&tp->waiting);
 80042ea:	9b02      	ldr	r3, [sp, #8]
 80042ec:	332c      	adds	r3, #44	; 0x2c
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7ff fef6 	bl	80040e0 <ch_list_init>
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  ch_queue_init(&tp->msgqueue);
 80042f4:	9b02      	ldr	r3, [sp, #8]
 80042f6:	3330      	adds	r3, #48	; 0x30
 80042f8:	4618      	mov	r0, r3
 80042fa:	f7ff ff19 	bl	8004130 <ch_queue_init.lto_priv.3>
#endif
#if CH_DBG_STATISTICS == TRUE
  chTMObjectInit(&tp->stats);
#endif
  CH_CFG_THREAD_INIT_HOOK(tp);
  return tp;
 80042fe:	9b02      	ldr	r3, [sp, #8]
}
 8004300:	4618      	mov	r0, r3
 8004302:	b005      	add	sp, #20
 8004304:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004310 <chThdCreateSuspendedI>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
 8004310:	b500      	push	{lr}
 8004312:	b085      	sub	sp, #20
 8004314:	9001      	str	r0, [sp, #4]
  chDbgCheck((tdp->prio <= HIGHPRIO) && (tdp->funcp != NULL));

  /* The thread structure is laid out in the upper part of the thread
     workspace. The thread position structure is aligned to the required
     stack alignment because it represents the stack top.*/
  tp = (thread_t *)((uint8_t *)tdp->wend -
 8004316:	9b01      	ldr	r3, [sp, #4]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	3b48      	subs	r3, #72	; 0x48
 800431c:	9303      	str	r3, [sp, #12]
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
 800431e:	9b01      	ldr	r3, [sp, #4]
 8004320:	685a      	ldr	r2, [r3, #4]
 8004322:	9b03      	ldr	r3, [sp, #12]
 8004324:	621a      	str	r2, [r3, #32]
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8004326:	9b03      	ldr	r3, [sp, #12]
 8004328:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
 800432c:	9b03      	ldr	r3, [sp, #12]
 800432e:	60da      	str	r2, [r3, #12]
 8004330:	9b01      	ldr	r3, [sp, #4]
 8004332:	691a      	ldr	r2, [r3, #16]
 8004334:	9b03      	ldr	r3, [sp, #12]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	601a      	str	r2, [r3, #0]
 800433a:	9b01      	ldr	r3, [sp, #4]
 800433c:	695a      	ldr	r2, [r3, #20]
 800433e:	9b03      	ldr	r3, [sp, #12]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	605a      	str	r2, [r3, #4]
 8004344:	9b03      	ldr	r3, [sp, #12]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	4a07      	ldr	r2, [pc, #28]	; (8004368 <chThdCreateSuspendedI+0x58>)
 800434a:	621a      	str	r2, [r3, #32]
  if (tdp->instance != NULL) {
    return __thd_object_init(tdp->instance, tp, tdp->name, tdp->prio);
  }
#endif

  return __thd_object_init(currcore, tp, tdp->name, tdp->prio);
 800434c:	9b01      	ldr	r3, [sp, #4]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	9b01      	ldr	r3, [sp, #4]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	9903      	ldr	r1, [sp, #12]
 8004356:	4805      	ldr	r0, [pc, #20]	; (800436c <chThdCreateSuspendedI+0x5c>)
 8004358:	f7ff ff9a 	bl	8004290 <__thd_object_init>
 800435c:	4603      	mov	r3, r0
 800435e:	bf00      	nop
}
 8004360:	4618      	mov	r0, r3
 8004362:	b005      	add	sp, #20
 8004364:	f85d fb04 	ldr.w	pc, [sp], #4
 8004368:	080002f1 	.word	0x080002f1
 800436c:	20000db8 	.word	0x20000db8

08004370 <chThdCreateI>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateI(const thread_descriptor_t *tdp) {
 8004370:	b500      	push	{lr}
 8004372:	b083      	sub	sp, #12
 8004374:	9001      	str	r0, [sp, #4]

  return chSchReadyI(chThdCreateSuspendedI(tdp));
 8004376:	9801      	ldr	r0, [sp, #4]
 8004378:	f7ff ffca 	bl	8004310 <chThdCreateSuspendedI>
 800437c:	4603      	mov	r3, r0
 800437e:	4618      	mov	r0, r3
 8004380:	f7ff fce6 	bl	8003d50 <chSchReadyI>
 8004384:	4603      	mov	r3, r0
}
 8004386:	4618      	mov	r0, r3
 8004388:	b003      	add	sp, #12
 800438a:	f85d fb04 	ldr.w	pc, [sp], #4
 800438e:	bf00      	nop

08004390 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 8004390:	b500      	push	{lr}
 8004392:	b087      	sub	sp, #28
 8004394:	9003      	str	r0, [sp, #12]
 8004396:	9102      	str	r1, [sp, #8]
 8004398:	9201      	str	r2, [sp, #4]
 800439a:	9300      	str	r3, [sp, #0]
  __thd_memfill((uint8_t *)wsp,
                (uint8_t *)wsp + size,
                CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
 800439c:	f7ff ff28 	bl	80041f0 <chSysLock.lto_priv.6>

  /* The thread structure is laid out in the upper part of the thread
     workspace. The thread position structure is aligned to the required
     stack alignment because it represents the stack top.*/
  tp = (thread_t *)((uint8_t *)wsp + size -
 80043a0:	9b02      	ldr	r3, [sp, #8]
 80043a2:	3b48      	subs	r3, #72	; 0x48
 80043a4:	9a03      	ldr	r2, [sp, #12]
 80043a6:	4413      	add	r3, r2
 80043a8:	9305      	str	r3, [sp, #20]
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
 80043aa:	9b05      	ldr	r3, [sp, #20]
 80043ac:	9a03      	ldr	r2, [sp, #12]
 80043ae:	621a      	str	r2, [r3, #32]
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80043b0:	9b05      	ldr	r3, [sp, #20]
 80043b2:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
 80043b6:	9b05      	ldr	r3, [sp, #20]
 80043b8:	60da      	str	r2, [r3, #12]
 80043ba:	9b05      	ldr	r3, [sp, #20]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	9a00      	ldr	r2, [sp, #0]
 80043c0:	601a      	str	r2, [r3, #0]
 80043c2:	9b05      	ldr	r3, [sp, #20]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	9a08      	ldr	r2, [sp, #32]
 80043c8:	605a      	str	r2, [r3, #4]
 80043ca:	9b05      	ldr	r3, [sp, #20]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	4a0b      	ldr	r2, [pc, #44]	; (80043fc <chThdCreateStatic+0x6c>)
 80043d0:	621a      	str	r2, [r3, #32]

  tp = __thd_object_init(currcore, tp, "noname", prio);
 80043d2:	9b01      	ldr	r3, [sp, #4]
 80043d4:	4a0a      	ldr	r2, [pc, #40]	; (8004400 <chThdCreateStatic+0x70>)
 80043d6:	9905      	ldr	r1, [sp, #20]
 80043d8:	480a      	ldr	r0, [pc, #40]	; (8004404 <chThdCreateStatic+0x74>)
 80043da:	f7ff ff59 	bl	8004290 <__thd_object_init>
 80043de:	9005      	str	r0, [sp, #20]

  /* Starting the thread immediately.*/
  chSchWakeupS(tp, MSG_OK);
 80043e0:	2100      	movs	r1, #0
 80043e2:	9805      	ldr	r0, [sp, #20]
 80043e4:	f7ff fd24 	bl	8003e30 <chSchWakeupS>
  chSysUnlock();
 80043e8:	f7ff ff12 	bl	8004210 <chSysUnlock.lto_priv.6>

  return tp;
 80043ec:	9b05      	ldr	r3, [sp, #20]
 80043ee:	bf00      	nop
 80043f0:	bf00      	nop
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	b007      	add	sp, #28
 80043f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80043fa:	bf00      	nop
 80043fc:	080002f1 	.word	0x080002f1
 8004400:	08006ce4 	.word	0x08006ce4
 8004404:	20000db8 	.word	0x20000db8
	...

08004410 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
 8004410:	b500      	push	{lr}
 8004412:	b083      	sub	sp, #12
 8004414:	9001      	str	r0, [sp, #4]

  chSysLock();
 8004416:	f7ff feeb 	bl	80041f0 <chSysLock.lto_priv.6>
  chThdExitS(msg);
 800441a:	9801      	ldr	r0, [sp, #4]
 800441c:	f000 f808 	bl	8004430 <chThdExitS>
  /* The thread never returns here.*/
}
 8004420:	bf00      	nop
 8004422:	b003      	add	sp, #12
 8004424:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004430 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 8004430:	b500      	push	{lr}
 8004432:	b085      	sub	sp, #20
 8004434:	9001      	str	r0, [sp, #4]
  thread_t *currtp = chThdGetSelfX();
 8004436:	f7ff fefb 	bl	8004230 <chThdGetSelfX.lto_priv.0>
 800443a:	9003      	str	r0, [sp, #12]

  /* Storing exit message.*/
  currtp->u.exitcode = msg;
 800443c:	9b03      	ldr	r3, [sp, #12]
 800443e:	9a01      	ldr	r2, [sp, #4]
 8004440:	629a      	str	r2, [r3, #40]	; 0x28
  /* Exit handler hook.*/
  CH_CFG_THREAD_EXIT_HOOK(tp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 8004442:	e008      	b.n	8004456 <chThdExitS+0x26>
    (void) chSchReadyI((thread_t *)ch_list_unlink(&currtp->waiting));
 8004444:	9b03      	ldr	r3, [sp, #12]
 8004446:	332c      	adds	r3, #44	; 0x2c
 8004448:	4618      	mov	r0, r3
 800444a:	f7ff fe61 	bl	8004110 <ch_list_unlink>
 800444e:	4603      	mov	r3, r0
 8004450:	4618      	mov	r0, r3
 8004452:	f7ff fc7d 	bl	8003d50 <chSchReadyI>
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 8004456:	9b03      	ldr	r3, [sp, #12]
 8004458:	332c      	adds	r3, #44	; 0x2c
 800445a:	4618      	mov	r0, r3
 800445c:	f7ff fe48 	bl	80040f0 <ch_list_notempty>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1ee      	bne.n	8004444 <chThdExitS+0x14>
  }
#endif

#if CH_CFG_USE_REGISTRY == TRUE
  if (unlikely(currtp->refs == (trefs_t)0)) {
 8004466:	9b03      	ldr	r3, [sp, #12]
 8004468:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800446c:	2b00      	cmp	r3, #0
 800446e:	bf0c      	ite	eq
 8004470:	2301      	moveq	r3, #1
 8004472:	2300      	movne	r3, #0
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d010      	beq.n	800449c <chThdExitS+0x6c>
#if CH_CFG_USE_DYNAMIC == TRUE
    /* Static threads are immediately removed from the registry because there
       is no memory to recover.*/
    if (unlikely(((currtp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC))) {
 800447a:	9b03      	ldr	r3, [sp, #12]
 800447c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004480:	f003 0303 	and.w	r3, r3, #3
 8004484:	2b00      	cmp	r3, #0
 8004486:	bf0c      	ite	eq
 8004488:	2301      	moveq	r3, #1
 800448a:	2300      	movne	r3, #0
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d004      	beq.n	800449c <chThdExitS+0x6c>
      REG_REMOVE(currtp);
 8004492:	9b03      	ldr	r3, [sp, #12]
 8004494:	3310      	adds	r3, #16
 8004496:	4618      	mov	r0, r3
 8004498:	f7ff fe9a 	bl	80041d0 <ch_queue_dequeue.lto_priv.1>
#endif
  }
#endif

  /* Going into final state.*/
  chSchGoSleepS(CH_STATE_FINAL);
 800449c:	200f      	movs	r0, #15
 800449e:	f7ff fc67 	bl	8003d70 <chSchGoSleepS>

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
}
 80044a2:	bf00      	nop
 80044a4:	b005      	add	sp, #20
 80044a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80044aa:	bf00      	nop
 80044ac:	0000      	movs	r0, r0
	...

080044b0 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(sysinterval_t time) {
 80044b0:	b500      	push	{lr}
 80044b2:	b083      	sub	sp, #12
 80044b4:	9001      	str	r0, [sp, #4]

  chSysLock();
 80044b6:	f7ff fe9b 	bl	80041f0 <chSysLock.lto_priv.6>
  chThdSleepS(time);
 80044ba:	9801      	ldr	r0, [sp, #4]
 80044bc:	f7ff fec0 	bl	8004240 <chThdSleepS>
  chSysUnlock();
 80044c0:	f7ff fea6 	bl	8004210 <chSysUnlock.lto_priv.6>
}
 80044c4:	bf00      	nop
 80044c6:	b003      	add	sp, #12
 80044c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80044cc:	0000      	movs	r0, r0
	...

080044d0 <chThdEnqueueTimeoutS>:
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 80044d0:	b500      	push	{lr}
 80044d2:	b085      	sub	sp, #20
 80044d4:	9001      	str	r0, [sp, #4]
 80044d6:	9100      	str	r1, [sp, #0]
  thread_t *currtp = chThdGetSelfX();
 80044d8:	f7ff feaa 	bl	8004230 <chThdGetSelfX.lto_priv.0>
 80044dc:	9003      	str	r0, [sp, #12]

  if (unlikely(TIME_IMMEDIATE == timeout)) {
 80044de:	9b00      	ldr	r3, [sp, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	bf0c      	ite	eq
 80044e4:	2301      	moveq	r3, #1
 80044e6:	2300      	movne	r3, #0
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d002      	beq.n	80044f4 <chThdEnqueueTimeoutS+0x24>
    return MSG_TIMEOUT;
 80044ee:	f04f 33ff 	mov.w	r3, #4294967295
 80044f2:	e009      	b.n	8004508 <chThdEnqueueTimeoutS+0x38>
  }

  ch_queue_insert(&tqp->queue, (ch_queue_t *)currtp);
 80044f4:	9b01      	ldr	r3, [sp, #4]
 80044f6:	9903      	ldr	r1, [sp, #12]
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7ff fe39 	bl	8004170 <ch_queue_insert.lto_priv.0>

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80044fe:	9900      	ldr	r1, [sp, #0]
 8004500:	2004      	movs	r0, #4
 8004502:	f7ff fc5d 	bl	8003dc0 <chSchGoSleepTimeoutS>
 8004506:	4603      	mov	r3, r0
}
 8004508:	4618      	mov	r0, r3
 800450a:	b005      	add	sp, #20
 800450c:	f85d fb04 	ldr.w	pc, [sp], #4

08004510 <chThdDequeueNextI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8004510:	b500      	push	{lr}
 8004512:	b083      	sub	sp, #12
 8004514:	9001      	str	r0, [sp, #4]
 8004516:	9100      	str	r1, [sp, #0]

  if (ch_queue_notempty(&tqp->queue)) {
 8004518:	9b01      	ldr	r3, [sp, #4]
 800451a:	4618      	mov	r0, r3
 800451c:	f7ff fe18 	bl	8004150 <ch_queue_notempty.lto_priv.0>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d003      	beq.n	800452e <chThdDequeueNextI+0x1e>
    chThdDoDequeueNextI(tqp, msg);
 8004526:	9900      	ldr	r1, [sp, #0]
 8004528:	9801      	ldr	r0, [sp, #4]
 800452a:	f7ff fe99 	bl	8004260 <chThdDoDequeueNextI>
  }
}
 800452e:	bf00      	nop
 8004530:	b003      	add	sp, #12
 8004532:	f85d fb04 	ldr.w	pc, [sp], #4
 8004536:	bf00      	nop
	...

08004540 <tm_stop>:
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {
 8004540:	b4f0      	push	{r4, r5, r6, r7}
 8004542:	b084      	sub	sp, #16
 8004544:	9003      	str	r0, [sp, #12]
 8004546:	9102      	str	r1, [sp, #8]
 8004548:	9201      	str	r2, [sp, #4]

  tmp->n++;
 800454a:	9b03      	ldr	r3, [sp, #12]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	1c5a      	adds	r2, r3, #1
 8004550:	9b03      	ldr	r3, [sp, #12]
 8004552:	60da      	str	r2, [r3, #12]
  tmp->last = (now - tmp->last) - offset;
 8004554:	9b03      	ldr	r3, [sp, #12]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	9a02      	ldr	r2, [sp, #8]
 800455a:	1ad2      	subs	r2, r2, r3
 800455c:	9b01      	ldr	r3, [sp, #4]
 800455e:	1ad2      	subs	r2, r2, r3
 8004560:	9b03      	ldr	r3, [sp, #12]
 8004562:	609a      	str	r2, [r3, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8004564:	9b03      	ldr	r3, [sp, #12]
 8004566:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800456a:	9903      	ldr	r1, [sp, #12]
 800456c:	6889      	ldr	r1, [r1, #8]
 800456e:	2000      	movs	r0, #0
 8004570:	460c      	mov	r4, r1
 8004572:	4605      	mov	r5, r0
 8004574:	1916      	adds	r6, r2, r4
 8004576:	eb43 0705 	adc.w	r7, r3, r5
 800457a:	9b03      	ldr	r3, [sp, #12]
 800457c:	e9c3 6704 	strd	r6, r7, [r3, #16]
  if (tmp->last > tmp->worst) {
 8004580:	9b03      	ldr	r3, [sp, #12]
 8004582:	689a      	ldr	r2, [r3, #8]
 8004584:	9b03      	ldr	r3, [sp, #12]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	429a      	cmp	r2, r3
 800458a:	d903      	bls.n	8004594 <tm_stop+0x54>
    tmp->worst = tmp->last;
 800458c:	9b03      	ldr	r3, [sp, #12]
 800458e:	689a      	ldr	r2, [r3, #8]
 8004590:	9b03      	ldr	r3, [sp, #12]
 8004592:	605a      	str	r2, [r3, #4]
  }
  if (tmp->last < tmp->best) {
 8004594:	9b03      	ldr	r3, [sp, #12]
 8004596:	689a      	ldr	r2, [r3, #8]
 8004598:	9b03      	ldr	r3, [sp, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	429a      	cmp	r2, r3
 800459e:	d203      	bcs.n	80045a8 <tm_stop+0x68>
    tmp->best = tmp->last;
 80045a0:	9b03      	ldr	r3, [sp, #12]
 80045a2:	689a      	ldr	r2, [r3, #8]
 80045a4:	9b03      	ldr	r3, [sp, #12]
 80045a6:	601a      	str	r2, [r3, #0]
  }
}
 80045a8:	bf00      	nop
 80045aa:	b004      	add	sp, #16
 80045ac:	bcf0      	pop	{r4, r5, r6, r7}
 80045ae:	4770      	bx	lr

080045b0 <chTMObjectInit>:
 *
 * @param[out] tmp      pointer to a @p TimeMeasurement structure
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {
 80045b0:	b082      	sub	sp, #8
 80045b2:	9001      	str	r0, [sp, #4]

  tmp->best       = (rtcnt_t)-1;
 80045b4:	9b01      	ldr	r3, [sp, #4]
 80045b6:	f04f 32ff 	mov.w	r2, #4294967295
 80045ba:	601a      	str	r2, [r3, #0]
  tmp->worst      = (rtcnt_t)0;
 80045bc:	9b01      	ldr	r3, [sp, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	605a      	str	r2, [r3, #4]
  tmp->last       = (rtcnt_t)0;
 80045c2:	9b01      	ldr	r3, [sp, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	609a      	str	r2, [r3, #8]
  tmp->n          = (ucnt_t)0;
 80045c8:	9b01      	ldr	r3, [sp, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	60da      	str	r2, [r3, #12]
  tmp->cumulative = (rttime_t)0;
 80045ce:	9901      	ldr	r1, [sp, #4]
 80045d0:	f04f 0200 	mov.w	r2, #0
 80045d4:	f04f 0300 	mov.w	r3, #0
 80045d8:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 80045dc:	bf00      	nop
 80045de:	b002      	add	sp, #8
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
	...

080045f0 <chTMStartMeasurementX>:
 *
 * @param[in,out] tmp   pointer to a @p TimeMeasurement structure
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {
 80045f0:	b082      	sub	sp, #8
 80045f2:	9001      	str	r0, [sp, #4]
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 80045f4:	4b03      	ldr	r3, [pc, #12]	; (8004604 <chTMStartMeasurementX+0x14>)
 80045f6:	685a      	ldr	r2, [r3, #4]

  tmp->last = chSysGetRealtimeCounterX();
 80045f8:	9b01      	ldr	r3, [sp, #4]
 80045fa:	609a      	str	r2, [r3, #8]
}
 80045fc:	bf00      	nop
 80045fe:	b002      	add	sp, #8
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	e0001000 	.word	0xe0001000
	...

08004610 <chTMStopMeasurementX>:
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8004610:	b500      	push	{lr}
 8004612:	b083      	sub	sp, #12
 8004614:	9001      	str	r0, [sp, #4]
 8004616:	4b06      	ldr	r3, [pc, #24]	; (8004630 <chTMStopMeasurementX+0x20>)
 8004618:	685b      	ldr	r3, [r3, #4]

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch_system.tmc.offset);
 800461a:	4a06      	ldr	r2, [pc, #24]	; (8004634 <chTMStopMeasurementX+0x24>)
 800461c:	6892      	ldr	r2, [r2, #8]
 800461e:	4619      	mov	r1, r3
 8004620:	9801      	ldr	r0, [sp, #4]
 8004622:	f7ff ff8d 	bl	8004540 <tm_stop>
}
 8004626:	bf00      	nop
 8004628:	b003      	add	sp, #12
 800462a:	f85d fb04 	ldr.w	pc, [sp], #4
 800462e:	bf00      	nop
 8004630:	e0001000 	.word	0xe0001000
 8004634:	20000da8 	.word	0x20000da8
	...

08004640 <ch_queue_init.lto_priv.5>:
static inline void ch_queue_init(ch_queue_t *qp) {
 8004640:	b082      	sub	sp, #8
 8004642:	9001      	str	r0, [sp, #4]
  qp->next = qp;
 8004644:	9b01      	ldr	r3, [sp, #4]
 8004646:	9a01      	ldr	r2, [sp, #4]
 8004648:	601a      	str	r2, [r3, #0]
  qp->prev = qp;
 800464a:	9b01      	ldr	r3, [sp, #4]
 800464c:	9a01      	ldr	r2, [sp, #4]
 800464e:	605a      	str	r2, [r3, #4]
}
 8004650:	bf00      	nop
 8004652:	b002      	add	sp, #8
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
	...

08004660 <chMtxObjectInit>:
 *
 * @param[out] mp       pointer to a @p mutex_t structure
 *
 * @init
 */
void chMtxObjectInit(mutex_t *mp) {
 8004660:	b500      	push	{lr}
 8004662:	b083      	sub	sp, #12
 8004664:	9001      	str	r0, [sp, #4]

  chDbgCheck(mp != NULL);

  ch_queue_init(&mp->queue);
 8004666:	9b01      	ldr	r3, [sp, #4]
 8004668:	4618      	mov	r0, r3
 800466a:	f7ff ffe9 	bl	8004640 <ch_queue_init.lto_priv.5>
  mp->owner = NULL;
 800466e:	9b01      	ldr	r3, [sp, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	609a      	str	r2, [r3, #8]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  mp->cnt = (cnt_t)0;
#endif
}
 8004674:	bf00      	nop
 8004676:	b003      	add	sp, #12
 8004678:	f85d fb04 	ldr.w	pc, [sp], #4
 800467c:	0000      	movs	r0, r0
	...

08004680 <chEvtSignalI>:
 * @param[in] tp        the thread to be signaled
 * @param[in] events    the events set to be ORed
 *
 * @iclass
 */
void chEvtSignalI(thread_t *tp, eventmask_t events) {
 8004680:	b500      	push	{lr}
 8004682:	b083      	sub	sp, #12
 8004684:	9001      	str	r0, [sp, #4]
 8004686:	9100      	str	r1, [sp, #0]

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
 8004688:	9b01      	ldr	r3, [sp, #4]
 800468a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800468c:	9b00      	ldr	r3, [sp, #0]
 800468e:	431a      	orrs	r2, r3
 8004690:	9b01      	ldr	r3, [sp, #4]
 8004692:	639a      	str	r2, [r3, #56]	; 0x38
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 8004694:	9b01      	ldr	r3, [sp, #4]
 8004696:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800469a:	2b0a      	cmp	r3, #10
 800469c:	d106      	bne.n	80046ac <chEvtSignalI+0x2c>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 800469e:	9b01      	ldr	r3, [sp, #4]
 80046a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046a2:	9b01      	ldr	r3, [sp, #4]
 80046a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a6:	4013      	ands	r3, r2
  if (((tp->state == CH_STATE_WTOREVT) &&
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10d      	bne.n	80046c8 <chEvtSignalI+0x48>
      ((tp->state == CH_STATE_WTANDEVT) &&
 80046ac:	9b01      	ldr	r3, [sp, #4]
 80046ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 80046b2:	2b0b      	cmp	r3, #11
 80046b4:	d10e      	bne.n	80046d4 <chEvtSignalI+0x54>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 80046b6:	9b01      	ldr	r3, [sp, #4]
 80046b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046ba:	9b01      	ldr	r3, [sp, #4]
 80046bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046be:	401a      	ands	r2, r3
 80046c0:	9b01      	ldr	r3, [sp, #4]
 80046c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      ((tp->state == CH_STATE_WTANDEVT) &&
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d105      	bne.n	80046d4 <chEvtSignalI+0x54>
    tp->u.rdymsg = MSG_OK;
 80046c8:	9b01      	ldr	r3, [sp, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	629a      	str	r2, [r3, #40]	; 0x28
    (void) chSchReadyI(tp);
 80046ce:	9801      	ldr	r0, [sp, #4]
 80046d0:	f7ff fb3e 	bl	8003d50 <chSchReadyI>
  }
}
 80046d4:	bf00      	nop
 80046d6:	b003      	add	sp, #12
 80046d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80046dc:	0000      	movs	r0, r0
	...

080046e0 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 80046e0:	b500      	push	{lr}
 80046e2:	b085      	sub	sp, #20
 80046e4:	9001      	str	r0, [sp, #4]
 80046e6:	9100      	str	r1, [sp, #0]
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 80046e8:	9b01      	ldr	r3, [sp, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	9303      	str	r3, [sp, #12]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 80046ee:	e019      	b.n	8004724 <chEvtBroadcastFlagsI+0x44>
  /*lint -restore*/
    elp->flags |= flags;
 80046f0:	9b03      	ldr	r3, [sp, #12]
 80046f2:	68da      	ldr	r2, [r3, #12]
 80046f4:	9b00      	ldr	r3, [sp, #0]
 80046f6:	431a      	orrs	r2, r3
 80046f8:	9b03      	ldr	r3, [sp, #12]
 80046fa:	60da      	str	r2, [r3, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 80046fc:	9b00      	ldr	r3, [sp, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d005      	beq.n	800470e <chEvtBroadcastFlagsI+0x2e>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 8004702:	9b03      	ldr	r3, [sp, #12]
 8004704:	691a      	ldr	r2, [r3, #16]
 8004706:	9b00      	ldr	r3, [sp, #0]
 8004708:	4013      	ands	r3, r2
    if ((flags == (eventflags_t)0) ||
 800470a:	2b00      	cmp	r3, #0
 800470c:	d007      	beq.n	800471e <chEvtBroadcastFlagsI+0x3e>
      chEvtSignalI(elp->listener, elp->events);
 800470e:	9b03      	ldr	r3, [sp, #12]
 8004710:	685a      	ldr	r2, [r3, #4]
 8004712:	9b03      	ldr	r3, [sp, #12]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	4619      	mov	r1, r3
 8004718:	4610      	mov	r0, r2
 800471a:	f7ff ffb1 	bl	8004680 <chEvtSignalI>
    }
    elp = elp->next;
 800471e:	9b03      	ldr	r3, [sp, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	9303      	str	r3, [sp, #12]
  while (elp != (event_listener_t *)esp) {
 8004724:	9a03      	ldr	r2, [sp, #12]
 8004726:	9b01      	ldr	r3, [sp, #4]
 8004728:	429a      	cmp	r2, r3
 800472a:	d1e1      	bne.n	80046f0 <chEvtBroadcastFlagsI+0x10>
  }
}
 800472c:	bf00      	nop
 800472e:	bf00      	nop
 8004730:	b005      	add	sp, #20
 8004732:	f85d fb04 	ldr.w	pc, [sp], #4
 8004736:	bf00      	nop
	...

08004740 <chSysLock.lto_priv.15>:
static inline void chSysLock(void) {
 8004740:	b082      	sub	sp, #8
 8004742:	2320      	movs	r3, #32
 8004744:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004746:	9b01      	ldr	r3, [sp, #4]
 8004748:	f383 8811 	msr	BASEPRI, r3
}
 800474c:	bf00      	nop
}
 800474e:	bf00      	nop
}
 8004750:	bf00      	nop
 8004752:	b002      	add	sp, #8
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
	...

08004760 <chSysUnlock.lto_priv.15>:
static inline void chSysUnlock(void) {
 8004760:	b082      	sub	sp, #8
 8004762:	2300      	movs	r3, #0
 8004764:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004766:	9b01      	ldr	r3, [sp, #4]
 8004768:	f383 8811 	msr	BASEPRI, r3
}
 800476c:	bf00      	nop
}
 800476e:	bf00      	nop
}
 8004770:	bf00      	nop
 8004772:	b002      	add	sp, #8
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
	...

08004780 <__core_init>:
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  ch_memcore.basemem = __heap_base__;
 8004780:	4b03      	ldr	r3, [pc, #12]	; (8004790 <__core_init+0x10>)
 8004782:	4a04      	ldr	r2, [pc, #16]	; (8004794 <__core_init+0x14>)
 8004784:	601a      	str	r2, [r3, #0]
  ch_memcore.topmem  = __heap_end__;
 8004786:	4b02      	ldr	r3, [pc, #8]	; (8004790 <__core_init+0x10>)
 8004788:	4a03      	ldr	r2, [pc, #12]	; (8004798 <__core_init+0x18>)
 800478a:	605a      	str	r2, [r3, #4]
  static uint8_t static_heap[CH_CFG_MEMCORE_SIZE];

  ch_memcore.basemem = &static_heap[0];
  ch_memcore.topmem  = &static_heap[CH_CFG_MEMCORE_SIZE];
#endif
}
 800478c:	bf00      	nop
 800478e:	4770      	bx	lr
 8004790:	20000f40 	.word	0x20000f40
 8004794:	20001690 	.word	0x20001690
 8004798:	20018000 	.word	0x20018000
 800479c:	00000000 	.word	0x00000000

080047a0 <chCoreAllocFromTopI>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
void *chCoreAllocFromTopI(size_t size, unsigned align, size_t offset) {
 80047a0:	b086      	sub	sp, #24
 80047a2:	9003      	str	r0, [sp, #12]
 80047a4:	9102      	str	r1, [sp, #8]
 80047a6:	9201      	str	r2, [sp, #4]
  uint8_t *p, *prev;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 80047a8:	4b10      	ldr	r3, [pc, #64]	; (80047ec <chCoreAllocFromTopI+0x4c>)
 80047aa:	685a      	ldr	r2, [r3, #4]
 80047ac:	9b03      	ldr	r3, [sp, #12]
 80047ae:	425b      	negs	r3, r3
 80047b0:	4413      	add	r3, r2
 80047b2:	461a      	mov	r2, r3
 80047b4:	9b02      	ldr	r3, [sp, #8]
 80047b6:	425b      	negs	r3, r3
 80047b8:	4013      	ands	r3, r2
 80047ba:	9305      	str	r3, [sp, #20]
  prev = p - offset;
 80047bc:	9b01      	ldr	r3, [sp, #4]
 80047be:	425b      	negs	r3, r3
 80047c0:	9a05      	ldr	r2, [sp, #20]
 80047c2:	4413      	add	r3, r2
 80047c4:	9304      	str	r3, [sp, #16]

  /* Considering also the case where there is numeric overflow.*/
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 80047c6:	4b09      	ldr	r3, [pc, #36]	; (80047ec <chCoreAllocFromTopI+0x4c>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	9a04      	ldr	r2, [sp, #16]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d304      	bcc.n	80047da <chCoreAllocFromTopI+0x3a>
 80047d0:	4b06      	ldr	r3, [pc, #24]	; (80047ec <chCoreAllocFromTopI+0x4c>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	9a04      	ldr	r2, [sp, #16]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d901      	bls.n	80047de <chCoreAllocFromTopI+0x3e>
    return NULL;
 80047da:	2300      	movs	r3, #0
 80047dc:	e003      	b.n	80047e6 <chCoreAllocFromTopI+0x46>
  }

  ch_memcore.topmem = prev;
 80047de:	4a03      	ldr	r2, [pc, #12]	; (80047ec <chCoreAllocFromTopI+0x4c>)
 80047e0:	9b04      	ldr	r3, [sp, #16]
 80047e2:	6053      	str	r3, [r2, #4]

  return p;
 80047e4:	9b05      	ldr	r3, [sp, #20]
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	b006      	add	sp, #24
 80047ea:	4770      	bx	lr
 80047ec:	20000f40 	.word	0x20000f40

080047f0 <chCoreAllocFromTop>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 80047f0:	b500      	push	{lr}
 80047f2:	b087      	sub	sp, #28
 80047f4:	9003      	str	r0, [sp, #12]
 80047f6:	9102      	str	r1, [sp, #8]
 80047f8:	9201      	str	r2, [sp, #4]
  void *p;

  chSysLock();
 80047fa:	f7ff ffa1 	bl	8004740 <chSysLock.lto_priv.15>
  p = chCoreAllocFromTopI(size, align, offset);
 80047fe:	9a01      	ldr	r2, [sp, #4]
 8004800:	9902      	ldr	r1, [sp, #8]
 8004802:	9803      	ldr	r0, [sp, #12]
 8004804:	f7ff ffcc 	bl	80047a0 <chCoreAllocFromTopI>
 8004808:	9005      	str	r0, [sp, #20]
  chSysUnlock();
 800480a:	f7ff ffa9 	bl	8004760 <chSysUnlock.lto_priv.15>

  return p;
 800480e:	9b05      	ldr	r3, [sp, #20]
}
 8004810:	4618      	mov	r0, r3
 8004812:	b007      	add	sp, #28
 8004814:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004820 <__heap_init>:
/**
 * @brief   Initializes the default heap.
 *
 * @notapi
 */
void __heap_init(void) {
 8004820:	b508      	push	{r3, lr}

  default_heap.provider = chCoreAllocAlignedWithOffset;
 8004822:	4b07      	ldr	r3, [pc, #28]	; (8004840 <__heap_init+0x20>)
 8004824:	4a07      	ldr	r2, [pc, #28]	; (8004844 <__heap_init+0x24>)
 8004826:	601a      	str	r2, [r3, #0]
  H_NEXT(&default_heap.header) = NULL;
 8004828:	4b05      	ldr	r3, [pc, #20]	; (8004840 <__heap_init+0x20>)
 800482a:	2200      	movs	r2, #0
 800482c:	605a      	str	r2, [r3, #4]
  H_PAGES(&default_heap.header) = 0;
 800482e:	4b04      	ldr	r3, [pc, #16]	; (8004840 <__heap_init+0x20>)
 8004830:	2200      	movs	r2, #0
 8004832:	609a      	str	r2, [r3, #8]
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.mtx);
 8004834:	4804      	ldr	r0, [pc, #16]	; (8004848 <__heap_init+0x28>)
 8004836:	f7ff ff13 	bl	8004660 <chMtxObjectInit>
#else
  chSemObjectInit(&default_heap.sem, (cnt_t)1);
#endif
}
 800483a:	bf00      	nop
 800483c:	bd08      	pop	{r3, pc}
 800483e:	bf00      	nop
 8004840:	20000f48 	.word	0x20000f48
 8004844:	080047f1 	.word	0x080047f1
 8004848:	20000f54 	.word	0x20000f54
 800484c:	00000000 	.word	0x00000000

08004850 <chPoolObjectInitAligned>:
 *                      automatically
 *
 * @init
 */
void chPoolObjectInitAligned(memory_pool_t *mp, size_t size,
                             unsigned align, memgetfunc_t provider) {
 8004850:	b084      	sub	sp, #16
 8004852:	9003      	str	r0, [sp, #12]
 8004854:	9102      	str	r1, [sp, #8]
 8004856:	9201      	str	r2, [sp, #4]
 8004858:	9300      	str	r3, [sp, #0]
  chDbgCheck((mp != NULL) &&
             (size >= sizeof(void *)) &&
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
 800485a:	9b03      	ldr	r3, [sp, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	601a      	str	r2, [r3, #0]
  mp->object_size = size;
 8004860:	9b03      	ldr	r3, [sp, #12]
 8004862:	9a02      	ldr	r2, [sp, #8]
 8004864:	605a      	str	r2, [r3, #4]
  mp->align = align;
 8004866:	9b03      	ldr	r3, [sp, #12]
 8004868:	9a01      	ldr	r2, [sp, #4]
 800486a:	609a      	str	r2, [r3, #8]
  mp->provider = provider;
 800486c:	9b03      	ldr	r3, [sp, #12]
 800486e:	9a00      	ldr	r2, [sp, #0]
 8004870:	60da      	str	r2, [r3, #12]
}
 8004872:	bf00      	nop
 8004874:	b004      	add	sp, #16
 8004876:	4770      	bx	lr
	...

08004880 <chCoreAllocAlignedI>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 8004880:	b500      	push	{lr}
 8004882:	b083      	sub	sp, #12
 8004884:	9001      	str	r0, [sp, #4]
 8004886:	9100      	str	r1, [sp, #0]

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
 8004888:	2200      	movs	r2, #0
 800488a:	9900      	ldr	r1, [sp, #0]
 800488c:	9801      	ldr	r0, [sp, #4]
 800488e:	f7ff ff87 	bl	80047a0 <chCoreAllocFromTopI>
 8004892:	4603      	mov	r3, r0
}
 8004894:	4618      	mov	r0, r3
 8004896:	b003      	add	sp, #12
 8004898:	f85d fb04 	ldr.w	pc, [sp], #4
 800489c:	0000      	movs	r0, r0
	...

080048a0 <chPoolObjectInit>:
 *
 * @init
 */
static inline void chPoolObjectInit(memory_pool_t *mp,
                                    size_t size,
                                    memgetfunc_t provider) {
 80048a0:	b500      	push	{lr}
 80048a2:	b085      	sub	sp, #20
 80048a4:	9003      	str	r0, [sp, #12]
 80048a6:	9102      	str	r1, [sp, #8]
 80048a8:	9201      	str	r2, [sp, #4]

  chPoolObjectInitAligned(mp, size, PORT_NATURAL_ALIGN, provider);
 80048aa:	9b01      	ldr	r3, [sp, #4]
 80048ac:	2204      	movs	r2, #4
 80048ae:	9902      	ldr	r1, [sp, #8]
 80048b0:	9803      	ldr	r0, [sp, #12]
 80048b2:	f7ff ffcd 	bl	8004850 <chPoolObjectInitAligned>
}
 80048b6:	bf00      	nop
 80048b8:	b005      	add	sp, #20
 80048ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80048be:	bf00      	nop

080048c0 <dyn_list_init>:
    *dp++ = c;
    i--;
  } while ((c != (char)0) && (i > 0U));
}

static inline void dyn_list_init(dyn_list_t *dlp) {
 80048c0:	b082      	sub	sp, #8
 80048c2:	9001      	str	r0, [sp, #4]

  dlp->next = (dyn_element_t *)dlp;
 80048c4:	9b01      	ldr	r3, [sp, #4]
 80048c6:	9a01      	ldr	r2, [sp, #4]
 80048c8:	601a      	str	r2, [r3, #0]
}
 80048ca:	bf00      	nop
 80048cc:	b002      	add	sp, #8
 80048ce:	4770      	bx	lr

080048d0 <__factory_init>:
/**
 * @brief   Initializes the objects factory.
 *
 * @init
 */
void __factory_init(void) {
 80048d0:	b508      	push	{r3, lr}

#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&ch_factory.mtx);
 80048d2:	4810      	ldr	r0, [pc, #64]	; (8004914 <__factory_init+0x44>)
 80048d4:	f7ff fec4 	bl	8004660 <chMtxObjectInit>
#else
  chSemObjectInit(&ch_factory.sem, (cnt_t)1);
#endif

#if CH_CFG_FACTORY_OBJECTS_REGISTRY == TRUE
  dyn_list_init(&ch_factory.obj_list);
 80048d8:	480f      	ldr	r0, [pc, #60]	; (8004918 <__factory_init+0x48>)
 80048da:	f7ff fff1 	bl	80048c0 <dyn_list_init>
  chPoolObjectInit(&ch_factory.obj_pool,
 80048de:	4a0f      	ldr	r2, [pc, #60]	; (800491c <__factory_init+0x4c>)
 80048e0:	2114      	movs	r1, #20
 80048e2:	480f      	ldr	r0, [pc, #60]	; (8004920 <__factory_init+0x50>)
 80048e4:	f7ff ffdc 	bl	80048a0 <chPoolObjectInit>
                   sizeof (registered_object_t),
                   chCoreAllocAlignedI);
#endif
#if CH_CFG_FACTORY_GENERIC_BUFFERS == TRUE
  dyn_list_init(&ch_factory.buf_list);
 80048e8:	480e      	ldr	r0, [pc, #56]	; (8004924 <__factory_init+0x54>)
 80048ea:	f7ff ffe9 	bl	80048c0 <dyn_list_init>
#endif
#if CH_CFG_FACTORY_SEMAPHORES == TRUE
  dyn_list_init(&ch_factory.sem_list);
 80048ee:	480e      	ldr	r0, [pc, #56]	; (8004928 <__factory_init+0x58>)
 80048f0:	f7ff ffe6 	bl	80048c0 <dyn_list_init>
  chPoolObjectInit(&ch_factory.sem_pool,
 80048f4:	4a09      	ldr	r2, [pc, #36]	; (800491c <__factory_init+0x4c>)
 80048f6:	211c      	movs	r1, #28
 80048f8:	480c      	ldr	r0, [pc, #48]	; (800492c <__factory_init+0x5c>)
 80048fa:	f7ff ffd1 	bl	80048a0 <chPoolObjectInit>
                   sizeof (dyn_semaphore_t),
                   chCoreAllocAlignedI);
#endif
#if CH_CFG_FACTORY_MAILBOXES == TRUE
  dyn_list_init(&ch_factory.mbx_list);
 80048fe:	480c      	ldr	r0, [pc, #48]	; (8004930 <__factory_init+0x60>)
 8004900:	f7ff ffde 	bl	80048c0 <dyn_list_init>
#endif
#if CH_CFG_FACTORY_OBJ_FIFOS == TRUE
  dyn_list_init(&ch_factory.fifo_list);
 8004904:	480b      	ldr	r0, [pc, #44]	; (8004934 <__factory_init+0x64>)
 8004906:	f7ff ffdb 	bl	80048c0 <dyn_list_init>
#endif
#if CH_CFG_FACTORY_PIPES == TRUE
  dyn_list_init(&ch_factory.pipe_list);
 800490a:	480b      	ldr	r0, [pc, #44]	; (8004938 <__factory_init+0x68>)
 800490c:	f7ff ffd8 	bl	80048c0 <dyn_list_init>
#endif
}
 8004910:	bf00      	nop
 8004912:	bd08      	pop	{r3, pc}
 8004914:	20000f64 	.word	0x20000f64
 8004918:	20000f74 	.word	0x20000f74
 800491c:	08004881 	.word	0x08004881
 8004920:	20000f78 	.word	0x20000f78
 8004924:	20000f88 	.word	0x20000f88
 8004928:	20000f8c 	.word	0x20000f8c
 800492c:	20000f90 	.word	0x20000f90
 8004930:	20000fa0 	.word	0x20000fa0
 8004934:	20000fa4 	.word	0x20000fa4
 8004938:	20000fa8 	.word	0x20000fa8
 800493c:	00000000 	.word	0x00000000

08004940 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004940:	b084      	sub	sp, #16
 8004942:	9001      	str	r0, [sp, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004944:	9b01      	ldr	r3, [sp, #4]
 8004946:	f003 0307 	and.w	r3, r3, #7
 800494a:	9303      	str	r3, [sp, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800494c:	4b0b      	ldr	r3, [pc, #44]	; (800497c <__NVIC_SetPriorityGrouping+0x3c>)
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	9302      	str	r3, [sp, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004952:	9a02      	ldr	r2, [sp, #8]
 8004954:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004958:	4013      	ands	r3, r2
 800495a:	9302      	str	r3, [sp, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800495c:	9b03      	ldr	r3, [sp, #12]
 800495e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004960:	9b02      	ldr	r3, [sp, #8]
 8004962:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004964:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800496c:	9302      	str	r3, [sp, #8]
  SCB->AIRCR =  reg_value;
 800496e:	4a03      	ldr	r2, [pc, #12]	; (800497c <__NVIC_SetPriorityGrouping+0x3c>)
 8004970:	9b02      	ldr	r3, [sp, #8]
 8004972:	60d3      	str	r3, [r2, #12]
}
 8004974:	bf00      	nop
 8004976:	b004      	add	sp, #16
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	e000ed00 	.word	0xe000ed00

08004980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004980:	b082      	sub	sp, #8
 8004982:	4603      	mov	r3, r0
 8004984:	9100      	str	r1, [sp, #0]
 8004986:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
 800498a:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 800498e:	2b00      	cmp	r3, #0
 8004990:	db0a      	blt.n	80049a8 <__NVIC_SetPriority+0x28>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004992:	9b00      	ldr	r3, [sp, #0]
 8004994:	b2da      	uxtb	r2, r3
 8004996:	490c      	ldr	r1, [pc, #48]	; (80049c8 <__NVIC_SetPriority+0x48>)
 8004998:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 800499c:	0112      	lsls	r2, r2, #4
 800499e:	b2d2      	uxtb	r2, r2
 80049a0:	440b      	add	r3, r1
 80049a2:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80049a6:	e00b      	b.n	80049c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049a8:	9b00      	ldr	r3, [sp, #0]
 80049aa:	b2da      	uxtb	r2, r3
 80049ac:	4907      	ldr	r1, [pc, #28]	; (80049cc <__NVIC_SetPriority+0x4c>)
 80049ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80049b2:	f003 030f 	and.w	r3, r3, #15
 80049b6:	3b04      	subs	r3, #4
 80049b8:	0112      	lsls	r2, r2, #4
 80049ba:	b2d2      	uxtb	r2, r2
 80049bc:	440b      	add	r3, r1
 80049be:	761a      	strb	r2, [r3, #24]
}
 80049c0:	bf00      	nop
 80049c2:	b002      	add	sp, #8
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	e000e100 	.word	0xe000e100
 80049cc:	e000ed00 	.word	0xe000ed00

080049d0 <SVC_Handler>:
 * @details The SVC vector is used for exception mode re-entering after a
 *          context switch and, optionally, for system calls.
 * @note    The SVC vector is only used in advanced kernel mode.
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void SVC_Handler(void) {
 80049d0:	b084      	sub	sp, #16
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80049d2:	f3ef 8309 	mrs	r3, PSP
 80049d6:	9300      	str	r3, [sp, #0]
  return(result);
 80049d8:	9b00      	ldr	r3, [sp, #0]
/*lint -restore*/
  uint32_t psp = __get_PSP();
 80049da:	9303      	str	r3, [sp, #12]
    /* From privileged mode, it is used for context discarding in the
       preemption code.*/

    /* Unstacking procedure, discarding the current exception context and
       positioning the stack to point to the real one.*/
    psp += sizeof (struct port_extctx);
 80049dc:	9b03      	ldr	r3, [sp, #12]
 80049de:	3320      	adds	r3, #32
 80049e0:	9303      	str	r3, [sp, #12]
 80049e2:	9b03      	ldr	r3, [sp, #12]
 80049e4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80049e6:	9b01      	ldr	r3, [sp, #4]
 80049e8:	f383 8809 	msr	PSP, r3
}
 80049ec:	bf00      	nop
 80049ee:	2300      	movs	r3, #0
 80049f0:	9302      	str	r3, [sp, #8]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80049f2:	9b02      	ldr	r3, [sp, #8]
 80049f4:	f383 8811 	msr	BASEPRI, r3
}
 80049f8:	bf00      	nop
 80049fa:	bf00      	nop
}
 80049fc:	bf00      	nop
#endif

    /* Restoring the normal interrupts status.*/
    port_unlock_from_isr();
  }
}
 80049fe:	bf00      	nop
 8004a00:	b004      	add	sp, #16
 8004a02:	4770      	bx	lr
	...

08004a10 <port_init>:
 *
 * @param[in, out] oip  pointer to the @p os_instance_t structure
 *
 * @notapi
 */
void port_init(os_instance_t *oip) {
 8004a10:	b500      	push	{lr}
 8004a12:	b085      	sub	sp, #20
 8004a14:	9001      	str	r0, [sp, #4]
 8004a16:	2320      	movs	r3, #32
 8004a18:	9303      	str	r3, [sp, #12]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004a1a:	9b03      	ldr	r3, [sp, #12]
 8004a1c:	f383 8811 	msr	BASEPRI, r3
}
 8004a20:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8004a22:	b662      	cpsie	i
}
 8004a24:	bf00      	nop
}
 8004a26:	bf00      	nop

  /* Starting in a known IRQ configuration.*/
  port_suspend();

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);
 8004a28:	2003      	movs	r0, #3
 8004a2a:	f7ff ff89 	bl	8004940 <__NVIC_SetPriorityGrouping>

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8004a2e:	4b0d      	ldr	r3, [pc, #52]	; (8004a64 <port_init+0x54>)
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	4a0c      	ldr	r2, [pc, #48]	; (8004a64 <port_init+0x54>)
 8004a34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a38:	60d3      	str	r3, [r2, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8004a3a:	4b0b      	ldr	r3, [pc, #44]	; (8004a68 <port_init+0x58>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a0a      	ldr	r2, [pc, #40]	; (8004a68 <port_init+0x58>)
 8004a40:	f043 0301 	orr.w	r3, r3, #1
 8004a44:	6013      	str	r3, [r2, #0]

  /* Initialization of the system vectors used by the port.*/
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  NVIC_SetPriority(SVCall_IRQn, CORTEX_PRIORITY_SVCALL);
 8004a46:	2101      	movs	r1, #1
 8004a48:	f06f 0004 	mvn.w	r0, #4
 8004a4c:	f7ff ff98 	bl	8004980 <__NVIC_SetPriority>
#endif
  NVIC_SetPriority(PendSV_IRQn, CORTEX_PRIORITY_PENDSV);
 8004a50:	2102      	movs	r1, #2
 8004a52:	f06f 0001 	mvn.w	r0, #1
 8004a56:	f7ff ff93 	bl	8004980 <__NVIC_SetPriority>

#if PORT_USE_SYSCALL == TRUE
  /* MPU is enabled.*/
  mpuEnable(MPU_CTRL_PRIVDEFENA);
#endif
}
 8004a5a:	bf00      	nop
 8004a5c:	b005      	add	sp, #20
 8004a5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a62:	bf00      	nop
 8004a64:	e000edf0 	.word	0xe000edf0
 8004a68:	e0001000 	.word	0xe0001000
 8004a6c:	00000000 	.word	0x00000000

08004a70 <__port_irq_epilogue>:
#endif

/**
 * @brief   Exception exit redirection to @p __port_switch_from_isr().
 */
void __port_irq_epilogue(void) {
 8004a70:	b500      	push	{lr}
 8004a72:	b087      	sub	sp, #28
 8004a74:	2320      	movs	r3, #32
 8004a76:	9303      	str	r3, [sp, #12]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004a78:	9b03      	ldr	r3, [sp, #12]
 8004a7a:	f383 8811 	msr	BASEPRI, r3
}
 8004a7e:	bf00      	nop
}
 8004a80:	bf00      	nop
}
 8004a82:	bf00      	nop

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8004a84:	4b18      	ldr	r3, [pc, #96]	; (8004ae8 <__port_irq_epilogue+0x78>)
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d020      	beq.n	8004ad2 <__port_irq_epilogue+0x62>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8004a90:	f3ef 8309 	mrs	r3, PSP
 8004a94:	9301      	str	r3, [sp, #4]
  return(result);
 8004a96:	9b01      	ldr	r3, [sp, #4]
        lctxp->control = control;
        lctxp->ectxp   = (struct port_extctx *)psp;
      }
    }
#else
    s_psp = __get_PSP();
 8004a98:	9305      	str	r3, [sp, #20]
#endif

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    s_psp -= sizeof (struct port_extctx);
 8004a9a:	9b05      	ldr	r3, [sp, #20]
 8004a9c:	3b20      	subs	r3, #32
 8004a9e:	9305      	str	r3, [sp, #20]

    /* The port_extctx structure is pointed by the S-PSP register.*/
    ectxp = (struct port_extctx *)s_psp;
 8004aa0:	9b05      	ldr	r3, [sp, #20]
 8004aa2:	9304      	str	r3, [sp, #16]

    /* Setting up a fake XPSR register value.*/
    ectxp->xpsr = 0x01000000U;
 8004aa4:	9b04      	ldr	r3, [sp, #16]
 8004aa6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004aaa:	61da      	str	r2, [r3, #28]
 8004aac:	9b05      	ldr	r3, [sp, #20]
 8004aae:	9302      	str	r3, [sp, #8]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8004ab0:	9b02      	ldr	r3, [sp, #8]
 8004ab2:	f383 8809 	msr	PSP, r3
}
 8004ab6:	bf00      	nop
    /* Writing back the modified S-PSP value.*/
    __set_PSP(s_psp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8004ab8:	f7ff f9ea 	bl	8003e90 <chSchIsPreemptionRequired>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d003      	beq.n	8004aca <__port_irq_epilogue+0x5a>
      /* Preemption is required we need to enforce a context switch.*/
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 8004ac2:	4a0a      	ldr	r2, [pc, #40]	; (8004aec <__port_irq_epilogue+0x7c>)
 8004ac4:	9b04      	ldr	r3, [sp, #16]
 8004ac6:	619a      	str	r2, [r3, #24]
      ectxp->pc = (uint32_t)__port_exit_from_isr;
    }

    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
 8004ac8:	e00b      	b.n	8004ae2 <__port_irq_epilogue+0x72>
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 8004aca:	4a09      	ldr	r2, [pc, #36]	; (8004af0 <__port_irq_epilogue+0x80>)
 8004acc:	9b04      	ldr	r3, [sp, #16]
 8004ace:	619a      	str	r2, [r3, #24]
    return;
 8004ad0:	e007      	b.n	8004ae2 <__port_irq_epilogue+0x72>
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	9300      	str	r3, [sp, #0]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004ad6:	9b00      	ldr	r3, [sp, #0]
 8004ad8:	f383 8811 	msr	BASEPRI, r3
}
 8004adc:	bf00      	nop
}
 8004ade:	bf00      	nop
}
 8004ae0:	bf00      	nop
  }
  port_unlock_from_isr();
}
 8004ae2:	b007      	add	sp, #28
 8004ae4:	f85d fb04 	ldr.w	pc, [sp], #4
 8004ae8:	e000ed00 	.word	0xe000ed00
 8004aec:	08000303 	.word	0x08000303
 8004af0:	08000306 	.word	0x08000306
	...

08004b00 <long_to_string_with_divisor>:
#define FLOAT_PRECISION 9

static char *long_to_string_with_divisor(char *p,
                                         long num,
                                         unsigned radix,
                                         long divisor) {
 8004b00:	b088      	sub	sp, #32
 8004b02:	9003      	str	r0, [sp, #12]
 8004b04:	9102      	str	r1, [sp, #8]
 8004b06:	9201      	str	r2, [sp, #4]
 8004b08:	9300      	str	r3, [sp, #0]
  int i;
  char *q;
  long l, ll;

  l = num;
 8004b0a:	9b02      	ldr	r3, [sp, #8]
 8004b0c:	9305      	str	r3, [sp, #20]
  if (divisor == 0) {
 8004b0e:	9b00      	ldr	r3, [sp, #0]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d102      	bne.n	8004b1a <long_to_string_with_divisor+0x1a>
    ll = num;
 8004b14:	9b02      	ldr	r3, [sp, #8]
 8004b16:	9304      	str	r3, [sp, #16]
 8004b18:	e001      	b.n	8004b1e <long_to_string_with_divisor+0x1e>
  } else {
    ll = divisor;
 8004b1a:	9b00      	ldr	r3, [sp, #0]
 8004b1c:	9304      	str	r3, [sp, #16]
  }

  q = p + MAX_FILLER;
 8004b1e:	9b03      	ldr	r3, [sp, #12]
 8004b20:	330b      	adds	r3, #11
 8004b22:	9306      	str	r3, [sp, #24]
  do {
    i = (int)(l % radix);
 8004b24:	9b05      	ldr	r3, [sp, #20]
 8004b26:	9a01      	ldr	r2, [sp, #4]
 8004b28:	fbb3 f2f2 	udiv	r2, r3, r2
 8004b2c:	9901      	ldr	r1, [sp, #4]
 8004b2e:	fb01 f202 	mul.w	r2, r1, r2
 8004b32:	1a9b      	subs	r3, r3, r2
 8004b34:	9307      	str	r3, [sp, #28]
    i += '0';
 8004b36:	9b07      	ldr	r3, [sp, #28]
 8004b38:	3330      	adds	r3, #48	; 0x30
 8004b3a:	9307      	str	r3, [sp, #28]
    if (i > '9') {
 8004b3c:	9b07      	ldr	r3, [sp, #28]
 8004b3e:	2b39      	cmp	r3, #57	; 0x39
 8004b40:	dd02      	ble.n	8004b48 <long_to_string_with_divisor+0x48>
      i += 'A' - '0' - 10;
 8004b42:	9b07      	ldr	r3, [sp, #28]
 8004b44:	3307      	adds	r3, #7
 8004b46:	9307      	str	r3, [sp, #28]
    }
    *--q = i;
 8004b48:	9b06      	ldr	r3, [sp, #24]
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	9306      	str	r3, [sp, #24]
 8004b4e:	9b07      	ldr	r3, [sp, #28]
 8004b50:	b2da      	uxtb	r2, r3
 8004b52:	9b06      	ldr	r3, [sp, #24]
 8004b54:	701a      	strb	r2, [r3, #0]
    l /= radix;
 8004b56:	9a05      	ldr	r2, [sp, #20]
 8004b58:	9b01      	ldr	r3, [sp, #4]
 8004b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b5e:	9305      	str	r3, [sp, #20]
  } while ((ll /= radix) != 0);
 8004b60:	9a04      	ldr	r2, [sp, #16]
 8004b62:	9b01      	ldr	r3, [sp, #4]
 8004b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b68:	9304      	str	r3, [sp, #16]
 8004b6a:	9b04      	ldr	r3, [sp, #16]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1d9      	bne.n	8004b24 <long_to_string_with_divisor+0x24>

  i = (int)(p + MAX_FILLER - q);
 8004b70:	9b03      	ldr	r3, [sp, #12]
 8004b72:	f103 020b 	add.w	r2, r3, #11
 8004b76:	9b06      	ldr	r3, [sp, #24]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	9307      	str	r3, [sp, #28]
  do
    *p++ = *q++;
 8004b7c:	9a06      	ldr	r2, [sp, #24]
 8004b7e:	1c53      	adds	r3, r2, #1
 8004b80:	9306      	str	r3, [sp, #24]
 8004b82:	9b03      	ldr	r3, [sp, #12]
 8004b84:	1c59      	adds	r1, r3, #1
 8004b86:	9103      	str	r1, [sp, #12]
 8004b88:	7812      	ldrb	r2, [r2, #0]
 8004b8a:	701a      	strb	r2, [r3, #0]
  while (--i);
 8004b8c:	9b07      	ldr	r3, [sp, #28]
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	9307      	str	r3, [sp, #28]
 8004b92:	9b07      	ldr	r3, [sp, #28]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d1f1      	bne.n	8004b7c <long_to_string_with_divisor+0x7c>

  return p;
 8004b98:	9b03      	ldr	r3, [sp, #12]
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	b008      	add	sp, #32
 8004b9e:	4770      	bx	lr

08004ba0 <ch_ltoa>:

static char *ch_ltoa(char *p, long num, unsigned radix) {
 8004ba0:	b500      	push	{lr}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	9003      	str	r0, [sp, #12]
 8004ba6:	9102      	str	r1, [sp, #8]
 8004ba8:	9201      	str	r2, [sp, #4]

  return long_to_string_with_divisor(p, num, radix, 0);
 8004baa:	2300      	movs	r3, #0
 8004bac:	9a01      	ldr	r2, [sp, #4]
 8004bae:	9902      	ldr	r1, [sp, #8]
 8004bb0:	9803      	ldr	r0, [sp, #12]
 8004bb2:	f7ff ffa5 	bl	8004b00 <long_to_string_with_divisor>
 8004bb6:	4603      	mov	r3, r0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	b005      	add	sp, #20
 8004bbc:	f85d fb04 	ldr.w	pc, [sp], #4

08004bc0 <chvprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 8004bc0:	b500      	push	{lr}
 8004bc2:	b091      	sub	sp, #68	; 0x44
 8004bc4:	9003      	str	r0, [sp, #12]
 8004bc6:	9102      	str	r1, [sp, #8]
 8004bc8:	9201      	str	r2, [sp, #4]
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	9309      	str	r3, [sp, #36]	; 0x24
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8004bce:	9b02      	ldr	r3, [sp, #8]
 8004bd0:	1c5a      	adds	r2, r3, #1
 8004bd2:	9202      	str	r2, [sp, #8]
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    if (c == 0) {
 8004bda:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d101      	bne.n	8004be6 <chvprintf+0x26>
      return n;
 8004be2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004be4:	e24d      	b.n	8005082 <chvprintf+0x4c2>
    }
    
    if (c != '%') {
 8004be6:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 8004bea:	2b25      	cmp	r3, #37	; 0x25
 8004bec:	d00b      	beq.n	8004c06 <chvprintf+0x46>
      streamPut(chp, (uint8_t)c);
 8004bee:	9b03      	ldr	r3, [sp, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 8004bf8:	4611      	mov	r1, r2
 8004bfa:	9803      	ldr	r0, [sp, #12]
 8004bfc:	4798      	blx	r3
      n++;
 8004bfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c00:	3301      	adds	r3, #1
 8004c02:	9309      	str	r3, [sp, #36]	; 0x24
      continue;
 8004c04:	e23c      	b.n	8005080 <chvprintf+0x4c0>
    }
    
    p = tmpbuf;
 8004c06:	ab04      	add	r3, sp, #16
 8004c08:	930f      	str	r3, [sp, #60]	; 0x3c
    s = tmpbuf;
 8004c0a:	ab04      	add	r3, sp, #16
 8004c0c:	930e      	str	r3, [sp, #56]	; 0x38

    /* Alignment mode.*/
    left_align = false;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    if (*fmt == '-') {
 8004c14:	9b02      	ldr	r3, [sp, #8]
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	2b2d      	cmp	r3, #45	; 0x2d
 8004c1a:	d105      	bne.n	8004c28 <chvprintf+0x68>
      fmt++;
 8004c1c:	9b02      	ldr	r3, [sp, #8]
 8004c1e:	3301      	adds	r3, #1
 8004c20:	9302      	str	r3, [sp, #8]
      left_align = true;
 8004c22:	2301      	movs	r3, #1
 8004c24:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    }

    /* Sign mode.*/
    do_sign = false;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    if (*fmt == '+') {
 8004c2e:	9b02      	ldr	r3, [sp, #8]
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	2b2b      	cmp	r3, #43	; 0x2b
 8004c34:	d105      	bne.n	8004c42 <chvprintf+0x82>
      fmt++;
 8004c36:	9b02      	ldr	r3, [sp, #8]
 8004c38:	3301      	adds	r3, #1
 8004c3a:	9302      	str	r3, [sp, #8]
      do_sign = true;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    }

    /* Filler mode.*/
    filler = ' ';
 8004c42:	2320      	movs	r3, #32
 8004c44:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
    if (*fmt == '0') {
 8004c48:	9b02      	ldr	r3, [sp, #8]
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	2b30      	cmp	r3, #48	; 0x30
 8004c4e:	d105      	bne.n	8004c5c <chvprintf+0x9c>
      fmt++;
 8004c50:	9b02      	ldr	r3, [sp, #8]
 8004c52:	3301      	adds	r3, #1
 8004c54:	9302      	str	r3, [sp, #8]
      filler = '0';
 8004c56:	2330      	movs	r3, #48	; 0x30
 8004c58:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
    }
    
    /* Width modifier.*/
    if ( *fmt == '*') {
 8004c5c:	9b02      	ldr	r3, [sp, #8]
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	2b2a      	cmp	r3, #42	; 0x2a
 8004c62:	d10e      	bne.n	8004c82 <chvprintf+0xc2>
      width = va_arg(ap, int);
 8004c64:	9b01      	ldr	r3, [sp, #4]
 8004c66:	1d1a      	adds	r2, r3, #4
 8004c68:	9201      	str	r2, [sp, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	930a      	str	r3, [sp, #40]	; 0x28
      ++fmt;
 8004c6e:	9b02      	ldr	r3, [sp, #8]
 8004c70:	3301      	adds	r3, #1
 8004c72:	9302      	str	r3, [sp, #8]
      c = *fmt++;
 8004c74:	9b02      	ldr	r3, [sp, #8]
 8004c76:	1c5a      	adds	r2, r3, #1
 8004c78:	9202      	str	r2, [sp, #8]
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 8004c80:	e025      	b.n	8004cce <chvprintf+0x10e>
    }
    else {
      width = 0;
 8004c82:	2300      	movs	r3, #0
 8004c84:	930a      	str	r3, [sp, #40]	; 0x28
      while (true) {
        c = *fmt++;
 8004c86:	9b02      	ldr	r3, [sp, #8]
 8004c88:	1c5a      	adds	r2, r3, #1
 8004c8a:	9202      	str	r2, [sp, #8]
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
        if (c == 0) {
 8004c92:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d101      	bne.n	8004c9e <chvprintf+0xde>
          return n;
 8004c9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c9c:	e1f1      	b.n	8005082 <chvprintf+0x4c2>
        }
        if (c >= '0' && c <= '9') {
 8004c9e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 8004ca2:	2b2f      	cmp	r3, #47	; 0x2f
 8004ca4:	d913      	bls.n	8004cce <chvprintf+0x10e>
 8004ca6:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 8004caa:	2b39      	cmp	r3, #57	; 0x39
 8004cac:	d80f      	bhi.n	8004cce <chvprintf+0x10e>
          c -= '0';
 8004cae:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 8004cb2:	3b30      	subs	r3, #48	; 0x30
 8004cb4:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
          width = width * 10 + c;
 8004cb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004cba:	4613      	mov	r3, r2
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	4413      	add	r3, r2
 8004cc0:	005b      	lsls	r3, r3, #1
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 8004cc8:	4413      	add	r3, r2
 8004cca:	930a      	str	r3, [sp, #40]	; 0x28
        c = *fmt++;
 8004ccc:	e7db      	b.n	8004c86 <chvprintf+0xc6>
        }
      }
    }
    
    /* Precision modifier.*/
    precision = 0;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	930b      	str	r3, [sp, #44]	; 0x2c
    if (c == '.') {
 8004cd2:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 8004cd6:	2b2e      	cmp	r3, #46	; 0x2e
 8004cd8:	d13e      	bne.n	8004d58 <chvprintf+0x198>
      c = *fmt++;
 8004cda:	9b02      	ldr	r3, [sp, #8]
 8004cdc:	1c5a      	adds	r2, r3, #1
 8004cde:	9202      	str	r2, [sp, #8]
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
      if (c == 0) {
 8004ce6:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d101      	bne.n	8004cf2 <chvprintf+0x132>
        return n;
 8004cee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cf0:	e1c7      	b.n	8005082 <chvprintf+0x4c2>
      }
      if (c == '*') {
 8004cf2:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 8004cf6:	2b2a      	cmp	r3, #42	; 0x2a
 8004cf8:	d126      	bne.n	8004d48 <chvprintf+0x188>
        precision = va_arg(ap, int);
 8004cfa:	9b01      	ldr	r3, [sp, #4]
 8004cfc:	1d1a      	adds	r2, r3, #4
 8004cfe:	9201      	str	r2, [sp, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	930b      	str	r3, [sp, #44]	; 0x2c
        c = *fmt++;
 8004d04:	9b02      	ldr	r3, [sp, #8]
 8004d06:	1c5a      	adds	r2, r3, #1
 8004d08:	9202      	str	r2, [sp, #8]
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 8004d10:	e022      	b.n	8004d58 <chvprintf+0x198>
      }
      else {
        while (c >= '0' && c <= '9') {
          c -= '0';
 8004d12:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 8004d16:	3b30      	subs	r3, #48	; 0x30
 8004d18:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
          precision = precision * 10 + c;
 8004d1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004d1e:	4613      	mov	r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	4413      	add	r3, r2
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	461a      	mov	r2, r3
 8004d28:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 8004d2c:	4413      	add	r3, r2
 8004d2e:	930b      	str	r3, [sp, #44]	; 0x2c
          c = *fmt++;
 8004d30:	9b02      	ldr	r3, [sp, #8]
 8004d32:	1c5a      	adds	r2, r3, #1
 8004d34:	9202      	str	r2, [sp, #8]
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
          if (c == 0) {
 8004d3c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d101      	bne.n	8004d48 <chvprintf+0x188>
            return n;
 8004d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d46:	e19c      	b.n	8005082 <chvprintf+0x4c2>
        while (c >= '0' && c <= '9') {
 8004d48:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 8004d4c:	2b2f      	cmp	r3, #47	; 0x2f
 8004d4e:	d903      	bls.n	8004d58 <chvprintf+0x198>
 8004d50:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 8004d54:	2b39      	cmp	r3, #57	; 0x39
 8004d56:	d9dc      	bls.n	8004d12 <chvprintf+0x152>
        }
      }
    }
    
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 8004d58:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 8004d5c:	2b6c      	cmp	r3, #108	; 0x6c
 8004d5e:	d003      	beq.n	8004d68 <chvprintf+0x1a8>
 8004d60:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 8004d64:	2b4c      	cmp	r3, #76	; 0x4c
 8004d66:	d10e      	bne.n	8004d86 <chvprintf+0x1c6>
      is_long = true;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
      c = *fmt++;
 8004d6e:	9b02      	ldr	r3, [sp, #8]
 8004d70:	1c5a      	adds	r2, r3, #1
 8004d72:	9202      	str	r2, [sp, #8]
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
      if (c == 0) {
 8004d7a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d115      	bne.n	8004dae <chvprintf+0x1ee>
        return n;
 8004d82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d84:	e17d      	b.n	8005082 <chvprintf+0x4c2>
      }
    }
    else {
      is_long = (c >= 'A') && (c <= 'Z');
 8004d86:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 8004d8a:	2b40      	cmp	r3, #64	; 0x40
 8004d8c:	d905      	bls.n	8004d9a <chvprintf+0x1da>
 8004d8e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 8004d92:	2b5a      	cmp	r3, #90	; 0x5a
 8004d94:	d801      	bhi.n	8004d9a <chvprintf+0x1da>
 8004d96:	2301      	movs	r3, #1
 8004d98:	e000      	b.n	8004d9c <chvprintf+0x1dc>
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8004da0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004da4:	f003 0301 	and.w	r3, r3, #1
 8004da8:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8004dac:	e000      	b.n	8004db0 <chvprintf+0x1f0>
      if (c == 0) {
 8004dae:	bf00      	nop
    }

    /* Command decoding.*/
    switch (c) {
 8004db0:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 8004db4:	3b44      	subs	r3, #68	; 0x44
 8004db6:	2b34      	cmp	r3, #52	; 0x34
 8004db8:	f200 80ed 	bhi.w	8004f96 <chvprintf+0x3d6>
 8004dbc:	a201      	add	r2, pc, #4	; (adr r2, 8004dc4 <chvprintf+0x204>)
 8004dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc2:	bf00      	nop
 8004dc4:	08004efb 	.word	0x08004efb
 8004dc8:	08004f97 	.word	0x08004f97
 8004dcc:	08004f97 	.word	0x08004f97
 8004dd0:	08004f97 	.word	0x08004f97
 8004dd4:	08004f97 	.word	0x08004f97
 8004dd8:	08004efb 	.word	0x08004efb
 8004ddc:	08004f97 	.word	0x08004f97
 8004de0:	08004f97 	.word	0x08004f97
 8004de4:	08004f97 	.word	0x08004f97
 8004de8:	08004f97 	.word	0x08004f97
 8004dec:	08004f97 	.word	0x08004f97
 8004df0:	08004f61 	.word	0x08004f61
 8004df4:	08004f51 	.word	0x08004f51
 8004df8:	08004f97 	.word	0x08004f97
 8004dfc:	08004f97 	.word	0x08004f97
 8004e00:	08004f97 	.word	0x08004f97
 8004e04:	08004f97 	.word	0x08004f97
 8004e08:	08004f59 	.word	0x08004f59
 8004e0c:	08004f97 	.word	0x08004f97
 8004e10:	08004f97 	.word	0x08004f97
 8004e14:	08004f51 	.word	0x08004f51
 8004e18:	08004f97 	.word	0x08004f97
 8004e1c:	08004f97 	.word	0x08004f97
 8004e20:	08004f97 	.word	0x08004f97
 8004e24:	08004f97 	.word	0x08004f97
 8004e28:	08004f97 	.word	0x08004f97
 8004e2c:	08004f97 	.word	0x08004f97
 8004e30:	08004f97 	.word	0x08004f97
 8004e34:	08004f97 	.word	0x08004f97
 8004e38:	08004f97 	.word	0x08004f97
 8004e3c:	08004f97 	.word	0x08004f97
 8004e40:	08004e99 	.word	0x08004e99
 8004e44:	08004efb 	.word	0x08004efb
 8004e48:	08004f97 	.word	0x08004f97
 8004e4c:	08004f97 	.word	0x08004f97
 8004e50:	08004f97 	.word	0x08004f97
 8004e54:	08004f97 	.word	0x08004f97
 8004e58:	08004efb 	.word	0x08004efb
 8004e5c:	08004f97 	.word	0x08004f97
 8004e60:	08004f97 	.word	0x08004f97
 8004e64:	08004f97 	.word	0x08004f97
 8004e68:	08004f97 	.word	0x08004f97
 8004e6c:	08004f97 	.word	0x08004f97
 8004e70:	08004f61 	.word	0x08004f61
 8004e74:	08004f51 	.word	0x08004f51
 8004e78:	08004f97 	.word	0x08004f97
 8004e7c:	08004f97 	.word	0x08004f97
 8004e80:	08004eb3 	.word	0x08004eb3
 8004e84:	08004f97 	.word	0x08004f97
 8004e88:	08004f59 	.word	0x08004f59
 8004e8c:	08004f97 	.word	0x08004f97
 8004e90:	08004f97 	.word	0x08004f97
 8004e94:	08004f51 	.word	0x08004f51
    case 'c':
      filler = ' ';
 8004e98:	2320      	movs	r3, #32
 8004e9a:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
      *p++ = va_arg(ap, int);
 8004e9e:	9b01      	ldr	r3, [sp, #4]
 8004ea0:	1d1a      	adds	r2, r3, #4
 8004ea2:	9201      	str	r2, [sp, #4]
 8004ea4:	6819      	ldr	r1, [r3, #0]
 8004ea6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004ea8:	1c5a      	adds	r2, r3, #1
 8004eaa:	920f      	str	r2, [sp, #60]	; 0x3c
 8004eac:	b2ca      	uxtb	r2, r1
 8004eae:	701a      	strb	r2, [r3, #0]
      break;
 8004eb0:	e079      	b.n	8004fa6 <chvprintf+0x3e6>
    case 's':
      filler = ' ';
 8004eb2:	2320      	movs	r3, #32
 8004eb4:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
      if ((s = va_arg(ap, char *)) == 0) {
 8004eb8:	9b01      	ldr	r3, [sp, #4]
 8004eba:	1d1a      	adds	r2, r3, #4
 8004ebc:	9201      	str	r2, [sp, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	930e      	str	r3, [sp, #56]	; 0x38
 8004ec2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d101      	bne.n	8004ecc <chvprintf+0x30c>
        s = "(null)";
 8004ec8:	4b70      	ldr	r3, [pc, #448]	; (800508c <chvprintf+0x4cc>)
 8004eca:	930e      	str	r3, [sp, #56]	; 0x38
      }
      if (precision == 0) {
 8004ecc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d102      	bne.n	8004ed8 <chvprintf+0x318>
        precision = 32767;
 8004ed2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8004ed6:	930b      	str	r3, [sp, #44]	; 0x2c
      }
      for (p = s; *p && (--precision >= 0); p++)
 8004ed8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004eda:	930f      	str	r3, [sp, #60]	; 0x3c
 8004edc:	e002      	b.n	8004ee4 <chvprintf+0x324>
 8004ede:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	930f      	str	r3, [sp, #60]	; 0x3c
 8004ee4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d05b      	beq.n	8004fa4 <chvprintf+0x3e4>
 8004eec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ef2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	daf2      	bge.n	8004ede <chvprintf+0x31e>
        ;
      break;
 8004ef8:	e054      	b.n	8004fa4 <chvprintf+0x3e4>
    case 'D':
    case 'd':
    case 'I':
    case 'i':
      if (is_long) {
 8004efa:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d005      	beq.n	8004f0e <chvprintf+0x34e>
        l = va_arg(ap, long);
 8004f02:	9b01      	ldr	r3, [sp, #4]
 8004f04:	1d1a      	adds	r2, r3, #4
 8004f06:	9201      	str	r2, [sp, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	9307      	str	r3, [sp, #28]
 8004f0c:	e004      	b.n	8004f18 <chvprintf+0x358>
      }
      else {
        l = va_arg(ap, int);
 8004f0e:	9b01      	ldr	r3, [sp, #4]
 8004f10:	1d1a      	adds	r2, r3, #4
 8004f12:	9201      	str	r2, [sp, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	9307      	str	r3, [sp, #28]
      }
      if (l < 0) {
 8004f18:	9b07      	ldr	r3, [sp, #28]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	da08      	bge.n	8004f30 <chvprintf+0x370>
        *p++ = '-';
 8004f1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004f20:	1c5a      	adds	r2, r3, #1
 8004f22:	920f      	str	r2, [sp, #60]	; 0x3c
 8004f24:	222d      	movs	r2, #45	; 0x2d
 8004f26:	701a      	strb	r2, [r3, #0]
        l = -l;
 8004f28:	9b07      	ldr	r3, [sp, #28]
 8004f2a:	425b      	negs	r3, r3
 8004f2c:	9307      	str	r3, [sp, #28]
 8004f2e:	e008      	b.n	8004f42 <chvprintf+0x382>
      }
      else
        if (do_sign) {
 8004f30:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d004      	beq.n	8004f42 <chvprintf+0x382>
          *p++ = '+';
 8004f38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004f3a:	1c5a      	adds	r2, r3, #1
 8004f3c:	920f      	str	r2, [sp, #60]	; 0x3c
 8004f3e:	222b      	movs	r2, #43	; 0x2b
 8004f40:	701a      	strb	r2, [r3, #0]
        }
      p = ch_ltoa(p, l, 10);
 8004f42:	220a      	movs	r2, #10
 8004f44:	9907      	ldr	r1, [sp, #28]
 8004f46:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004f48:	f7ff fe2a 	bl	8004ba0 <ch_ltoa>
 8004f4c:	900f      	str	r0, [sp, #60]	; 0x3c
      break;
 8004f4e:	e02a      	b.n	8004fa6 <chvprintf+0x3e6>
#endif
    case 'X':
    case 'x':
    case 'P':
    case 'p':
      c = 16;
 8004f50:	2310      	movs	r3, #16
 8004f52:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
      goto unsigned_common;
 8004f56:	e006      	b.n	8004f66 <chvprintf+0x3a6>
    case 'U':
    case 'u':
      c = 10;
 8004f58:	230a      	movs	r3, #10
 8004f5a:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
      goto unsigned_common;
 8004f5e:	e002      	b.n	8004f66 <chvprintf+0x3a6>
    case 'O':
    case 'o':
      c = 8;
 8004f60:	2308      	movs	r3, #8
 8004f62:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
unsigned_common:
      if (is_long) {
 8004f66:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d005      	beq.n	8004f7a <chvprintf+0x3ba>
        l = va_arg(ap, unsigned long);
 8004f6e:	9b01      	ldr	r3, [sp, #4]
 8004f70:	1d1a      	adds	r2, r3, #4
 8004f72:	9201      	str	r2, [sp, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	9307      	str	r3, [sp, #28]
 8004f78:	e004      	b.n	8004f84 <chvprintf+0x3c4>
      }
      else {
        l = va_arg(ap, unsigned int);
 8004f7a:	9b01      	ldr	r3, [sp, #4]
 8004f7c:	1d1a      	adds	r2, r3, #4
 8004f7e:	9201      	str	r2, [sp, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	9307      	str	r3, [sp, #28]
      }
      p = ch_ltoa(p, l, c);
 8004f84:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 8004f88:	461a      	mov	r2, r3
 8004f8a:	9907      	ldr	r1, [sp, #28]
 8004f8c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004f8e:	f7ff fe07 	bl	8004ba0 <ch_ltoa>
 8004f92:	900f      	str	r0, [sp, #60]	; 0x3c
      break;
 8004f94:	e007      	b.n	8004fa6 <chvprintf+0x3e6>
    default:
      *p++ = c;
 8004f96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004f98:	1c5a      	adds	r2, r3, #1
 8004f9a:	920f      	str	r2, [sp, #60]	; 0x3c
 8004f9c:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 8004fa0:	701a      	strb	r2, [r3, #0]
      break;
 8004fa2:	e000      	b.n	8004fa6 <chvprintf+0x3e6>
      break;
 8004fa4:	bf00      	nop
    }
    i = (int)(p - s);
 8004fa6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004fa8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	930c      	str	r3, [sp, #48]	; 0x30
    if ((width -= i) < 0) {
 8004fae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004fb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	930a      	str	r3, [sp, #40]	; 0x28
 8004fb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	da01      	bge.n	8004fc0 <chvprintf+0x400>
      width = 0;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	930a      	str	r3, [sp, #40]	; 0x28
    }
    if (left_align == false) {
 8004fc0:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 8004fc4:	f083 0301 	eor.w	r3, r3, #1
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d002      	beq.n	8004fd4 <chvprintf+0x414>
      width = -width;
 8004fce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fd0:	425b      	negs	r3, r3
 8004fd2:	930a      	str	r3, [sp, #40]	; 0x28
    }
    if (width < 0) {
 8004fd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	da3a      	bge.n	8005050 <chvprintf+0x490>
      if ((*s == '-' || *s == '+') && filler == '0') {
 8004fda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	2b2d      	cmp	r3, #45	; 0x2d
 8004fe0:	d003      	beq.n	8004fea <chvprintf+0x42a>
 8004fe2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	2b2b      	cmp	r3, #43	; 0x2b
 8004fe8:	d113      	bne.n	8005012 <chvprintf+0x452>
 8004fea:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8004fee:	2b30      	cmp	r3, #48	; 0x30
 8004ff0:	d10f      	bne.n	8005012 <chvprintf+0x452>
        streamPut(chp, (uint8_t)*s++);
 8004ff2:	9b03      	ldr	r3, [sp, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68da      	ldr	r2, [r3, #12]
 8004ff8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ffa:	1c59      	adds	r1, r3, #1
 8004ffc:	910e      	str	r1, [sp, #56]	; 0x38
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	4619      	mov	r1, r3
 8005002:	9803      	ldr	r0, [sp, #12]
 8005004:	4790      	blx	r2
        n++;
 8005006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005008:	3301      	adds	r3, #1
 800500a:	9309      	str	r3, [sp, #36]	; 0x24
        i--;
 800500c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800500e:	3b01      	subs	r3, #1
 8005010:	930c      	str	r3, [sp, #48]	; 0x30
      }
      do {
        streamPut(chp, (uint8_t)filler);
 8005012:	9b03      	ldr	r3, [sp, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
 800501c:	4611      	mov	r1, r2
 800501e:	9803      	ldr	r0, [sp, #12]
 8005020:	4798      	blx	r3
        n++;
 8005022:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005024:	3301      	adds	r3, #1
 8005026:	9309      	str	r3, [sp, #36]	; 0x24
      } while (++width != 0);
 8005028:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800502a:	3301      	adds	r3, #1
 800502c:	930a      	str	r3, [sp, #40]	; 0x28
 800502e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1ee      	bne.n	8005012 <chvprintf+0x452>
    }
    while (--i >= 0) {
 8005034:	e00c      	b.n	8005050 <chvprintf+0x490>
      streamPut(chp, (uint8_t)*s++);
 8005036:	9b03      	ldr	r3, [sp, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68da      	ldr	r2, [r3, #12]
 800503c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800503e:	1c59      	adds	r1, r3, #1
 8005040:	910e      	str	r1, [sp, #56]	; 0x38
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	4619      	mov	r1, r3
 8005046:	9803      	ldr	r0, [sp, #12]
 8005048:	4790      	blx	r2
      n++;
 800504a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800504c:	3301      	adds	r3, #1
 800504e:	9309      	str	r3, [sp, #36]	; 0x24
    while (--i >= 0) {
 8005050:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005052:	3b01      	subs	r3, #1
 8005054:	930c      	str	r3, [sp, #48]	; 0x30
 8005056:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005058:	2b00      	cmp	r3, #0
 800505a:	daec      	bge.n	8005036 <chvprintf+0x476>
    }

    while (width) {
 800505c:	e00d      	b.n	800507a <chvprintf+0x4ba>
      streamPut(chp, (uint8_t)filler);
 800505e:	9b03      	ldr	r3, [sp, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
 8005068:	4611      	mov	r1, r2
 800506a:	9803      	ldr	r0, [sp, #12]
 800506c:	4798      	blx	r3
      n++;
 800506e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005070:	3301      	adds	r3, #1
 8005072:	9309      	str	r3, [sp, #36]	; 0x24
      width--;
 8005074:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005076:	3b01      	subs	r3, #1
 8005078:	930a      	str	r3, [sp, #40]	; 0x28
    while (width) {
 800507a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800507c:	2b00      	cmp	r3, #0
 800507e:	d1ee      	bne.n	800505e <chvprintf+0x49e>
    c = *fmt++;
 8005080:	e5a5      	b.n	8004bce <chvprintf+0xe>
    }
  }
}
 8005082:	4618      	mov	r0, r3
 8005084:	b011      	add	sp, #68	; 0x44
 8005086:	f85d fb04 	ldr.w	pc, [sp], #4
 800508a:	bf00      	nop
 800508c:	08006d04 	.word	0x08006d04

08005090 <chprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8005090:	b40e      	push	{r1, r2, r3}
 8005092:	b500      	push	{lr}
 8005094:	b084      	sub	sp, #16
 8005096:	9001      	str	r0, [sp, #4]
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8005098:	ab06      	add	r3, sp, #24
 800509a:	9302      	str	r3, [sp, #8]
  formatted_bytes = chvprintf(chp, fmt, ap);
 800509c:	9a02      	ldr	r2, [sp, #8]
 800509e:	9905      	ldr	r1, [sp, #20]
 80050a0:	9801      	ldr	r0, [sp, #4]
 80050a2:	f7ff fd8d 	bl	8004bc0 <chvprintf>
 80050a6:	9003      	str	r0, [sp, #12]
  va_end(ap);

  return formatted_bytes;
 80050a8:	9b03      	ldr	r3, [sp, #12]
 80050aa:	bf00      	nop
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	b004      	add	sp, #16
 80050b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80050b4:	b003      	add	sp, #12
 80050b6:	4770      	bx	lr
	...

080050c0 <conversion>:
#include <ctype.h>
#include <stdarg.h>
#include <time.h>

#define boolstr(s) ((s) ? "true" : "false")
double conversion(double parametro){
 80050c0:	b530      	push	{r4, r5, lr}
 80050c2:	b085      	sub	sp, #20
 80050c4:	e9cd 0100 	strd	r0, r1, [sp]
  int gradi;
  float secondi;
  gradi=(int)(parametro/100);
 80050c8:	f04f 0200 	mov.w	r2, #0
 80050cc:	4b2a      	ldr	r3, [pc, #168]	; (8005178 <conversion+0xb8>)
 80050ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80050d2:	f7fb fe89 	bl	8000de8 <__aeabi_ddiv>
 80050d6:	4602      	mov	r2, r0
 80050d8:	460b      	mov	r3, r1
 80050da:	4610      	mov	r0, r2
 80050dc:	4619      	mov	r1, r3
 80050de:	f7fb ff6b 	bl	8000fb8 <__aeabi_d2iz>
 80050e2:	4603      	mov	r3, r0
 80050e4:	9303      	str	r3, [sp, #12]
  secondi=(int)(((parametro/100)-gradi)*100000);
 80050e6:	f04f 0200 	mov.w	r2, #0
 80050ea:	4b23      	ldr	r3, [pc, #140]	; (8005178 <conversion+0xb8>)
 80050ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80050f0:	f7fb fe7a 	bl	8000de8 <__aeabi_ddiv>
 80050f4:	4602      	mov	r2, r0
 80050f6:	460b      	mov	r3, r1
 80050f8:	4614      	mov	r4, r2
 80050fa:	461d      	mov	r5, r3
 80050fc:	9803      	ldr	r0, [sp, #12]
 80050fe:	f7fb fcdf 	bl	8000ac0 <__aeabi_i2d>
 8005102:	4602      	mov	r2, r0
 8005104:	460b      	mov	r3, r1
 8005106:	4620      	mov	r0, r4
 8005108:	4629      	mov	r1, r5
 800510a:	f7fb fb8b 	bl	8000824 <__aeabi_dsub>
 800510e:	4602      	mov	r2, r0
 8005110:	460b      	mov	r3, r1
 8005112:	4610      	mov	r0, r2
 8005114:	4619      	mov	r1, r3
 8005116:	a316      	add	r3, pc, #88	; (adr r3, 8005170 <conversion+0xb0>)
 8005118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800511c:	f7fb fd3a 	bl	8000b94 <__aeabi_dmul>
 8005120:	4602      	mov	r2, r0
 8005122:	460b      	mov	r3, r1
 8005124:	4610      	mov	r0, r2
 8005126:	4619      	mov	r1, r3
 8005128:	f7fb ff46 	bl	8000fb8 <__aeabi_d2iz>
 800512c:	4603      	mov	r3, r0
 800512e:	4618      	mov	r0, r3
 8005130:	f7fc f824 	bl	800117c <__aeabi_i2f>
 8005134:	4603      	mov	r3, r0
 8005136:	9302      	str	r3, [sp, #8]
  return (gradi+(secondi/60)/1000);
 8005138:	9803      	ldr	r0, [sp, #12]
 800513a:	f7fc f81f 	bl	800117c <__aeabi_i2f>
 800513e:	4604      	mov	r4, r0
 8005140:	490e      	ldr	r1, [pc, #56]	; (800517c <conversion+0xbc>)
 8005142:	9802      	ldr	r0, [sp, #8]
 8005144:	f7fc f922 	bl	800138c <__aeabi_fdiv>
 8005148:	4603      	mov	r3, r0
 800514a:	490d      	ldr	r1, [pc, #52]	; (8005180 <conversion+0xc0>)
 800514c:	4618      	mov	r0, r3
 800514e:	f7fc f91d 	bl	800138c <__aeabi_fdiv>
 8005152:	4603      	mov	r3, r0
 8005154:	4619      	mov	r1, r3
 8005156:	4620      	mov	r0, r4
 8005158:	f7fb ff5c 	bl	8001014 <__addsf3>
 800515c:	4603      	mov	r3, r0
 800515e:	4618      	mov	r0, r3
 8005160:	f7fb fcc0 	bl	8000ae4 <__aeabi_f2d>
 8005164:	4602      	mov	r2, r0
 8005166:	460b      	mov	r3, r1
}
 8005168:	4610      	mov	r0, r2
 800516a:	4619      	mov	r1, r3
 800516c:	b005      	add	sp, #20
 800516e:	bd30      	pop	{r4, r5, pc}
 8005170:	00000000 	.word	0x00000000
 8005174:	40f86a00 	.word	0x40f86a00
 8005178:	40590000 	.word	0x40590000
 800517c:	42700000 	.word	0x42700000
 8005180:	447a0000 	.word	0x447a0000
	...

08005190 <hex2int>:

static int hex2int(char c)
{
 8005190:	b082      	sub	sp, #8
 8005192:	4603      	mov	r3, r0
 8005194:	f88d 3007 	strb.w	r3, [sp, #7]
    if (c >= '0' && c <= '9')
 8005198:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800519c:	2b2f      	cmp	r3, #47	; 0x2f
 800519e:	d907      	bls.n	80051b0 <hex2int+0x20>
 80051a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80051a4:	2b39      	cmp	r3, #57	; 0x39
 80051a6:	d803      	bhi.n	80051b0 <hex2int+0x20>
        return c - '0';
 80051a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80051ac:	3b30      	subs	r3, #48	; 0x30
 80051ae:	e019      	b.n	80051e4 <hex2int+0x54>
    if (c >= 'A' && c <= 'F')
 80051b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80051b4:	2b40      	cmp	r3, #64	; 0x40
 80051b6:	d907      	bls.n	80051c8 <hex2int+0x38>
 80051b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80051bc:	2b46      	cmp	r3, #70	; 0x46
 80051be:	d803      	bhi.n	80051c8 <hex2int+0x38>
        return c - 'A' + 10;
 80051c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80051c4:	3b37      	subs	r3, #55	; 0x37
 80051c6:	e00d      	b.n	80051e4 <hex2int+0x54>
    if (c >= 'a' && c <= 'f')
 80051c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80051cc:	2b60      	cmp	r3, #96	; 0x60
 80051ce:	d907      	bls.n	80051e0 <hex2int+0x50>
 80051d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80051d4:	2b66      	cmp	r3, #102	; 0x66
 80051d6:	d803      	bhi.n	80051e0 <hex2int+0x50>
        return c - 'a' + 10;
 80051d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80051dc:	3b57      	subs	r3, #87	; 0x57
 80051de:	e001      	b.n	80051e4 <hex2int+0x54>
    return -1;
 80051e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	b002      	add	sp, #8
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	0000      	movs	r0, r0
	...

080051f0 <minmea_check>:

    return checksum;
}

bool minmea_check(const char *sentence, bool strict)
{
 80051f0:	b500      	push	{lr}
 80051f2:	b087      	sub	sp, #28
 80051f4:	9001      	str	r0, [sp, #4]
 80051f6:	460b      	mov	r3, r1
 80051f8:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8_t checksum = 0x00;
 80051fc:	2300      	movs	r3, #0
 80051fe:	f88d 3017 	strb.w	r3, [sp, #23]

    // Sequence length is limited.
    if (strlen(sentence) > MINMEA_MAX_LENGTH + 3)
 8005202:	9801      	ldr	r0, [sp, #4]
 8005204:	f7fb fa9c 	bl	8000740 <strlen>
 8005208:	4603      	mov	r3, r0
 800520a:	2b53      	cmp	r3, #83	; 0x53
 800520c:	d901      	bls.n	8005212 <minmea_check+0x22>
        return false;
 800520e:	2300      	movs	r3, #0
 8005210:	e06d      	b.n	80052ee <minmea_check+0xfe>

    // A valid sentence starts with "$".
    if (*sentence++ != '$')
 8005212:	9b01      	ldr	r3, [sp, #4]
 8005214:	1c5a      	adds	r2, r3, #1
 8005216:	9201      	str	r2, [sp, #4]
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	2b24      	cmp	r3, #36	; 0x24
 800521c:	d00a      	beq.n	8005234 <minmea_check+0x44>
        return false;
 800521e:	2300      	movs	r3, #0
 8005220:	e065      	b.n	80052ee <minmea_check+0xfe>

    // The optional checksum is an XOR of all bytes between "$" and "*".
    while (*sentence && *sentence != '*' && isprint((unsigned char) *sentence))
        checksum ^= *sentence++;
 8005222:	9b01      	ldr	r3, [sp, #4]
 8005224:	1c5a      	adds	r2, r3, #1
 8005226:	9201      	str	r2, [sp, #4]
 8005228:	781a      	ldrb	r2, [r3, #0]
 800522a:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800522e:	4053      	eors	r3, r2
 8005230:	f88d 3017 	strb.w	r3, [sp, #23]
    while (*sentence && *sentence != '*' && isprint((unsigned char) *sentence))
 8005234:	9b01      	ldr	r3, [sp, #4]
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00d      	beq.n	8005258 <minmea_check+0x68>
 800523c:	9b01      	ldr	r3, [sp, #4]
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	2b2a      	cmp	r3, #42	; 0x2a
 8005242:	d009      	beq.n	8005258 <minmea_check+0x68>
 8005244:	9b01      	ldr	r3, [sp, #4]
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	3301      	adds	r3, #1
 800524a:	4a2b      	ldr	r2, [pc, #172]	; (80052f8 <minmea_check+0x108>)
 800524c:	4413      	add	r3, r2
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	f003 0397 	and.w	r3, r3, #151	; 0x97
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1e4      	bne.n	8005222 <minmea_check+0x32>

    // If checksum is present...
    if (*sentence == '*') {
 8005258:	9b01      	ldr	r3, [sp, #4]
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	2b2a      	cmp	r3, #42	; 0x2a
 800525e:	d12a      	bne.n	80052b6 <minmea_check+0xc6>
        // Extract checksum.
        sentence++;
 8005260:	9b01      	ldr	r3, [sp, #4]
 8005262:	3301      	adds	r3, #1
 8005264:	9301      	str	r3, [sp, #4]
        int upper = hex2int(*sentence++);
 8005266:	9b01      	ldr	r3, [sp, #4]
 8005268:	1c5a      	adds	r2, r3, #1
 800526a:	9201      	str	r2, [sp, #4]
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	4618      	mov	r0, r3
 8005270:	f7ff ff8e 	bl	8005190 <hex2int>
 8005274:	9004      	str	r0, [sp, #16]
        if (upper == -1)
 8005276:	9b04      	ldr	r3, [sp, #16]
 8005278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800527c:	d101      	bne.n	8005282 <minmea_check+0x92>
            return false;
 800527e:	2300      	movs	r3, #0
 8005280:	e035      	b.n	80052ee <minmea_check+0xfe>
        int lower = hex2int(*sentence++);
 8005282:	9b01      	ldr	r3, [sp, #4]
 8005284:	1c5a      	adds	r2, r3, #1
 8005286:	9201      	str	r2, [sp, #4]
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	4618      	mov	r0, r3
 800528c:	f7ff ff80 	bl	8005190 <hex2int>
 8005290:	9003      	str	r0, [sp, #12]
        if (lower == -1)
 8005292:	9b03      	ldr	r3, [sp, #12]
 8005294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005298:	d101      	bne.n	800529e <minmea_check+0xae>
            return false;
 800529a:	2300      	movs	r3, #0
 800529c:	e027      	b.n	80052ee <minmea_check+0xfe>
        int expected = upper << 4 | lower;
 800529e:	9b04      	ldr	r3, [sp, #16]
 80052a0:	011b      	lsls	r3, r3, #4
 80052a2:	9a03      	ldr	r2, [sp, #12]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	9302      	str	r3, [sp, #8]

        // Check for checksum mismatch.
        if (checksum != expected)
 80052a8:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80052ac:	9a02      	ldr	r2, [sp, #8]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d007      	beq.n	80052c2 <minmea_check+0xd2>
            return false;
 80052b2:	2300      	movs	r3, #0
 80052b4:	e01b      	b.n	80052ee <minmea_check+0xfe>
    } else if (strict) {
 80052b6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d001      	beq.n	80052c2 <minmea_check+0xd2>
        // Discard non-checksummed frames in strict mode.
        return false;
 80052be:	2300      	movs	r3, #0
 80052c0:	e015      	b.n	80052ee <minmea_check+0xfe>
    }

    // The only stuff allowed at this point is a newline.
    if (*sentence && strcmp(sentence, "\n") && strcmp(sentence, "\r\n"))
 80052c2:	9b01      	ldr	r3, [sp, #4]
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00f      	beq.n	80052ea <minmea_check+0xfa>
 80052ca:	490c      	ldr	r1, [pc, #48]	; (80052fc <minmea_check+0x10c>)
 80052cc:	9801      	ldr	r0, [sp, #4]
 80052ce:	f7fb f8bb 	bl	8000448 <strcmp>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d008      	beq.n	80052ea <minmea_check+0xfa>
 80052d8:	4909      	ldr	r1, [pc, #36]	; (8005300 <minmea_check+0x110>)
 80052da:	9801      	ldr	r0, [sp, #4]
 80052dc:	f7fb f8b4 	bl	8000448 <strcmp>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d001      	beq.n	80052ea <minmea_check+0xfa>
        return false;
 80052e6:	2300      	movs	r3, #0
 80052e8:	e001      	b.n	80052ee <minmea_check+0xfe>

    return true;
 80052ea:	2301      	movs	r3, #1
 80052ec:	bf00      	nop
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	b007      	add	sp, #28
 80052f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80052f6:	bf00      	nop
 80052f8:	080072ec 	.word	0x080072ec
 80052fc:	08006d80 	.word	0x08006d80
 8005300:	08006d24 	.word	0x08006d24
	...

08005310 <minmea_isfield>:

static inline bool minmea_isfield(char c) {
 8005310:	b082      	sub	sp, #8
 8005312:	4603      	mov	r3, r0
 8005314:	f88d 3007 	strb.w	r3, [sp, #7]
    return isprint((unsigned char) c) && c != ',' && c != '*';
 8005318:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800531c:	3301      	adds	r3, #1
 800531e:	4a0c      	ldr	r2, [pc, #48]	; (8005350 <minmea_isfield+0x40>)
 8005320:	4413      	add	r3, r2
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	f003 0397 	and.w	r3, r3, #151	; 0x97
 8005328:	2b00      	cmp	r3, #0
 800532a:	d009      	beq.n	8005340 <minmea_isfield+0x30>
 800532c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005330:	2b2c      	cmp	r3, #44	; 0x2c
 8005332:	d005      	beq.n	8005340 <minmea_isfield+0x30>
 8005334:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005338:	2b2a      	cmp	r3, #42	; 0x2a
 800533a:	d001      	beq.n	8005340 <minmea_isfield+0x30>
 800533c:	2301      	movs	r3, #1
 800533e:	e000      	b.n	8005342 <minmea_isfield+0x32>
 8005340:	2300      	movs	r3, #0
 8005342:	f003 0301 	and.w	r3, r3, #1
 8005346:	b2db      	uxtb	r3, r3
}
 8005348:	4618      	mov	r0, r3
 800534a:	b002      	add	sp, #8
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	080072ec 	.word	0x080072ec
	...

08005360 <minmea_scan>:

bool minmea_scan(const char *sentence, const char *format, ...)
{
 8005360:	b40e      	push	{r1, r2, r3}
 8005362:	b500      	push	{lr}
 8005364:	b0a6      	sub	sp, #152	; 0x98
 8005366:	9001      	str	r0, [sp, #4]
    bool result = false;
 8005368:	2300      	movs	r3, #0
 800536a:	f88d 3097 	strb.w	r3, [sp, #151]	; 0x97
    bool optional = false;
 800536e:	2300      	movs	r3, #0
 8005370:	f88d 3096 	strb.w	r3, [sp, #150]	; 0x96
    va_list ap;
    va_start(ap, format);
 8005374:	ab28      	add	r3, sp, #160	; 0xa0
 8005376:	930b      	str	r3, [sp, #44]	; 0x2c

    const char *field = sentence;
 8005378:	9b01      	ldr	r3, [sp, #4]
 800537a:	9324      	str	r3, [sp, #144]	; 0x90
        } else { \
            field = NULL; \
        } \
    } while (0)

    while (*format) {
 800537c:	e341      	b.n	8005a02 <minmea_scan+0x6a2>
        char type = *format++;
 800537e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005380:	1c5a      	adds	r2, r3, #1
 8005382:	9227      	str	r2, [sp, #156]	; 0x9c
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43

        if (type == ';') {
 800538a:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 800538e:	2b3b      	cmp	r3, #59	; 0x3b
 8005390:	d103      	bne.n	800539a <minmea_scan+0x3a>
            // All further fields are optional.
            optional = true;
 8005392:	2301      	movs	r3, #1
 8005394:	f88d 3096 	strb.w	r3, [sp, #150]	; 0x96
            continue;
 8005398:	e333      	b.n	8005a02 <minmea_scan+0x6a2>
        }

        if (!field && !optional) {
 800539a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800539c:	2b00      	cmp	r3, #0
 800539e:	d107      	bne.n	80053b0 <minmea_scan+0x50>
 80053a0:	f89d 3096 	ldrb.w	r3, [sp, #150]	; 0x96
 80053a4:	f083 0301 	eor.w	r3, r3, #1
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	f040 8332 	bne.w	8005a14 <minmea_scan+0x6b4>
            // Field requested but we ran out if input. Bail out.
            goto parse_error;
        }

        switch (type) {
 80053b0:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 80053b4:	3b44      	subs	r3, #68	; 0x44
 80053b6:	2b30      	cmp	r3, #48	; 0x30
 80053b8:	f200 832e 	bhi.w	8005a18 <minmea_scan+0x6b8>
 80053bc:	a201      	add	r2, pc, #4	; (adr r2, 80053c4 <minmea_scan+0x64>)
 80053be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c2:	bf00      	nop
 80053c4:	0800578f 	.word	0x0800578f
 80053c8:	08005a19 	.word	0x08005a19
 80053cc:	08005a19 	.word	0x08005a19
 80053d0:	08005a19 	.word	0x08005a19
 80053d4:	08005a19 	.word	0x08005a19
 80053d8:	08005a19 	.word	0x08005a19
 80053dc:	08005a19 	.word	0x08005a19
 80053e0:	08005a19 	.word	0x08005a19
 80053e4:	08005a19 	.word	0x08005a19
 80053e8:	08005a19 	.word	0x08005a19
 80053ec:	08005a19 	.word	0x08005a19
 80053f0:	08005a19 	.word	0x08005a19
 80053f4:	08005a19 	.word	0x08005a19
 80053f8:	08005a19 	.word	0x08005a19
 80053fc:	08005a19 	.word	0x08005a19
 8005400:	08005a19 	.word	0x08005a19
 8005404:	08005877 	.word	0x08005877
 8005408:	08005a19 	.word	0x08005a19
 800540c:	08005a19 	.word	0x08005a19
 8005410:	08005a19 	.word	0x08005a19
 8005414:	08005a19 	.word	0x08005a19
 8005418:	08005a19 	.word	0x08005a19
 800541c:	08005a19 	.word	0x08005a19
 8005420:	08005a19 	.word	0x08005a19
 8005424:	08005a19 	.word	0x08005a19
 8005428:	08005a19 	.word	0x08005a19
 800542c:	08005a19 	.word	0x08005a19
 8005430:	080059d1 	.word	0x080059d1
 8005434:	08005a19 	.word	0x08005a19
 8005438:	08005a19 	.word	0x08005a19
 800543c:	08005a19 	.word	0x08005a19
 8005440:	08005489 	.word	0x08005489
 8005444:	080054bd 	.word	0x080054bd
 8005448:	08005a19 	.word	0x08005a19
 800544c:	08005553 	.word	0x08005553
 8005450:	08005a19 	.word	0x08005a19
 8005454:	08005a19 	.word	0x08005a19
 8005458:	080056b7 	.word	0x080056b7
 800545c:	08005a19 	.word	0x08005a19
 8005460:	08005a19 	.word	0x08005a19
 8005464:	08005a19 	.word	0x08005a19
 8005468:	08005a19 	.word	0x08005a19
 800546c:	08005a19 	.word	0x08005a19
 8005470:	08005a19 	.word	0x08005a19
 8005474:	08005a19 	.word	0x08005a19
 8005478:	08005a19 	.word	0x08005a19
 800547c:	08005a19 	.word	0x08005a19
 8005480:	080056ef 	.word	0x080056ef
 8005484:	08005729 	.word	0x08005729
            case 'c': { // Single character field (char).
                char value = '\0';
 8005488:	2300      	movs	r3, #0
 800548a:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f

                if (field && minmea_isfield(*field))
 800548e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00b      	beq.n	80054ac <minmea_scan+0x14c>
 8005494:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	4618      	mov	r0, r3
 800549a:	f7ff ff39 	bl	8005310 <minmea_isfield>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d003      	beq.n	80054ac <minmea_scan+0x14c>
                    value = *field;
 80054a4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f

                *va_arg(ap, char *) = value;
 80054ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054ae:	1d1a      	adds	r2, r3, #4
 80054b0:	920b      	str	r2, [sp, #44]	; 0x2c
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f89d 208f 	ldrb.w	r2, [sp, #143]	; 0x8f
 80054b8:	701a      	strb	r2, [r3, #0]
            } break;
 80054ba:	e28a      	b.n	80059d2 <minmea_scan+0x672>

            case 'd': { // Single character direction field (int).
                int value = 0;
 80054bc:	2300      	movs	r3, #0
 80054be:	9322      	str	r3, [sp, #136]	; 0x88

                if (field && minmea_isfield(*field)) {
 80054c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d03d      	beq.n	8005542 <minmea_scan+0x1e2>
 80054c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	4618      	mov	r0, r3
 80054cc:	f7ff ff20 	bl	8005310 <minmea_isfield>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d035      	beq.n	8005542 <minmea_scan+0x1e2>
                    switch (*field) {
 80054d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	3b45      	subs	r3, #69	; 0x45
 80054dc:	2b12      	cmp	r3, #18
 80054de:	f200 829d 	bhi.w	8005a1c <minmea_scan+0x6bc>
 80054e2:	a201      	add	r2, pc, #4	; (adr r2, 80054e8 <minmea_scan+0x188>)
 80054e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e8:	08005535 	.word	0x08005535
 80054ec:	08005a1d 	.word	0x08005a1d
 80054f0:	08005a1d 	.word	0x08005a1d
 80054f4:	08005a1d 	.word	0x08005a1d
 80054f8:	08005a1d 	.word	0x08005a1d
 80054fc:	08005a1d 	.word	0x08005a1d
 8005500:	08005a1d 	.word	0x08005a1d
 8005504:	08005a1d 	.word	0x08005a1d
 8005508:	08005a1d 	.word	0x08005a1d
 800550c:	08005535 	.word	0x08005535
 8005510:	08005a1d 	.word	0x08005a1d
 8005514:	08005a1d 	.word	0x08005a1d
 8005518:	08005a1d 	.word	0x08005a1d
 800551c:	08005a1d 	.word	0x08005a1d
 8005520:	0800553b 	.word	0x0800553b
 8005524:	08005a1d 	.word	0x08005a1d
 8005528:	08005a1d 	.word	0x08005a1d
 800552c:	08005a1d 	.word	0x08005a1d
 8005530:	0800553b 	.word	0x0800553b
                        case 'N':
                        case 'E':
                            value = 1;
 8005534:	2301      	movs	r3, #1
 8005536:	9322      	str	r3, [sp, #136]	; 0x88
                            break;
 8005538:	e004      	b.n	8005544 <minmea_scan+0x1e4>
                        case 'S':
                        case 'W':
                            value = -1;
 800553a:	f04f 33ff 	mov.w	r3, #4294967295
 800553e:	9322      	str	r3, [sp, #136]	; 0x88
                            break;
 8005540:	e000      	b.n	8005544 <minmea_scan+0x1e4>
                        default:
                            goto parse_error;
                    }
                }
 8005542:	bf00      	nop

                *va_arg(ap, int *) = value;
 8005544:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005546:	1d1a      	adds	r2, r3, #4
 8005548:	920b      	str	r2, [sp, #44]	; 0x2c
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800554e:	601a      	str	r2, [r3, #0]
            } break;
 8005550:	e23f      	b.n	80059d2 <minmea_scan+0x672>

            case 'f': { // Fractional value with scale (struct minmea_float).
                int sign = 0;
 8005552:	2300      	movs	r3, #0
 8005554:	9321      	str	r3, [sp, #132]	; 0x84
                int_least32_t value = -1;
 8005556:	f04f 33ff 	mov.w	r3, #4294967295
 800555a:	9320      	str	r3, [sp, #128]	; 0x80
                int_least32_t scale = 0;
 800555c:	2300      	movs	r3, #0
 800555e:	931f      	str	r3, [sp, #124]	; 0x7c

                if (field) {
 8005560:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005562:	2b00      	cmp	r3, #0
 8005564:	d07d      	beq.n	8005662 <minmea_scan+0x302>
                    while (minmea_isfield(*field)) {
 8005566:	e074      	b.n	8005652 <minmea_scan+0x2f2>
                        if (*field == '+' && !sign && value == -1) {
 8005568:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	2b2b      	cmp	r3, #43	; 0x2b
 800556e:	d109      	bne.n	8005584 <minmea_scan+0x224>
 8005570:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005572:	2b00      	cmp	r3, #0
 8005574:	d106      	bne.n	8005584 <minmea_scan+0x224>
 8005576:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800557c:	d102      	bne.n	8005584 <minmea_scan+0x224>
                            sign = 1;
 800557e:	2301      	movs	r3, #1
 8005580:	9321      	str	r3, [sp, #132]	; 0x84
 8005582:	e063      	b.n	800564c <minmea_scan+0x2ec>
                        } else if (*field == '-' && !sign && value == -1) {
 8005584:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	2b2d      	cmp	r3, #45	; 0x2d
 800558a:	d10a      	bne.n	80055a2 <minmea_scan+0x242>
 800558c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800558e:	2b00      	cmp	r3, #0
 8005590:	d107      	bne.n	80055a2 <minmea_scan+0x242>
 8005592:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005598:	d103      	bne.n	80055a2 <minmea_scan+0x242>
                            sign = -1;
 800559a:	f04f 33ff 	mov.w	r3, #4294967295
 800559e:	9321      	str	r3, [sp, #132]	; 0x84
 80055a0:	e054      	b.n	800564c <minmea_scan+0x2ec>
                        } else if (isdigit((unsigned char) *field)) {
 80055a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	3301      	adds	r3, #1
 80055a8:	4a87      	ldr	r2, [pc, #540]	; (80057c8 <minmea_scan+0x468>)
 80055aa:	4413      	add	r3, r2
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	f003 0304 	and.w	r3, r3, #4
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d02e      	beq.n	8005614 <minmea_scan+0x2b4>
                            int digit = *field - '0';
 80055b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	3b30      	subs	r3, #48	; 0x30
 80055bc:	930e      	str	r3, [sp, #56]	; 0x38
                            if (value == -1)
 80055be:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80055c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c4:	d101      	bne.n	80055ca <minmea_scan+0x26a>
                                value = 0;
 80055c6:	2300      	movs	r3, #0
 80055c8:	9320      	str	r3, [sp, #128]	; 0x80
                            if (value > (INT_LEAST32_MAX-digit) / 10) {
 80055ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80055cc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80055d0:	1a9b      	subs	r3, r3, r2
 80055d2:	4a7e      	ldr	r2, [pc, #504]	; (80057cc <minmea_scan+0x46c>)
 80055d4:	fb82 1203 	smull	r1, r2, r2, r3
 80055d8:	1092      	asrs	r2, r2, #2
 80055da:	17db      	asrs	r3, r3, #31
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80055e0:	429a      	cmp	r2, r3
 80055e2:	dd04      	ble.n	80055ee <minmea_scan+0x28e>
                                /* we ran out of bits, what do we do? */
                                if (scale) {
 80055e4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	f000 821a 	beq.w	8005a20 <minmea_scan+0x6c0>
                                    /* truncate extra precision */
                                    break;
 80055ec:	e039      	b.n	8005662 <minmea_scan+0x302>
                                } else {
                                    /* integer overflow. bail out. */
                                    goto parse_error;
                                }
                            }
                            value = (10 * value) + digit;
 80055ee:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80055f0:	4613      	mov	r3, r2
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	4413      	add	r3, r2
 80055f6:	005b      	lsls	r3, r3, #1
 80055f8:	461a      	mov	r2, r3
 80055fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055fc:	4413      	add	r3, r2
 80055fe:	9320      	str	r3, [sp, #128]	; 0x80
                            if (scale)
 8005600:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005602:	2b00      	cmp	r3, #0
 8005604:	d022      	beq.n	800564c <minmea_scan+0x2ec>
                                scale *= 10;
 8005606:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8005608:	4613      	mov	r3, r2
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	4413      	add	r3, r2
 800560e:	005b      	lsls	r3, r3, #1
 8005610:	931f      	str	r3, [sp, #124]	; 0x7c
 8005612:	e01b      	b.n	800564c <minmea_scan+0x2ec>
                        } else if (*field == '.' && scale == 0) {
 8005614:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	2b2e      	cmp	r3, #46	; 0x2e
 800561a:	d105      	bne.n	8005628 <minmea_scan+0x2c8>
 800561c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800561e:	2b00      	cmp	r3, #0
 8005620:	d102      	bne.n	8005628 <minmea_scan+0x2c8>
                            scale = 1;
 8005622:	2301      	movs	r3, #1
 8005624:	931f      	str	r3, [sp, #124]	; 0x7c
 8005626:	e011      	b.n	800564c <minmea_scan+0x2ec>
                        } else if (*field == ' ') {
 8005628:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	2b20      	cmp	r3, #32
 800562e:	f040 81f9 	bne.w	8005a24 <minmea_scan+0x6c4>
                            /* Allow spaces at the start of the field. Not NMEA
                             * conformant, but some modules do this. */
                            if (sign != 0 || value != -1 || scale != 0)
 8005632:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005634:	2b00      	cmp	r3, #0
 8005636:	f040 81f7 	bne.w	8005a28 <minmea_scan+0x6c8>
 800563a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800563c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005640:	f040 81f2 	bne.w	8005a28 <minmea_scan+0x6c8>
 8005644:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005646:	2b00      	cmp	r3, #0
 8005648:	f040 81ee 	bne.w	8005a28 <minmea_scan+0x6c8>
                                goto parse_error;
                        } else {
                            goto parse_error;
                        }
                        field++;
 800564c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800564e:	3301      	adds	r3, #1
 8005650:	9324      	str	r3, [sp, #144]	; 0x90
                    while (minmea_isfield(*field)) {
 8005652:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	4618      	mov	r0, r3
 8005658:	f7ff fe5a 	bl	8005310 <minmea_isfield>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d182      	bne.n	8005568 <minmea_scan+0x208>
                    }
                }

                if ((sign || scale) && value == -1)
 8005662:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005664:	2b00      	cmp	r3, #0
 8005666:	d102      	bne.n	800566e <minmea_scan+0x30e>
 8005668:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800566a:	2b00      	cmp	r3, #0
 800566c:	d004      	beq.n	8005678 <minmea_scan+0x318>
 800566e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005674:	f000 81da 	beq.w	8005a2c <minmea_scan+0x6cc>
                    goto parse_error;

                if (value == -1) {
 8005678:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800567a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800567e:	d104      	bne.n	800568a <minmea_scan+0x32a>
                    /* No digits were scanned. */
                    value = 0;
 8005680:	2300      	movs	r3, #0
 8005682:	9320      	str	r3, [sp, #128]	; 0x80
                    scale = 0;
 8005684:	2300      	movs	r3, #0
 8005686:	931f      	str	r3, [sp, #124]	; 0x7c
 8005688:	e004      	b.n	8005694 <minmea_scan+0x334>
                } else if (scale == 0) {
 800568a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800568c:	2b00      	cmp	r3, #0
 800568e:	d101      	bne.n	8005694 <minmea_scan+0x334>
                    /* No decimal point. */
                    scale = 1;
 8005690:	2301      	movs	r3, #1
 8005692:	931f      	str	r3, [sp, #124]	; 0x7c
                }
                if (sign)
 8005694:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005696:	2b00      	cmp	r3, #0
 8005698:	d004      	beq.n	80056a4 <minmea_scan+0x344>
                    value *= sign;
 800569a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800569c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800569e:	fb02 f303 	mul.w	r3, r2, r3
 80056a2:	9320      	str	r3, [sp, #128]	; 0x80

                *va_arg(ap, struct minmea_float *) = (struct minmea_float) {value, scale};
 80056a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056a6:	1d1a      	adds	r2, r3, #4
 80056a8:	920b      	str	r2, [sp, #44]	; 0x2c
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80056ae:	601a      	str	r2, [r3, #0]
 80056b0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80056b2:	605a      	str	r2, [r3, #4]
            } break;
 80056b4:	e18d      	b.n	80059d2 <minmea_scan+0x672>

            case 'i': { // Integer value, default 0 (int).
                int value = 0;
 80056b6:	2300      	movs	r3, #0
 80056b8:	931e      	str	r3, [sp, #120]	; 0x78

                if (field) {
 80056ba:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d00f      	beq.n	80056e0 <minmea_scan+0x380>
                    char *endptr;
                    value = strtol(field, &endptr, 10);
 80056c0:	ab04      	add	r3, sp, #16
 80056c2:	220a      	movs	r2, #10
 80056c4:	4619      	mov	r1, r3
 80056c6:	9824      	ldr	r0, [sp, #144]	; 0x90
 80056c8:	f001 f948 	bl	800695c <strtol>
 80056cc:	901e      	str	r0, [sp, #120]	; 0x78
                    if (minmea_isfield(*endptr))
 80056ce:	9b04      	ldr	r3, [sp, #16]
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7ff fe1c 	bl	8005310 <minmea_isfield>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f040 81a8 	bne.w	8005a30 <minmea_scan+0x6d0>
                        goto parse_error;
                }

                *va_arg(ap, int *) = value;
 80056e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056e2:	1d1a      	adds	r2, r3, #4
 80056e4:	920b      	str	r2, [sp, #44]	; 0x2c
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80056ea:	601a      	str	r2, [r3, #0]
            } break;
 80056ec:	e171      	b.n	80059d2 <minmea_scan+0x672>

            case 's': { // String value (char *).
                char *buf = va_arg(ap, char *);
 80056ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056f0:	1d1a      	adds	r2, r3, #4
 80056f2:	920b      	str	r2, [sp, #44]	; 0x2c
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	931d      	str	r3, [sp, #116]	; 0x74

                if (field) {
 80056f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d010      	beq.n	8005720 <minmea_scan+0x3c0>
                    while (minmea_isfield(*field))
 80056fe:	e007      	b.n	8005710 <minmea_scan+0x3b0>
                        *buf++ = *field++;
 8005700:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005702:	1c53      	adds	r3, r2, #1
 8005704:	9324      	str	r3, [sp, #144]	; 0x90
 8005706:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005708:	1c59      	adds	r1, r3, #1
 800570a:	911d      	str	r1, [sp, #116]	; 0x74
 800570c:	7812      	ldrb	r2, [r2, #0]
 800570e:	701a      	strb	r2, [r3, #0]
                    while (minmea_isfield(*field))
 8005710:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	4618      	mov	r0, r3
 8005716:	f7ff fdfb 	bl	8005310 <minmea_isfield>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1ef      	bne.n	8005700 <minmea_scan+0x3a0>
                }

                *buf = '\0';
 8005720:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005722:	2200      	movs	r2, #0
 8005724:	701a      	strb	r2, [r3, #0]
            } break;
 8005726:	e154      	b.n	80059d2 <minmea_scan+0x672>

            case 't': { // NMEA talker+sentence identifier (char *).
                // This field is always mandatory.
                if (!field)
 8005728:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800572a:	2b00      	cmp	r3, #0
 800572c:	f000 8182 	beq.w	8005a34 <minmea_scan+0x6d4>
                    goto parse_error;

                if (field[0] != '$')
 8005730:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	2b24      	cmp	r3, #36	; 0x24
 8005736:	f040 817f 	bne.w	8005a38 <minmea_scan+0x6d8>
                    goto parse_error;
                for (int f=0; f<5; f++)
 800573a:	2300      	movs	r3, #0
 800573c:	931c      	str	r3, [sp, #112]	; 0x70
 800573e:	e012      	b.n	8005766 <minmea_scan+0x406>
                    if (!minmea_isfield(field[1+f]))
 8005740:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005742:	3301      	adds	r3, #1
 8005744:	461a      	mov	r2, r3
 8005746:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005748:	4413      	add	r3, r2
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	4618      	mov	r0, r3
 800574e:	f7ff fddf 	bl	8005310 <minmea_isfield>
 8005752:	4603      	mov	r3, r0
 8005754:	f083 0301 	eor.w	r3, r3, #1
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	f040 816e 	bne.w	8005a3c <minmea_scan+0x6dc>
                for (int f=0; f<5; f++)
 8005760:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005762:	3301      	adds	r3, #1
 8005764:	931c      	str	r3, [sp, #112]	; 0x70
 8005766:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005768:	2b04      	cmp	r3, #4
 800576a:	dde9      	ble.n	8005740 <minmea_scan+0x3e0>
                        goto parse_error;

                char *buf = va_arg(ap, char *);
 800576c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800576e:	1d1a      	adds	r2, r3, #4
 8005770:	920b      	str	r2, [sp, #44]	; 0x2c
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	930f      	str	r3, [sp, #60]	; 0x3c
                memcpy(buf, field+1, 5);
 8005776:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005778:	3301      	adds	r3, #1
 800577a:	2205      	movs	r2, #5
 800577c:	4619      	mov	r1, r3
 800577e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005780:	f7fa fdc4 	bl	800030c <memcpy>
                buf[5] = '\0';
 8005784:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005786:	3305      	adds	r3, #5
 8005788:	2200      	movs	r2, #0
 800578a:	701a      	strb	r2, [r3, #0]
            } break;
 800578c:	e121      	b.n	80059d2 <minmea_scan+0x672>

            case 'D': { // Date (int, int, int), -1 if empty.
                struct minmea_date *date = va_arg(ap, struct minmea_date *);
 800578e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005790:	1d1a      	adds	r2, r3, #4
 8005792:	920b      	str	r2, [sp, #44]	; 0x2c
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	930c      	str	r3, [sp, #48]	; 0x30

                int d = -1, m = -1, y = -1;
 8005798:	f04f 33ff 	mov.w	r3, #4294967295
 800579c:	931b      	str	r3, [sp, #108]	; 0x6c
 800579e:	f04f 33ff 	mov.w	r3, #4294967295
 80057a2:	931a      	str	r3, [sp, #104]	; 0x68
 80057a4:	f04f 33ff 	mov.w	r3, #4294967295
 80057a8:	9319      	str	r3, [sp, #100]	; 0x64

                if (field && minmea_isfield(*field)) {
 80057aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d058      	beq.n	8005862 <minmea_scan+0x502>
 80057b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7ff fdab 	bl	8005310 <minmea_isfield>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d050      	beq.n	8005862 <minmea_scan+0x502>
                    // Always six digits.
                    for (int f=0; f<6; f++)
 80057c0:	2300      	movs	r3, #0
 80057c2:	9318      	str	r3, [sp, #96]	; 0x60
 80057c4:	e014      	b.n	80057f0 <minmea_scan+0x490>
 80057c6:	bf00      	nop
 80057c8:	080072ec 	.word	0x080072ec
 80057cc:	66666667 	.word	0x66666667
                        if (!isdigit((unsigned char) field[f]))
 80057d0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80057d2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80057d4:	4413      	add	r3, r2
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	3301      	adds	r3, #1
 80057da:	4a9f      	ldr	r2, [pc, #636]	; (8005a58 <minmea_scan+0x6f8>)
 80057dc:	4413      	add	r3, r2
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	f003 0304 	and.w	r3, r3, #4
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f000 812b 	beq.w	8005a40 <minmea_scan+0x6e0>
                    for (int f=0; f<6; f++)
 80057ea:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80057ec:	3301      	adds	r3, #1
 80057ee:	9318      	str	r3, [sp, #96]	; 0x60
 80057f0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80057f2:	2b05      	cmp	r3, #5
 80057f4:	ddec      	ble.n	80057d0 <minmea_scan+0x470>
                            goto parse_error;

                    char dArr[] = {field[0], field[1], '\0'};
 80057f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	f88d 301c 	strb.w	r3, [sp, #28]
 80057fe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005800:	785b      	ldrb	r3, [r3, #1]
 8005802:	f88d 301d 	strb.w	r3, [sp, #29]
 8005806:	2300      	movs	r3, #0
 8005808:	f88d 301e 	strb.w	r3, [sp, #30]
                    char mArr[] = {field[2], field[3], '\0'};
 800580c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800580e:	789b      	ldrb	r3, [r3, #2]
 8005810:	f88d 3018 	strb.w	r3, [sp, #24]
 8005814:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005816:	78db      	ldrb	r3, [r3, #3]
 8005818:	f88d 3019 	strb.w	r3, [sp, #25]
 800581c:	2300      	movs	r3, #0
 800581e:	f88d 301a 	strb.w	r3, [sp, #26]
                    char yArr[] = {field[4], field[5], '\0'};
 8005822:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005824:	791b      	ldrb	r3, [r3, #4]
 8005826:	f88d 3014 	strb.w	r3, [sp, #20]
 800582a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800582c:	795b      	ldrb	r3, [r3, #5]
 800582e:	f88d 3015 	strb.w	r3, [sp, #21]
 8005832:	2300      	movs	r3, #0
 8005834:	f88d 3016 	strb.w	r3, [sp, #22]
                    d = strtol(dArr, NULL, 10);
 8005838:	ab07      	add	r3, sp, #28
 800583a:	220a      	movs	r2, #10
 800583c:	2100      	movs	r1, #0
 800583e:	4618      	mov	r0, r3
 8005840:	f001 f88c 	bl	800695c <strtol>
 8005844:	901b      	str	r0, [sp, #108]	; 0x6c
                    m = strtol(mArr, NULL, 10);
 8005846:	ab06      	add	r3, sp, #24
 8005848:	220a      	movs	r2, #10
 800584a:	2100      	movs	r1, #0
 800584c:	4618      	mov	r0, r3
 800584e:	f001 f885 	bl	800695c <strtol>
 8005852:	901a      	str	r0, [sp, #104]	; 0x68
                    y = strtol(yArr, NULL, 10);
 8005854:	ab05      	add	r3, sp, #20
 8005856:	220a      	movs	r2, #10
 8005858:	2100      	movs	r1, #0
 800585a:	4618      	mov	r0, r3
 800585c:	f001 f87e 	bl	800695c <strtol>
 8005860:	9019      	str	r0, [sp, #100]	; 0x64
                }

                date->day = d;
 8005862:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005864:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005866:	601a      	str	r2, [r3, #0]
                date->month = m;
 8005868:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800586a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800586c:	605a      	str	r2, [r3, #4]
                date->year = y;
 800586e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005870:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005872:	609a      	str	r2, [r3, #8]
            } break;
 8005874:	e0ad      	b.n	80059d2 <minmea_scan+0x672>

            case 'T': { // Time (int, int, int, int), -1 if empty.
                struct minmea_time *time_ = va_arg(ap, struct minmea_time *);
 8005876:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005878:	1d1a      	adds	r2, r3, #4
 800587a:	920b      	str	r2, [sp, #44]	; 0x2c
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	930d      	str	r3, [sp, #52]	; 0x34

                int h = -1, i = -1, s = -1, u = -1;
 8005880:	f04f 33ff 	mov.w	r3, #4294967295
 8005884:	9317      	str	r3, [sp, #92]	; 0x5c
 8005886:	f04f 33ff 	mov.w	r3, #4294967295
 800588a:	9316      	str	r3, [sp, #88]	; 0x58
 800588c:	f04f 33ff 	mov.w	r3, #4294967295
 8005890:	9315      	str	r3, [sp, #84]	; 0x54
 8005892:	f04f 33ff 	mov.w	r3, #4294967295
 8005896:	9314      	str	r3, [sp, #80]	; 0x50

                if (field && minmea_isfield(*field)) {
 8005898:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800589a:	2b00      	cmp	r3, #0
 800589c:	f000 808b 	beq.w	80059b6 <minmea_scan+0x656>
 80058a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	4618      	mov	r0, r3
 80058a6:	f7ff fd33 	bl	8005310 <minmea_isfield>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	f000 8082 	beq.w	80059b6 <minmea_scan+0x656>
                    // Minimum required: integer time.
                    for (int f=0; f<6; f++)
 80058b2:	2300      	movs	r3, #0
 80058b4:	9313      	str	r3, [sp, #76]	; 0x4c
 80058b6:	e00f      	b.n	80058d8 <minmea_scan+0x578>
                        if (!isdigit((unsigned char) field[f]))
 80058b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80058ba:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80058bc:	4413      	add	r3, r2
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	3301      	adds	r3, #1
 80058c2:	4a65      	ldr	r2, [pc, #404]	; (8005a58 <minmea_scan+0x6f8>)
 80058c4:	4413      	add	r3, r2
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	f003 0304 	and.w	r3, r3, #4
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f000 80b9 	beq.w	8005a44 <minmea_scan+0x6e4>
                    for (int f=0; f<6; f++)
 80058d2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80058d4:	3301      	adds	r3, #1
 80058d6:	9313      	str	r3, [sp, #76]	; 0x4c
 80058d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80058da:	2b05      	cmp	r3, #5
 80058dc:	ddec      	ble.n	80058b8 <minmea_scan+0x558>
                            goto parse_error;

                    char hArr[] = {field[0], field[1], '\0'};
 80058de:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80058e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80058e8:	785b      	ldrb	r3, [r3, #1]
 80058ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058ee:	2300      	movs	r3, #0
 80058f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
                    char iArr[] = {field[2], field[3], '\0'};
 80058f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80058f6:	789b      	ldrb	r3, [r3, #2]
 80058f8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80058fc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80058fe:	78db      	ldrb	r3, [r3, #3]
 8005900:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8005904:	2300      	movs	r3, #0
 8005906:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
                    char sArr[] = {field[4], field[5], '\0'};
 800590a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800590c:	791b      	ldrb	r3, [r3, #4]
 800590e:	f88d 3020 	strb.w	r3, [sp, #32]
 8005912:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005914:	795b      	ldrb	r3, [r3, #5]
 8005916:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 800591a:	2300      	movs	r3, #0
 800591c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    h = strtol(hArr, NULL, 10);
 8005920:	ab0a      	add	r3, sp, #40	; 0x28
 8005922:	220a      	movs	r2, #10
 8005924:	2100      	movs	r1, #0
 8005926:	4618      	mov	r0, r3
 8005928:	f001 f818 	bl	800695c <strtol>
 800592c:	9017      	str	r0, [sp, #92]	; 0x5c
                    i = strtol(iArr, NULL, 10);
 800592e:	ab09      	add	r3, sp, #36	; 0x24
 8005930:	220a      	movs	r2, #10
 8005932:	2100      	movs	r1, #0
 8005934:	4618      	mov	r0, r3
 8005936:	f001 f811 	bl	800695c <strtol>
 800593a:	9016      	str	r0, [sp, #88]	; 0x58
                    s = strtol(sArr, NULL, 10);
 800593c:	ab08      	add	r3, sp, #32
 800593e:	220a      	movs	r2, #10
 8005940:	2100      	movs	r1, #0
 8005942:	4618      	mov	r0, r3
 8005944:	f001 f80a 	bl	800695c <strtol>
 8005948:	9015      	str	r0, [sp, #84]	; 0x54
                    field += 6;
 800594a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800594c:	3306      	adds	r3, #6
 800594e:	9324      	str	r3, [sp, #144]	; 0x90

                    // Extra: fractional time. Saved as microseconds.
                    if (*field++ == '.') {
 8005950:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005952:	1c5a      	adds	r2, r3, #1
 8005954:	9224      	str	r2, [sp, #144]	; 0x90
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	2b2e      	cmp	r3, #46	; 0x2e
 800595a:	d12a      	bne.n	80059b2 <minmea_scan+0x652>
                        uint32_t value = 0;
 800595c:	2300      	movs	r3, #0
 800595e:	9312      	str	r3, [sp, #72]	; 0x48
                        uint32_t scale = 1000000LU;
 8005960:	4b3e      	ldr	r3, [pc, #248]	; (8005a5c <minmea_scan+0x6fc>)
 8005962:	9311      	str	r3, [sp, #68]	; 0x44
                        while (isdigit((unsigned char) *field) && scale > 1) {
 8005964:	e012      	b.n	800598c <minmea_scan+0x62c>
                            value = (value * 10) + (*field++ - '0');
 8005966:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005968:	4613      	mov	r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4413      	add	r3, r2
 800596e:	005b      	lsls	r3, r3, #1
 8005970:	4619      	mov	r1, r3
 8005972:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005974:	1c5a      	adds	r2, r3, #1
 8005976:	9224      	str	r2, [sp, #144]	; 0x90
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	440b      	add	r3, r1
 800597c:	3b30      	subs	r3, #48	; 0x30
 800597e:	9312      	str	r3, [sp, #72]	; 0x48
                            scale /= 10;
 8005980:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005982:	4a37      	ldr	r2, [pc, #220]	; (8005a60 <minmea_scan+0x700>)
 8005984:	fba2 2303 	umull	r2, r3, r2, r3
 8005988:	08db      	lsrs	r3, r3, #3
 800598a:	9311      	str	r3, [sp, #68]	; 0x44
                        while (isdigit((unsigned char) *field) && scale > 1) {
 800598c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	3301      	adds	r3, #1
 8005992:	4a31      	ldr	r2, [pc, #196]	; (8005a58 <minmea_scan+0x6f8>)
 8005994:	4413      	add	r3, r2
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	f003 0304 	and.w	r3, r3, #4
 800599c:	2b00      	cmp	r3, #0
 800599e:	d002      	beq.n	80059a6 <minmea_scan+0x646>
 80059a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d8df      	bhi.n	8005966 <minmea_scan+0x606>
                        }
                        u = value * scale;
 80059a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80059a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80059aa:	fb02 f303 	mul.w	r3, r2, r3
 80059ae:	9314      	str	r3, [sp, #80]	; 0x50
 80059b0:	e001      	b.n	80059b6 <minmea_scan+0x656>
                    } else {
                        u = 0;
 80059b2:	2300      	movs	r3, #0
 80059b4:	9314      	str	r3, [sp, #80]	; 0x50
                    }
                }

                time_->hours = h;
 80059b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059b8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80059ba:	601a      	str	r2, [r3, #0]
                time_->minutes = i;
 80059bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059be:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80059c0:	605a      	str	r2, [r3, #4]
                time_->seconds = s;
 80059c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059c4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80059c6:	609a      	str	r2, [r3, #8]
                time_->microseconds = u;
 80059c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80059cc:	60da      	str	r2, [r3, #12]
            } break;
 80059ce:	e000      	b.n	80059d2 <minmea_scan+0x672>

            case '_': { // Ignore the field.
            } break;
 80059d0:	bf00      	nop
            default: { // Unknown.
                goto parse_error;
            }
        }

        next_field();
 80059d2:	e002      	b.n	80059da <minmea_scan+0x67a>
 80059d4:	9b01      	ldr	r3, [sp, #4]
 80059d6:	3301      	adds	r3, #1
 80059d8:	9301      	str	r3, [sp, #4]
 80059da:	9b01      	ldr	r3, [sp, #4]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	4618      	mov	r0, r3
 80059e0:	f7ff fc96 	bl	8005310 <minmea_isfield>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d1f4      	bne.n	80059d4 <minmea_scan+0x674>
 80059ea:	9b01      	ldr	r3, [sp, #4]
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	2b2c      	cmp	r3, #44	; 0x2c
 80059f0:	d105      	bne.n	80059fe <minmea_scan+0x69e>
 80059f2:	9b01      	ldr	r3, [sp, #4]
 80059f4:	3301      	adds	r3, #1
 80059f6:	9301      	str	r3, [sp, #4]
 80059f8:	9b01      	ldr	r3, [sp, #4]
 80059fa:	9324      	str	r3, [sp, #144]	; 0x90
 80059fc:	e001      	b.n	8005a02 <minmea_scan+0x6a2>
 80059fe:	2300      	movs	r3, #0
 8005a00:	9324      	str	r3, [sp, #144]	; 0x90
    while (*format) {
 8005a02:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	f47f acb9 	bne.w	800537e <minmea_scan+0x1e>
    }

    result = true;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	f88d 3097 	strb.w	r3, [sp, #151]	; 0x97
 8005a12:	e018      	b.n	8005a46 <minmea_scan+0x6e6>
            goto parse_error;
 8005a14:	bf00      	nop
 8005a16:	e016      	b.n	8005a46 <minmea_scan+0x6e6>
                goto parse_error;
 8005a18:	bf00      	nop
 8005a1a:	e014      	b.n	8005a46 <minmea_scan+0x6e6>
                            goto parse_error;
 8005a1c:	bf00      	nop
 8005a1e:	e012      	b.n	8005a46 <minmea_scan+0x6e6>
                                    goto parse_error;
 8005a20:	bf00      	nop
 8005a22:	e010      	b.n	8005a46 <minmea_scan+0x6e6>
                            goto parse_error;
 8005a24:	bf00      	nop
 8005a26:	e00e      	b.n	8005a46 <minmea_scan+0x6e6>
                                goto parse_error;
 8005a28:	bf00      	nop
 8005a2a:	e00c      	b.n	8005a46 <minmea_scan+0x6e6>
                    goto parse_error;
 8005a2c:	bf00      	nop
 8005a2e:	e00a      	b.n	8005a46 <minmea_scan+0x6e6>
                        goto parse_error;
 8005a30:	bf00      	nop
 8005a32:	e008      	b.n	8005a46 <minmea_scan+0x6e6>
                    goto parse_error;
 8005a34:	bf00      	nop
 8005a36:	e006      	b.n	8005a46 <minmea_scan+0x6e6>
                    goto parse_error;
 8005a38:	bf00      	nop
 8005a3a:	e004      	b.n	8005a46 <minmea_scan+0x6e6>
                        goto parse_error;
 8005a3c:	bf00      	nop
 8005a3e:	e002      	b.n	8005a46 <minmea_scan+0x6e6>
                            goto parse_error;
 8005a40:	bf00      	nop
 8005a42:	e000      	b.n	8005a46 <minmea_scan+0x6e6>
                            goto parse_error;
 8005a44:	bf00      	nop

parse_error:
    va_end(ap);
    return result;
 8005a46:	f89d 3097 	ldrb.w	r3, [sp, #151]	; 0x97
 8005a4a:	bf00      	nop
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	b026      	add	sp, #152	; 0x98
 8005a50:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a54:	b003      	add	sp, #12
 8005a56:	4770      	bx	lr
 8005a58:	080072ec 	.word	0x080072ec
 8005a5c:	000f4240 	.word	0x000f4240
 8005a60:	cccccccd 	.word	0xcccccccd
	...

08005a70 <minmea_sentence_id>:

    return true;
}

enum minmea_sentence_id minmea_sentence_id(const char *sentence, bool strict)
{
 8005a70:	b500      	push	{lr}
 8005a72:	b09f      	sub	sp, #124	; 0x7c
 8005a74:	9001      	str	r0, [sp, #4]
 8005a76:	460b      	mov	r3, r1
 8005a78:	f88d 3003 	strb.w	r3, [sp, #3]
   char buffer[100];

    if (!minmea_check(sentence, strict))
 8005a7c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005a80:	4619      	mov	r1, r3
 8005a82:	9801      	ldr	r0, [sp, #4]
 8005a84:	f7ff fbb4 	bl	80051f0 <minmea_check>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	f083 0301 	eor.w	r3, r3, #1
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d002      	beq.n	8005a9a <minmea_sentence_id+0x2a>
        return MINMEA_INVALID;
 8005a94:	f04f 33ff 	mov.w	r3, #4294967295
 8005a98:	e069      	b.n	8005b6e <minmea_sentence_id+0xfe>

   char type[6];
    if (!minmea_scan(sentence, "t", buffer))
 8005a9a:	ab05      	add	r3, sp, #20
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	4936      	ldr	r1, [pc, #216]	; (8005b78 <minmea_sentence_id+0x108>)
 8005aa0:	9801      	ldr	r0, [sp, #4]
 8005aa2:	f7ff fc5d 	bl	8005360 <minmea_scan>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	f083 0301 	eor.w	r3, r3, #1
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d002      	beq.n	8005ab8 <minmea_sentence_id+0x48>
       return MINMEA_INVALID;
 8005ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ab6:	e05a      	b.n	8005b6e <minmea_sentence_id+0xfe>


    if (!strcmp(buffer +2, "RMC"))
 8005ab8:	ab05      	add	r3, sp, #20
 8005aba:	3302      	adds	r3, #2
 8005abc:	492f      	ldr	r1, [pc, #188]	; (8005b7c <minmea_sentence_id+0x10c>)
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f7fa fcc2 	bl	8000448 <strcmp>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d101      	bne.n	8005ace <minmea_sentence_id+0x5e>
        return MINMEA_SENTENCE_RMC;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e04f      	b.n	8005b6e <minmea_sentence_id+0xfe>
    if (!strcmp(buffer +2, "GGA"))
 8005ace:	ab05      	add	r3, sp, #20
 8005ad0:	3302      	adds	r3, #2
 8005ad2:	492b      	ldr	r1, [pc, #172]	; (8005b80 <minmea_sentence_id+0x110>)
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f7fa fcb7 	bl	8000448 <strcmp>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d101      	bne.n	8005ae4 <minmea_sentence_id+0x74>
        return MINMEA_SENTENCE_GGA;
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	e044      	b.n	8005b6e <minmea_sentence_id+0xfe>
    if (!strcmp(buffer +2, "GSA"))
 8005ae4:	ab05      	add	r3, sp, #20
 8005ae6:	3302      	adds	r3, #2
 8005ae8:	4926      	ldr	r1, [pc, #152]	; (8005b84 <minmea_sentence_id+0x114>)
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7fa fcac 	bl	8000448 <strcmp>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d101      	bne.n	8005afa <minmea_sentence_id+0x8a>
        return MINMEA_SENTENCE_GSA;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e039      	b.n	8005b6e <minmea_sentence_id+0xfe>
    if (!strcmp(buffer +2, "GLL"))
 8005afa:	ab05      	add	r3, sp, #20
 8005afc:	3302      	adds	r3, #2
 8005afe:	4922      	ldr	r1, [pc, #136]	; (8005b88 <minmea_sentence_id+0x118>)
 8005b00:	4618      	mov	r0, r3
 8005b02:	f7fa fca1 	bl	8000448 <strcmp>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d101      	bne.n	8005b10 <minmea_sentence_id+0xa0>
        return MINMEA_SENTENCE_GLL;
 8005b0c:	2304      	movs	r3, #4
 8005b0e:	e02e      	b.n	8005b6e <minmea_sentence_id+0xfe>
    if (!strcmp(buffer +2, "GST"))
 8005b10:	ab05      	add	r3, sp, #20
 8005b12:	3302      	adds	r3, #2
 8005b14:	491d      	ldr	r1, [pc, #116]	; (8005b8c <minmea_sentence_id+0x11c>)
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7fa fc96 	bl	8000448 <strcmp>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d101      	bne.n	8005b26 <minmea_sentence_id+0xb6>
        return MINMEA_SENTENCE_GST;
 8005b22:	2305      	movs	r3, #5
 8005b24:	e023      	b.n	8005b6e <minmea_sentence_id+0xfe>
    if (!strcmp(buffer +2, "GSV"))
 8005b26:	ab05      	add	r3, sp, #20
 8005b28:	3302      	adds	r3, #2
 8005b2a:	4919      	ldr	r1, [pc, #100]	; (8005b90 <minmea_sentence_id+0x120>)
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7fa fc8b 	bl	8000448 <strcmp>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d101      	bne.n	8005b3c <minmea_sentence_id+0xcc>
        return MINMEA_SENTENCE_GSV;
 8005b38:	2306      	movs	r3, #6
 8005b3a:	e018      	b.n	8005b6e <minmea_sentence_id+0xfe>
    if (!strcmp(buffer +2, "VTG"))
 8005b3c:	ab05      	add	r3, sp, #20
 8005b3e:	3302      	adds	r3, #2
 8005b40:	4914      	ldr	r1, [pc, #80]	; (8005b94 <minmea_sentence_id+0x124>)
 8005b42:	4618      	mov	r0, r3
 8005b44:	f7fa fc80 	bl	8000448 <strcmp>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d101      	bne.n	8005b52 <minmea_sentence_id+0xe2>
        return MINMEA_SENTENCE_VTG;
 8005b4e:	2307      	movs	r3, #7
 8005b50:	e00d      	b.n	8005b6e <minmea_sentence_id+0xfe>
    if (!strcmp(buffer +2, "ZDA"))
 8005b52:	ab05      	add	r3, sp, #20
 8005b54:	3302      	adds	r3, #2
 8005b56:	4910      	ldr	r1, [pc, #64]	; (8005b98 <minmea_sentence_id+0x128>)
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f7fa fc75 	bl	8000448 <strcmp>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d101      	bne.n	8005b68 <minmea_sentence_id+0xf8>
        return MINMEA_SENTENCE_ZDA;
 8005b64:	2308      	movs	r3, #8
 8005b66:	e002      	b.n	8005b6e <minmea_sentence_id+0xfe>

    return MINMEA_INVALID;
 8005b68:	f04f 33ff 	mov.w	r3, #4294967295
 8005b6c:	bf00      	nop
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	b01f      	add	sp, #124	; 0x7c
 8005b72:	f85d fb04 	ldr.w	pc, [sp], #4
 8005b76:	bf00      	nop
 8005b78:	08006d84 	.word	0x08006d84
 8005b7c:	08006d88 	.word	0x08006d88
 8005b80:	08006d8c 	.word	0x08006d8c
 8005b84:	08006d90 	.word	0x08006d90
 8005b88:	08006d94 	.word	0x08006d94
 8005b8c:	08006d98 	.word	0x08006d98
 8005b90:	08006d9c 	.word	0x08006d9c
 8005b94:	08006da0 	.word	0x08006da0
 8005b98:	08006da4 	.word	0x08006da4
 8005b9c:	00000000 	.word	0x00000000

08005ba0 <minmea_parse_rmc>:

bool minmea_parse_rmc(struct minmea_sentence_rmc *frame, const char *sentence)
{
 8005ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ba2:	b095      	sub	sp, #84	; 0x54
 8005ba4:	900d      	str	r0, [sp, #52]	; 0x34
 8005ba6:	910c      	str	r1, [sp, #48]	; 0x30
    char type[6];
    char validity;
    int latitude_direction;
    int longitude_direction;
    int variation_direction;
    if (!minmea_scan(sentence, "tTcfdfdffDfd",
 8005ba8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005baa:	930b      	str	r3, [sp, #44]	; 0x2c
 8005bac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bae:	3314      	adds	r3, #20
 8005bb0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005bb2:	321c      	adds	r2, #28
 8005bb4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005bb6:	3124      	adds	r1, #36	; 0x24
 8005bb8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005bba:	302c      	adds	r0, #44	; 0x2c
 8005bbc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8005bbe:	3434      	adds	r4, #52	; 0x34
 8005bc0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005bc2:	3540      	adds	r5, #64	; 0x40
 8005bc4:	af12      	add	r7, sp, #72	; 0x48
 8005bc6:	ae0e      	add	r6, sp, #56	; 0x38
 8005bc8:	9609      	str	r6, [sp, #36]	; 0x24
 8005bca:	9508      	str	r5, [sp, #32]
 8005bcc:	9407      	str	r4, [sp, #28]
 8005bce:	9006      	str	r0, [sp, #24]
 8005bd0:	9105      	str	r1, [sp, #20]
 8005bd2:	a90f      	add	r1, sp, #60	; 0x3c
 8005bd4:	9104      	str	r1, [sp, #16]
 8005bd6:	9203      	str	r2, [sp, #12]
 8005bd8:	aa10      	add	r2, sp, #64	; 0x40
 8005bda:	9202      	str	r2, [sp, #8]
 8005bdc:	9301      	str	r3, [sp, #4]
 8005bde:	f10d 0347 	add.w	r3, sp, #71	; 0x47
 8005be2:	9300      	str	r3, [sp, #0]
 8005be4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005be6:	463a      	mov	r2, r7
 8005be8:	491d      	ldr	r1, [pc, #116]	; (8005c60 <minmea_parse_rmc+0xc0>)
 8005bea:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005bec:	f7ff fbb8 	bl	8005360 <minmea_scan>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	f083 0301 	eor.w	r3, r3, #1
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d001      	beq.n	8005c00 <minmea_parse_rmc+0x60>
            &frame->longitude, &longitude_direction,
            &frame->speed,
            &frame->course,
            &frame->date,
            &frame->variation, &variation_direction))
        return false;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	e02b      	b.n	8005c58 <minmea_parse_rmc+0xb8>
    if (strncmp(sentence +3, "RMC",3))
 8005c00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c02:	3303      	adds	r3, #3
 8005c04:	2203      	movs	r2, #3
 8005c06:	4917      	ldr	r1, [pc, #92]	; (8005c64 <minmea_parse_rmc+0xc4>)
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f000 fec3 	bl	8006994 <strncmp>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d001      	beq.n	8005c18 <minmea_parse_rmc+0x78>
        return false;
 8005c14:	2300      	movs	r3, #0
 8005c16:	e01f      	b.n	8005c58 <minmea_parse_rmc+0xb8>

    frame->valid = (validity == 'A');
 8005c18:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
 8005c1c:	2b41      	cmp	r3, #65	; 0x41
 8005c1e:	bf0c      	ite	eq
 8005c20:	2301      	moveq	r3, #1
 8005c22:	2300      	movne	r3, #0
 8005c24:	b2da      	uxtb	r2, r3
 8005c26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c28:	741a      	strb	r2, [r3, #16]
    frame->latitude.value *= latitude_direction;
 8005c2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c2c:	695b      	ldr	r3, [r3, #20]
 8005c2e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005c30:	fb03 f202 	mul.w	r2, r3, r2
 8005c34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c36:	615a      	str	r2, [r3, #20]
    frame->longitude.value *= longitude_direction;
 8005c38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c3a:	69db      	ldr	r3, [r3, #28]
 8005c3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005c3e:	fb03 f202 	mul.w	r2, r3, r2
 8005c42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c44:	61da      	str	r2, [r3, #28]
    frame->variation.value *= variation_direction;
 8005c46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c4c:	fb03 f202 	mul.w	r2, r3, r2
 8005c50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c52:	641a      	str	r2, [r3, #64]	; 0x40

    return true;
 8005c54:	2301      	movs	r3, #1
 8005c56:	bf00      	nop
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	b015      	add	sp, #84	; 0x54
 8005c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	08006da8 	.word	0x08006da8
 8005c64:	08006d88 	.word	0x08006d88
	...

08005c70 <minmea_parse_gga>:

bool minmea_parse_gga(struct minmea_sentence_gga *frame, const char *sentence)
{
 8005c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c72:	b097      	sub	sp, #92	; 0x5c
 8005c74:	9011      	str	r0, [sp, #68]	; 0x44
 8005c76:	9110      	str	r1, [sp, #64]	; 0x40
    // $GPGGA,123519,4807.038,N,01131.000,E,1,08,0.9,545.4,M,46.9,M,,*47
    char type[6];
    int latitude_direction;
    int longitude_direction;

    if (!minmea_scan(sentence, "tTfdfdiiffcfcf_",
 8005c78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005c7a:	930d      	str	r3, [sp, #52]	; 0x34
 8005c7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005c7e:	3310      	adds	r3, #16
 8005c80:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005c82:	3218      	adds	r2, #24
 8005c84:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005c86:	3120      	adds	r1, #32
 8005c88:	9811      	ldr	r0, [sp, #68]	; 0x44
 8005c8a:	3024      	adds	r0, #36	; 0x24
 8005c8c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8005c8e:	3428      	adds	r4, #40	; 0x28
 8005c90:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8005c92:	3530      	adds	r5, #48	; 0x30
 8005c94:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8005c96:	3638      	adds	r6, #56	; 0x38
 8005c98:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8005c9a:	373c      	adds	r7, #60	; 0x3c
 8005c9c:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 8005ca0:	f10c 0c44 	add.w	ip, ip, #68	; 0x44
 8005ca4:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
 8005ca8:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8005cac:	f10e 0e48 	add.w	lr, lr, #72	; 0x48
 8005cb0:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
 8005cb4:	f10d 0c50 	add.w	ip, sp, #80	; 0x50
 8005cb8:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
 8005cbc:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 8005cc0:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 8005cc4:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 8005cc8:	9709      	str	r7, [sp, #36]	; 0x24
 8005cca:	9608      	str	r6, [sp, #32]
 8005ccc:	9507      	str	r5, [sp, #28]
 8005cce:	9406      	str	r4, [sp, #24]
 8005cd0:	9005      	str	r0, [sp, #20]
 8005cd2:	9104      	str	r1, [sp, #16]
 8005cd4:	a912      	add	r1, sp, #72	; 0x48
 8005cd6:	9103      	str	r1, [sp, #12]
 8005cd8:	9202      	str	r2, [sp, #8]
 8005cda:	aa13      	add	r2, sp, #76	; 0x4c
 8005cdc:	9201      	str	r2, [sp, #4]
 8005cde:	9300      	str	r3, [sp, #0]
 8005ce0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ce2:	4662      	mov	r2, ip
 8005ce4:	4915      	ldr	r1, [pc, #84]	; (8005d3c <minmea_parse_gga+0xcc>)
 8005ce6:	9810      	ldr	r0, [sp, #64]	; 0x40
 8005ce8:	f7ff fb3a 	bl	8005360 <minmea_scan>
 8005cec:	4603      	mov	r3, r0
 8005cee:	f083 0301 	eor.w	r3, r3, #1
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d001      	beq.n	8005cfc <minmea_parse_gga+0x8c>
            &frame->satellites_tracked,
            &frame->hdop,
            &frame->altitude, &frame->altitude_units,
            &frame->height, &frame->height_units,
            &frame->dgps_age))
        return false;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	e01b      	b.n	8005d34 <minmea_parse_gga+0xc4>
    if (strncmp(sentence +3, "GGA",3))
 8005cfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005cfe:	3303      	adds	r3, #3
 8005d00:	2203      	movs	r2, #3
 8005d02:	490f      	ldr	r1, [pc, #60]	; (8005d40 <minmea_parse_gga+0xd0>)
 8005d04:	4618      	mov	r0, r3
 8005d06:	f000 fe45 	bl	8006994 <strncmp>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d001      	beq.n	8005d14 <minmea_parse_gga+0xa4>
        return false;
 8005d10:	2300      	movs	r3, #0
 8005d12:	e00f      	b.n	8005d34 <minmea_parse_gga+0xc4>

    frame->latitude.value *= latitude_direction;
 8005d14:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005d1a:	fb03 f202 	mul.w	r2, r3, r2
 8005d1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d20:	611a      	str	r2, [r3, #16]
    frame->longitude.value *= longitude_direction;
 8005d22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005d28:	fb03 f202 	mul.w	r2, r3, r2
 8005d2c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d2e:	619a      	str	r2, [r3, #24]

    return true;
 8005d30:	2301      	movs	r3, #1
 8005d32:	bf00      	nop
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	b017      	add	sp, #92	; 0x5c
 8005d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	08006db8 	.word	0x08006db8
 8005d40:	08006d8c 	.word	0x08006d8c
	...

08005d50 <minmea_parse_gll>:

    return true;
}

bool minmea_parse_gll(struct minmea_sentence_gll *frame, const char *sentence)
{
 8005d50:	b530      	push	{r4, r5, lr}
 8005d52:	b08d      	sub	sp, #52	; 0x34
 8005d54:	9007      	str	r0, [sp, #28]
 8005d56:	9106      	str	r1, [sp, #24]
    // $GPGLL,3723.2475,N,12158.3416,W,161229.487,A,A*41$;
    char type[6];
    int latitude_direction;
    int longitude_direction;

    if (!minmea_scan(sentence, "tfdfdTc;c",
 8005d58:	9d07      	ldr	r5, [sp, #28]
 8005d5a:	9b07      	ldr	r3, [sp, #28]
 8005d5c:	3308      	adds	r3, #8
 8005d5e:	9a07      	ldr	r2, [sp, #28]
 8005d60:	3210      	adds	r2, #16
 8005d62:	9907      	ldr	r1, [sp, #28]
 8005d64:	3120      	adds	r1, #32
 8005d66:	9807      	ldr	r0, [sp, #28]
 8005d68:	3021      	adds	r0, #33	; 0x21
 8005d6a:	ac0a      	add	r4, sp, #40	; 0x28
 8005d6c:	9005      	str	r0, [sp, #20]
 8005d6e:	9104      	str	r1, [sp, #16]
 8005d70:	9203      	str	r2, [sp, #12]
 8005d72:	aa08      	add	r2, sp, #32
 8005d74:	9202      	str	r2, [sp, #8]
 8005d76:	9301      	str	r3, [sp, #4]
 8005d78:	ab09      	add	r3, sp, #36	; 0x24
 8005d7a:	9300      	str	r3, [sp, #0]
 8005d7c:	462b      	mov	r3, r5
 8005d7e:	4622      	mov	r2, r4
 8005d80:	4915      	ldr	r1, [pc, #84]	; (8005dd8 <minmea_parse_gll+0x88>)
 8005d82:	9806      	ldr	r0, [sp, #24]
 8005d84:	f7ff faec 	bl	8005360 <minmea_scan>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	f083 0301 	eor.w	r3, r3, #1
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d001      	beq.n	8005d98 <minmea_parse_gll+0x48>
            &frame->latitude, &latitude_direction,
            &frame->longitude, &longitude_direction,
            &frame->time,
            &frame->status,
            &frame->mode))
        return false;
 8005d94:	2300      	movs	r3, #0
 8005d96:	e01b      	b.n	8005dd0 <minmea_parse_gll+0x80>
    if (strncmp(sentence +3, "GLL", 3))
 8005d98:	9b06      	ldr	r3, [sp, #24]
 8005d9a:	3303      	adds	r3, #3
 8005d9c:	2203      	movs	r2, #3
 8005d9e:	490f      	ldr	r1, [pc, #60]	; (8005ddc <minmea_parse_gll+0x8c>)
 8005da0:	4618      	mov	r0, r3
 8005da2:	f000 fdf7 	bl	8006994 <strncmp>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d001      	beq.n	8005db0 <minmea_parse_gll+0x60>
        return false;
 8005dac:	2300      	movs	r3, #0
 8005dae:	e00f      	b.n	8005dd0 <minmea_parse_gll+0x80>

    frame->latitude.value *= latitude_direction;
 8005db0:	9b07      	ldr	r3, [sp, #28]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005db6:	fb03 f202 	mul.w	r2, r3, r2
 8005dba:	9b07      	ldr	r3, [sp, #28]
 8005dbc:	601a      	str	r2, [r3, #0]
    frame->longitude.value *= longitude_direction;
 8005dbe:	9b07      	ldr	r3, [sp, #28]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	9a08      	ldr	r2, [sp, #32]
 8005dc4:	fb03 f202 	mul.w	r2, r3, r2
 8005dc8:	9b07      	ldr	r3, [sp, #28]
 8005dca:	609a      	str	r2, [r3, #8]

    return true;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	bf00      	nop
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	b00d      	add	sp, #52	; 0x34
 8005dd4:	bd30      	pop	{r4, r5, pc}
 8005dd6:	bf00      	nop
 8005dd8:	08006dc8 	.word	0x08006dc8
 8005ddc:	08006d94 	.word	0x08006d94

08005de0 <minmea_parse_gst>:

bool minmea_parse_gst(struct minmea_sentence_gst *frame, const char *sentence)
{
 8005de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005de2:	b08f      	sub	sp, #60	; 0x3c
 8005de4:	900b      	str	r0, [sp, #44]	; 0x2c
 8005de6:	910a      	str	r1, [sp, #40]	; 0x28
    // $GPGST,024603.00,3.2,6.6,4.7,47.3,5.8,5.6,22.0*58
    char type[6];

    if (!minmea_scan(sentence, "tTfffffff",
 8005de8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005dea:	9309      	str	r3, [sp, #36]	; 0x24
 8005dec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005dee:	3310      	adds	r3, #16
 8005df0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005df2:	3218      	adds	r2, #24
 8005df4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005df6:	3120      	adds	r1, #32
 8005df8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005dfa:	3028      	adds	r0, #40	; 0x28
 8005dfc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8005dfe:	3430      	adds	r4, #48	; 0x30
 8005e00:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005e02:	3538      	adds	r5, #56	; 0x38
 8005e04:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005e06:	3640      	adds	r6, #64	; 0x40
 8005e08:	af0c      	add	r7, sp, #48	; 0x30
 8005e0a:	9606      	str	r6, [sp, #24]
 8005e0c:	9505      	str	r5, [sp, #20]
 8005e0e:	9404      	str	r4, [sp, #16]
 8005e10:	9003      	str	r0, [sp, #12]
 8005e12:	9102      	str	r1, [sp, #8]
 8005e14:	9201      	str	r2, [sp, #4]
 8005e16:	9300      	str	r3, [sp, #0]
 8005e18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e1a:	463a      	mov	r2, r7
 8005e1c:	490e      	ldr	r1, [pc, #56]	; (8005e58 <minmea_parse_gst+0x78>)
 8005e1e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005e20:	f7ff fa9e 	bl	8005360 <minmea_scan>
 8005e24:	4603      	mov	r3, r0
 8005e26:	f083 0301 	eor.w	r3, r3, #1
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d001      	beq.n	8005e34 <minmea_parse_gst+0x54>
            &frame->semi_minor_deviation,
            &frame->semi_major_orientation,
            &frame->latitude_error_deviation,
            &frame->longitude_error_deviation,
            &frame->altitude_error_deviation))
        return false;
 8005e30:	2300      	movs	r3, #0
 8005e32:	e00d      	b.n	8005e50 <minmea_parse_gst+0x70>
    if (strncmp(sentence +3, "GST", 3))
 8005e34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e36:	3303      	adds	r3, #3
 8005e38:	2203      	movs	r2, #3
 8005e3a:	4908      	ldr	r1, [pc, #32]	; (8005e5c <minmea_parse_gst+0x7c>)
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f000 fda9 	bl	8006994 <strncmp>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d001      	beq.n	8005e4c <minmea_parse_gst+0x6c>
        return false;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	e001      	b.n	8005e50 <minmea_parse_gst+0x70>

    return true;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	bf00      	nop
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	b00f      	add	sp, #60	; 0x3c
 8005e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e56:	bf00      	nop
 8005e58:	08006dd4 	.word	0x08006dd4
 8005e5c:	08006d98 	.word	0x08006d98

08005e60 <minmea_parse_gsv>:

bool minmea_parse_gsv(struct minmea_sentence_gsv *frame, const char *sentence)
{
 8005e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e62:	b0a3      	sub	sp, #140	; 0x8c
 8005e64:	901f      	str	r0, [sp, #124]	; 0x7c
 8005e66:	911e      	str	r1, [sp, #120]	; 0x78
    // $GPGSV,4,2,11,08,51,203,30,09,45,215,28*75
    // $GPGSV,4,4,13,39,31,170,27*40
    // $GPGSV,4,4,13*7B
    char type[6];

    if (!minmea_scan(sentence, "tiii;iiiiiiiiiiiiiiii",
 8005e68:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005e6a:	9312      	str	r3, [sp, #72]	; 0x48
 8005e6c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005e6e:	1d1e      	adds	r6, r3, #4
 8005e70:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005e72:	f103 0708 	add.w	r7, r3, #8
 8005e76:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005e78:	f103 020c 	add.w	r2, r3, #12
 8005e7c:	9213      	str	r2, [sp, #76]	; 0x4c
 8005e7e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005e80:	f103 0110 	add.w	r1, r3, #16
 8005e84:	9114      	str	r1, [sp, #80]	; 0x50
 8005e86:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005e88:	f103 0014 	add.w	r0, r3, #20
 8005e8c:	9015      	str	r0, [sp, #84]	; 0x54
 8005e8e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005e90:	f103 0418 	add.w	r4, r3, #24
 8005e94:	9416      	str	r4, [sp, #88]	; 0x58
 8005e96:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005e98:	f103 051c 	add.w	r5, r3, #28
 8005e9c:	9517      	str	r5, [sp, #92]	; 0x5c
 8005e9e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005ea0:	f103 0c20 	add.w	ip, r3, #32
 8005ea4:	f8cd c060 	str.w	ip, [sp, #96]	; 0x60
 8005ea8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005eaa:	f103 0e24 	add.w	lr, r3, #36	; 0x24
 8005eae:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
 8005eb2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005eb4:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8005eb8:	921a      	str	r2, [sp, #104]	; 0x68
 8005eba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005ebc:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8005ec0:	911b      	str	r1, [sp, #108]	; 0x6c
 8005ec2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005ec4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8005ec8:	901c      	str	r0, [sp, #112]	; 0x70
 8005eca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005ecc:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8005ed0:	941d      	str	r4, [sp, #116]	; 0x74
 8005ed2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005ed4:	f103 0538 	add.w	r5, r3, #56	; 0x38
 8005ed8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005eda:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8005ede:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005ee0:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8005ee4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005ee6:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8005eea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005eec:	3348      	adds	r3, #72	; 0x48
 8005eee:	a920      	add	r1, sp, #128	; 0x80
 8005ef0:	9311      	str	r3, [sp, #68]	; 0x44
 8005ef2:	9210      	str	r2, [sp, #64]	; 0x40
 8005ef4:	900f      	str	r0, [sp, #60]	; 0x3c
 8005ef6:	940e      	str	r4, [sp, #56]	; 0x38
 8005ef8:	950d      	str	r5, [sp, #52]	; 0x34
 8005efa:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8005efc:	940c      	str	r4, [sp, #48]	; 0x30
 8005efe:	981c      	ldr	r0, [sp, #112]	; 0x70
 8005f00:	900b      	str	r0, [sp, #44]	; 0x2c
 8005f02:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8005f04:	900a      	str	r0, [sp, #40]	; 0x28
 8005f06:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005f08:	9209      	str	r2, [sp, #36]	; 0x24
 8005f0a:	f8dd e064 	ldr.w	lr, [sp, #100]	; 0x64
 8005f0e:	f8cd e020 	str.w	lr, [sp, #32]
 8005f12:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8005f16:	f8cd c01c 	str.w	ip, [sp, #28]
 8005f1a:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8005f1c:	9506      	str	r5, [sp, #24]
 8005f1e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8005f20:	9405      	str	r4, [sp, #20]
 8005f22:	9815      	ldr	r0, [sp, #84]	; 0x54
 8005f24:	9004      	str	r0, [sp, #16]
 8005f26:	9814      	ldr	r0, [sp, #80]	; 0x50
 8005f28:	9003      	str	r0, [sp, #12]
 8005f2a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005f2c:	9202      	str	r2, [sp, #8]
 8005f2e:	9701      	str	r7, [sp, #4]
 8005f30:	9600      	str	r6, [sp, #0]
 8005f32:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f34:	460a      	mov	r2, r1
 8005f36:	490e      	ldr	r1, [pc, #56]	; (8005f70 <minmea_parse_gsv+0x110>)
 8005f38:	981e      	ldr	r0, [sp, #120]	; 0x78
 8005f3a:	f7ff fa11 	bl	8005360 <minmea_scan>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	f083 0301 	eor.w	r3, r3, #1
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d001      	beq.n	8005f4e <minmea_parse_gsv+0xee>
            &frame->sats[3].nr,
            &frame->sats[3].elevation,
            &frame->sats[3].azimuth,
            &frame->sats[3].snr
            )) {
        return false;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	e00d      	b.n	8005f6a <minmea_parse_gsv+0x10a>
    }
    if (strncmp(sentence +3, "GSV", 3))
 8005f4e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005f50:	3303      	adds	r3, #3
 8005f52:	2203      	movs	r2, #3
 8005f54:	4907      	ldr	r1, [pc, #28]	; (8005f74 <minmea_parse_gsv+0x114>)
 8005f56:	4618      	mov	r0, r3
 8005f58:	f000 fd1c 	bl	8006994 <strncmp>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d001      	beq.n	8005f66 <minmea_parse_gsv+0x106>
        return false;
 8005f62:	2300      	movs	r3, #0
 8005f64:	e001      	b.n	8005f6a <minmea_parse_gsv+0x10a>

    return true;
 8005f66:	2301      	movs	r3, #1
 8005f68:	bf00      	nop
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	b023      	add	sp, #140	; 0x8c
 8005f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f70:	08006de0 	.word	0x08006de0
 8005f74:	08006d9c 	.word	0x08006d9c
	...

08005f80 <minmea_parse_vtg>:

bool minmea_parse_vtg(struct minmea_sentence_vtg *frame, const char *sentence)
{
 8005f80:	b530      	push	{r4, r5, lr}
 8005f82:	b08f      	sub	sp, #60	; 0x3c
 8005f84:	9009      	str	r0, [sp, #36]	; 0x24
 8005f86:	9108      	str	r1, [sp, #32]
    // $GPVTG,096.5,T,083.5,M,0.0,N,0.0,K,D*22
    // $GPVTG,188.36,T,,M,0.820,N,1.519,K,A*3F
    char type[6];
    char c_true, c_magnetic, c_knots, c_kph, c_faa_mode;

    if (!minmea_scan(sentence, "tfcfcfcfc;c",
 8005f88:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f8c:	3308      	adds	r3, #8
 8005f8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f90:	3210      	adds	r2, #16
 8005f92:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f94:	3118      	adds	r1, #24
 8005f96:	ac0c      	add	r4, sp, #48	; 0x30
 8005f98:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
 8005f9c:	9007      	str	r0, [sp, #28]
 8005f9e:	a80b      	add	r0, sp, #44	; 0x2c
 8005fa0:	9006      	str	r0, [sp, #24]
 8005fa2:	9105      	str	r1, [sp, #20]
 8005fa4:	f10d 012d 	add.w	r1, sp, #45	; 0x2d
 8005fa8:	9104      	str	r1, [sp, #16]
 8005faa:	9203      	str	r2, [sp, #12]
 8005fac:	f10d 022e 	add.w	r2, sp, #46	; 0x2e
 8005fb0:	9202      	str	r2, [sp, #8]
 8005fb2:	9301      	str	r3, [sp, #4]
 8005fb4:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8005fb8:	9300      	str	r3, [sp, #0]
 8005fba:	462b      	mov	r3, r5
 8005fbc:	4622      	mov	r2, r4
 8005fbe:	491a      	ldr	r1, [pc, #104]	; (8006028 <minmea_parse_vtg+0xa8>)
 8005fc0:	9808      	ldr	r0, [sp, #32]
 8005fc2:	f7ff f9cd 	bl	8005360 <minmea_scan>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	f083 0301 	eor.w	r3, r3, #1
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d001      	beq.n	8005fd6 <minmea_parse_vtg+0x56>
            &frame->speed_knots,
            &c_knots,
            &frame->speed_kph,
            &c_kph,
            &c_faa_mode))
        return false;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	e024      	b.n	8006020 <minmea_parse_vtg+0xa0>
    if (strncmp(sentence +3, "VTG",3))
 8005fd6:	9b08      	ldr	r3, [sp, #32]
 8005fd8:	3303      	adds	r3, #3
 8005fda:	2203      	movs	r2, #3
 8005fdc:	4913      	ldr	r1, [pc, #76]	; (800602c <minmea_parse_vtg+0xac>)
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f000 fcd8 	bl	8006994 <strncmp>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d001      	beq.n	8005fee <minmea_parse_vtg+0x6e>
        return false;
 8005fea:	2300      	movs	r3, #0
 8005fec:	e018      	b.n	8006020 <minmea_parse_vtg+0xa0>
    // check chars
    if (c_true != 'T' ||
 8005fee:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8005ff2:	2b54      	cmp	r3, #84	; 0x54
 8005ff4:	d10b      	bne.n	800600e <minmea_parse_vtg+0x8e>
        c_magnetic != 'M' ||
 8005ff6:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
    if (c_true != 'T' ||
 8005ffa:	2b4d      	cmp	r3, #77	; 0x4d
 8005ffc:	d107      	bne.n	800600e <minmea_parse_vtg+0x8e>
        c_knots != 'N' ||
 8005ffe:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
        c_magnetic != 'M' ||
 8006002:	2b4e      	cmp	r3, #78	; 0x4e
 8006004:	d103      	bne.n	800600e <minmea_parse_vtg+0x8e>
        c_kph != 'K')
 8006006:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
        c_knots != 'N' ||
 800600a:	2b4b      	cmp	r3, #75	; 0x4b
 800600c:	d001      	beq.n	8006012 <minmea_parse_vtg+0x92>
        return false;
 800600e:	2300      	movs	r3, #0
 8006010:	e006      	b.n	8006020 <minmea_parse_vtg+0xa0>
    frame->faa_mode = (enum minmea_faa_mode)c_faa_mode;
 8006012:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
 8006016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006018:	f883 2020 	strb.w	r2, [r3, #32]

    return true;
 800601c:	2301      	movs	r3, #1
 800601e:	bf00      	nop
}
 8006020:	4618      	mov	r0, r3
 8006022:	b00f      	add	sp, #60	; 0x3c
 8006024:	bd30      	pop	{r4, r5, pc}
 8006026:	bf00      	nop
 8006028:	08006df8 	.word	0x08006df8
 800602c:	08006da0 	.word	0x08006da0

08006030 <minmea_parse_zda>:

bool minmea_parse_zda(struct minmea_sentence_zda *frame, const char *sentence)
{
 8006030:	b570      	push	{r4, r5, r6, lr}
 8006032:	b08a      	sub	sp, #40	; 0x28
 8006034:	9007      	str	r0, [sp, #28]
 8006036:	9106      	str	r1, [sp, #24]
  // $GPZDA,201530.00,04,07,2002,00,00*60
  char type[6];

  if(!minmea_scan(sentence, "tTiiiii",
 8006038:	9e07      	ldr	r6, [sp, #28]
 800603a:	9b07      	ldr	r3, [sp, #28]
 800603c:	3310      	adds	r3, #16
 800603e:	9a07      	ldr	r2, [sp, #28]
 8006040:	3214      	adds	r2, #20
 8006042:	9907      	ldr	r1, [sp, #28]
 8006044:	3118      	adds	r1, #24
 8006046:	9807      	ldr	r0, [sp, #28]
 8006048:	301c      	adds	r0, #28
 800604a:	9c07      	ldr	r4, [sp, #28]
 800604c:	3420      	adds	r4, #32
 800604e:	ad08      	add	r5, sp, #32
 8006050:	9404      	str	r4, [sp, #16]
 8006052:	9003      	str	r0, [sp, #12]
 8006054:	9102      	str	r1, [sp, #8]
 8006056:	9201      	str	r2, [sp, #4]
 8006058:	9300      	str	r3, [sp, #0]
 800605a:	4633      	mov	r3, r6
 800605c:	462a      	mov	r2, r5
 800605e:	4917      	ldr	r1, [pc, #92]	; (80060bc <minmea_parse_zda+0x8c>)
 8006060:	9806      	ldr	r0, [sp, #24]
 8006062:	f7ff f97d 	bl	8005360 <minmea_scan>
 8006066:	4603      	mov	r3, r0
 8006068:	f083 0301 	eor.w	r3, r3, #1
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	d001      	beq.n	8006076 <minmea_parse_zda+0x46>
          &frame->date.day,
          &frame->date.month,
          &frame->date.year,
          &frame->hour_offset,
          &frame->minute_offset))
      return false;
 8006072:	2300      	movs	r3, #0
 8006074:	e01e      	b.n	80060b4 <minmea_parse_zda+0x84>
  if (strncmp(sentence +3, "ZDA", 3))
 8006076:	9b06      	ldr	r3, [sp, #24]
 8006078:	3303      	adds	r3, #3
 800607a:	2203      	movs	r2, #3
 800607c:	4910      	ldr	r1, [pc, #64]	; (80060c0 <minmea_parse_zda+0x90>)
 800607e:	4618      	mov	r0, r3
 8006080:	f000 fc88 	bl	8006994 <strncmp>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d001      	beq.n	800608e <minmea_parse_zda+0x5e>
      return false;
 800608a:	2300      	movs	r3, #0
 800608c:	e012      	b.n	80060b4 <minmea_parse_zda+0x84>

  // check offsets
  if (abs(frame->hour_offset) > 13 ||
 800608e:	9b07      	ldr	r3, [sp, #28]
 8006090:	69db      	ldr	r3, [r3, #28]
 8006092:	2b00      	cmp	r3, #0
 8006094:	bfb8      	it	lt
 8006096:	425b      	neglt	r3, r3
 8006098:	2b0d      	cmp	r3, #13
 800609a:	dc07      	bgt.n	80060ac <minmea_parse_zda+0x7c>
      frame->minute_offset > 59 ||
 800609c:	9b07      	ldr	r3, [sp, #28]
 800609e:	6a1b      	ldr	r3, [r3, #32]
  if (abs(frame->hour_offset) > 13 ||
 80060a0:	2b3b      	cmp	r3, #59	; 0x3b
 80060a2:	dc03      	bgt.n	80060ac <minmea_parse_zda+0x7c>
      frame->minute_offset < 0)
 80060a4:	9b07      	ldr	r3, [sp, #28]
 80060a6:	6a1b      	ldr	r3, [r3, #32]
      frame->minute_offset > 59 ||
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	da01      	bge.n	80060b0 <minmea_parse_zda+0x80>
      return false;
 80060ac:	2300      	movs	r3, #0
 80060ae:	e001      	b.n	80060b4 <minmea_parse_zda+0x84>

  return true;
 80060b0:	2301      	movs	r3, #1
 80060b2:	bf00      	nop
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	b00a      	add	sp, #40	; 0x28
 80060b8:	bd70      	pop	{r4, r5, r6, pc}
 80060ba:	bf00      	nop
 80060bc:	08006e04 	.word	0x08006e04
 80060c0:	08006da4 	.word	0x08006da4
	...

080060d0 <chRegSetThreadName.lto_priv.1>:
 *
 * @param[in] name      thread name as a zero terminated string
 *
 * @api
 */
static inline void chRegSetThreadName(const char *name) {
 80060d0:	b082      	sub	sp, #8
 80060d2:	9001      	str	r0, [sp, #4]

#if CH_CFG_USE_REGISTRY == TRUE
  __sch_get_currthread()->name = name;
 80060d4:	4b03      	ldr	r3, [pc, #12]	; (80060e4 <chRegSetThreadName.lto_priv.1+0x14>)
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	9a01      	ldr	r2, [sp, #4]
 80060da:	61da      	str	r2, [r3, #28]
#else
  (void)name;
#endif
}
 80060dc:	bf00      	nop
 80060de:	b002      	add	sp, #8
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	20000db8 	.word	0x20000db8
	...

080060f0 <minmea_rescale>:

/**
 * Rescale a fixed-point value to a different scale. Rounds towards zero.
 */
static inline int_least32_t minmea_rescale(struct minmea_float *f, int_least32_t new_scale)
{
 80060f0:	b082      	sub	sp, #8
 80060f2:	9001      	str	r0, [sp, #4]
 80060f4:	9100      	str	r1, [sp, #0]
    if (f->scale == 0)
 80060f6:	9b01      	ldr	r3, [sp, #4]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d101      	bne.n	8006102 <minmea_rescale+0x12>
        return 0;
 80060fe:	2300      	movs	r3, #0
 8006100:	e037      	b.n	8006172 <minmea_rescale+0x82>
    if (f->scale == new_scale)
 8006102:	9b01      	ldr	r3, [sp, #4]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	9a00      	ldr	r2, [sp, #0]
 8006108:	429a      	cmp	r2, r3
 800610a:	d102      	bne.n	8006112 <minmea_rescale+0x22>
        return f->value;
 800610c:	9b01      	ldr	r3, [sp, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	e02f      	b.n	8006172 <minmea_rescale+0x82>
    if (f->scale > new_scale)
 8006112:	9b01      	ldr	r3, [sp, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	9a00      	ldr	r2, [sp, #0]
 8006118:	429a      	cmp	r2, r3
 800611a:	da21      	bge.n	8006160 <minmea_rescale+0x70>
        return (f->value + ((f->value > 0) - (f->value < 0)) * f->scale/new_scale/2) / (f->scale/new_scale);
 800611c:	9b01      	ldr	r3, [sp, #4]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	9b01      	ldr	r3, [sp, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	bfcc      	ite	gt
 8006128:	2301      	movgt	r3, #1
 800612a:	2300      	movle	r3, #0
 800612c:	b2db      	uxtb	r3, r3
 800612e:	4619      	mov	r1, r3
 8006130:	9b01      	ldr	r3, [sp, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	0fdb      	lsrs	r3, r3, #31
 8006136:	b2db      	uxtb	r3, r3
 8006138:	1acb      	subs	r3, r1, r3
 800613a:	9901      	ldr	r1, [sp, #4]
 800613c:	6849      	ldr	r1, [r1, #4]
 800613e:	fb03 f101 	mul.w	r1, r3, r1
 8006142:	9b00      	ldr	r3, [sp, #0]
 8006144:	fb91 f3f3 	sdiv	r3, r1, r3
 8006148:	0fd9      	lsrs	r1, r3, #31
 800614a:	440b      	add	r3, r1
 800614c:	105b      	asrs	r3, r3, #1
 800614e:	441a      	add	r2, r3
 8006150:	9b01      	ldr	r3, [sp, #4]
 8006152:	6859      	ldr	r1, [r3, #4]
 8006154:	9b00      	ldr	r3, [sp, #0]
 8006156:	fb91 f3f3 	sdiv	r3, r1, r3
 800615a:	fb92 f3f3 	sdiv	r3, r2, r3
 800615e:	e008      	b.n	8006172 <minmea_rescale+0x82>
    else
        return f->value * (new_scale/f->scale);
 8006160:	9b01      	ldr	r3, [sp, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	9a01      	ldr	r2, [sp, #4]
 8006166:	6852      	ldr	r2, [r2, #4]
 8006168:	9900      	ldr	r1, [sp, #0]
 800616a:	fb91 f2f2 	sdiv	r2, r1, r2
 800616e:	fb02 f303 	mul.w	r3, r2, r3
}
 8006172:	4618      	mov	r0, r3
 8006174:	b002      	add	sp, #8
 8006176:	4770      	bx	lr
	...

08006180 <minmea_tofloat>:
/**
 * Convert a fixed-point value to a floating-point value.
 * Returns NaN for "unknown" values.
 */
static inline float minmea_tofloat(struct minmea_float *f)
{
 8006180:	b510      	push	{r4, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	9001      	str	r0, [sp, #4]
    if (f->scale == 0)
 8006186:	9b01      	ldr	r3, [sp, #4]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d101      	bne.n	8006192 <minmea_tofloat+0x12>
        return NAN;
 800618e:	4b0b      	ldr	r3, [pc, #44]	; (80061bc <minmea_tofloat+0x3c>)
 8006190:	e010      	b.n	80061b4 <minmea_tofloat+0x34>
    return (float) f->value / (float) f->scale;
 8006192:	9b01      	ldr	r3, [sp, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4618      	mov	r0, r3
 8006198:	f7fa fff0 	bl	800117c <__aeabi_i2f>
 800619c:	4604      	mov	r4, r0
 800619e:	9b01      	ldr	r3, [sp, #4]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7fa ffea 	bl	800117c <__aeabi_i2f>
 80061a8:	4603      	mov	r3, r0
 80061aa:	4619      	mov	r1, r3
 80061ac:	4620      	mov	r0, r4
 80061ae:	f7fb f8ed 	bl	800138c <__aeabi_fdiv>
 80061b2:	4603      	mov	r3, r0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	b002      	add	sp, #8
 80061b8:	bd10      	pop	{r4, pc}
 80061ba:	bf00      	nop
 80061bc:	7fc00000 	.word	0x7fc00000

080061c0 <minmea_tocoord>:
/**
 * Convert a raw coordinate to a floating point DD.DDD... value.
 * Returns NaN for "unknown" values.
 */
static inline float minmea_tocoord(struct minmea_float *f)
{
 80061c0:	b530      	push	{r4, r5, lr}
 80061c2:	b085      	sub	sp, #20
 80061c4:	9001      	str	r0, [sp, #4]
    if (f->scale == 0)
 80061c6:	9b01      	ldr	r3, [sp, #4]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d101      	bne.n	80061d2 <minmea_tocoord+0x12>
        return NAN;
 80061ce:	4b1c      	ldr	r3, [pc, #112]	; (8006240 <minmea_tocoord+0x80>)
 80061d0:	e032      	b.n	8006238 <minmea_tocoord+0x78>
    int_least32_t degrees = f->value / (f->scale * 100);
 80061d2:	9b01      	ldr	r3, [sp, #4]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	9b01      	ldr	r3, [sp, #4]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	2164      	movs	r1, #100	; 0x64
 80061dc:	fb01 f303 	mul.w	r3, r1, r3
 80061e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80061e4:	9303      	str	r3, [sp, #12]
    int_least32_t minutes = f->value % (f->scale * 100);
 80061e6:	9b01      	ldr	r3, [sp, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	9a01      	ldr	r2, [sp, #4]
 80061ec:	6852      	ldr	r2, [r2, #4]
 80061ee:	2164      	movs	r1, #100	; 0x64
 80061f0:	fb01 f202 	mul.w	r2, r1, r2
 80061f4:	fb93 f1f2 	sdiv	r1, r3, r2
 80061f8:	fb01 f202 	mul.w	r2, r1, r2
 80061fc:	1a9b      	subs	r3, r3, r2
 80061fe:	9302      	str	r3, [sp, #8]
    return (float) degrees + (float) minutes / (60 * f->scale);
 8006200:	9803      	ldr	r0, [sp, #12]
 8006202:	f7fa ffbb 	bl	800117c <__aeabi_i2f>
 8006206:	4604      	mov	r4, r0
 8006208:	9802      	ldr	r0, [sp, #8]
 800620a:	f7fa ffb7 	bl	800117c <__aeabi_i2f>
 800620e:	4605      	mov	r5, r0
 8006210:	9b01      	ldr	r3, [sp, #4]
 8006212:	685a      	ldr	r2, [r3, #4]
 8006214:	4613      	mov	r3, r2
 8006216:	011b      	lsls	r3, r3, #4
 8006218:	1a9b      	subs	r3, r3, r2
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	4618      	mov	r0, r3
 800621e:	f7fa ffad 	bl	800117c <__aeabi_i2f>
 8006222:	4603      	mov	r3, r0
 8006224:	4619      	mov	r1, r3
 8006226:	4628      	mov	r0, r5
 8006228:	f7fb f8b0 	bl	800138c <__aeabi_fdiv>
 800622c:	4603      	mov	r3, r0
 800622e:	4619      	mov	r1, r3
 8006230:	4620      	mov	r0, r4
 8006232:	f7fa feef 	bl	8001014 <__addsf3>
 8006236:	4603      	mov	r3, r0
}
 8006238:	4618      	mov	r0, r3
 800623a:	b005      	add	sp, #20
 800623c:	bd30      	pop	{r4, r5, pc}
 800623e:	bf00      	nop
 8006240:	7fc00000 	.word	0x7fc00000
	...

08006250 <thdGps>:

UARTConfig uart1_cfg = {NULL, NULL, NULL, rxchar, NULL, NULL, 9600, 0, USART_CR2_STOP1_BITS, 0};

BaseSequentialStream *chp2 = (BaseSequentialStream*) &SD2;

THD_FUNCTION(thdGps, arg) {
 8006250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006252:	b0a1      	sub	sp, #132	; 0x84
 8006254:	9009      	str	r0, [sp, #36]	; 0x24

  (void)arg;
  chRegSetThreadName("GPS Thread");
 8006256:	48b3      	ldr	r0, [pc, #716]	; (8006524 <thdGps+0x2d4>)
 8006258:	f7ff ff3a 	bl	80060d0 <chRegSetThreadName.lto_priv.1>
  palSetPadMode(GPIOA, 10, PAL_MODE_ALTERNATE(7));
 800625c:	f240 3282 	movw	r2, #898	; 0x382
 8006260:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006264:	48b0      	ldr	r0, [pc, #704]	; (8006528 <thdGps+0x2d8>)
 8006266:	f7fc fc3b 	bl	8002ae0 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOA, 8, PAL_MODE_OUTPUT_PUSHPULL);
 800626a:	2201      	movs	r2, #1
 800626c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006270:	48ad      	ldr	r0, [pc, #692]	; (8006528 <thdGps+0x2d8>)
 8006272:	f7fc fc35 	bl	8002ae0 <_pal_lld_setgroupmode>

  sdStart(&SD2, NULL);
 8006276:	2100      	movs	r1, #0
 8006278:	48ac      	ldr	r0, [pc, #688]	; (800652c <thdGps+0x2dc>)
 800627a:	f7fb fe79 	bl	8001f70 <sdStart>

  // RESET SEQUENCE
  palClearPad(GPIOA, 8);
 800627e:	4baa      	ldr	r3, [pc, #680]	; (8006528 <thdGps+0x2d8>)
 8006280:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006284:	835a      	strh	r2, [r3, #26]
  chThdSleepMilliseconds(100);
 8006286:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800628a:	f7fe f911 	bl	80044b0 <chThdSleep>
  palSetPad(GPIOA, 8);
 800628e:	4ba6      	ldr	r3, [pc, #664]	; (8006528 <thdGps+0x2d8>)
 8006290:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006294:	831a      	strh	r2, [r3, #24]
  chThdSleepMilliseconds(1000);
 8006296:	f242 7010 	movw	r0, #10000	; 0x2710
 800629a:	f7fe f909 	bl	80044b0 <chThdSleep>
  palClearPad(GPIOA, 8);
 800629e:	4ba2      	ldr	r3, [pc, #648]	; (8006528 <thdGps+0x2d8>)
 80062a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80062a4:	835a      	strh	r2, [r3, #26]
  chThdSleepMilliseconds(2000);
 80062a6:	f644 6020 	movw	r0, #20000	; 0x4e20
 80062aa:	f7fe f901 	bl	80044b0 <chThdSleep>
  palSetPad(GPIOA, 8);
 80062ae:	4b9e      	ldr	r3, [pc, #632]	; (8006528 <thdGps+0x2d8>)
 80062b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80062b4:	831a      	strh	r2, [r3, #24]
    //chThdSuspendS(&trp);

   // trp = (thread_reference_t) NULL;
   // uartStop(&UARTD1);

    chprintf(chp2, "RECEIVED: \"%s\"\n\r\r", line);
 80062b6:	4b9e      	ldr	r3, [pc, #632]	; (8006530 <thdGps+0x2e0>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a9e      	ldr	r2, [pc, #632]	; (8006534 <thdGps+0x2e4>)
 80062bc:	499e      	ldr	r1, [pc, #632]	; (8006538 <thdGps+0x2e8>)
 80062be:	4618      	mov	r0, r3
 80062c0:	f7fe fee6 	bl	8005090 <chprintf>

    switch (minmea_sentence_id(line, true)) {
 80062c4:	2101      	movs	r1, #1
 80062c6:	489b      	ldr	r0, [pc, #620]	; (8006534 <thdGps+0x2e4>)
 80062c8:	f7ff fbd2 	bl	8005a70 <minmea_sentence_id>
 80062cc:	4603      	mov	r3, r0
 80062ce:	3301      	adds	r3, #1
 80062d0:	2b09      	cmp	r3, #9
 80062d2:	f200 8248 	bhi.w	8006766 <thdGps+0x516>
 80062d6:	a201      	add	r2, pc, #4	; (adr r2, 80062dc <thdGps+0x8c>)
 80062d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062dc:	08006759 	.word	0x08006759
 80062e0:	08006767 	.word	0x08006767
 80062e4:	08006305 	.word	0x08006305
 80062e8:	08006419 	.word	0x08006419
 80062ec:	08006767 	.word	0x08006767
 80062f0:	080066ed 	.word	0x080066ed
 80062f4:	08006447 	.word	0x08006447
 80062f8:	08006565 	.word	0x08006565
 80062fc:	080065f9 	.word	0x080065f9
 8006300:	0800669f 	.word	0x0800669f
      case MINMEA_SENTENCE_RMC: {
        struct minmea_sentence_rmc frame;
        if (minmea_parse_rmc(&frame, line)) {
 8006304:	ab0b      	add	r3, sp, #44	; 0x2c
 8006306:	498b      	ldr	r1, [pc, #556]	; (8006534 <thdGps+0x2e4>)
 8006308:	4618      	mov	r0, r3
 800630a:	f7ff fc49 	bl	8005ba0 <minmea_parse_rmc>
 800630e:	4603      	mov	r3, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d07a      	beq.n	800640a <thdGps+0x1ba>
          chprintf(
 8006314:	4b86      	ldr	r3, [pc, #536]	; (8006530 <thdGps+0x2e0>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	9308      	str	r3, [sp, #32]
              chp2,
              INDENT_SPACES "$xxRMC: raw coordinates and speed: (%d/%d,%d/%d) %d/%d\n\r",
              conversion(frame.latitude.value), frame.latitude.scale, conversion(frame.longitude.value),
 800631a:	9b10      	ldr	r3, [sp, #64]	; 0x40
          chprintf(
 800631c:	4618      	mov	r0, r3
 800631e:	f7fa fbcf 	bl	8000ac0 <__aeabi_i2d>
 8006322:	4602      	mov	r2, r0
 8006324:	460b      	mov	r3, r1
 8006326:	4610      	mov	r0, r2
 8006328:	4619      	mov	r1, r3
 800632a:	f7fe fec9 	bl	80050c0 <conversion>
 800632e:	4604      	mov	r4, r0
 8006330:	460d      	mov	r5, r1
 8006332:	9e11      	ldr	r6, [sp, #68]	; 0x44
              conversion(frame.latitude.value), frame.latitude.scale, conversion(frame.longitude.value),
 8006334:	9b12      	ldr	r3, [sp, #72]	; 0x48
          chprintf(
 8006336:	4618      	mov	r0, r3
 8006338:	f7fa fbc2 	bl	8000ac0 <__aeabi_i2d>
 800633c:	4602      	mov	r2, r0
 800633e:	460b      	mov	r3, r1
 8006340:	4610      	mov	r0, r2
 8006342:	4619      	mov	r1, r3
 8006344:	f7fe febc 	bl	80050c0 <conversion>
 8006348:	4602      	mov	r2, r0
 800634a:	460b      	mov	r3, r1
 800634c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800634e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8006350:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8006352:	9706      	str	r7, [sp, #24]
 8006354:	9005      	str	r0, [sp, #20]
 8006356:	9104      	str	r1, [sp, #16]
 8006358:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800635c:	9600      	str	r6, [sp, #0]
 800635e:	4622      	mov	r2, r4
 8006360:	462b      	mov	r3, r5
 8006362:	4976      	ldr	r1, [pc, #472]	; (800653c <thdGps+0x2ec>)
 8006364:	9808      	ldr	r0, [sp, #32]
 8006366:	f7fe fe93 	bl	8005090 <chprintf>
              frame.longitude.scale, frame.speed.value, frame.speed.scale);
          chprintf(
 800636a:	4b71      	ldr	r3, [pc, #452]	; (8006530 <thdGps+0x2e0>)
 800636c:	681c      	ldr	r4, [r3, #0]
 800636e:	ab0b      	add	r3, sp, #44	; 0x2c
 8006370:	3314      	adds	r3, #20
 8006372:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006376:	4618      	mov	r0, r3
 8006378:	f7ff feba 	bl	80060f0 <minmea_rescale>
 800637c:	4605      	mov	r5, r0
 800637e:	ab0b      	add	r3, sp, #44	; 0x2c
 8006380:	331c      	adds	r3, #28
 8006382:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006386:	4618      	mov	r0, r3
 8006388:	f7ff feb2 	bl	80060f0 <minmea_rescale>
 800638c:	4606      	mov	r6, r0
 800638e:	ab0b      	add	r3, sp, #44	; 0x2c
 8006390:	3324      	adds	r3, #36	; 0x24
 8006392:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006396:	4618      	mov	r0, r3
 8006398:	f7ff feaa 	bl	80060f0 <minmea_rescale>
 800639c:	4603      	mov	r3, r0
 800639e:	9300      	str	r3, [sp, #0]
 80063a0:	4633      	mov	r3, r6
 80063a2:	462a      	mov	r2, r5
 80063a4:	4966      	ldr	r1, [pc, #408]	; (8006540 <thdGps+0x2f0>)
 80063a6:	4620      	mov	r0, r4
 80063a8:	f7fe fe72 	bl	8005090 <chprintf>
              chp2,
              INDENT_SPACES "$xxRMC fixed-point coordinates and speed scaled to three decimal places: (%d,%d) %d\n\r",
              minmea_rescale(&frame.latitude, 1000),
              minmea_rescale(&frame.longitude, 1000),
              minmea_rescale(&frame.speed, 1000));
          chprintf(
 80063ac:	4b60      	ldr	r3, [pc, #384]	; (8006530 <thdGps+0x2e0>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	9308      	str	r3, [sp, #32]
              chp2,
              INDENT_SPACES "$xxRMC floating point degree coordinates and speed: (%f,%f) %f\n\r",
              minmea_tocoord(&frame.latitude), minmea_tocoord(&frame.longitude),
 80063b2:	ab0b      	add	r3, sp, #44	; 0x2c
 80063b4:	3314      	adds	r3, #20
 80063b6:	4618      	mov	r0, r3
 80063b8:	f7ff ff02 	bl	80061c0 <minmea_tocoord>
 80063bc:	4603      	mov	r3, r0
          chprintf(
 80063be:	4618      	mov	r0, r3
 80063c0:	f7fa fb90 	bl	8000ae4 <__aeabi_f2d>
 80063c4:	4606      	mov	r6, r0
 80063c6:	460f      	mov	r7, r1
              minmea_tocoord(&frame.latitude), minmea_tocoord(&frame.longitude),
 80063c8:	ab0b      	add	r3, sp, #44	; 0x2c
 80063ca:	331c      	adds	r3, #28
 80063cc:	4618      	mov	r0, r3
 80063ce:	f7ff fef7 	bl	80061c0 <minmea_tocoord>
 80063d2:	4603      	mov	r3, r0
          chprintf(
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7fa fb85 	bl	8000ae4 <__aeabi_f2d>
 80063da:	4604      	mov	r4, r0
 80063dc:	460d      	mov	r5, r1
              minmea_tofloat(&frame.speed));
 80063de:	ab0b      	add	r3, sp, #44	; 0x2c
 80063e0:	3324      	adds	r3, #36	; 0x24
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7ff fecc 	bl	8006180 <minmea_tofloat>
 80063e8:	4603      	mov	r3, r0
          chprintf(
 80063ea:	4618      	mov	r0, r3
 80063ec:	f7fa fb7a 	bl	8000ae4 <__aeabi_f2d>
 80063f0:	4602      	mov	r2, r0
 80063f2:	460b      	mov	r3, r1
 80063f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80063f8:	e9cd 4500 	strd	r4, r5, [sp]
 80063fc:	4632      	mov	r2, r6
 80063fe:	463b      	mov	r3, r7
 8006400:	4950      	ldr	r1, [pc, #320]	; (8006544 <thdGps+0x2f4>)
 8006402:	9808      	ldr	r0, [sp, #32]
 8006404:	f7fe fe44 	bl	8005090 <chprintf>
        }
        else {
          chprintf(chp2, INDENT_SPACES "$xxRMC sentence is not parsed\n\r");
        }
      }
        break;
 8006408:	e1ad      	b.n	8006766 <thdGps+0x516>
          chprintf(chp2, INDENT_SPACES "$xxRMC sentence is not parsed\n\r");
 800640a:	4b49      	ldr	r3, [pc, #292]	; (8006530 <thdGps+0x2e0>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	494e      	ldr	r1, [pc, #312]	; (8006548 <thdGps+0x2f8>)
 8006410:	4618      	mov	r0, r3
 8006412:	f7fe fe3d 	bl	8005090 <chprintf>
        break;
 8006416:	e1a6      	b.n	8006766 <thdGps+0x516>

      case MINMEA_SENTENCE_GGA: {
        struct minmea_sentence_gga frame;
        if (minmea_parse_gga(&frame, line)) {
 8006418:	ab0b      	add	r3, sp, #44	; 0x2c
 800641a:	4946      	ldr	r1, [pc, #280]	; (8006534 <thdGps+0x2e4>)
 800641c:	4618      	mov	r0, r3
 800641e:	f7ff fc27 	bl	8005c70 <minmea_parse_gga>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d007      	beq.n	8006438 <thdGps+0x1e8>
          chprintf(chp2, INDENT_SPACES "$xxGGA: fix quality: %d\n\r",
 8006428:	4b41      	ldr	r3, [pc, #260]	; (8006530 <thdGps+0x2e0>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800642e:	4947      	ldr	r1, [pc, #284]	; (800654c <thdGps+0x2fc>)
 8006430:	4618      	mov	r0, r3
 8006432:	f7fe fe2d 	bl	8005090 <chprintf>
        }
        else {
          chprintf(chp2, INDENT_SPACES "$xxGGA sentence is not parsed\n\r");
        }
      }
        break;
 8006436:	e196      	b.n	8006766 <thdGps+0x516>
          chprintf(chp2, INDENT_SPACES "$xxGGA sentence is not parsed\n\r");
 8006438:	4b3d      	ldr	r3, [pc, #244]	; (8006530 <thdGps+0x2e0>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4944      	ldr	r1, [pc, #272]	; (8006550 <thdGps+0x300>)
 800643e:	4618      	mov	r0, r3
 8006440:	f7fe fe26 	bl	8005090 <chprintf>
        break;
 8006444:	e18f      	b.n	8006766 <thdGps+0x516>

      case MINMEA_SENTENCE_GST: {
        struct minmea_sentence_gst frame;
        if (minmea_parse_gst(&frame, line)) {
 8006446:	ab0b      	add	r3, sp, #44	; 0x2c
 8006448:	493a      	ldr	r1, [pc, #232]	; (8006534 <thdGps+0x2e4>)
 800644a:	4618      	mov	r0, r3
 800644c:	f7ff fcc8 	bl	8005de0 <minmea_parse_gst>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d05e      	beq.n	8006514 <thdGps+0x2c4>
          chprintf(
 8006456:	4b36      	ldr	r3, [pc, #216]	; (8006530 <thdGps+0x2e0>)
 8006458:	681c      	ldr	r4, [r3, #0]
 800645a:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800645c:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800645e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006460:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006462:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8006464:	981c      	ldr	r0, [sp, #112]	; 0x70
 8006466:	9003      	str	r0, [sp, #12]
 8006468:	9102      	str	r1, [sp, #8]
 800646a:	9201      	str	r2, [sp, #4]
 800646c:	9300      	str	r3, [sp, #0]
 800646e:	4633      	mov	r3, r6
 8006470:	462a      	mov	r2, r5
 8006472:	4938      	ldr	r1, [pc, #224]	; (8006554 <thdGps+0x304>)
 8006474:	4620      	mov	r0, r4
 8006476:	f7fe fe0b 	bl	8005090 <chprintf>
              frame.latitude_error_deviation.scale,
              frame.longitude_error_deviation.value,
              frame.longitude_error_deviation.scale,
              frame.altitude_error_deviation.value,
              frame.altitude_error_deviation.scale);
          chprintf(
 800647a:	4b2d      	ldr	r3, [pc, #180]	; (8006530 <thdGps+0x2e0>)
 800647c:	681c      	ldr	r4, [r3, #0]
 800647e:	ab0b      	add	r3, sp, #44	; 0x2c
 8006480:	3330      	adds	r3, #48	; 0x30
 8006482:	210a      	movs	r1, #10
 8006484:	4618      	mov	r0, r3
 8006486:	f7ff fe33 	bl	80060f0 <minmea_rescale>
 800648a:	4605      	mov	r5, r0
 800648c:	ab0b      	add	r3, sp, #44	; 0x2c
 800648e:	3338      	adds	r3, #56	; 0x38
 8006490:	210a      	movs	r1, #10
 8006492:	4618      	mov	r0, r3
 8006494:	f7ff fe2c 	bl	80060f0 <minmea_rescale>
 8006498:	4606      	mov	r6, r0
 800649a:	ab0b      	add	r3, sp, #44	; 0x2c
 800649c:	3340      	adds	r3, #64	; 0x40
 800649e:	210a      	movs	r1, #10
 80064a0:	4618      	mov	r0, r3
 80064a2:	f7ff fe25 	bl	80060f0 <minmea_rescale>
 80064a6:	4603      	mov	r3, r0
 80064a8:	9300      	str	r3, [sp, #0]
 80064aa:	4633      	mov	r3, r6
 80064ac:	462a      	mov	r2, r5
 80064ae:	492a      	ldr	r1, [pc, #168]	; (8006558 <thdGps+0x308>)
 80064b0:	4620      	mov	r0, r4
 80064b2:	f7fe fded 	bl	8005090 <chprintf>
              INDENT_SPACES "$xxGST fixed point latitude,longitude and altitude error deviation"
              " scaled to one decimal place: (%d,%d,%d)\n\r",
              minmea_rescale(&frame.latitude_error_deviation, 10),
              minmea_rescale(&frame.longitude_error_deviation, 10),
              minmea_rescale(&frame.altitude_error_deviation, 10));
          chprintf(
 80064b6:	4b1e      	ldr	r3, [pc, #120]	; (8006530 <thdGps+0x2e0>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	9308      	str	r3, [sp, #32]
              chp2,
              INDENT_SPACES "$xxGST floating point degree latitude, longitude and altitude error deviation: (%f,%f,%f)\n\r",
              minmea_tofloat(&frame.latitude_error_deviation),
 80064bc:	ab0b      	add	r3, sp, #44	; 0x2c
 80064be:	3330      	adds	r3, #48	; 0x30
 80064c0:	4618      	mov	r0, r3
 80064c2:	f7ff fe5d 	bl	8006180 <minmea_tofloat>
 80064c6:	4603      	mov	r3, r0
          chprintf(
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7fa fb0b 	bl	8000ae4 <__aeabi_f2d>
 80064ce:	4606      	mov	r6, r0
 80064d0:	460f      	mov	r7, r1
              minmea_tofloat(&frame.longitude_error_deviation),
 80064d2:	ab0b      	add	r3, sp, #44	; 0x2c
 80064d4:	3338      	adds	r3, #56	; 0x38
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7ff fe52 	bl	8006180 <minmea_tofloat>
 80064dc:	4603      	mov	r3, r0
          chprintf(
 80064de:	4618      	mov	r0, r3
 80064e0:	f7fa fb00 	bl	8000ae4 <__aeabi_f2d>
 80064e4:	4604      	mov	r4, r0
 80064e6:	460d      	mov	r5, r1
              minmea_tofloat(&frame.altitude_error_deviation));
 80064e8:	ab0b      	add	r3, sp, #44	; 0x2c
 80064ea:	3340      	adds	r3, #64	; 0x40
 80064ec:	4618      	mov	r0, r3
 80064ee:	f7ff fe47 	bl	8006180 <minmea_tofloat>
 80064f2:	4603      	mov	r3, r0
          chprintf(
 80064f4:	4618      	mov	r0, r3
 80064f6:	f7fa faf5 	bl	8000ae4 <__aeabi_f2d>
 80064fa:	4602      	mov	r2, r0
 80064fc:	460b      	mov	r3, r1
 80064fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006502:	e9cd 4500 	strd	r4, r5, [sp]
 8006506:	4632      	mov	r2, r6
 8006508:	463b      	mov	r3, r7
 800650a:	4914      	ldr	r1, [pc, #80]	; (800655c <thdGps+0x30c>)
 800650c:	9808      	ldr	r0, [sp, #32]
 800650e:	f7fe fdbf 	bl	8005090 <chprintf>
        }
        else {
          chprintf(chp2, INDENT_SPACES "$xxGST sentence is not parsed\n\r");
        }
      }
        break;
 8006512:	e128      	b.n	8006766 <thdGps+0x516>
          chprintf(chp2, INDENT_SPACES "$xxGST sentence is not parsed\n\r");
 8006514:	4b06      	ldr	r3, [pc, #24]	; (8006530 <thdGps+0x2e0>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4911      	ldr	r1, [pc, #68]	; (8006560 <thdGps+0x310>)
 800651a:	4618      	mov	r0, r3
 800651c:	f7fe fdb8 	bl	8005090 <chprintf>
        break;
 8006520:	e121      	b.n	8006766 <thdGps+0x516>
 8006522:	bf00      	nop
 8006524:	08006e0c 	.word	0x08006e0c
 8006528:	40020000 	.word	0x40020000
 800652c:	20000d04 	.word	0x20000d04
 8006530:	20000850 	.word	0x20000850
 8006534:	20000800 	.word	0x20000800
 8006538:	08006e18 	.word	0x08006e18
 800653c:	08006e2c 	.word	0x08006e2c
 8006540:	08006e68 	.word	0x08006e68
 8006544:	08006ec0 	.word	0x08006ec0
 8006548:	08006f04 	.word	0x08006f04
 800654c:	08006f28 	.word	0x08006f28
 8006550:	08006f44 	.word	0x08006f44
 8006554:	08006f68 	.word	0x08006f68
 8006558:	08006fc0 	.word	0x08006fc0
 800655c:	08007030 	.word	0x08007030
 8006560:	08007090 	.word	0x08007090

      case MINMEA_SENTENCE_GSV: {
        struct minmea_sentence_gsv frame;
        if (minmea_parse_gsv(&frame, line)) {
 8006564:	ab0b      	add	r3, sp, #44	; 0x2c
 8006566:	4982      	ldr	r1, [pc, #520]	; (8006770 <thdGps+0x520>)
 8006568:	4618      	mov	r0, r3
 800656a:	f7ff fc79 	bl	8005e60 <minmea_parse_gsv>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d03a      	beq.n	80065ea <thdGps+0x39a>
          chprintf(chp2, INDENT_SPACES "$xxGSV: message %d of %d\n\r", frame.msg_nr,
 8006574:	4b7f      	ldr	r3, [pc, #508]	; (8006774 <thdGps+0x524>)
 8006576:	6818      	ldr	r0, [r3, #0]
 8006578:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800657a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800657c:	497e      	ldr	r1, [pc, #504]	; (8006778 <thdGps+0x528>)
 800657e:	f7fe fd87 	bl	8005090 <chprintf>
                   frame.total_msgs);
          chprintf(chp2, INDENT_SPACES "$xxGSV: sattelites in view: %d\n\r",
 8006582:	4b7c      	ldr	r3, [pc, #496]	; (8006774 <thdGps+0x524>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006588:	497c      	ldr	r1, [pc, #496]	; (800677c <thdGps+0x52c>)
 800658a:	4618      	mov	r0, r3
 800658c:	f7fe fd80 	bl	8005090 <chprintf>
                   frame.total_sats);
          for (i = 0; i < 4; i++)
 8006590:	2300      	movs	r3, #0
 8006592:	931f      	str	r3, [sp, #124]	; 0x7c
 8006594:	e025      	b.n	80065e2 <thdGps+0x392>
            chprintf(
 8006596:	4b77      	ldr	r3, [pc, #476]	; (8006774 <thdGps+0x524>)
 8006598:	6818      	ldr	r0, [r3, #0]
 800659a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800659c:	011b      	lsls	r3, r3, #4
 800659e:	3380      	adds	r3, #128	; 0x80
 80065a0:	446b      	add	r3, sp
 80065a2:	3b48      	subs	r3, #72	; 0x48
 80065a4:	6819      	ldr	r1, [r3, #0]
 80065a6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80065a8:	011b      	lsls	r3, r3, #4
 80065aa:	3380      	adds	r3, #128	; 0x80
 80065ac:	446b      	add	r3, sp
 80065ae:	3b44      	subs	r3, #68	; 0x44
 80065b0:	681c      	ldr	r4, [r3, #0]
 80065b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80065b4:	3301      	adds	r3, #1
 80065b6:	011b      	lsls	r3, r3, #4
 80065b8:	3380      	adds	r3, #128	; 0x80
 80065ba:	446b      	add	r3, sp
 80065bc:	3b50      	subs	r3, #80	; 0x50
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80065c2:	3201      	adds	r2, #1
 80065c4:	0112      	lsls	r2, r2, #4
 80065c6:	3280      	adds	r2, #128	; 0x80
 80065c8:	446a      	add	r2, sp
 80065ca:	3a4c      	subs	r2, #76	; 0x4c
 80065cc:	6812      	ldr	r2, [r2, #0]
 80065ce:	9201      	str	r2, [sp, #4]
 80065d0:	9300      	str	r3, [sp, #0]
 80065d2:	4623      	mov	r3, r4
 80065d4:	460a      	mov	r2, r1
 80065d6:	496a      	ldr	r1, [pc, #424]	; (8006780 <thdGps+0x530>)
 80065d8:	f7fe fd5a 	bl	8005090 <chprintf>
          for (i = 0; i < 4; i++)
 80065dc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80065de:	3301      	adds	r3, #1
 80065e0:	931f      	str	r3, [sp, #124]	; 0x7c
 80065e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80065e4:	2b03      	cmp	r3, #3
 80065e6:	ddd6      	ble.n	8006596 <thdGps+0x346>
        }
        else {
          chprintf(chp2, INDENT_SPACES "$xxGSV sentence is not parsed\n\r");
        }
      }
        break;
 80065e8:	e0bd      	b.n	8006766 <thdGps+0x516>
          chprintf(chp2, INDENT_SPACES "$xxGSV sentence is not parsed\n\r");
 80065ea:	4b62      	ldr	r3, [pc, #392]	; (8006774 <thdGps+0x524>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4965      	ldr	r1, [pc, #404]	; (8006784 <thdGps+0x534>)
 80065f0:	4618      	mov	r0, r3
 80065f2:	f7fe fd4d 	bl	8005090 <chprintf>
        break;
 80065f6:	e0b6      	b.n	8006766 <thdGps+0x516>

      case MINMEA_SENTENCE_VTG: {
        struct minmea_sentence_vtg frame;
        if (minmea_parse_vtg(&frame, line)) {
 80065f8:	ab0b      	add	r3, sp, #44	; 0x2c
 80065fa:	495d      	ldr	r1, [pc, #372]	; (8006770 <thdGps+0x520>)
 80065fc:	4618      	mov	r0, r3
 80065fe:	f7ff fcbf 	bl	8005f80 <minmea_parse_vtg>
 8006602:	4603      	mov	r3, r0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d043      	beq.n	8006690 <thdGps+0x440>
          chprintf(chp2, INDENT_SPACES "$xxVTG: true track degrees = %f\n\r",
 8006608:	4b5a      	ldr	r3, [pc, #360]	; (8006774 <thdGps+0x524>)
 800660a:	681c      	ldr	r4, [r3, #0]
                   minmea_tofloat(&frame.true_track_degrees));
 800660c:	ab0b      	add	r3, sp, #44	; 0x2c
 800660e:	4618      	mov	r0, r3
 8006610:	f7ff fdb6 	bl	8006180 <minmea_tofloat>
 8006614:	4603      	mov	r3, r0
          chprintf(chp2, INDENT_SPACES "$xxVTG: true track degrees = %f\n\r",
 8006616:	4618      	mov	r0, r3
 8006618:	f7fa fa64 	bl	8000ae4 <__aeabi_f2d>
 800661c:	4602      	mov	r2, r0
 800661e:	460b      	mov	r3, r1
 8006620:	4959      	ldr	r1, [pc, #356]	; (8006788 <thdGps+0x538>)
 8006622:	4620      	mov	r0, r4
 8006624:	f7fe fd34 	bl	8005090 <chprintf>
          chprintf(chp2, INDENT_SPACES "        magnetic track degrees = %f\n\r",
 8006628:	4b52      	ldr	r3, [pc, #328]	; (8006774 <thdGps+0x524>)
 800662a:	681c      	ldr	r4, [r3, #0]
                   minmea_tofloat(&frame.magnetic_track_degrees));
 800662c:	ab0b      	add	r3, sp, #44	; 0x2c
 800662e:	3308      	adds	r3, #8
 8006630:	4618      	mov	r0, r3
 8006632:	f7ff fda5 	bl	8006180 <minmea_tofloat>
 8006636:	4603      	mov	r3, r0
          chprintf(chp2, INDENT_SPACES "        magnetic track degrees = %f\n\r",
 8006638:	4618      	mov	r0, r3
 800663a:	f7fa fa53 	bl	8000ae4 <__aeabi_f2d>
 800663e:	4602      	mov	r2, r0
 8006640:	460b      	mov	r3, r1
 8006642:	4952      	ldr	r1, [pc, #328]	; (800678c <thdGps+0x53c>)
 8006644:	4620      	mov	r0, r4
 8006646:	f7fe fd23 	bl	8005090 <chprintf>
          chprintf(chp2, INDENT_SPACES "        speed knots = %f\n\r",
 800664a:	4b4a      	ldr	r3, [pc, #296]	; (8006774 <thdGps+0x524>)
 800664c:	681c      	ldr	r4, [r3, #0]
                   minmea_tofloat(&frame.speed_knots));
 800664e:	ab0b      	add	r3, sp, #44	; 0x2c
 8006650:	3310      	adds	r3, #16
 8006652:	4618      	mov	r0, r3
 8006654:	f7ff fd94 	bl	8006180 <minmea_tofloat>
 8006658:	4603      	mov	r3, r0
          chprintf(chp2, INDENT_SPACES "        speed knots = %f\n\r",
 800665a:	4618      	mov	r0, r3
 800665c:	f7fa fa42 	bl	8000ae4 <__aeabi_f2d>
 8006660:	4602      	mov	r2, r0
 8006662:	460b      	mov	r3, r1
 8006664:	494a      	ldr	r1, [pc, #296]	; (8006790 <thdGps+0x540>)
 8006666:	4620      	mov	r0, r4
 8006668:	f7fe fd12 	bl	8005090 <chprintf>
          chprintf(chp2, INDENT_SPACES "        speed kph = %f\n\r",
 800666c:	4b41      	ldr	r3, [pc, #260]	; (8006774 <thdGps+0x524>)
 800666e:	681c      	ldr	r4, [r3, #0]
                   minmea_tofloat(&frame.speed_kph));
 8006670:	ab0b      	add	r3, sp, #44	; 0x2c
 8006672:	3318      	adds	r3, #24
 8006674:	4618      	mov	r0, r3
 8006676:	f7ff fd83 	bl	8006180 <minmea_tofloat>
 800667a:	4603      	mov	r3, r0
          chprintf(chp2, INDENT_SPACES "        speed kph = %f\n\r",
 800667c:	4618      	mov	r0, r3
 800667e:	f7fa fa31 	bl	8000ae4 <__aeabi_f2d>
 8006682:	4602      	mov	r2, r0
 8006684:	460b      	mov	r3, r1
 8006686:	4943      	ldr	r1, [pc, #268]	; (8006794 <thdGps+0x544>)
 8006688:	4620      	mov	r0, r4
 800668a:	f7fe fd01 	bl	8005090 <chprintf>
        }
        else {
          chprintf(chp2, INDENT_SPACES "$xxVTG sentence is not parsed\n\r");
        }
      }
        break;
 800668e:	e06a      	b.n	8006766 <thdGps+0x516>
          chprintf(chp2, INDENT_SPACES "$xxVTG sentence is not parsed\n\r");
 8006690:	4b38      	ldr	r3, [pc, #224]	; (8006774 <thdGps+0x524>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4940      	ldr	r1, [pc, #256]	; (8006798 <thdGps+0x548>)
 8006696:	4618      	mov	r0, r3
 8006698:	f7fe fcfa 	bl	8005090 <chprintf>
        break;
 800669c:	e063      	b.n	8006766 <thdGps+0x516>

      case MINMEA_SENTENCE_ZDA: {
        struct minmea_sentence_zda frame;
        if (minmea_parse_zda(&frame, line)) {
 800669e:	ab0b      	add	r3, sp, #44	; 0x2c
 80066a0:	4933      	ldr	r1, [pc, #204]	; (8006770 <thdGps+0x520>)
 80066a2:	4618      	mov	r0, r3
 80066a4:	f7ff fcc4 	bl	8006030 <minmea_parse_zda>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d017      	beq.n	80066de <thdGps+0x48e>
          chprintf(chp2,
 80066ae:	4b31      	ldr	r3, [pc, #196]	; (8006774 <thdGps+0x524>)
 80066b0:	681e      	ldr	r6, [r3, #0]
 80066b2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80066b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066b6:	9308      	str	r3, [sp, #32]
 80066b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80066bc:	9910      	ldr	r1, [sp, #64]	; 0x40
 80066be:	9811      	ldr	r0, [sp, #68]	; 0x44
 80066c0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80066c2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80066c4:	9505      	str	r5, [sp, #20]
 80066c6:	9404      	str	r4, [sp, #16]
 80066c8:	9003      	str	r0, [sp, #12]
 80066ca:	9102      	str	r1, [sp, #8]
 80066cc:	9201      	str	r2, [sp, #4]
 80066ce:	9300      	str	r3, [sp, #0]
 80066d0:	9b08      	ldr	r3, [sp, #32]
 80066d2:	463a      	mov	r2, r7
 80066d4:	4931      	ldr	r1, [pc, #196]	; (800679c <thdGps+0x54c>)
 80066d6:	4630      	mov	r0, r6
 80066d8:	f7fe fcda 	bl	8005090 <chprintf>
        }
        else {
          chprintf(chp2, INDENT_SPACES "$xxZDA sentence is not parsed\n\r");
        }
      }
        break;
 80066dc:	e043      	b.n	8006766 <thdGps+0x516>
          chprintf(chp2, INDENT_SPACES "$xxZDA sentence is not parsed\n\r");
 80066de:	4b25      	ldr	r3, [pc, #148]	; (8006774 <thdGps+0x524>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	492f      	ldr	r1, [pc, #188]	; (80067a0 <thdGps+0x550>)
 80066e4:	4618      	mov	r0, r3
 80066e6:	f7fe fcd3 	bl	8005090 <chprintf>
        break;
 80066ea:	e03c      	b.n	8006766 <thdGps+0x516>
      case MINMEA_SENTENCE_GLL: {
        struct minmea_sentence_gll frame;
        if (minmea_parse_gll(&frame, line)) {
 80066ec:	ab0b      	add	r3, sp, #44	; 0x2c
 80066ee:	4920      	ldr	r1, [pc, #128]	; (8006770 <thdGps+0x520>)
 80066f0:	4618      	mov	r0, r3
 80066f2:	f7ff fb2d 	bl	8005d50 <minmea_parse_gll>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d026      	beq.n	800674a <thdGps+0x4fa>
          chprintf(
 80066fc:	4b1d      	ldr	r3, [pc, #116]	; (8006774 <thdGps+0x524>)
 80066fe:	681f      	ldr	r7, [r3, #0]
              chp2,
              INDENT_SPACES "$xxGll: raw latitude,longitude and altitude: (%d/%d,%d/%d)\n\r",
              conversion(frame.latitude.value), frame.latitude.scale, conversion(frame.longitude.value),
 8006700:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
          chprintf(
 8006702:	4618      	mov	r0, r3
 8006704:	f7fa f9dc 	bl	8000ac0 <__aeabi_i2d>
 8006708:	4602      	mov	r2, r0
 800670a:	460b      	mov	r3, r1
 800670c:	4610      	mov	r0, r2
 800670e:	4619      	mov	r1, r3
 8006710:	f7fe fcd6 	bl	80050c0 <conversion>
 8006714:	4604      	mov	r4, r0
 8006716:	460d      	mov	r5, r1
 8006718:	9e0c      	ldr	r6, [sp, #48]	; 0x30
              conversion(frame.latitude.value), frame.latitude.scale, conversion(frame.longitude.value),
 800671a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
          chprintf(
 800671c:	4618      	mov	r0, r3
 800671e:	f7fa f9cf 	bl	8000ac0 <__aeabi_i2d>
 8006722:	4602      	mov	r2, r0
 8006724:	460b      	mov	r3, r1
 8006726:	4610      	mov	r0, r2
 8006728:	4619      	mov	r1, r3
 800672a:	f7fe fcc9 	bl	80050c0 <conversion>
 800672e:	4602      	mov	r2, r0
 8006730:	460b      	mov	r3, r1
 8006732:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006734:	9104      	str	r1, [sp, #16]
 8006736:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800673a:	9600      	str	r6, [sp, #0]
 800673c:	4622      	mov	r2, r4
 800673e:	462b      	mov	r3, r5
 8006740:	4918      	ldr	r1, [pc, #96]	; (80067a4 <thdGps+0x554>)
 8006742:	4638      	mov	r0, r7
 8006744:	f7fe fca4 	bl	8005090 <chprintf>

        else {
          chprintf(chp2, INDENT_SPACES "$xxGLL sentence is not parsed\n\r");
        }
      }
        break;
 8006748:	e00d      	b.n	8006766 <thdGps+0x516>
          chprintf(chp2, INDENT_SPACES "$xxGLL sentence is not parsed\n\r");
 800674a:	4b0a      	ldr	r3, [pc, #40]	; (8006774 <thdGps+0x524>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4916      	ldr	r1, [pc, #88]	; (80067a8 <thdGps+0x558>)
 8006750:	4618      	mov	r0, r3
 8006752:	f7fe fc9d 	bl	8005090 <chprintf>
        break;
 8006756:	e006      	b.n	8006766 <thdGps+0x516>

      case MINMEA_INVALID: {
        chprintf(chp2, INDENT_SPACES "$xxxxx sentence is not valid\n\r");
 8006758:	4b06      	ldr	r3, [pc, #24]	; (8006774 <thdGps+0x524>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4913      	ldr	r1, [pc, #76]	; (80067ac <thdGps+0x55c>)
 800675e:	4618      	mov	r0, r3
 8006760:	f7fe fc96 	bl	8005090 <chprintf>
      }
        break;
 8006764:	bf00      	nop

      default: {
      }
    }
    chThdSleepMilliseconds(2);
 8006766:	2014      	movs	r0, #20
 8006768:	f7fd fea2 	bl	80044b0 <chThdSleep>
  while (TRUE) {
 800676c:	e5a3      	b.n	80062b6 <thdGps+0x66>
 800676e:	bf00      	nop
 8006770:	20000800 	.word	0x20000800
 8006774:	20000850 	.word	0x20000850
 8006778:	080070b4 	.word	0x080070b4
 800677c:	080070d4 	.word	0x080070d4
 8006780:	080070f8 	.word	0x080070f8
 8006784:	08007138 	.word	0x08007138
 8006788:	0800715c 	.word	0x0800715c
 800678c:	08007180 	.word	0x08007180
 8006790:	080071a8 	.word	0x080071a8
 8006794:	080071c8 	.word	0x080071c8
 8006798:	080071e4 	.word	0x080071e4
 800679c:	08007208 	.word	0x08007208
 80067a0:	08007238 	.word	0x08007238
 80067a4:	0800725c 	.word	0x0800725c
 80067a8:	0800729c 	.word	0x0800729c
 80067ac:	080072c0 	.word	0x080072c0

080067b0 <chRegSetThreadName.lto_priv.2>:
static inline void chRegSetThreadName(const char *name) {
 80067b0:	b082      	sub	sp, #8
 80067b2:	9001      	str	r0, [sp, #4]
  __sch_get_currthread()->name = name;
 80067b4:	4b03      	ldr	r3, [pc, #12]	; (80067c4 <chRegSetThreadName.lto_priv.2+0x14>)
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	9a01      	ldr	r2, [sp, #4]
 80067ba:	61da      	str	r2, [r3, #28]
}
 80067bc:	bf00      	nop
 80067be:	b002      	add	sp, #8
 80067c0:	4770      	bx	lr
 80067c2:	bf00      	nop
 80067c4:	20000db8 	.word	0x20000db8
	...

080067d0 <thdBlinker>:
 }

 */

static THD_WORKING_AREA(waBlinker, 256);
 static THD_FUNCTION(thdBlinker, arg){
 80067d0:	b500      	push	{lr}
 80067d2:	b083      	sub	sp, #12
 80067d4:	9001      	str	r0, [sp, #4]
 (void) arg;
 chRegSetThreadName("Blinker");
 80067d6:	4804      	ldr	r0, [pc, #16]	; (80067e8 <thdBlinker+0x18>)
 80067d8:	f7ff ffea 	bl	80067b0 <chRegSetThreadName.lto_priv.2>
 while(TRUE){
 chThdSleepMilliseconds(50);
 80067dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80067e0:	f7fd fe66 	bl	80044b0 <chThdSleep>
 80067e4:	e7fa      	b.n	80067dc <thdBlinker+0xc>
 80067e6:	bf00      	nop
 80067e8:	080072e4 	.word	0x080072e4
 80067ec:	00000000 	.word	0x00000000

080067f0 <main>:
 }
}

static THD_WORKING_AREA(waGps, 1024);

int main(void) {
 80067f0:	b500      	push	{lr}
 80067f2:	b083      	sub	sp, #12
   *   and performs the board-specific initializations.
   * - Kernel initialization, the main() function becomes a thread and the
   *   RTOS is active.
   */

  halInit();
 80067f4:	f7fa fec4 	bl	8001580 <halInit>
  chSysInit();
 80067f8:	f7fc fe4a 	bl	8003490 <chSysInit>
  /*
   * Shell manager initialization.
   */
  //shellInit();

  chThdCreateStatic(waBlinker, sizeof(waBlinker), NORMALPRIO - 1, thdBlinker, NULL);
 80067fc:	2300      	movs	r3, #0
 80067fe:	9300      	str	r3, [sp, #0]
 8006800:	4b0a      	ldr	r3, [pc, #40]	; (800682c <main+0x3c>)
 8006802:	227f      	movs	r2, #127	; 0x7f
 8006804:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8006808:	4809      	ldr	r0, [pc, #36]	; (8006830 <main+0x40>)
 800680a:	f7fd fdc1 	bl	8004390 <chThdCreateStatic>
  chThdCreateStatic(waGps, sizeof(waGps), NORMALPRIO + 1, thdGps, NULL);
 800680e:	2300      	movs	r3, #0
 8006810:	9300      	str	r3, [sp, #0]
 8006812:	4b08      	ldr	r3, [pc, #32]	; (8006834 <main+0x44>)
 8006814:	2281      	movs	r2, #129	; 0x81
 8006816:	f44f 619e 	mov.w	r1, #1264	; 0x4f0
 800681a:	4807      	ldr	r0, [pc, #28]	; (8006838 <main+0x48>)
 800681c:	f7fd fdb8 	bl	8004390 <chThdCreateStatic>
     "shell", NORMALPRIO + 1,
     shellThread, (void *)&shell_cfg1);
     chThdWait(tpShell);
     Waiting termination.             */

    chThdSleepMilliseconds(200);
 8006820:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006824:	f7fd fe44 	bl	80044b0 <chThdSleep>
 8006828:	e7fa      	b.n	8006820 <main+0x30>
 800682a:	bf00      	nop
 800682c:	080067d1 	.word	0x080067d1
 8006830:	20000fb0 	.word	0x20000fb0
 8006834:	08006251 	.word	0x08006251
 8006838:	200011a0 	.word	0x200011a0

0800683c <_strtol_l.part.0>:
 800683c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006840:	4681      	mov	r9, r0
 8006842:	4845      	ldr	r0, [pc, #276]	; (8006958 <_strtol_l.part.0+0x11c>)
 8006844:	468e      	mov	lr, r1
 8006846:	4675      	mov	r5, lr
 8006848:	f81e cb01 	ldrb.w	ip, [lr], #1
 800684c:	f810 400c 	ldrb.w	r4, [r0, ip]
 8006850:	f014 0408 	ands.w	r4, r4, #8
 8006854:	d1f7      	bne.n	8006846 <_strtol_l.part.0+0xa>
 8006856:	f1bc 0f2d 	cmp.w	ip, #45	; 0x2d
 800685a:	46e3      	mov	fp, ip
 800685c:	d054      	beq.n	8006908 <_strtol_l.part.0+0xcc>
 800685e:	f1bc 0f2b 	cmp.w	ip, #43	; 0x2b
 8006862:	bf08      	it	eq
 8006864:	f89e b000 	ldrbeq.w	fp, [lr]
 8006868:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 800686c:	bf08      	it	eq
 800686e:	f105 0e02 	addeq.w	lr, r5, #2
 8006872:	b11b      	cbz	r3, 800687c <_strtol_l.part.0+0x40>
 8006874:	2b10      	cmp	r3, #16
 8006876:	d04f      	beq.n	8006918 <_strtol_l.part.0+0xdc>
 8006878:	461f      	mov	r7, r3
 800687a:	e004      	b.n	8006886 <_strtol_l.part.0+0x4a>
 800687c:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 8006880:	d055      	beq.n	800692e <_strtol_l.part.0+0xf2>
 8006882:	230a      	movs	r3, #10
 8006884:	461f      	mov	r7, r3
 8006886:	2500      	movs	r5, #0
 8006888:	fbb8 f6f7 	udiv	r6, r8, r7
 800688c:	4628      	mov	r0, r5
 800688e:	fb07 8a16 	mls	sl, r7, r6, r8
 8006892:	e007      	b.n	80068a4 <_strtol_l.part.0+0x68>
 8006894:	4286      	cmp	r6, r0
 8006896:	d315      	bcc.n	80068c4 <_strtol_l.part.0+0x88>
 8006898:	d029      	beq.n	80068ee <_strtol_l.part.0+0xb2>
 800689a:	fb07 c000 	mla	r0, r7, r0, ip
 800689e:	2501      	movs	r5, #1
 80068a0:	f81e bb01 	ldrb.w	fp, [lr], #1
 80068a4:	f1ab 0c30 	sub.w	ip, fp, #48	; 0x30
 80068a8:	f1bc 0f09 	cmp.w	ip, #9
 80068ac:	d906      	bls.n	80068bc <_strtol_l.part.0+0x80>
 80068ae:	f1ab 0c41 	sub.w	ip, fp, #65	; 0x41
 80068b2:	f1bc 0f19 	cmp.w	ip, #25
 80068b6:	d808      	bhi.n	80068ca <_strtol_l.part.0+0x8e>
 80068b8:	f1ab 0c37 	sub.w	ip, fp, #55	; 0x37
 80068bc:	4563      	cmp	r3, ip
 80068be:	dd0d      	ble.n	80068dc <_strtol_l.part.0+0xa0>
 80068c0:	2d00      	cmp	r5, #0
 80068c2:	dae7      	bge.n	8006894 <_strtol_l.part.0+0x58>
 80068c4:	f04f 35ff 	mov.w	r5, #4294967295
 80068c8:	e7ea      	b.n	80068a0 <_strtol_l.part.0+0x64>
 80068ca:	f1ab 0c61 	sub.w	ip, fp, #97	; 0x61
 80068ce:	f1bc 0f19 	cmp.w	ip, #25
 80068d2:	d803      	bhi.n	80068dc <_strtol_l.part.0+0xa0>
 80068d4:	f1ab 0c57 	sub.w	ip, fp, #87	; 0x57
 80068d8:	4563      	cmp	r3, ip
 80068da:	dcf1      	bgt.n	80068c0 <_strtol_l.part.0+0x84>
 80068dc:	2d00      	cmp	r5, #0
 80068de:	db0b      	blt.n	80068f8 <_strtol_l.part.0+0xbc>
 80068e0:	b104      	cbz	r4, 80068e4 <_strtol_l.part.0+0xa8>
 80068e2:	4240      	negs	r0, r0
 80068e4:	b10a      	cbz	r2, 80068ea <_strtol_l.part.0+0xae>
 80068e6:	bb95      	cbnz	r5, 800694e <_strtol_l.part.0+0x112>
 80068e8:	6011      	str	r1, [r2, #0]
 80068ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ee:	45e2      	cmp	sl, ip
 80068f0:	dad3      	bge.n	800689a <_strtol_l.part.0+0x5e>
 80068f2:	f04f 35ff 	mov.w	r5, #4294967295
 80068f6:	e7d3      	b.n	80068a0 <_strtol_l.part.0+0x64>
 80068f8:	2322      	movs	r3, #34	; 0x22
 80068fa:	f8c9 3000 	str.w	r3, [r9]
 80068fe:	b31a      	cbz	r2, 8006948 <_strtol_l.part.0+0x10c>
 8006900:	f10e 31ff 	add.w	r1, lr, #4294967295
 8006904:	4640      	mov	r0, r8
 8006906:	e7ef      	b.n	80068e8 <_strtol_l.part.0+0xac>
 8006908:	f89e b000 	ldrb.w	fp, [lr]
 800690c:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8006910:	f105 0e02 	add.w	lr, r5, #2
 8006914:	2401      	movs	r4, #1
 8006916:	e7ac      	b.n	8006872 <_strtol_l.part.0+0x36>
 8006918:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 800691c:	d1ac      	bne.n	8006878 <_strtol_l.part.0+0x3c>
 800691e:	f89e 0000 	ldrb.w	r0, [lr]
 8006922:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006926:	2858      	cmp	r0, #88	; 0x58
 8006928:	d007      	beq.n	800693a <_strtol_l.part.0+0xfe>
 800692a:	461f      	mov	r7, r3
 800692c:	e7ab      	b.n	8006886 <_strtol_l.part.0+0x4a>
 800692e:	f89e 3000 	ldrb.w	r3, [lr]
 8006932:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006936:	2b58      	cmp	r3, #88	; 0x58
 8006938:	d10b      	bne.n	8006952 <_strtol_l.part.0+0x116>
 800693a:	2710      	movs	r7, #16
 800693c:	f89e b001 	ldrb.w	fp, [lr, #1]
 8006940:	463b      	mov	r3, r7
 8006942:	f10e 0e02 	add.w	lr, lr, #2
 8006946:	e79e      	b.n	8006886 <_strtol_l.part.0+0x4a>
 8006948:	4640      	mov	r0, r8
 800694a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800694e:	4680      	mov	r8, r0
 8006950:	e7d6      	b.n	8006900 <_strtol_l.part.0+0xc4>
 8006952:	2308      	movs	r3, #8
 8006954:	461f      	mov	r7, r3
 8006956:	e796      	b.n	8006886 <_strtol_l.part.0+0x4a>
 8006958:	080072ed 	.word	0x080072ed

0800695c <strtol>:
 800695c:	2a01      	cmp	r2, #1
 800695e:	d009      	beq.n	8006974 <strtol+0x18>
 8006960:	2a24      	cmp	r2, #36	; 0x24
 8006962:	4613      	mov	r3, r2
 8006964:	d806      	bhi.n	8006974 <strtol+0x18>
 8006966:	4a07      	ldr	r2, [pc, #28]	; (8006984 <strtol+0x28>)
 8006968:	4684      	mov	ip, r0
 800696a:	6810      	ldr	r0, [r2, #0]
 800696c:	460a      	mov	r2, r1
 800696e:	4661      	mov	r1, ip
 8006970:	f7ff bf64 	b.w	800683c <_strtol_l.part.0>
 8006974:	b510      	push	{r4, lr}
 8006976:	f000 f807 	bl	8006988 <__errno>
 800697a:	2316      	movs	r3, #22
 800697c:	6003      	str	r3, [r0, #0]
 800697e:	2000      	movs	r0, #0
 8006980:	bd10      	pop	{r4, pc}
 8006982:	bf00      	nop
 8006984:	20000854 	.word	0x20000854

08006988 <__errno>:
 8006988:	4b01      	ldr	r3, [pc, #4]	; (8006990 <__errno+0x8>)
 800698a:	6818      	ldr	r0, [r3, #0]
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	20000854 	.word	0x20000854

08006994 <strncmp>:
 8006994:	b3a2      	cbz	r2, 8006a00 <strncmp+0x6c>
 8006996:	b530      	push	{r4, r5, lr}
 8006998:	ea40 0401 	orr.w	r4, r0, r1
 800699c:	07a4      	lsls	r4, r4, #30
 800699e:	4684      	mov	ip, r0
 80069a0:	460b      	mov	r3, r1
 80069a2:	d02a      	beq.n	80069fa <strncmp+0x66>
 80069a4:	f89c 0000 	ldrb.w	r0, [ip]
 80069a8:	780c      	ldrb	r4, [r1, #0]
 80069aa:	4284      	cmp	r4, r0
 80069ac:	d12f      	bne.n	8006a0e <strncmp+0x7a>
 80069ae:	2a01      	cmp	r2, #1
 80069b0:	d00d      	beq.n	80069ce <strncmp+0x3a>
 80069b2:	46e6      	mov	lr, ip
 80069b4:	b160      	cbz	r0, 80069d0 <strncmp+0x3c>
 80069b6:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
 80069ba:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80069be:	ea6f 030e 	mvn.w	r3, lr
 80069c2:	42a0      	cmp	r0, r4
 80069c4:	4413      	add	r3, r2
 80069c6:	d122      	bne.n	8006a0e <strncmp+0x7a>
 80069c8:	eb1c 0303 	adds.w	r3, ip, r3
 80069cc:	d1f2      	bne.n	80069b4 <strncmp+0x20>
 80069ce:	2000      	movs	r0, #0
 80069d0:	bd30      	pop	{r4, r5, pc}
 80069d2:	6804      	ldr	r4, [r0, #0]
 80069d4:	4619      	mov	r1, r3
 80069d6:	f853 5b04 	ldr.w	r5, [r3], #4
 80069da:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
 80069de:	42ac      	cmp	r4, r5
 80069e0:	4684      	mov	ip, r0
 80069e2:	ea2e 0e04 	bic.w	lr, lr, r4
 80069e6:	f100 0004 	add.w	r0, r0, #4
 80069ea:	d10b      	bne.n	8006a04 <strncmp+0x70>
 80069ec:	3a04      	subs	r2, #4
 80069ee:	4684      	mov	ip, r0
 80069f0:	4619      	mov	r1, r3
 80069f2:	d0ec      	beq.n	80069ce <strncmp+0x3a>
 80069f4:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
 80069f8:	d1e9      	bne.n	80069ce <strncmp+0x3a>
 80069fa:	2a03      	cmp	r2, #3
 80069fc:	d8e9      	bhi.n	80069d2 <strncmp+0x3e>
 80069fe:	e7d1      	b.n	80069a4 <strncmp+0x10>
 8006a00:	4610      	mov	r0, r2
 8006a02:	4770      	bx	lr
 8006a04:	f89c 0000 	ldrb.w	r0, [ip]
 8006a08:	780c      	ldrb	r4, [r1, #0]
 8006a0a:	42a0      	cmp	r0, r4
 8006a0c:	d0d1      	beq.n	80069b2 <strncmp+0x1e>
 8006a0e:	1b00      	subs	r0, r0, r4
 8006a10:	bd30      	pop	{r4, r5, pc}
 8006a12:	bf00      	nop
