
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	080002d9 	.word	0x080002d9
 8000008:	080002db 	.word	0x080002db
 800000c:	080002db 	.word	0x080002db
 8000010:	080002db 	.word	0x080002db
 8000014:	080002db 	.word	0x080002db
 8000018:	080002db 	.word	0x080002db
 800001c:	080002db 	.word	0x080002db
 8000020:	080002db 	.word	0x080002db
 8000024:	080002db 	.word	0x080002db
 8000028:	080002db 	.word	0x080002db
 800002c:	080080b1 	.word	0x080080b1
 8000030:	080002db 	.word	0x080002db
 8000034:	080002db 	.word	0x080002db
 8000038:	080002db 	.word	0x080002db
 800003c:	080002db 	.word	0x080002db
 8000040:	080002db 	.word	0x080002db
 8000044:	080002db 	.word	0x080002db
 8000048:	080002db 	.word	0x080002db
 800004c:	080002db 	.word	0x080002db
 8000050:	080002db 	.word	0x080002db
 8000054:	080002db 	.word	0x080002db
 8000058:	080002db 	.word	0x080002db
 800005c:	080002db 	.word	0x080002db
 8000060:	080002db 	.word	0x080002db
 8000064:	080002db 	.word	0x080002db
 8000068:	080002db 	.word	0x080002db
 800006c:	080038f1 	.word	0x080038f1
 8000070:	08003931 	.word	0x08003931
 8000074:	08003981 	.word	0x08003981
 8000078:	080039d1 	.word	0x080039d1
 800007c:	08003a21 	.word	0x08003a21
 8000080:	08003a61 	.word	0x08003a61
 8000084:	08003ab1 	.word	0x08003ab1
 8000088:	080002db 	.word	0x080002db
 800008c:	080002db 	.word	0x080002db
 8000090:	080002db 	.word	0x080002db
 8000094:	080002db 	.word	0x080002db
 8000098:	080002db 	.word	0x080002db
 800009c:	080002db 	.word	0x080002db
 80000a0:	080002db 	.word	0x080002db
 80000a4:	080002db 	.word	0x080002db
 80000a8:	080002db 	.word	0x080002db
 80000ac:	080002db 	.word	0x080002db
 80000b0:	080035c1 	.word	0x080035c1
 80000b4:	080002db 	.word	0x080002db
 80000b8:	080002db 	.word	0x080002db
 80000bc:	08004a01 	.word	0x08004a01
 80000c0:	08004a21 	.word	0x08004a21
 80000c4:	080002db 	.word	0x080002db
 80000c8:	080002db 	.word	0x080002db
 80000cc:	080002db 	.word	0x080002db
 80000d0:	080002db 	.word	0x080002db
 80000d4:	080034d1 	.word	0x080034d1
 80000d8:	08003501 	.word	0x08003501
 80000dc:	080002db 	.word	0x080002db
 80000e0:	080002db 	.word	0x080002db
 80000e4:	080002db 	.word	0x080002db
 80000e8:	080002db 	.word	0x080002db
 80000ec:	080002db 	.word	0x080002db
 80000f0:	080002db 	.word	0x080002db
 80000f4:	080002db 	.word	0x080002db
 80000f8:	080002db 	.word	0x080002db
 80000fc:	08003b01 	.word	0x08003b01
 8000100:	080002db 	.word	0x080002db
 8000104:	080002db 	.word	0x080002db
 8000108:	080002db 	.word	0x080002db
 800010c:	080002db 	.word	0x080002db
 8000110:	080002db 	.word	0x080002db
 8000114:	080002db 	.word	0x080002db
 8000118:	080002db 	.word	0x080002db
 800011c:	080002db 	.word	0x080002db
 8000120:	08003b51 	.word	0x08003b51
 8000124:	08003b91 	.word	0x08003b91
 8000128:	08003be1 	.word	0x08003be1
 800012c:	08003c31 	.word	0x08003c31
 8000130:	08003c81 	.word	0x08003c81
 8000134:	080002db 	.word	0x080002db
 8000138:	080002db 	.word	0x080002db
 800013c:	080002db 	.word	0x080002db
 8000140:	080002db 	.word	0x080002db
 8000144:	080002db 	.word	0x080002db
 8000148:	080002db 	.word	0x080002db
 800014c:	080002db 	.word	0x080002db
 8000150:	08003cc1 	.word	0x08003cc1
 8000154:	08003d11 	.word	0x08003d11
 8000158:	08003d61 	.word	0x08003d61
 800015c:	080002db 	.word	0x080002db
 8000160:	080002db 	.word	0x080002db
 8000164:	080002db 	.word	0x080002db
 8000168:	080002db 	.word	0x080002db
 800016c:	080002db 	.word	0x080002db
 8000170:	080002db 	.word	0x080002db
 8000174:	080002db 	.word	0x080002db
 8000178:	080002db 	.word	0x080002db
 800017c:	080002db 	.word	0x080002db
 8000180:	080002db 	.word	0x080002db
 8000184:	080002db 	.word	0x080002db
 8000188:	080002db 	.word	0x080002db
 800018c:	080002db 	.word	0x080002db
 8000190:	080002db 	.word	0x080002db
 8000194:	080002db 	.word	0x080002db
 8000198:	080002db 	.word	0x080002db
 800019c:	080002db 	.word	0x080002db
 80001a0:	080002db 	.word	0x080002db
 80001a4:	080002db 	.word	0x080002db
 80001a8:	080002db 	.word	0x080002db
 80001ac:	080002db 	.word	0x080002db
 80001b0:	080002db 	.word	0x080002db
 80001b4:	080002db 	.word	0x080002db
 80001b8:	080002db 	.word	0x080002db
 80001bc:	080002db 	.word	0x080002db
 80001c0:	080002db 	.word	0x080002db
 80001c4:	080002db 	.word	0x080002db
 80001c8:	080002db 	.word	0x080002db
 80001cc:	080002db 	.word	0x080002db
 80001d0:	080002db 	.word	0x080002db
 80001d4:	080002db 	.word	0x080002db
 80001d8:	080002db 	.word	0x080002db
 80001dc:	080002db 	.word	0x080002db

Disassembly of section .text:

08000200 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 8000200:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 8000202:	4827      	ldr	r0, [pc, #156]	; (80002a0 <endfiniloop+0x4>)
                msr     MSP, r0
 8000204:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 8000208:	4826      	ldr	r0, [pc, #152]	; (80002a4 <endfiniloop+0x8>)
                msr     PSP, r0
 800020a:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 800020e:	4826      	ldr	r0, [pc, #152]	; (80002a8 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 8000210:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 8000214:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 8000218:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 800021a:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 800021c:	f380 8814 	msr	CONTROL, r0
                isb
 8000220:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __cpu_init
 8000224:	f001 fa5c 	bl	80016e0 <__cpu_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000228:	f006 f81a 	bl	8006260 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800022c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000230:	491e      	ldr	r1, [pc, #120]	; (80002ac <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 8000232:	4a1b      	ldr	r2, [pc, #108]	; (80002a0 <endfiniloop+0x4>)

08000234 <msloop>:
msloop:
                cmp     r1, r2
 8000234:	4291      	cmp	r1, r2
                itt     lo
 8000236:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000238:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 800023c:	e7fa      	bcc.n	8000234 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 800023e:	491c      	ldr	r1, [pc, #112]	; (80002b0 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 8000240:	4a18      	ldr	r2, [pc, #96]	; (80002a4 <endfiniloop+0x8>)

08000242 <psloop>:
psloop:
                cmp     r1, r2
 8000242:	4291      	cmp	r1, r2
                itt     lo
 8000244:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000246:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 800024a:	e7fa      	bcc.n	8000242 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =__textdata_base__
 800024c:	4919      	ldr	r1, [pc, #100]	; (80002b4 <endfiniloop+0x18>)
                ldr     r2, =__data_base__
 800024e:	4a1a      	ldr	r2, [pc, #104]	; (80002b8 <endfiniloop+0x1c>)
                ldr     r3, =__data_end__
 8000250:	4b1a      	ldr	r3, [pc, #104]	; (80002bc <endfiniloop+0x20>)

08000252 <dloop>:
dloop:
                cmp     r2, r3
 8000252:	429a      	cmp	r2, r3
                ittt    lo
 8000254:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 8000256:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 800025a:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 800025e:	e7f8      	bcc.n	8000252 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 8000260:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 8000262:	4917      	ldr	r1, [pc, #92]	; (80002c0 <endfiniloop+0x24>)
                ldr     r2, =__bss_end__
 8000264:	4a17      	ldr	r2, [pc, #92]	; (80002c4 <endfiniloop+0x28>)

08000266 <bloop>:
bloop:
                cmp     r1, r2
 8000266:	4291      	cmp	r1, r2
                itt     lo
 8000268:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800026a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 800026e:	e7fa      	bcc.n	8000266 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000270:	f001 fa4e 	bl	8001710 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8000274:	f001 fa3c 	bl	80016f0 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 8000278:	4c13      	ldr	r4, [pc, #76]	; (80002c8 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end__
 800027a:	4d14      	ldr	r5, [pc, #80]	; (80002cc <endfiniloop+0x30>)

0800027c <initloop>:
initloop:
                cmp     r4, r5
 800027c:	42ac      	cmp	r4, r5
                bge     endinitloop
 800027e:	da03      	bge.n	8000288 <endinitloop>
                ldr     r1, [r4], #4
 8000280:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000284:	4788      	blx	r1
                b       initloop
 8000286:	e7f9      	b.n	800027c <initloop>

08000288 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 8000288:	f00c fba2 	bl	800c9d0 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 800028c:	4c10      	ldr	r4, [pc, #64]	; (80002d0 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end__
 800028e:	4d11      	ldr	r5, [pc, #68]	; (80002d4 <endfiniloop+0x38>)

08000290 <finiloop>:
finiloop:
                cmp     r4, r5
 8000290:	42ac      	cmp	r4, r5
                bge     endfiniloop
 8000292:	da03      	bge.n	800029c <endfiniloop>
                ldr     r1, [r4], #4
 8000294:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000298:	4788      	blx	r1
                b       finiloop
 800029a:	e7f9      	b.n	8000290 <finiloop>

0800029c <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 800029c:	f001 ba30 	b.w	8001700 <__default_exit>
                ldr     r0, =__main_stack_end__
 80002a0:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 80002a4:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 80002a8:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 80002ac:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 80002b0:	20000400 	.word	0x20000400
                ldr     r1, =__textdata_base__
 80002b4:	0800f614 	.word	0x0800f614
                ldr     r2, =__data_base__
 80002b8:	20000800 	.word	0x20000800
                ldr     r3, =__data_end__
 80002bc:	20000c68 	.word	0x20000c68
                ldr     r1, =__bss_base__
 80002c0:	20000c68 	.word	0x20000c68
                ldr     r2, =__bss_end__
 80002c4:	200029fc 	.word	0x200029fc
                ldr     r4, =__init_array_base__
 80002c8:	080001e0 	.word	0x080001e0
                ldr     r5, =__init_array_end__
 80002cc:	080001e0 	.word	0x080001e0
                ldr     r4, =__fini_array_base__
 80002d0:	080001e0 	.word	0x080001e0
                ldr     r5, =__fini_array_end__
 80002d4:	080001e0 	.word	0x080001e0

080002d8 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 80002d8:	e792      	b.n	8000200 <_crt0_entry>

080002da <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 80002da:	f000 f800 	bl	80002de <_unhandled_exception>

080002de <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 80002de:	e7fe      	b.n	80002de <_unhandled_exception>

080002e0 <__port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  __port_switch
__port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 80002e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if PORT_SWITCHED_REGIONS_NUMBER == 4
                push    {r4, r5, r6, r7, r8, r9, r10, r11}
#endif
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 80002e4:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 80002e8:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 80002ea:	469d      	mov	sp, r3

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80002ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002f0 <__port_thread_start>:
                bl      __stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 80002f0:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 80002f2:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 80002f6:	4628      	mov	r0, r5
                blx     r4
 80002f8:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 80002fa:	2000      	movs	r0, #0
                bl      chThdExit
 80002fc:	f007 f898 	bl	8007430 <chThdExit>

08000300 <.zombies>:
.zombies:       b       .zombies
 8000300:	e7fe      	b.n	8000300 <.zombies>

08000302 <__port_switch_from_isr>:
                bl      __stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      __dbg_check_lock
#endif
                bl      chSchDoPreemption
 8000302:	f006 fdf5 	bl	8006ef0 <chSchDoPreemption>

08000306 <__port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 8000306:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 8000308:	e7fe      	b.n	8000308 <__port_exit_from_isr+0x2>
	...

0800030c <__aeabi_drsub>:
 800030c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000310:	e002      	b.n	8000318 <__adddf3>
 8000312:	bf00      	nop

08000314 <__aeabi_dsub>:
 8000314:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000318 <__adddf3>:
 8000318:	b530      	push	{r4, r5, lr}
 800031a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800031e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000322:	ea94 0f05 	teq	r4, r5
 8000326:	bf08      	it	eq
 8000328:	ea90 0f02 	teqeq	r0, r2
 800032c:	bf1f      	itttt	ne
 800032e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000332:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000336:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800033a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800033e:	f000 80e2 	beq.w	8000506 <__adddf3+0x1ee>
 8000342:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000346:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800034a:	bfb8      	it	lt
 800034c:	426d      	neglt	r5, r5
 800034e:	dd0c      	ble.n	800036a <__adddf3+0x52>
 8000350:	442c      	add	r4, r5
 8000352:	ea80 0202 	eor.w	r2, r0, r2
 8000356:	ea81 0303 	eor.w	r3, r1, r3
 800035a:	ea82 0000 	eor.w	r0, r2, r0
 800035e:	ea83 0101 	eor.w	r1, r3, r1
 8000362:	ea80 0202 	eor.w	r2, r0, r2
 8000366:	ea81 0303 	eor.w	r3, r1, r3
 800036a:	2d36      	cmp	r5, #54	; 0x36
 800036c:	bf88      	it	hi
 800036e:	bd30      	pophi	{r4, r5, pc}
 8000370:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000374:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000378:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800037c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000380:	d002      	beq.n	8000388 <__adddf3+0x70>
 8000382:	4240      	negs	r0, r0
 8000384:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000388:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800038c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000390:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000394:	d002      	beq.n	800039c <__adddf3+0x84>
 8000396:	4252      	negs	r2, r2
 8000398:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039c:	ea94 0f05 	teq	r4, r5
 80003a0:	f000 80a7 	beq.w	80004f2 <__adddf3+0x1da>
 80003a4:	f1a4 0401 	sub.w	r4, r4, #1
 80003a8:	f1d5 0e20 	rsbs	lr, r5, #32
 80003ac:	db0d      	blt.n	80003ca <__adddf3+0xb2>
 80003ae:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003b2:	fa22 f205 	lsr.w	r2, r2, r5
 80003b6:	1880      	adds	r0, r0, r2
 80003b8:	f141 0100 	adc.w	r1, r1, #0
 80003bc:	fa03 f20e 	lsl.w	r2, r3, lr
 80003c0:	1880      	adds	r0, r0, r2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	4159      	adcs	r1, r3
 80003c8:	e00e      	b.n	80003e8 <__adddf3+0xd0>
 80003ca:	f1a5 0520 	sub.w	r5, r5, #32
 80003ce:	f10e 0e20 	add.w	lr, lr, #32
 80003d2:	2a01      	cmp	r2, #1
 80003d4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003d8:	bf28      	it	cs
 80003da:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003de:	fa43 f305 	asr.w	r3, r3, r5
 80003e2:	18c0      	adds	r0, r0, r3
 80003e4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ec:	d507      	bpl.n	80003fe <__adddf3+0xe6>
 80003ee:	f04f 0e00 	mov.w	lr, #0
 80003f2:	f1dc 0c00 	rsbs	ip, ip, #0
 80003f6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003fa:	eb6e 0101 	sbc.w	r1, lr, r1
 80003fe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000402:	d31b      	bcc.n	800043c <__adddf3+0x124>
 8000404:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000408:	d30c      	bcc.n	8000424 <__adddf3+0x10c>
 800040a:	0849      	lsrs	r1, r1, #1
 800040c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000410:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000414:	f104 0401 	add.w	r4, r4, #1
 8000418:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800041c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000420:	f080 809a 	bcs.w	8000558 <__adddf3+0x240>
 8000424:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000428:	bf08      	it	eq
 800042a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800042e:	f150 0000 	adcs.w	r0, r0, #0
 8000432:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000436:	ea41 0105 	orr.w	r1, r1, r5
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000440:	4140      	adcs	r0, r0
 8000442:	eb41 0101 	adc.w	r1, r1, r1
 8000446:	3c01      	subs	r4, #1
 8000448:	bf28      	it	cs
 800044a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800044e:	d2e9      	bcs.n	8000424 <__adddf3+0x10c>
 8000450:	f091 0f00 	teq	r1, #0
 8000454:	bf04      	itt	eq
 8000456:	4601      	moveq	r1, r0
 8000458:	2000      	moveq	r0, #0
 800045a:	fab1 f381 	clz	r3, r1
 800045e:	bf08      	it	eq
 8000460:	3320      	addeq	r3, #32
 8000462:	f1a3 030b 	sub.w	r3, r3, #11
 8000466:	f1b3 0220 	subs.w	r2, r3, #32
 800046a:	da0c      	bge.n	8000486 <__adddf3+0x16e>
 800046c:	320c      	adds	r2, #12
 800046e:	dd08      	ble.n	8000482 <__adddf3+0x16a>
 8000470:	f102 0c14 	add.w	ip, r2, #20
 8000474:	f1c2 020c 	rsb	r2, r2, #12
 8000478:	fa01 f00c 	lsl.w	r0, r1, ip
 800047c:	fa21 f102 	lsr.w	r1, r1, r2
 8000480:	e00c      	b.n	800049c <__adddf3+0x184>
 8000482:	f102 0214 	add.w	r2, r2, #20
 8000486:	bfd8      	it	le
 8000488:	f1c2 0c20 	rsble	ip, r2, #32
 800048c:	fa01 f102 	lsl.w	r1, r1, r2
 8000490:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000494:	bfdc      	itt	le
 8000496:	ea41 010c 	orrle.w	r1, r1, ip
 800049a:	4090      	lslle	r0, r2
 800049c:	1ae4      	subs	r4, r4, r3
 800049e:	bfa2      	ittt	ge
 80004a0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004a4:	4329      	orrge	r1, r5
 80004a6:	bd30      	popge	{r4, r5, pc}
 80004a8:	ea6f 0404 	mvn.w	r4, r4
 80004ac:	3c1f      	subs	r4, #31
 80004ae:	da1c      	bge.n	80004ea <__adddf3+0x1d2>
 80004b0:	340c      	adds	r4, #12
 80004b2:	dc0e      	bgt.n	80004d2 <__adddf3+0x1ba>
 80004b4:	f104 0414 	add.w	r4, r4, #20
 80004b8:	f1c4 0220 	rsb	r2, r4, #32
 80004bc:	fa20 f004 	lsr.w	r0, r0, r4
 80004c0:	fa01 f302 	lsl.w	r3, r1, r2
 80004c4:	ea40 0003 	orr.w	r0, r0, r3
 80004c8:	fa21 f304 	lsr.w	r3, r1, r4
 80004cc:	ea45 0103 	orr.w	r1, r5, r3
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	f1c4 040c 	rsb	r4, r4, #12
 80004d6:	f1c4 0220 	rsb	r2, r4, #32
 80004da:	fa20 f002 	lsr.w	r0, r0, r2
 80004de:	fa01 f304 	lsl.w	r3, r1, r4
 80004e2:	ea40 0003 	orr.w	r0, r0, r3
 80004e6:	4629      	mov	r1, r5
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	fa21 f004 	lsr.w	r0, r1, r4
 80004ee:	4629      	mov	r1, r5
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	f094 0f00 	teq	r4, #0
 80004f6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004fa:	bf06      	itte	eq
 80004fc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000500:	3401      	addeq	r4, #1
 8000502:	3d01      	subne	r5, #1
 8000504:	e74e      	b.n	80003a4 <__adddf3+0x8c>
 8000506:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050a:	bf18      	it	ne
 800050c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000510:	d029      	beq.n	8000566 <__adddf3+0x24e>
 8000512:	ea94 0f05 	teq	r4, r5
 8000516:	bf08      	it	eq
 8000518:	ea90 0f02 	teqeq	r0, r2
 800051c:	d005      	beq.n	800052a <__adddf3+0x212>
 800051e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000522:	bf04      	itt	eq
 8000524:	4619      	moveq	r1, r3
 8000526:	4610      	moveq	r0, r2
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea91 0f03 	teq	r1, r3
 800052e:	bf1e      	ittt	ne
 8000530:	2100      	movne	r1, #0
 8000532:	2000      	movne	r0, #0
 8000534:	bd30      	popne	{r4, r5, pc}
 8000536:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800053a:	d105      	bne.n	8000548 <__adddf3+0x230>
 800053c:	0040      	lsls	r0, r0, #1
 800053e:	4149      	adcs	r1, r1
 8000540:	bf28      	it	cs
 8000542:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000546:	bd30      	pop	{r4, r5, pc}
 8000548:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800054c:	bf3c      	itt	cc
 800054e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000552:	bd30      	popcc	{r4, r5, pc}
 8000554:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000558:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800055c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000560:	f04f 0000 	mov.w	r0, #0
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056a:	bf1a      	itte	ne
 800056c:	4619      	movne	r1, r3
 800056e:	4610      	movne	r0, r2
 8000570:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000574:	bf1c      	itt	ne
 8000576:	460b      	movne	r3, r1
 8000578:	4602      	movne	r2, r0
 800057a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800057e:	bf06      	itte	eq
 8000580:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000584:	ea91 0f03 	teqeq	r1, r3
 8000588:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	bf00      	nop

08000590 <__aeabi_ui2d>:
 8000590:	f090 0f00 	teq	r0, #0
 8000594:	bf04      	itt	eq
 8000596:	2100      	moveq	r1, #0
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a4:	f04f 0500 	mov.w	r5, #0
 80005a8:	f04f 0100 	mov.w	r1, #0
 80005ac:	e750      	b.n	8000450 <__adddf3+0x138>
 80005ae:	bf00      	nop

080005b0 <__aeabi_i2d>:
 80005b0:	f090 0f00 	teq	r0, #0
 80005b4:	bf04      	itt	eq
 80005b6:	2100      	moveq	r1, #0
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005c8:	bf48      	it	mi
 80005ca:	4240      	negmi	r0, r0
 80005cc:	f04f 0100 	mov.w	r1, #0
 80005d0:	e73e      	b.n	8000450 <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_f2d>:
 80005d4:	0042      	lsls	r2, r0, #1
 80005d6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005da:	ea4f 0131 	mov.w	r1, r1, rrx
 80005de:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005e2:	bf1f      	itttt	ne
 80005e4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005ec:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005f0:	4770      	bxne	lr
 80005f2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005f6:	bf08      	it	eq
 80005f8:	4770      	bxeq	lr
 80005fa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005fe:	bf04      	itt	eq
 8000600:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000604:	4770      	bxeq	lr
 8000606:	b530      	push	{r4, r5, lr}
 8000608:	f44f 7460 	mov.w	r4, #896	; 0x380
 800060c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	e71c      	b.n	8000450 <__adddf3+0x138>
 8000616:	bf00      	nop

08000618 <__aeabi_ul2d>:
 8000618:	ea50 0201 	orrs.w	r2, r0, r1
 800061c:	bf08      	it	eq
 800061e:	4770      	bxeq	lr
 8000620:	b530      	push	{r4, r5, lr}
 8000622:	f04f 0500 	mov.w	r5, #0
 8000626:	e00a      	b.n	800063e <__aeabi_l2d+0x16>

08000628 <__aeabi_l2d>:
 8000628:	ea50 0201 	orrs.w	r2, r0, r1
 800062c:	bf08      	it	eq
 800062e:	4770      	bxeq	lr
 8000630:	b530      	push	{r4, r5, lr}
 8000632:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000636:	d502      	bpl.n	800063e <__aeabi_l2d+0x16>
 8000638:	4240      	negs	r0, r0
 800063a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800063e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000642:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000646:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800064a:	f43f aed8 	beq.w	80003fe <__adddf3+0xe6>
 800064e:	f04f 0203 	mov.w	r2, #3
 8000652:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000656:	bf18      	it	ne
 8000658:	3203      	addne	r2, #3
 800065a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800065e:	bf18      	it	ne
 8000660:	3203      	addne	r2, #3
 8000662:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000666:	f1c2 0320 	rsb	r3, r2, #32
 800066a:	fa00 fc03 	lsl.w	ip, r0, r3
 800066e:	fa20 f002 	lsr.w	r0, r0, r2
 8000672:	fa01 fe03 	lsl.w	lr, r1, r3
 8000676:	ea40 000e 	orr.w	r0, r0, lr
 800067a:	fa21 f102 	lsr.w	r1, r1, r2
 800067e:	4414      	add	r4, r2
 8000680:	e6bd      	b.n	80003fe <__adddf3+0xe6>
 8000682:	bf00      	nop

08000684 <__aeabi_dmul>:
 8000684:	b570      	push	{r4, r5, r6, lr}
 8000686:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800068a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800068e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000692:	bf1d      	ittte	ne
 8000694:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000698:	ea94 0f0c 	teqne	r4, ip
 800069c:	ea95 0f0c 	teqne	r5, ip
 80006a0:	f000 f8de 	bleq	8000860 <__aeabi_dmul+0x1dc>
 80006a4:	442c      	add	r4, r5
 80006a6:	ea81 0603 	eor.w	r6, r1, r3
 80006aa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006ae:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006b2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006b6:	bf18      	it	ne
 80006b8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006c4:	d038      	beq.n	8000738 <__aeabi_dmul+0xb4>
 80006c6:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ca:	f04f 0500 	mov.w	r5, #0
 80006ce:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006d2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006d6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006da:	f04f 0600 	mov.w	r6, #0
 80006de:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006e2:	f09c 0f00 	teq	ip, #0
 80006e6:	bf18      	it	ne
 80006e8:	f04e 0e01 	orrne.w	lr, lr, #1
 80006ec:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006f0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006f4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006f8:	d204      	bcs.n	8000704 <__aeabi_dmul+0x80>
 80006fa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006fe:	416d      	adcs	r5, r5
 8000700:	eb46 0606 	adc.w	r6, r6, r6
 8000704:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000708:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800070c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000710:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000714:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000718:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800071c:	bf88      	it	hi
 800071e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000722:	d81e      	bhi.n	8000762 <__aeabi_dmul+0xde>
 8000724:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000728:	bf08      	it	eq
 800072a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800072e:	f150 0000 	adcs.w	r0, r0, #0
 8000732:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000736:	bd70      	pop	{r4, r5, r6, pc}
 8000738:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800073c:	ea46 0101 	orr.w	r1, r6, r1
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	ea81 0103 	eor.w	r1, r1, r3
 8000748:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800074c:	bfc2      	ittt	gt
 800074e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000752:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000756:	bd70      	popgt	{r4, r5, r6, pc}
 8000758:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800075c:	f04f 0e00 	mov.w	lr, #0
 8000760:	3c01      	subs	r4, #1
 8000762:	f300 80ab 	bgt.w	80008bc <__aeabi_dmul+0x238>
 8000766:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800076a:	bfde      	ittt	le
 800076c:	2000      	movle	r0, #0
 800076e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000772:	bd70      	pople	{r4, r5, r6, pc}
 8000774:	f1c4 0400 	rsb	r4, r4, #0
 8000778:	3c20      	subs	r4, #32
 800077a:	da35      	bge.n	80007e8 <__aeabi_dmul+0x164>
 800077c:	340c      	adds	r4, #12
 800077e:	dc1b      	bgt.n	80007b8 <__aeabi_dmul+0x134>
 8000780:	f104 0414 	add.w	r4, r4, #20
 8000784:	f1c4 0520 	rsb	r5, r4, #32
 8000788:	fa00 f305 	lsl.w	r3, r0, r5
 800078c:	fa20 f004 	lsr.w	r0, r0, r4
 8000790:	fa01 f205 	lsl.w	r2, r1, r5
 8000794:	ea40 0002 	orr.w	r0, r0, r2
 8000798:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800079c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a4:	fa21 f604 	lsr.w	r6, r1, r4
 80007a8:	eb42 0106 	adc.w	r1, r2, r6
 80007ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b0:	bf08      	it	eq
 80007b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b6:	bd70      	pop	{r4, r5, r6, pc}
 80007b8:	f1c4 040c 	rsb	r4, r4, #12
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f304 	lsl.w	r3, r0, r4
 80007c4:	fa20 f005 	lsr.w	r0, r0, r5
 80007c8:	fa01 f204 	lsl.w	r2, r1, r4
 80007cc:	ea40 0002 	orr.w	r0, r0, r2
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007d8:	f141 0100 	adc.w	r1, r1, #0
 80007dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e0:	bf08      	it	eq
 80007e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e6:	bd70      	pop	{r4, r5, r6, pc}
 80007e8:	f1c4 0520 	rsb	r5, r4, #32
 80007ec:	fa00 f205 	lsl.w	r2, r0, r5
 80007f0:	ea4e 0e02 	orr.w	lr, lr, r2
 80007f4:	fa20 f304 	lsr.w	r3, r0, r4
 80007f8:	fa01 f205 	lsl.w	r2, r1, r5
 80007fc:	ea43 0302 	orr.w	r3, r3, r2
 8000800:	fa21 f004 	lsr.w	r0, r1, r4
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	fa21 f204 	lsr.w	r2, r1, r4
 800080c:	ea20 0002 	bic.w	r0, r0, r2
 8000810:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000814:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000818:	bf08      	it	eq
 800081a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081e:	bd70      	pop	{r4, r5, r6, pc}
 8000820:	f094 0f00 	teq	r4, #0
 8000824:	d10f      	bne.n	8000846 <__aeabi_dmul+0x1c2>
 8000826:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800082a:	0040      	lsls	r0, r0, #1
 800082c:	eb41 0101 	adc.w	r1, r1, r1
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf08      	it	eq
 8000836:	3c01      	subeq	r4, #1
 8000838:	d0f7      	beq.n	800082a <__aeabi_dmul+0x1a6>
 800083a:	ea41 0106 	orr.w	r1, r1, r6
 800083e:	f095 0f00 	teq	r5, #0
 8000842:	bf18      	it	ne
 8000844:	4770      	bxne	lr
 8000846:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800084a:	0052      	lsls	r2, r2, #1
 800084c:	eb43 0303 	adc.w	r3, r3, r3
 8000850:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000854:	bf08      	it	eq
 8000856:	3d01      	subeq	r5, #1
 8000858:	d0f7      	beq.n	800084a <__aeabi_dmul+0x1c6>
 800085a:	ea43 0306 	orr.w	r3, r3, r6
 800085e:	4770      	bx	lr
 8000860:	ea94 0f0c 	teq	r4, ip
 8000864:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000868:	bf18      	it	ne
 800086a:	ea95 0f0c 	teqne	r5, ip
 800086e:	d00c      	beq.n	800088a <__aeabi_dmul+0x206>
 8000870:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000874:	bf18      	it	ne
 8000876:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087a:	d1d1      	bne.n	8000820 <__aeabi_dmul+0x19c>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800088e:	bf06      	itte	eq
 8000890:	4610      	moveq	r0, r2
 8000892:	4619      	moveq	r1, r3
 8000894:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000898:	d019      	beq.n	80008ce <__aeabi_dmul+0x24a>
 800089a:	ea94 0f0c 	teq	r4, ip
 800089e:	d102      	bne.n	80008a6 <__aeabi_dmul+0x222>
 80008a0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008a4:	d113      	bne.n	80008ce <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	d105      	bne.n	80008b8 <__aeabi_dmul+0x234>
 80008ac:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008b0:	bf1c      	itt	ne
 80008b2:	4610      	movne	r0, r2
 80008b4:	4619      	movne	r1, r3
 80008b6:	d10a      	bne.n	80008ce <__aeabi_dmul+0x24a>
 80008b8:	ea81 0103 	eor.w	r1, r1, r3
 80008bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008c0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008c8:	f04f 0000 	mov.w	r0, #0
 80008cc:	bd70      	pop	{r4, r5, r6, pc}
 80008ce:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008d2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008d6:	bd70      	pop	{r4, r5, r6, pc}

080008d8 <__aeabi_ddiv>:
 80008d8:	b570      	push	{r4, r5, r6, lr}
 80008da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008e6:	bf1d      	ittte	ne
 80008e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008ec:	ea94 0f0c 	teqne	r4, ip
 80008f0:	ea95 0f0c 	teqne	r5, ip
 80008f4:	f000 f8a7 	bleq	8000a46 <__aeabi_ddiv+0x16e>
 80008f8:	eba4 0405 	sub.w	r4, r4, r5
 80008fc:	ea81 0e03 	eor.w	lr, r1, r3
 8000900:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000904:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000908:	f000 8088 	beq.w	8000a1c <__aeabi_ddiv+0x144>
 800090c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000910:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000914:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000918:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800091c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000920:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000924:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000928:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800092c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000930:	429d      	cmp	r5, r3
 8000932:	bf08      	it	eq
 8000934:	4296      	cmpeq	r6, r2
 8000936:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800093a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800093e:	d202      	bcs.n	8000946 <__aeabi_ddiv+0x6e>
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	1ab6      	subs	r6, r6, r2
 8000948:	eb65 0503 	sbc.w	r5, r5, r3
 800094c:	085b      	lsrs	r3, r3, #1
 800094e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000952:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000956:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800095a:	ebb6 0e02 	subs.w	lr, r6, r2
 800095e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000962:	bf22      	ittt	cs
 8000964:	1ab6      	subcs	r6, r6, r2
 8000966:	4675      	movcs	r5, lr
 8000968:	ea40 000c 	orrcs.w	r0, r0, ip
 800096c:	085b      	lsrs	r3, r3, #1
 800096e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000972:	ebb6 0e02 	subs.w	lr, r6, r2
 8000976:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097a:	bf22      	ittt	cs
 800097c:	1ab6      	subcs	r6, r6, r2
 800097e:	4675      	movcs	r5, lr
 8000980:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000984:	085b      	lsrs	r3, r3, #1
 8000986:	ea4f 0232 	mov.w	r2, r2, rrx
 800098a:	ebb6 0e02 	subs.w	lr, r6, r2
 800098e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000992:	bf22      	ittt	cs
 8000994:	1ab6      	subcs	r6, r6, r2
 8000996:	4675      	movcs	r5, lr
 8000998:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800099c:	085b      	lsrs	r3, r3, #1
 800099e:	ea4f 0232 	mov.w	r2, r2, rrx
 80009a2:	ebb6 0e02 	subs.w	lr, r6, r2
 80009a6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009aa:	bf22      	ittt	cs
 80009ac:	1ab6      	subcs	r6, r6, r2
 80009ae:	4675      	movcs	r5, lr
 80009b0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009b4:	ea55 0e06 	orrs.w	lr, r5, r6
 80009b8:	d018      	beq.n	80009ec <__aeabi_ddiv+0x114>
 80009ba:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009be:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009c2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009c6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ca:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009ce:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009d2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009d6:	d1c0      	bne.n	800095a <__aeabi_ddiv+0x82>
 80009d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009dc:	d10b      	bne.n	80009f6 <__aeabi_ddiv+0x11e>
 80009de:	ea41 0100 	orr.w	r1, r1, r0
 80009e2:	f04f 0000 	mov.w	r0, #0
 80009e6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ea:	e7b6      	b.n	800095a <__aeabi_ddiv+0x82>
 80009ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009f0:	bf04      	itt	eq
 80009f2:	4301      	orreq	r1, r0
 80009f4:	2000      	moveq	r0, #0
 80009f6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009fa:	bf88      	it	hi
 80009fc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a00:	f63f aeaf 	bhi.w	8000762 <__aeabi_dmul+0xde>
 8000a04:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a08:	bf04      	itt	eq
 8000a0a:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a0e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a12:	f150 0000 	adcs.w	r0, r0, #0
 8000a16:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a1a:	bd70      	pop	{r4, r5, r6, pc}
 8000a1c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a20:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a24:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a28:	bfc2      	ittt	gt
 8000a2a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a2e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a32:	bd70      	popgt	{r4, r5, r6, pc}
 8000a34:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a38:	f04f 0e00 	mov.w	lr, #0
 8000a3c:	3c01      	subs	r4, #1
 8000a3e:	e690      	b.n	8000762 <__aeabi_dmul+0xde>
 8000a40:	ea45 0e06 	orr.w	lr, r5, r6
 8000a44:	e68d      	b.n	8000762 <__aeabi_dmul+0xde>
 8000a46:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a4a:	ea94 0f0c 	teq	r4, ip
 8000a4e:	bf08      	it	eq
 8000a50:	ea95 0f0c 	teqeq	r5, ip
 8000a54:	f43f af3b 	beq.w	80008ce <__aeabi_dmul+0x24a>
 8000a58:	ea94 0f0c 	teq	r4, ip
 8000a5c:	d10a      	bne.n	8000a74 <__aeabi_ddiv+0x19c>
 8000a5e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a62:	f47f af34 	bne.w	80008ce <__aeabi_dmul+0x24a>
 8000a66:	ea95 0f0c 	teq	r5, ip
 8000a6a:	f47f af25 	bne.w	80008b8 <__aeabi_dmul+0x234>
 8000a6e:	4610      	mov	r0, r2
 8000a70:	4619      	mov	r1, r3
 8000a72:	e72c      	b.n	80008ce <__aeabi_dmul+0x24a>
 8000a74:	ea95 0f0c 	teq	r5, ip
 8000a78:	d106      	bne.n	8000a88 <__aeabi_ddiv+0x1b0>
 8000a7a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a7e:	f43f aefd 	beq.w	800087c <__aeabi_dmul+0x1f8>
 8000a82:	4610      	mov	r0, r2
 8000a84:	4619      	mov	r1, r3
 8000a86:	e722      	b.n	80008ce <__aeabi_dmul+0x24a>
 8000a88:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a8c:	bf18      	it	ne
 8000a8e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a92:	f47f aec5 	bne.w	8000820 <__aeabi_dmul+0x19c>
 8000a96:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a9a:	f47f af0d 	bne.w	80008b8 <__aeabi_dmul+0x234>
 8000a9e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000aa2:	f47f aeeb 	bne.w	800087c <__aeabi_dmul+0x1f8>
 8000aa6:	e712      	b.n	80008ce <__aeabi_dmul+0x24a>

08000aa8 <__aeabi_frsub>:
 8000aa8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000aac:	e002      	b.n	8000ab4 <__addsf3>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_fsub>:
 8000ab0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ab4 <__addsf3>:
 8000ab4:	0042      	lsls	r2, r0, #1
 8000ab6:	bf1f      	itttt	ne
 8000ab8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000abc:	ea92 0f03 	teqne	r2, r3
 8000ac0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ac4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ac8:	d06a      	beq.n	8000ba0 <__addsf3+0xec>
 8000aca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ace:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ad2:	bfc1      	itttt	gt
 8000ad4:	18d2      	addgt	r2, r2, r3
 8000ad6:	4041      	eorgt	r1, r0
 8000ad8:	4048      	eorgt	r0, r1
 8000ada:	4041      	eorgt	r1, r0
 8000adc:	bfb8      	it	lt
 8000ade:	425b      	neglt	r3, r3
 8000ae0:	2b19      	cmp	r3, #25
 8000ae2:	bf88      	it	hi
 8000ae4:	4770      	bxhi	lr
 8000ae6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000afa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000afe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b02:	bf18      	it	ne
 8000b04:	4249      	negne	r1, r1
 8000b06:	ea92 0f03 	teq	r2, r3
 8000b0a:	d03f      	beq.n	8000b8c <__addsf3+0xd8>
 8000b0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b10:	fa41 fc03 	asr.w	ip, r1, r3
 8000b14:	eb10 000c 	adds.w	r0, r0, ip
 8000b18:	f1c3 0320 	rsb	r3, r3, #32
 8000b1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b20:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b24:	d502      	bpl.n	8000b2c <__addsf3+0x78>
 8000b26:	4249      	negs	r1, r1
 8000b28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b2c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b30:	d313      	bcc.n	8000b5a <__addsf3+0xa6>
 8000b32:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b36:	d306      	bcc.n	8000b46 <__addsf3+0x92>
 8000b38:	0840      	lsrs	r0, r0, #1
 8000b3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b3e:	f102 0201 	add.w	r2, r2, #1
 8000b42:	2afe      	cmp	r2, #254	; 0xfe
 8000b44:	d251      	bcs.n	8000bea <__addsf3+0x136>
 8000b46:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b4e:	bf08      	it	eq
 8000b50:	f020 0001 	biceq.w	r0, r0, #1
 8000b54:	ea40 0003 	orr.w	r0, r0, r3
 8000b58:	4770      	bx	lr
 8000b5a:	0049      	lsls	r1, r1, #1
 8000b5c:	eb40 0000 	adc.w	r0, r0, r0
 8000b60:	3a01      	subs	r2, #1
 8000b62:	bf28      	it	cs
 8000b64:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b68:	d2ed      	bcs.n	8000b46 <__addsf3+0x92>
 8000b6a:	fab0 fc80 	clz	ip, r0
 8000b6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b72:	ebb2 020c 	subs.w	r2, r2, ip
 8000b76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b7a:	bfaa      	itet	ge
 8000b7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b80:	4252      	neglt	r2, r2
 8000b82:	4318      	orrge	r0, r3
 8000b84:	bfbc      	itt	lt
 8000b86:	40d0      	lsrlt	r0, r2
 8000b88:	4318      	orrlt	r0, r3
 8000b8a:	4770      	bx	lr
 8000b8c:	f092 0f00 	teq	r2, #0
 8000b90:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b94:	bf06      	itte	eq
 8000b96:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b9a:	3201      	addeq	r2, #1
 8000b9c:	3b01      	subne	r3, #1
 8000b9e:	e7b5      	b.n	8000b0c <__addsf3+0x58>
 8000ba0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ba4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ba8:	bf18      	it	ne
 8000baa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bae:	d021      	beq.n	8000bf4 <__addsf3+0x140>
 8000bb0:	ea92 0f03 	teq	r2, r3
 8000bb4:	d004      	beq.n	8000bc0 <__addsf3+0x10c>
 8000bb6:	f092 0f00 	teq	r2, #0
 8000bba:	bf08      	it	eq
 8000bbc:	4608      	moveq	r0, r1
 8000bbe:	4770      	bx	lr
 8000bc0:	ea90 0f01 	teq	r0, r1
 8000bc4:	bf1c      	itt	ne
 8000bc6:	2000      	movne	r0, #0
 8000bc8:	4770      	bxne	lr
 8000bca:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bce:	d104      	bne.n	8000bda <__addsf3+0x126>
 8000bd0:	0040      	lsls	r0, r0, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bd8:	4770      	bx	lr
 8000bda:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bde:	bf3c      	itt	cc
 8000be0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000be4:	4770      	bxcc	lr
 8000be6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bea:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf2:	4770      	bx	lr
 8000bf4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bf8:	bf16      	itet	ne
 8000bfa:	4608      	movne	r0, r1
 8000bfc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c00:	4601      	movne	r1, r0
 8000c02:	0242      	lsls	r2, r0, #9
 8000c04:	bf06      	itte	eq
 8000c06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c0a:	ea90 0f01 	teqeq	r0, r1
 8000c0e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c12:	4770      	bx	lr

08000c14 <__aeabi_ui2f>:
 8000c14:	f04f 0300 	mov.w	r3, #0
 8000c18:	e004      	b.n	8000c24 <__aeabi_i2f+0x8>
 8000c1a:	bf00      	nop

08000c1c <__aeabi_i2f>:
 8000c1c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c20:	bf48      	it	mi
 8000c22:	4240      	negmi	r0, r0
 8000c24:	ea5f 0c00 	movs.w	ip, r0
 8000c28:	bf08      	it	eq
 8000c2a:	4770      	bxeq	lr
 8000c2c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c30:	4601      	mov	r1, r0
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	e01c      	b.n	8000c72 <__aeabi_l2f+0x2a>

08000c38 <__aeabi_ul2f>:
 8000c38:	ea50 0201 	orrs.w	r2, r0, r1
 8000c3c:	bf08      	it	eq
 8000c3e:	4770      	bxeq	lr
 8000c40:	f04f 0300 	mov.w	r3, #0
 8000c44:	e00a      	b.n	8000c5c <__aeabi_l2f+0x14>
 8000c46:	bf00      	nop

08000c48 <__aeabi_l2f>:
 8000c48:	ea50 0201 	orrs.w	r2, r0, r1
 8000c4c:	bf08      	it	eq
 8000c4e:	4770      	bxeq	lr
 8000c50:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c54:	d502      	bpl.n	8000c5c <__aeabi_l2f+0x14>
 8000c56:	4240      	negs	r0, r0
 8000c58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c5c:	ea5f 0c01 	movs.w	ip, r1
 8000c60:	bf02      	ittt	eq
 8000c62:	4684      	moveq	ip, r0
 8000c64:	4601      	moveq	r1, r0
 8000c66:	2000      	moveq	r0, #0
 8000c68:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c6c:	bf08      	it	eq
 8000c6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c72:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c76:	fabc f28c 	clz	r2, ip
 8000c7a:	3a08      	subs	r2, #8
 8000c7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c80:	db10      	blt.n	8000ca4 <__aeabi_l2f+0x5c>
 8000c82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c86:	4463      	add	r3, ip
 8000c88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c94:	fa20 f202 	lsr.w	r2, r0, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ca2:	4770      	bx	lr
 8000ca4:	f102 0220 	add.w	r2, r2, #32
 8000ca8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cb4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_fmul>:
 8000cc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ccc:	bf1e      	ittt	ne
 8000cce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cd2:	ea92 0f0c 	teqne	r2, ip
 8000cd6:	ea93 0f0c 	teqne	r3, ip
 8000cda:	d06f      	beq.n	8000dbc <__aeabi_fmul+0xf8>
 8000cdc:	441a      	add	r2, r3
 8000cde:	ea80 0c01 	eor.w	ip, r0, r1
 8000ce2:	0240      	lsls	r0, r0, #9
 8000ce4:	bf18      	it	ne
 8000ce6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cea:	d01e      	beq.n	8000d2a <__aeabi_fmul+0x66>
 8000cec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cf0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cf4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cf8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cfc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d00:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d04:	bf3e      	ittt	cc
 8000d06:	0049      	lslcc	r1, r1, #1
 8000d08:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d0c:	005b      	lslcc	r3, r3, #1
 8000d0e:	ea40 0001 	orr.w	r0, r0, r1
 8000d12:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d16:	2afd      	cmp	r2, #253	; 0xfd
 8000d18:	d81d      	bhi.n	8000d56 <__aeabi_fmul+0x92>
 8000d1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d22:	bf08      	it	eq
 8000d24:	f020 0001 	biceq.w	r0, r0, #1
 8000d28:	4770      	bx	lr
 8000d2a:	f090 0f00 	teq	r0, #0
 8000d2e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d32:	bf08      	it	eq
 8000d34:	0249      	lsleq	r1, r1, #9
 8000d36:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d3a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d3e:	3a7f      	subs	r2, #127	; 0x7f
 8000d40:	bfc2      	ittt	gt
 8000d42:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d46:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d4a:	4770      	bxgt	lr
 8000d4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d50:	f04f 0300 	mov.w	r3, #0
 8000d54:	3a01      	subs	r2, #1
 8000d56:	dc5d      	bgt.n	8000e14 <__aeabi_fmul+0x150>
 8000d58:	f112 0f19 	cmn.w	r2, #25
 8000d5c:	bfdc      	itt	le
 8000d5e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d62:	4770      	bxle	lr
 8000d64:	f1c2 0200 	rsb	r2, r2, #0
 8000d68:	0041      	lsls	r1, r0, #1
 8000d6a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d6e:	f1c2 0220 	rsb	r2, r2, #32
 8000d72:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d76:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d7a:	f140 0000 	adc.w	r0, r0, #0
 8000d7e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d82:	bf08      	it	eq
 8000d84:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d88:	4770      	bx	lr
 8000d8a:	f092 0f00 	teq	r2, #0
 8000d8e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d92:	bf02      	ittt	eq
 8000d94:	0040      	lsleq	r0, r0, #1
 8000d96:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d9a:	3a01      	subeq	r2, #1
 8000d9c:	d0f9      	beq.n	8000d92 <__aeabi_fmul+0xce>
 8000d9e:	ea40 000c 	orr.w	r0, r0, ip
 8000da2:	f093 0f00 	teq	r3, #0
 8000da6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000daa:	bf02      	ittt	eq
 8000dac:	0049      	lsleq	r1, r1, #1
 8000dae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000db2:	3b01      	subeq	r3, #1
 8000db4:	d0f9      	beq.n	8000daa <__aeabi_fmul+0xe6>
 8000db6:	ea41 010c 	orr.w	r1, r1, ip
 8000dba:	e78f      	b.n	8000cdc <__aeabi_fmul+0x18>
 8000dbc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dc0:	ea92 0f0c 	teq	r2, ip
 8000dc4:	bf18      	it	ne
 8000dc6:	ea93 0f0c 	teqne	r3, ip
 8000dca:	d00a      	beq.n	8000de2 <__aeabi_fmul+0x11e>
 8000dcc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dd0:	bf18      	it	ne
 8000dd2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dd6:	d1d8      	bne.n	8000d8a <__aeabi_fmul+0xc6>
 8000dd8:	ea80 0001 	eor.w	r0, r0, r1
 8000ddc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000de0:	4770      	bx	lr
 8000de2:	f090 0f00 	teq	r0, #0
 8000de6:	bf17      	itett	ne
 8000de8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dec:	4608      	moveq	r0, r1
 8000dee:	f091 0f00 	teqne	r1, #0
 8000df2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000df6:	d014      	beq.n	8000e22 <__aeabi_fmul+0x15e>
 8000df8:	ea92 0f0c 	teq	r2, ip
 8000dfc:	d101      	bne.n	8000e02 <__aeabi_fmul+0x13e>
 8000dfe:	0242      	lsls	r2, r0, #9
 8000e00:	d10f      	bne.n	8000e22 <__aeabi_fmul+0x15e>
 8000e02:	ea93 0f0c 	teq	r3, ip
 8000e06:	d103      	bne.n	8000e10 <__aeabi_fmul+0x14c>
 8000e08:	024b      	lsls	r3, r1, #9
 8000e0a:	bf18      	it	ne
 8000e0c:	4608      	movne	r0, r1
 8000e0e:	d108      	bne.n	8000e22 <__aeabi_fmul+0x15e>
 8000e10:	ea80 0001 	eor.w	r0, r0, r1
 8000e14:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e20:	4770      	bx	lr
 8000e22:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e26:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e2a:	4770      	bx	lr

08000e2c <__aeabi_fdiv>:
 8000e2c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e30:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e34:	bf1e      	ittt	ne
 8000e36:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e3a:	ea92 0f0c 	teqne	r2, ip
 8000e3e:	ea93 0f0c 	teqne	r3, ip
 8000e42:	d069      	beq.n	8000f18 <__aeabi_fdiv+0xec>
 8000e44:	eba2 0203 	sub.w	r2, r2, r3
 8000e48:	ea80 0c01 	eor.w	ip, r0, r1
 8000e4c:	0249      	lsls	r1, r1, #9
 8000e4e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e52:	d037      	beq.n	8000ec4 <__aeabi_fdiv+0x98>
 8000e54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e58:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e5c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e60:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e64:	428b      	cmp	r3, r1
 8000e66:	bf38      	it	cc
 8000e68:	005b      	lslcc	r3, r3, #1
 8000e6a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e6e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e72:	428b      	cmp	r3, r1
 8000e74:	bf24      	itt	cs
 8000e76:	1a5b      	subcs	r3, r3, r1
 8000e78:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e7c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e80:	bf24      	itt	cs
 8000e82:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e86:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e8a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e8e:	bf24      	itt	cs
 8000e90:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e94:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e98:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e9c:	bf24      	itt	cs
 8000e9e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ea2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ea6:	011b      	lsls	r3, r3, #4
 8000ea8:	bf18      	it	ne
 8000eaa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000eae:	d1e0      	bne.n	8000e72 <__aeabi_fdiv+0x46>
 8000eb0:	2afd      	cmp	r2, #253	; 0xfd
 8000eb2:	f63f af50 	bhi.w	8000d56 <__aeabi_fmul+0x92>
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ebc:	bf08      	it	eq
 8000ebe:	f020 0001 	biceq.w	r0, r0, #1
 8000ec2:	4770      	bx	lr
 8000ec4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ec8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ecc:	327f      	adds	r2, #127	; 0x7f
 8000ece:	bfc2      	ittt	gt
 8000ed0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ed4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ed8:	4770      	bxgt	lr
 8000eda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ede:	f04f 0300 	mov.w	r3, #0
 8000ee2:	3a01      	subs	r2, #1
 8000ee4:	e737      	b.n	8000d56 <__aeabi_fmul+0x92>
 8000ee6:	f092 0f00 	teq	r2, #0
 8000eea:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eee:	bf02      	ittt	eq
 8000ef0:	0040      	lsleq	r0, r0, #1
 8000ef2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ef6:	3a01      	subeq	r2, #1
 8000ef8:	d0f9      	beq.n	8000eee <__aeabi_fdiv+0xc2>
 8000efa:	ea40 000c 	orr.w	r0, r0, ip
 8000efe:	f093 0f00 	teq	r3, #0
 8000f02:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f06:	bf02      	ittt	eq
 8000f08:	0049      	lsleq	r1, r1, #1
 8000f0a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f0e:	3b01      	subeq	r3, #1
 8000f10:	d0f9      	beq.n	8000f06 <__aeabi_fdiv+0xda>
 8000f12:	ea41 010c 	orr.w	r1, r1, ip
 8000f16:	e795      	b.n	8000e44 <__aeabi_fdiv+0x18>
 8000f18:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f1c:	ea92 0f0c 	teq	r2, ip
 8000f20:	d108      	bne.n	8000f34 <__aeabi_fdiv+0x108>
 8000f22:	0242      	lsls	r2, r0, #9
 8000f24:	f47f af7d 	bne.w	8000e22 <__aeabi_fmul+0x15e>
 8000f28:	ea93 0f0c 	teq	r3, ip
 8000f2c:	f47f af70 	bne.w	8000e10 <__aeabi_fmul+0x14c>
 8000f30:	4608      	mov	r0, r1
 8000f32:	e776      	b.n	8000e22 <__aeabi_fmul+0x15e>
 8000f34:	ea93 0f0c 	teq	r3, ip
 8000f38:	d104      	bne.n	8000f44 <__aeabi_fdiv+0x118>
 8000f3a:	024b      	lsls	r3, r1, #9
 8000f3c:	f43f af4c 	beq.w	8000dd8 <__aeabi_fmul+0x114>
 8000f40:	4608      	mov	r0, r1
 8000f42:	e76e      	b.n	8000e22 <__aeabi_fmul+0x15e>
 8000f44:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f48:	bf18      	it	ne
 8000f4a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f4e:	d1ca      	bne.n	8000ee6 <__aeabi_fdiv+0xba>
 8000f50:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f54:	f47f af5c 	bne.w	8000e10 <__aeabi_fmul+0x14c>
 8000f58:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f5c:	f47f af3c 	bne.w	8000dd8 <__aeabi_fmul+0x114>
 8000f60:	e75f      	b.n	8000e22 <__aeabi_fmul+0x15e>
 8000f62:	bf00      	nop

08000f64 <__gesf2>:
 8000f64:	f04f 3cff 	mov.w	ip, #4294967295
 8000f68:	e006      	b.n	8000f78 <__cmpsf2+0x4>
 8000f6a:	bf00      	nop

08000f6c <__lesf2>:
 8000f6c:	f04f 0c01 	mov.w	ip, #1
 8000f70:	e002      	b.n	8000f78 <__cmpsf2+0x4>
 8000f72:	bf00      	nop

08000f74 <__cmpsf2>:
 8000f74:	f04f 0c01 	mov.w	ip, #1
 8000f78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f7c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f88:	bf18      	it	ne
 8000f8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f8e:	d011      	beq.n	8000fb4 <__cmpsf2+0x40>
 8000f90:	b001      	add	sp, #4
 8000f92:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f96:	bf18      	it	ne
 8000f98:	ea90 0f01 	teqne	r0, r1
 8000f9c:	bf58      	it	pl
 8000f9e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fa2:	bf88      	it	hi
 8000fa4:	17c8      	asrhi	r0, r1, #31
 8000fa6:	bf38      	it	cc
 8000fa8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fac:	bf18      	it	ne
 8000fae:	f040 0001 	orrne.w	r0, r0, #1
 8000fb2:	4770      	bx	lr
 8000fb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fb8:	d102      	bne.n	8000fc0 <__cmpsf2+0x4c>
 8000fba:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fbe:	d105      	bne.n	8000fcc <__cmpsf2+0x58>
 8000fc0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fc4:	d1e4      	bne.n	8000f90 <__cmpsf2+0x1c>
 8000fc6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fca:	d0e1      	beq.n	8000f90 <__cmpsf2+0x1c>
 8000fcc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <__aeabi_cfrcmple>:
 8000fd4:	4684      	mov	ip, r0
 8000fd6:	4608      	mov	r0, r1
 8000fd8:	4661      	mov	r1, ip
 8000fda:	e7ff      	b.n	8000fdc <__aeabi_cfcmpeq>

08000fdc <__aeabi_cfcmpeq>:
 8000fdc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fde:	f7ff ffc9 	bl	8000f74 <__cmpsf2>
 8000fe2:	2800      	cmp	r0, #0
 8000fe4:	bf48      	it	mi
 8000fe6:	f110 0f00 	cmnmi.w	r0, #0
 8000fea:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fec <__aeabi_fcmpeq>:
 8000fec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff0:	f7ff fff4 	bl	8000fdc <__aeabi_cfcmpeq>
 8000ff4:	bf0c      	ite	eq
 8000ff6:	2001      	moveq	r0, #1
 8000ff8:	2000      	movne	r0, #0
 8000ffa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ffe:	bf00      	nop

08001000 <__aeabi_fcmplt>:
 8001000:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001004:	f7ff ffea 	bl	8000fdc <__aeabi_cfcmpeq>
 8001008:	bf34      	ite	cc
 800100a:	2001      	movcc	r0, #1
 800100c:	2000      	movcs	r0, #0
 800100e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001012:	bf00      	nop

08001014 <__aeabi_fcmple>:
 8001014:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001018:	f7ff ffe0 	bl	8000fdc <__aeabi_cfcmpeq>
 800101c:	bf94      	ite	ls
 800101e:	2001      	movls	r0, #1
 8001020:	2000      	movhi	r0, #0
 8001022:	f85d fb08 	ldr.w	pc, [sp], #8
 8001026:	bf00      	nop

08001028 <__aeabi_fcmpge>:
 8001028:	f84d ed08 	str.w	lr, [sp, #-8]!
 800102c:	f7ff ffd2 	bl	8000fd4 <__aeabi_cfrcmple>
 8001030:	bf94      	ite	ls
 8001032:	2001      	movls	r0, #1
 8001034:	2000      	movhi	r0, #0
 8001036:	f85d fb08 	ldr.w	pc, [sp], #8
 800103a:	bf00      	nop

0800103c <__aeabi_fcmpgt>:
 800103c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001040:	f7ff ffc8 	bl	8000fd4 <__aeabi_cfrcmple>
 8001044:	bf34      	ite	cc
 8001046:	2001      	movcc	r0, #1
 8001048:	2000      	movcs	r0, #0
 800104a:	f85d fb08 	ldr.w	pc, [sp], #8
 800104e:	bf00      	nop

08001050 <__aeabi_fcmpun>:
 8001050:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001054:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001058:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800105c:	d102      	bne.n	8001064 <__aeabi_fcmpun+0x14>
 800105e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001062:	d108      	bne.n	8001076 <__aeabi_fcmpun+0x26>
 8001064:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001068:	d102      	bne.n	8001070 <__aeabi_fcmpun+0x20>
 800106a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800106e:	d102      	bne.n	8001076 <__aeabi_fcmpun+0x26>
 8001070:	f04f 0000 	mov.w	r0, #0
 8001074:	4770      	bx	lr
 8001076:	f04f 0001 	mov.w	r0, #1
 800107a:	4770      	bx	lr

0800107c <__aeabi_f2iz>:
 800107c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001080:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001084:	d30f      	bcc.n	80010a6 <__aeabi_f2iz+0x2a>
 8001086:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800108a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800108e:	d90d      	bls.n	80010ac <__aeabi_f2iz+0x30>
 8001090:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001094:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001098:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800109c:	fa23 f002 	lsr.w	r0, r3, r2
 80010a0:	bf18      	it	ne
 80010a2:	4240      	negne	r0, r0
 80010a4:	4770      	bx	lr
 80010a6:	f04f 0000 	mov.w	r0, #0
 80010aa:	4770      	bx	lr
 80010ac:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010b0:	d101      	bne.n	80010b6 <__aeabi_f2iz+0x3a>
 80010b2:	0242      	lsls	r2, r0, #9
 80010b4:	d105      	bne.n	80010c2 <__aeabi_f2iz+0x46>
 80010b6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010ba:	bf08      	it	eq
 80010bc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010c0:	4770      	bx	lr
 80010c2:	f04f 0000 	mov.w	r0, #0
 80010c6:	4770      	bx	lr

080010c8 <__aeabi_d2iz>:
 80010c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80010cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80010d0:	d215      	bcs.n	80010fe <__aeabi_d2iz+0x36>
 80010d2:	d511      	bpl.n	80010f8 <__aeabi_d2iz+0x30>
 80010d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80010d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80010dc:	d912      	bls.n	8001104 <__aeabi_d2iz+0x3c>
 80010de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80010e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80010ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80010ee:	fa23 f002 	lsr.w	r0, r3, r2
 80010f2:	bf18      	it	ne
 80010f4:	4240      	negne	r0, r0
 80010f6:	4770      	bx	lr
 80010f8:	f04f 0000 	mov.w	r0, #0
 80010fc:	4770      	bx	lr
 80010fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8001102:	d105      	bne.n	8001110 <__aeabi_d2iz+0x48>
 8001104:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8001108:	bf08      	it	eq
 800110a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800110e:	4770      	bx	lr
 8001110:	f04f 0000 	mov.w	r0, #0
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop

08001118 <__aeabi_d2f>:
 8001118:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800111c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8001120:	bf24      	itt	cs
 8001122:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8001126:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800112a:	d90d      	bls.n	8001148 <__aeabi_d2f+0x30>
 800112c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001130:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8001134:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8001138:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800113c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8001140:	bf08      	it	eq
 8001142:	f020 0001 	biceq.w	r0, r0, #1
 8001146:	4770      	bx	lr
 8001148:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800114c:	d121      	bne.n	8001192 <__aeabi_d2f+0x7a>
 800114e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8001152:	bfbc      	itt	lt
 8001154:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8001158:	4770      	bxlt	lr
 800115a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800115e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8001162:	f1c2 0218 	rsb	r2, r2, #24
 8001166:	f1c2 0c20 	rsb	ip, r2, #32
 800116a:	fa10 f30c 	lsls.w	r3, r0, ip
 800116e:	fa20 f002 	lsr.w	r0, r0, r2
 8001172:	bf18      	it	ne
 8001174:	f040 0001 	orrne.w	r0, r0, #1
 8001178:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800117c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8001180:	fa03 fc0c 	lsl.w	ip, r3, ip
 8001184:	ea40 000c 	orr.w	r0, r0, ip
 8001188:	fa23 f302 	lsr.w	r3, r3, r2
 800118c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001190:	e7cc      	b.n	800112c <__aeabi_d2f+0x14>
 8001192:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8001196:	d107      	bne.n	80011a8 <__aeabi_d2f+0x90>
 8001198:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800119c:	bf1e      	ittt	ne
 800119e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80011a2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80011a6:	4770      	bxne	lr
 80011a8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80011ac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80011b0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop

080011b8 <memcpy>:
 80011b8:	4684      	mov	ip, r0
 80011ba:	ea41 0300 	orr.w	r3, r1, r0
 80011be:	f013 0303 	ands.w	r3, r3, #3
 80011c2:	d16d      	bne.n	80012a0 <memcpy+0xe8>
 80011c4:	3a40      	subs	r2, #64	; 0x40
 80011c6:	d341      	bcc.n	800124c <memcpy+0x94>
 80011c8:	f851 3b04 	ldr.w	r3, [r1], #4
 80011cc:	f840 3b04 	str.w	r3, [r0], #4
 80011d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80011d4:	f840 3b04 	str.w	r3, [r0], #4
 80011d8:	f851 3b04 	ldr.w	r3, [r1], #4
 80011dc:	f840 3b04 	str.w	r3, [r0], #4
 80011e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80011e4:	f840 3b04 	str.w	r3, [r0], #4
 80011e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80011ec:	f840 3b04 	str.w	r3, [r0], #4
 80011f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80011f4:	f840 3b04 	str.w	r3, [r0], #4
 80011f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80011fc:	f840 3b04 	str.w	r3, [r0], #4
 8001200:	f851 3b04 	ldr.w	r3, [r1], #4
 8001204:	f840 3b04 	str.w	r3, [r0], #4
 8001208:	f851 3b04 	ldr.w	r3, [r1], #4
 800120c:	f840 3b04 	str.w	r3, [r0], #4
 8001210:	f851 3b04 	ldr.w	r3, [r1], #4
 8001214:	f840 3b04 	str.w	r3, [r0], #4
 8001218:	f851 3b04 	ldr.w	r3, [r1], #4
 800121c:	f840 3b04 	str.w	r3, [r0], #4
 8001220:	f851 3b04 	ldr.w	r3, [r1], #4
 8001224:	f840 3b04 	str.w	r3, [r0], #4
 8001228:	f851 3b04 	ldr.w	r3, [r1], #4
 800122c:	f840 3b04 	str.w	r3, [r0], #4
 8001230:	f851 3b04 	ldr.w	r3, [r1], #4
 8001234:	f840 3b04 	str.w	r3, [r0], #4
 8001238:	f851 3b04 	ldr.w	r3, [r1], #4
 800123c:	f840 3b04 	str.w	r3, [r0], #4
 8001240:	f851 3b04 	ldr.w	r3, [r1], #4
 8001244:	f840 3b04 	str.w	r3, [r0], #4
 8001248:	3a40      	subs	r2, #64	; 0x40
 800124a:	d2bd      	bcs.n	80011c8 <memcpy+0x10>
 800124c:	3230      	adds	r2, #48	; 0x30
 800124e:	d311      	bcc.n	8001274 <memcpy+0xbc>
 8001250:	f851 3b04 	ldr.w	r3, [r1], #4
 8001254:	f840 3b04 	str.w	r3, [r0], #4
 8001258:	f851 3b04 	ldr.w	r3, [r1], #4
 800125c:	f840 3b04 	str.w	r3, [r0], #4
 8001260:	f851 3b04 	ldr.w	r3, [r1], #4
 8001264:	f840 3b04 	str.w	r3, [r0], #4
 8001268:	f851 3b04 	ldr.w	r3, [r1], #4
 800126c:	f840 3b04 	str.w	r3, [r0], #4
 8001270:	3a10      	subs	r2, #16
 8001272:	d2ed      	bcs.n	8001250 <memcpy+0x98>
 8001274:	320c      	adds	r2, #12
 8001276:	d305      	bcc.n	8001284 <memcpy+0xcc>
 8001278:	f851 3b04 	ldr.w	r3, [r1], #4
 800127c:	f840 3b04 	str.w	r3, [r0], #4
 8001280:	3a04      	subs	r2, #4
 8001282:	d2f9      	bcs.n	8001278 <memcpy+0xc0>
 8001284:	3204      	adds	r2, #4
 8001286:	d008      	beq.n	800129a <memcpy+0xe2>
 8001288:	07d2      	lsls	r2, r2, #31
 800128a:	bf1c      	itt	ne
 800128c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8001290:	f800 3b01 	strbne.w	r3, [r0], #1
 8001294:	d301      	bcc.n	800129a <memcpy+0xe2>
 8001296:	880b      	ldrh	r3, [r1, #0]
 8001298:	8003      	strh	r3, [r0, #0]
 800129a:	4660      	mov	r0, ip
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	2a08      	cmp	r2, #8
 80012a2:	d313      	bcc.n	80012cc <memcpy+0x114>
 80012a4:	078b      	lsls	r3, r1, #30
 80012a6:	d08d      	beq.n	80011c4 <memcpy+0xc>
 80012a8:	f010 0303 	ands.w	r3, r0, #3
 80012ac:	d08a      	beq.n	80011c4 <memcpy+0xc>
 80012ae:	f1c3 0304 	rsb	r3, r3, #4
 80012b2:	1ad2      	subs	r2, r2, r3
 80012b4:	07db      	lsls	r3, r3, #31
 80012b6:	bf1c      	itt	ne
 80012b8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80012bc:	f800 3b01 	strbne.w	r3, [r0], #1
 80012c0:	d380      	bcc.n	80011c4 <memcpy+0xc>
 80012c2:	f831 3b02 	ldrh.w	r3, [r1], #2
 80012c6:	f820 3b02 	strh.w	r3, [r0], #2
 80012ca:	e77b      	b.n	80011c4 <memcpy+0xc>
 80012cc:	3a04      	subs	r2, #4
 80012ce:	d3d9      	bcc.n	8001284 <memcpy+0xcc>
 80012d0:	3a01      	subs	r2, #1
 80012d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80012d6:	f800 3b01 	strb.w	r3, [r0], #1
 80012da:	d2f9      	bcs.n	80012d0 <memcpy+0x118>
 80012dc:	780b      	ldrb	r3, [r1, #0]
 80012de:	7003      	strb	r3, [r0, #0]
 80012e0:	784b      	ldrb	r3, [r1, #1]
 80012e2:	7043      	strb	r3, [r0, #1]
 80012e4:	788b      	ldrb	r3, [r1, #2]
 80012e6:	7083      	strb	r3, [r0, #2]
 80012e8:	4660      	mov	r0, ip
 80012ea:	4770      	bx	lr
	...
 8001300:	eba2 0003 	sub.w	r0, r2, r3
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop

08001308 <strcmp>:
 8001308:	7802      	ldrb	r2, [r0, #0]
 800130a:	780b      	ldrb	r3, [r1, #0]
 800130c:	2a01      	cmp	r2, #1
 800130e:	bf28      	it	cs
 8001310:	429a      	cmpcs	r2, r3
 8001312:	d1f5      	bne.n	8001300 <memcpy+0x148>
 8001314:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 8001318:	ea40 0401 	orr.w	r4, r0, r1
 800131c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8001320:	f06f 0c00 	mvn.w	ip, #0
 8001324:	ea4f 7244 	mov.w	r2, r4, lsl #29
 8001328:	b312      	cbz	r2, 8001370 <strcmp+0x68>
 800132a:	ea80 0401 	eor.w	r4, r0, r1
 800132e:	f014 0f07 	tst.w	r4, #7
 8001332:	d16a      	bne.n	800140a <strcmp+0x102>
 8001334:	f000 0407 	and.w	r4, r0, #7
 8001338:	f020 0007 	bic.w	r0, r0, #7
 800133c:	f004 0503 	and.w	r5, r4, #3
 8001340:	f021 0107 	bic.w	r1, r1, #7
 8001344:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8001348:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 800134c:	f014 0f04 	tst.w	r4, #4
 8001350:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8001354:	fa0c f405 	lsl.w	r4, ip, r5
 8001358:	ea62 0204 	orn	r2, r2, r4
 800135c:	ea66 0604 	orn	r6, r6, r4
 8001360:	d00a      	beq.n	8001378 <strcmp+0x70>
 8001362:	ea63 0304 	orn	r3, r3, r4
 8001366:	4662      	mov	r2, ip
 8001368:	ea67 0704 	orn	r7, r7, r4
 800136c:	4666      	mov	r6, ip
 800136e:	e003      	b.n	8001378 <strcmp+0x70>
 8001370:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 8001374:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8001378:	fa82 f54c 	uadd8	r5, r2, ip
 800137c:	ea82 0406 	eor.w	r4, r2, r6
 8001380:	faa4 f48c 	sel	r4, r4, ip
 8001384:	bb6c      	cbnz	r4, 80013e2 <strcmp+0xda>
 8001386:	fa83 f54c 	uadd8	r5, r3, ip
 800138a:	ea83 0507 	eor.w	r5, r3, r7
 800138e:	faa5 f58c 	sel	r5, r5, ip
 8001392:	b995      	cbnz	r5, 80013ba <strcmp+0xb2>
 8001394:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 8001398:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 800139c:	fa82 f54c 	uadd8	r5, r2, ip
 80013a0:	ea82 0406 	eor.w	r4, r2, r6
 80013a4:	faa4 f48c 	sel	r4, r4, ip
 80013a8:	fa83 f54c 	uadd8	r5, r3, ip
 80013ac:	ea83 0507 	eor.w	r5, r3, r7
 80013b0:	faa5 f58c 	sel	r5, r5, ip
 80013b4:	4325      	orrs	r5, r4
 80013b6:	d0db      	beq.n	8001370 <strcmp+0x68>
 80013b8:	b99c      	cbnz	r4, 80013e2 <strcmp+0xda>
 80013ba:	ba2d      	rev	r5, r5
 80013bc:	fab5 f485 	clz	r4, r5
 80013c0:	f024 0407 	bic.w	r4, r4, #7
 80013c4:	fa27 f104 	lsr.w	r1, r7, r4
 80013c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80013cc:	fa23 f304 	lsr.w	r3, r3, r4
 80013d0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 80013d4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80013d8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80013dc:	eba0 0001 	sub.w	r0, r0, r1
 80013e0:	4770      	bx	lr
 80013e2:	ba24      	rev	r4, r4
 80013e4:	fab4 f484 	clz	r4, r4
 80013e8:	f024 0407 	bic.w	r4, r4, #7
 80013ec:	fa26 f104 	lsr.w	r1, r6, r4
 80013f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80013f4:	fa22 f204 	lsr.w	r2, r2, r4
 80013f8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 80013fc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8001400:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8001404:	eba0 0001 	sub.w	r0, r0, r1
 8001408:	4770      	bx	lr
 800140a:	f014 0f03 	tst.w	r4, #3
 800140e:	d13c      	bne.n	800148a <strcmp+0x182>
 8001410:	f010 0403 	ands.w	r4, r0, #3
 8001414:	d128      	bne.n	8001468 <strcmp+0x160>
 8001416:	f850 2b08 	ldr.w	r2, [r0], #8
 800141a:	f851 3b08 	ldr.w	r3, [r1], #8
 800141e:	fa82 f54c 	uadd8	r5, r2, ip
 8001422:	ea82 0503 	eor.w	r5, r2, r3
 8001426:	faa5 f58c 	sel	r5, r5, ip
 800142a:	b95d      	cbnz	r5, 8001444 <strcmp+0x13c>
 800142c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8001430:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001434:	fa82 f54c 	uadd8	r5, r2, ip
 8001438:	ea82 0503 	eor.w	r5, r2, r3
 800143c:	faa5 f58c 	sel	r5, r5, ip
 8001440:	2d00      	cmp	r5, #0
 8001442:	d0e8      	beq.n	8001416 <strcmp+0x10e>
 8001444:	ba2d      	rev	r5, r5
 8001446:	fab5 f485 	clz	r4, r5
 800144a:	f024 0407 	bic.w	r4, r4, #7
 800144e:	fa23 f104 	lsr.w	r1, r3, r4
 8001452:	fa22 f204 	lsr.w	r2, r2, r4
 8001456:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800145a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800145e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8001462:	eba0 0001 	sub.w	r0, r0, r1
 8001466:	4770      	bx	lr
 8001468:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800146c:	f020 0003 	bic.w	r0, r0, #3
 8001470:	f850 2b08 	ldr.w	r2, [r0], #8
 8001474:	f021 0103 	bic.w	r1, r1, #3
 8001478:	f851 3b08 	ldr.w	r3, [r1], #8
 800147c:	fa0c f404 	lsl.w	r4, ip, r4
 8001480:	ea62 0204 	orn	r2, r2, r4
 8001484:	ea63 0304 	orn	r3, r3, r4
 8001488:	e7c9      	b.n	800141e <strcmp+0x116>
 800148a:	f010 0403 	ands.w	r4, r0, #3
 800148e:	d01a      	beq.n	80014c6 <strcmp+0x1be>
 8001490:	eba1 0104 	sub.w	r1, r1, r4
 8001494:	f020 0003 	bic.w	r0, r0, #3
 8001498:	07e4      	lsls	r4, r4, #31
 800149a:	f850 2b04 	ldr.w	r2, [r0], #4
 800149e:	d006      	beq.n	80014ae <strcmp+0x1a6>
 80014a0:	d20f      	bcs.n	80014c2 <strcmp+0x1ba>
 80014a2:	788b      	ldrb	r3, [r1, #2]
 80014a4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 80014a8:	1ae4      	subs	r4, r4, r3
 80014aa:	d106      	bne.n	80014ba <strcmp+0x1b2>
 80014ac:	b12b      	cbz	r3, 80014ba <strcmp+0x1b2>
 80014ae:	78cb      	ldrb	r3, [r1, #3]
 80014b0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 80014b4:	1ae4      	subs	r4, r4, r3
 80014b6:	d100      	bne.n	80014ba <strcmp+0x1b2>
 80014b8:	b91b      	cbnz	r3, 80014c2 <strcmp+0x1ba>
 80014ba:	4620      	mov	r0, r4
 80014bc:	f85d 4b10 	ldr.w	r4, [sp], #16
 80014c0:	4770      	bx	lr
 80014c2:	f101 0104 	add.w	r1, r1, #4
 80014c6:	f850 2b04 	ldr.w	r2, [r0], #4
 80014ca:	07cc      	lsls	r4, r1, #31
 80014cc:	f021 0103 	bic.w	r1, r1, #3
 80014d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80014d4:	d848      	bhi.n	8001568 <strcmp+0x260>
 80014d6:	d224      	bcs.n	8001522 <strcmp+0x21a>
 80014d8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 80014dc:	fa82 f54c 	uadd8	r5, r2, ip
 80014e0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 80014e4:	faa5 f58c 	sel	r5, r5, ip
 80014e8:	d10a      	bne.n	8001500 <strcmp+0x1f8>
 80014ea:	b965      	cbnz	r5, 8001506 <strcmp+0x1fe>
 80014ec:	f851 3b04 	ldr.w	r3, [r1], #4
 80014f0:	ea84 0402 	eor.w	r4, r4, r2
 80014f4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 80014f8:	d10e      	bne.n	8001518 <strcmp+0x210>
 80014fa:	f850 2b04 	ldr.w	r2, [r0], #4
 80014fe:	e7eb      	b.n	80014d8 <strcmp+0x1d0>
 8001500:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8001504:	e055      	b.n	80015b2 <strcmp+0x2aa>
 8001506:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800150a:	d14d      	bne.n	80015a8 <strcmp+0x2a0>
 800150c:	7808      	ldrb	r0, [r1, #0]
 800150e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8001512:	f1c0 0000 	rsb	r0, r0, #0
 8001516:	4770      	bx	lr
 8001518:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800151c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8001520:	e047      	b.n	80015b2 <strcmp+0x2aa>
 8001522:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 8001526:	fa82 f54c 	uadd8	r5, r2, ip
 800152a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 800152e:	faa5 f58c 	sel	r5, r5, ip
 8001532:	d10a      	bne.n	800154a <strcmp+0x242>
 8001534:	b965      	cbnz	r5, 8001550 <strcmp+0x248>
 8001536:	f851 3b04 	ldr.w	r3, [r1], #4
 800153a:	ea84 0402 	eor.w	r4, r4, r2
 800153e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 8001542:	d10c      	bne.n	800155e <strcmp+0x256>
 8001544:	f850 2b04 	ldr.w	r2, [r0], #4
 8001548:	e7eb      	b.n	8001522 <strcmp+0x21a>
 800154a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800154e:	e030      	b.n	80015b2 <strcmp+0x2aa>
 8001550:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 8001554:	d128      	bne.n	80015a8 <strcmp+0x2a0>
 8001556:	880b      	ldrh	r3, [r1, #0]
 8001558:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800155c:	e029      	b.n	80015b2 <strcmp+0x2aa>
 800155e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8001562:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 8001566:	e024      	b.n	80015b2 <strcmp+0x2aa>
 8001568:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 800156c:	fa82 f54c 	uadd8	r5, r2, ip
 8001570:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 8001574:	faa5 f58c 	sel	r5, r5, ip
 8001578:	d10a      	bne.n	8001590 <strcmp+0x288>
 800157a:	b965      	cbnz	r5, 8001596 <strcmp+0x28e>
 800157c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001580:	ea84 0402 	eor.w	r4, r4, r2
 8001584:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 8001588:	d109      	bne.n	800159e <strcmp+0x296>
 800158a:	f850 2b04 	ldr.w	r2, [r0], #4
 800158e:	e7eb      	b.n	8001568 <strcmp+0x260>
 8001590:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8001594:	e00d      	b.n	80015b2 <strcmp+0x2aa>
 8001596:	f015 0fff 	tst.w	r5, #255	; 0xff
 800159a:	d105      	bne.n	80015a8 <strcmp+0x2a0>
 800159c:	680b      	ldr	r3, [r1, #0]
 800159e:	ea4f 2212 	mov.w	r2, r2, lsr #8
 80015a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80015a6:	e004      	b.n	80015b2 <strcmp+0x2aa>
 80015a8:	f04f 0000 	mov.w	r0, #0
 80015ac:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80015b0:	4770      	bx	lr
 80015b2:	ba12      	rev	r2, r2
 80015b4:	ba1b      	rev	r3, r3
 80015b6:	fa82 f44c 	uadd8	r4, r2, ip
 80015ba:	ea82 0403 	eor.w	r4, r2, r3
 80015be:	faa4 f58c 	sel	r5, r4, ip
 80015c2:	fab5 f485 	clz	r4, r5
 80015c6:	fa02 f204 	lsl.w	r2, r2, r4
 80015ca:	fa03 f304 	lsl.w	r3, r3, r4
 80015ce:	ea4f 6012 	mov.w	r0, r2, lsr #24
 80015d2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80015d6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 80015da:	4770      	bx	lr
	...

08001600 <strlen>:
 8001600:	f890 f000 	pld	[r0]
 8001604:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8001608:	f020 0107 	bic.w	r1, r0, #7
 800160c:	f06f 0c00 	mvn.w	ip, #0
 8001610:	f010 0407 	ands.w	r4, r0, #7
 8001614:	f891 f020 	pld	[r1, #32]
 8001618:	f040 8049 	bne.w	80016ae <strlen+0xae>
 800161c:	f04f 0400 	mov.w	r4, #0
 8001620:	f06f 0007 	mvn.w	r0, #7
 8001624:	e9d1 2300 	ldrd	r2, r3, [r1]
 8001628:	f891 f040 	pld	[r1, #64]	; 0x40
 800162c:	f100 0008 	add.w	r0, r0, #8
 8001630:	fa82 f24c 	uadd8	r2, r2, ip
 8001634:	faa4 f28c 	sel	r2, r4, ip
 8001638:	fa83 f34c 	uadd8	r3, r3, ip
 800163c:	faa2 f38c 	sel	r3, r2, ip
 8001640:	bb4b      	cbnz	r3, 8001696 <strlen+0x96>
 8001642:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8001646:	fa82 f24c 	uadd8	r2, r2, ip
 800164a:	f100 0008 	add.w	r0, r0, #8
 800164e:	faa4 f28c 	sel	r2, r4, ip
 8001652:	fa83 f34c 	uadd8	r3, r3, ip
 8001656:	faa2 f38c 	sel	r3, r2, ip
 800165a:	b9e3      	cbnz	r3, 8001696 <strlen+0x96>
 800165c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 8001660:	fa82 f24c 	uadd8	r2, r2, ip
 8001664:	f100 0008 	add.w	r0, r0, #8
 8001668:	faa4 f28c 	sel	r2, r4, ip
 800166c:	fa83 f34c 	uadd8	r3, r3, ip
 8001670:	faa2 f38c 	sel	r3, r2, ip
 8001674:	b97b      	cbnz	r3, 8001696 <strlen+0x96>
 8001676:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 800167a:	f101 0120 	add.w	r1, r1, #32
 800167e:	fa82 f24c 	uadd8	r2, r2, ip
 8001682:	f100 0008 	add.w	r0, r0, #8
 8001686:	faa4 f28c 	sel	r2, r4, ip
 800168a:	fa83 f34c 	uadd8	r3, r3, ip
 800168e:	faa2 f38c 	sel	r3, r2, ip
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0c6      	beq.n	8001624 <strlen+0x24>
 8001696:	2a00      	cmp	r2, #0
 8001698:	bf04      	itt	eq
 800169a:	3004      	addeq	r0, #4
 800169c:	461a      	moveq	r2, r3
 800169e:	ba12      	rev	r2, r2
 80016a0:	fab2 f282 	clz	r2, r2
 80016a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 80016a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80016ac:	4770      	bx	lr
 80016ae:	e9d1 2300 	ldrd	r2, r3, [r1]
 80016b2:	f004 0503 	and.w	r5, r4, #3
 80016b6:	f1c4 0000 	rsb	r0, r4, #0
 80016ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80016be:	f014 0f04 	tst.w	r4, #4
 80016c2:	f891 f040 	pld	[r1, #64]	; 0x40
 80016c6:	fa0c f505 	lsl.w	r5, ip, r5
 80016ca:	ea62 0205 	orn	r2, r2, r5
 80016ce:	bf1c      	itt	ne
 80016d0:	ea63 0305 	ornne	r3, r3, r5
 80016d4:	4662      	movne	r2, ip
 80016d6:	f04f 0400 	mov.w	r4, #0
 80016da:	e7a9      	b.n	8001630 <strlen+0x30>
 80016dc:	0000      	movs	r0, r0
	...

080016e0 <__cpu_init>:

#if CORTEX_MODEL == 7
  SCB_EnableICache();
  SCB_EnableDCache();
#endif
}
 80016e0:	bf00      	nop
 80016e2:	4770      	bx	lr
	...

080016f0 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 80016f0:	bf00      	nop
 80016f2:	4770      	bx	lr
	...

08001700 <__default_exit>:
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
/*lint -restore*/

  while (true) {
 8001700:	e7fe      	b.n	8001700 <__default_exit>
 8001702:	bf00      	nop
	...

08001710 <__init_ram_areas>:
#endif

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8001710:	b084      	sub	sp, #16
#if CRT0_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
 8001712:	4b17      	ldr	r3, [pc, #92]	; (8001770 <__init_ram_areas+0x60>)
 8001714:	9303      	str	r3, [sp, #12]

  do {
    uint32_t *tp = rap->init_text_area;
 8001716:	9b03      	ldr	r3, [sp, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	9302      	str	r3, [sp, #8]
    uint32_t *p = rap->init_area;
 800171c:	9b03      	ldr	r3, [sp, #12]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	9301      	str	r3, [sp, #4]

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8001722:	e009      	b.n	8001738 <__init_ram_areas+0x28>
      *p = *tp;
 8001724:	9b02      	ldr	r3, [sp, #8]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	9b01      	ldr	r3, [sp, #4]
 800172a:	601a      	str	r2, [r3, #0]
      p++;
 800172c:	9b01      	ldr	r3, [sp, #4]
 800172e:	3304      	adds	r3, #4
 8001730:	9301      	str	r3, [sp, #4]
      tp++;
 8001732:	9b02      	ldr	r3, [sp, #8]
 8001734:	3304      	adds	r3, #4
 8001736:	9302      	str	r3, [sp, #8]
    while (p < rap->clear_area) {
 8001738:	9b03      	ldr	r3, [sp, #12]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	9a01      	ldr	r2, [sp, #4]
 800173e:	429a      	cmp	r2, r3
 8001740:	d3f0      	bcc.n	8001724 <__init_ram_areas+0x14>
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8001742:	e005      	b.n	8001750 <__init_ram_areas+0x40>
      *p = 0;
 8001744:	9b01      	ldr	r3, [sp, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
      p++;
 800174a:	9b01      	ldr	r3, [sp, #4]
 800174c:	3304      	adds	r3, #4
 800174e:	9301      	str	r3, [sp, #4]
    while (p < rap->no_init_area) {
 8001750:	9b03      	ldr	r3, [sp, #12]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	9a01      	ldr	r2, [sp, #4]
 8001756:	429a      	cmp	r2, r3
 8001758:	d3f4      	bcc.n	8001744 <__init_ram_areas+0x34>
    }
    rap++;
 800175a:	9b03      	ldr	r3, [sp, #12]
 800175c:	3310      	adds	r3, #16
 800175e:	9303      	str	r3, [sp, #12]
  }
  while (rap < &ram_areas[CRT0_AREAS_NUMBER]);
 8001760:	9b03      	ldr	r3, [sp, #12]
 8001762:	4a04      	ldr	r2, [pc, #16]	; (8001774 <__init_ram_areas+0x64>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d3d6      	bcc.n	8001716 <__init_ram_areas+0x6>
#endif
}
 8001768:	bf00      	nop
 800176a:	bf00      	nop
 800176c:	b004      	add	sp, #16
 800176e:	4770      	bx	lr
 8001770:	0800ea88 	.word	0x0800ea88
 8001774:	0800eb08 	.word	0x0800eb08
	...

08001780 <osalInit>:
 *
 * @api
 */
static inline void osalInit(void) {

}
 8001780:	bf00      	nop
 8001782:	4770      	bx	lr
	...

08001790 <halInit>:
 *          board-specific initialization is performed by invoking
 *          @p boardInit() (usually defined in @p board.c).
 *
 * @init
 */
void halInit(void) {
 8001790:	b508      	push	{r3, lr}

  /* Initializes the OS Abstraction Layer.*/
  osalInit();
 8001792:	f7ff fff5 	bl	8001780 <osalInit>

  /* Platform low level initializations.*/
  hal_lld_init();
 8001796:	f001 ffb3 	bl	8003700 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
#if defined(PAL_NEW_INIT)
  palInit();
 800179a:	f002 fc21 	bl	8003fe0 <_pal_lld_init>
#endif
#if (HAL_USE_GPT == TRUE) || defined(__DOXYGEN__)
  gptInit();
#endif
#if (HAL_USE_I2C == TRUE) || defined(__DOXYGEN__)
  i2cInit();
 800179e:	f000 fc4f 	bl	8002040 <i2cInit>
#endif
#if (HAL_USE_PWM == TRUE) || defined(__DOXYGEN__)
  pwmInit();
#endif
#if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  sdInit();
 80017a2:	f001 fb1d 	bl	8002de0 <sdInit>
#endif
#if (HAL_USE_SIO == TRUE) || defined(__DOXYGEN__)
  sioInit();
#endif
#if (HAL_USE_SPI == TRUE) || defined(__DOXYGEN__)
  spiInit();
 80017a6:	f001 fbeb 	bl	8002f80 <spiInit>
#endif
#if (HAL_USE_TRNG == TRUE) || defined(__DOXYGEN__)
  trngInit();
#endif
#if (HAL_USE_UART == TRUE) || defined(__DOXYGEN__)
  uartInit();
 80017aa:	f001 fd61 	bl	8003270 <uartInit>
#endif
#if (HAL_USE_USB == TRUE) || defined(__DOXYGEN__)
  usbInit();
#endif
#if (HAL_USE_MMC_SPI == TRUE) || defined(__DOXYGEN__)
  mmcInit();
 80017ae:	f000 ff1f 	bl	80025f0 <mmcInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
 80017b2:	f004 fd6d 	bl	8006290 <boardInit>
/*
 *  The ST driver is a special case, it is only initialized if the OSAL is
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
 80017b6:	f000 f83b 	bl	8001830 <stInit>
#endif
}
 80017ba:	bf00      	nop
 80017bc:	bd08      	pop	{r3, pc}
 80017be:	bf00      	nop

080017c0 <st_lld_get_counter>:
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80017c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	0000      	movs	r0, r0
	...

080017d0 <st_lld_start_alarm>:
 *
 * @param[in] abstime   the time to be set for the first alarm
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t abstime) {
 80017d0:	b082      	sub	sp, #8
 80017d2:	9001      	str	r0, [sp, #4]

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80017d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017d8:	9b01      	ldr	r3, [sp, #4]
 80017da:	6353      	str	r3, [r2, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 80017dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017e0:	2200      	movs	r2, #0
 80017e2:	611a      	str	r2, [r3, #16]
#if ST_LLD_NUM_ALARMS == 1
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 80017e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017e8:	2202      	movs	r2, #2
 80017ea:	60da      	str	r2, [r3, #12]
#else
  STM32_ST_TIM->DIER  |= STM32_TIM_DIER_CC1IE;
#endif
}
 80017ec:	bf00      	nop
 80017ee:	b002      	add	sp, #8
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
	...

08001800 <st_lld_stop_alarm>:
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

#if ST_LLD_NUM_ALARMS == 1
  STM32_ST_TIM->DIER = 0U;
 8001800:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001804:	2200      	movs	r2, #0
 8001806:	60da      	str	r2, [r3, #12]
#else
 STM32_ST_TIM->DIER &= ~STM32_TIM_DIER_CC1IE;
#endif
}
 8001808:	bf00      	nop
 800180a:	4770      	bx	lr
 800180c:	0000      	movs	r0, r0
	...

08001810 <st_lld_set_alarm>:
 *
 * @param[in] abstime   the time to be set for the next alarm
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t abstime) {
 8001810:	b082      	sub	sp, #8
 8001812:	9001      	str	r0, [sp, #4]

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8001814:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001818:	9b01      	ldr	r3, [sp, #4]
 800181a:	6353      	str	r3, [r2, #52]	; 0x34
}
 800181c:	bf00      	nop
 800181e:	b002      	add	sp, #8
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
	...

08001830 <stInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void stInit(void) {
 8001830:	b508      	push	{r3, lr}

  for (i = 0U; i < (unsigned)ST_LLD_NUM_ALARMS; i++) {
    st_callbacks[i] = NULL;
  }
#endif
  st_lld_init();
 8001832:	f003 ff45 	bl	80056c0 <st_lld_init>
}
 8001836:	bf00      	nop
 8001838:	bd08      	pop	{r3, pc}
 800183a:	bf00      	nop
 800183c:	0000      	movs	r0, r0
	...

08001840 <stGetCounter>:
 *
 * @return              The counter value.
 *
 * @api
 */
systime_t stGetCounter(void) {
 8001840:	b508      	push	{r3, lr}

  return st_lld_get_counter();
 8001842:	f7ff ffbd 	bl	80017c0 <st_lld_get_counter>
 8001846:	4603      	mov	r3, r0
}
 8001848:	4618      	mov	r0, r3
 800184a:	bd08      	pop	{r3, pc}
 800184c:	0000      	movs	r0, r0
	...

08001850 <stStartAlarm>:
 *
 * @param[in] abstime   the time to be set for the first alarm
 *
 * @api
 */
void stStartAlarm(systime_t abstime) {
 8001850:	b500      	push	{lr}
 8001852:	b083      	sub	sp, #12
 8001854:	9001      	str	r0, [sp, #4]

  osalDbgAssert(stIsAlarmActive() == false, "already active");

  st_lld_start_alarm(abstime);
 8001856:	9801      	ldr	r0, [sp, #4]
 8001858:	f7ff ffba 	bl	80017d0 <st_lld_start_alarm>
}
 800185c:	bf00      	nop
 800185e:	b003      	add	sp, #12
 8001860:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001870 <stStopAlarm>:
 * @note    This functionality is only available in free running mode, the
 *          behavior in periodic mode is undefined.
 *
 * @api
 */
void stStopAlarm(void) {
 8001870:	b508      	push	{r3, lr}

  st_lld_stop_alarm();
 8001872:	f7ff ffc5 	bl	8001800 <st_lld_stop_alarm>
}
 8001876:	bf00      	nop
 8001878:	bd08      	pop	{r3, pc}
 800187a:	bf00      	nop
 800187c:	0000      	movs	r0, r0
	...

08001880 <stSetAlarm>:
 *
 * @param[in] abstime   the time to be set for the next alarm
 *
 * @api
 */
void stSetAlarm(systime_t abstime) {
 8001880:	b500      	push	{lr}
 8001882:	b083      	sub	sp, #12
 8001884:	9001      	str	r0, [sp, #4]

  osalDbgAssert(stIsAlarmActive() != false, "not active");

  st_lld_set_alarm(abstime);
 8001886:	9801      	ldr	r0, [sp, #4]
 8001888:	f7ff ffc2 	bl	8001810 <st_lld_set_alarm>
}
 800188c:	bf00      	nop
 800188e:	b003      	add	sp, #12
 8001890:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080018a0 <ch_queue_init.lto_priv.1>:
 *
 * @param[out] qp       pointer to the queue header
 *
 * @notapi
 */
static inline void ch_queue_init(ch_queue_t *qp) {
 80018a0:	b082      	sub	sp, #8
 80018a2:	9001      	str	r0, [sp, #4]

  qp->next = qp;
 80018a4:	9b01      	ldr	r3, [sp, #4]
 80018a6:	9a01      	ldr	r2, [sp, #4]
 80018a8:	601a      	str	r2, [r3, #0]
  qp->prev = qp;
 80018aa:	9b01      	ldr	r3, [sp, #4]
 80018ac:	9a01      	ldr	r2, [sp, #4]
 80018ae:	605a      	str	r2, [r3, #4]
}
 80018b0:	bf00      	nop
 80018b2:	b002      	add	sp, #8
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
	...

080018c0 <chSysLock.lto_priv.1>:
 * @note    The exact behavior of this function is port-dependent and could
 *          not be limited to disabling interrupts.
 *
 * @special
 */
static inline void chSysLock(void) {
 80018c0:	b082      	sub	sp, #8
 80018c2:	2330      	movs	r3, #48	; 0x30
 80018c4:	9301      	str	r3, [sp, #4]
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80018c6:	9b01      	ldr	r3, [sp, #4]
 80018c8:	f383 8811 	msr	BASEPRI, r3
}
 80018cc:	bf00      	nop
#endif
#endif
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 80018ce:	bf00      	nop

  port_lock();
  __stats_start_measure_crit_thd();
  __dbg_check_lock();
}
 80018d0:	bf00      	nop
 80018d2:	b002      	add	sp, #8
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
	...

080018e0 <chSysUnlock.lto_priv.1>:
 * @note    The exact behavior of this function is port-dependent and could
 *          not be limited to enabling interrupts.
 *
 * @special
 */
static inline void chSysUnlock(void) {
 80018e0:	b082      	sub	sp, #8
 80018e2:	2300      	movs	r3, #0
 80018e4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80018e6:	9b01      	ldr	r3, [sp, #4]
 80018e8:	f383 8811 	msr	BASEPRI, r3
}
 80018ec:	bf00      	nop
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 80018ee:	bf00      	nop
  chDbgAssert((currcore->rlist.pqueue.next == &currcore->rlist.pqueue) ||
              (currcore->rlist.current->hdr.pqueue.prio >= currcore->rlist.pqueue.next->prio),
              "priority order violation");

  port_unlock();
}
 80018f0:	bf00      	nop
 80018f2:	b002      	add	sp, #8
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
	...

08001900 <chThdQueueObjectInit.lto_priv.1>:
 *
 * @param[out] tqp      pointer to the threads queue object
 *
 * @init
 */
static inline void chThdQueueObjectInit(threads_queue_t *tqp) {
 8001900:	b500      	push	{lr}
 8001902:	b083      	sub	sp, #12
 8001904:	9001      	str	r0, [sp, #4]

  ch_queue_init(&tqp->queue);
 8001906:	9b01      	ldr	r3, [sp, #4]
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff ffc9 	bl	80018a0 <ch_queue_init.lto_priv.1>
}
 800190e:	bf00      	nop
 8001910:	b003      	add	sp, #12
 8001912:	f85d fb04 	ldr.w	pc, [sp], #4
 8001916:	bf00      	nop
	...

08001920 <osalSysLock.lto_priv.1>:
 * @brief   Enters a critical zone from thread context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysLock(void) {
 8001920:	b508      	push	{r3, lr}

  chSysLock();
 8001922:	f7ff ffcd 	bl	80018c0 <chSysLock.lto_priv.1>
}
 8001926:	bf00      	nop
 8001928:	bd08      	pop	{r3, pc}
 800192a:	bf00      	nop
 800192c:	0000      	movs	r0, r0
	...

08001930 <osalSysUnlock.lto_priv.1>:
 * @brief   Leaves a critical zone from thread context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysUnlock(void) {
 8001930:	b508      	push	{r3, lr}

  chSysUnlock();
 8001932:	f7ff ffd5 	bl	80018e0 <chSysUnlock.lto_priv.1>
}
 8001936:	bf00      	nop
 8001938:	bd08      	pop	{r3, pc}
 800193a:	bf00      	nop
 800193c:	0000      	movs	r0, r0
	...

08001940 <osalThreadQueueObjectInit.lto_priv.1>:
 *
 * @param[out] tqp      pointer to the threads queue object
 *
 * @init
 */
static inline void osalThreadQueueObjectInit(threads_queue_t *tqp) {
 8001940:	b500      	push	{lr}
 8001942:	b083      	sub	sp, #12
 8001944:	9001      	str	r0, [sp, #4]

  chThdQueueObjectInit(tqp);
 8001946:	9801      	ldr	r0, [sp, #4]
 8001948:	f7ff ffda 	bl	8001900 <chThdQueueObjectInit.lto_priv.1>
}
 800194c:	bf00      	nop
 800194e:	b003      	add	sp, #12
 8001950:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001960 <osalThreadEnqueueTimeoutS.lto_priv.1>:
 *                      specification.
 *
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              sysinterval_t timeout) {
 8001960:	b500      	push	{lr}
 8001962:	b083      	sub	sp, #12
 8001964:	9001      	str	r0, [sp, #4]
 8001966:	9100      	str	r1, [sp, #0]

  return chThdEnqueueTimeoutS(tqp, timeout);
 8001968:	9900      	ldr	r1, [sp, #0]
 800196a:	9801      	ldr	r0, [sp, #4]
 800196c:	f005 fe18 	bl	80075a0 <chThdEnqueueTimeoutS>
 8001970:	4603      	mov	r3, r0
}
 8001972:	4618      	mov	r0, r3
 8001974:	b003      	add	sp, #12
 8001976:	f85d fb04 	ldr.w	pc, [sp], #4
 800197a:	bf00      	nop
 800197c:	0000      	movs	r0, r0
	...

08001980 <osalThreadDequeueNextI.lto_priv.1>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8001980:	b500      	push	{lr}
 8001982:	b083      	sub	sp, #12
 8001984:	9001      	str	r0, [sp, #4]
 8001986:	9100      	str	r1, [sp, #0]

  chThdDequeueNextI(tqp, msg);
 8001988:	9900      	ldr	r1, [sp, #0]
 800198a:	9801      	ldr	r0, [sp, #4]
 800198c:	f005 fe28 	bl	80075e0 <chThdDequeueNextI>
}
 8001990:	bf00      	nop
 8001992:	b003      	add	sp, #12
 8001994:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080019a0 <iq_read>:
 *                      value 0 is reserved
 * @return              The number of bytes effectively transferred.
 *
 * @notapi
 */
static size_t iq_read(input_queue_t *iqp, uint8_t *bp, size_t n) {
 80019a0:	b500      	push	{lr}
 80019a2:	b087      	sub	sp, #28
 80019a4:	9003      	str	r0, [sp, #12]
 80019a6:	9102      	str	r1, [sp, #8]
 80019a8:	9201      	str	r2, [sp, #4]
  size_t s1, s2;

  osalDbgCheck(n > 0U);

  /* Number of bytes that can be read in a single atomic operation.*/
  if (n > iqGetFullI(iqp)) {
 80019aa:	9b03      	ldr	r3, [sp, #12]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	9a01      	ldr	r2, [sp, #4]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d902      	bls.n	80019ba <iq_read+0x1a>
    n = iqGetFullI(iqp);
 80019b4:	9b03      	ldr	r3, [sp, #12]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	9301      	str	r3, [sp, #4]
  }

  /* Number of bytes before buffer limit.*/
  /*lint -save -e9033 [10.8] Checked to be safe.*/
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 80019ba:	9b03      	ldr	r3, [sp, #12]
 80019bc:	691a      	ldr	r2, [r3, #16]
 80019be:	9b03      	ldr	r3, [sp, #12]
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	9305      	str	r3, [sp, #20]
  /*lint -restore*/
  if (n < s1) {
 80019c6:	9a01      	ldr	r2, [sp, #4]
 80019c8:	9b05      	ldr	r3, [sp, #20]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d20d      	bcs.n	80019ea <iq_read+0x4a>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 80019ce:	9b03      	ldr	r3, [sp, #12]
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	9a01      	ldr	r2, [sp, #4]
 80019d4:	4619      	mov	r1, r3
 80019d6:	9802      	ldr	r0, [sp, #8]
 80019d8:	f7ff fbee 	bl	80011b8 <memcpy>
    iqp->q_rdptr += n;
 80019dc:	9b03      	ldr	r3, [sp, #12]
 80019de:	699a      	ldr	r2, [r3, #24]
 80019e0:	9b01      	ldr	r3, [sp, #4]
 80019e2:	441a      	add	r2, r3
 80019e4:	9b03      	ldr	r3, [sp, #12]
 80019e6:	619a      	str	r2, [r3, #24]
 80019e8:	e02b      	b.n	8001a42 <iq_read+0xa2>
  }
  else if (n > s1) {
 80019ea:	9a01      	ldr	r2, [sp, #4]
 80019ec:	9b05      	ldr	r3, [sp, #20]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d91c      	bls.n	8001a2c <iq_read+0x8c>
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 80019f2:	9b03      	ldr	r3, [sp, #12]
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	9a05      	ldr	r2, [sp, #20]
 80019f8:	4619      	mov	r1, r3
 80019fa:	9802      	ldr	r0, [sp, #8]
 80019fc:	f7ff fbdc 	bl	80011b8 <memcpy>
    bp += s1;
 8001a00:	9a02      	ldr	r2, [sp, #8]
 8001a02:	9b05      	ldr	r3, [sp, #20]
 8001a04:	4413      	add	r3, r2
 8001a06:	9302      	str	r3, [sp, #8]
    s2 = n - s1;
 8001a08:	9a01      	ldr	r2, [sp, #4]
 8001a0a:	9b05      	ldr	r3, [sp, #20]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	9304      	str	r3, [sp, #16]
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 8001a10:	9b03      	ldr	r3, [sp, #12]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	9a04      	ldr	r2, [sp, #16]
 8001a16:	4619      	mov	r1, r3
 8001a18:	9802      	ldr	r0, [sp, #8]
 8001a1a:	f7ff fbcd 	bl	80011b8 <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
 8001a1e:	9b03      	ldr	r3, [sp, #12]
 8001a20:	68da      	ldr	r2, [r3, #12]
 8001a22:	9b04      	ldr	r3, [sp, #16]
 8001a24:	441a      	add	r2, r3
 8001a26:	9b03      	ldr	r3, [sp, #12]
 8001a28:	619a      	str	r2, [r3, #24]
 8001a2a:	e00a      	b.n	8001a42 <iq_read+0xa2>
  }
  else {
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8001a2c:	9b03      	ldr	r3, [sp, #12]
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	9a01      	ldr	r2, [sp, #4]
 8001a32:	4619      	mov	r1, r3
 8001a34:	9802      	ldr	r0, [sp, #8]
 8001a36:	f7ff fbbf 	bl	80011b8 <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 8001a3a:	9b03      	ldr	r3, [sp, #12]
 8001a3c:	68da      	ldr	r2, [r3, #12]
 8001a3e:	9b03      	ldr	r3, [sp, #12]
 8001a40:	619a      	str	r2, [r3, #24]
  }

  iqp->q_counter -= n;
 8001a42:	9b03      	ldr	r3, [sp, #12]
 8001a44:	689a      	ldr	r2, [r3, #8]
 8001a46:	9b01      	ldr	r3, [sp, #4]
 8001a48:	1ad2      	subs	r2, r2, r3
 8001a4a:	9b03      	ldr	r3, [sp, #12]
 8001a4c:	609a      	str	r2, [r3, #8]
  return n;
 8001a4e:	9b01      	ldr	r3, [sp, #4]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	b007      	add	sp, #28
 8001a54:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001a60 <oq_write>:
 *                      value 0 is reserved
 * @return              The number of bytes effectively transferred.
 *
 * @notapi
 */
static size_t oq_write(output_queue_t *oqp, const uint8_t *bp, size_t n) {
 8001a60:	b500      	push	{lr}
 8001a62:	b087      	sub	sp, #28
 8001a64:	9003      	str	r0, [sp, #12]
 8001a66:	9102      	str	r1, [sp, #8]
 8001a68:	9201      	str	r2, [sp, #4]
  size_t s1, s2;

  osalDbgCheck(n > 0U);

  /* Number of bytes that can be written in a single atomic operation.*/
  if (n > oqGetEmptyI(oqp)) {
 8001a6a:	9b03      	ldr	r3, [sp, #12]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	9a01      	ldr	r2, [sp, #4]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d902      	bls.n	8001a7a <oq_write+0x1a>
    n = oqGetEmptyI(oqp);
 8001a74:	9b03      	ldr	r3, [sp, #12]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	9301      	str	r3, [sp, #4]
  }

  /* Number of bytes before buffer limit.*/
  /*lint -save -e9033 [10.8] Checked to be safe.*/
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8001a7a:	9b03      	ldr	r3, [sp, #12]
 8001a7c:	691a      	ldr	r2, [r3, #16]
 8001a7e:	9b03      	ldr	r3, [sp, #12]
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	9305      	str	r3, [sp, #20]
  /*lint -restore*/
  if (n < s1) {
 8001a86:	9a01      	ldr	r2, [sp, #4]
 8001a88:	9b05      	ldr	r3, [sp, #20]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d20d      	bcs.n	8001aaa <oq_write+0x4a>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8001a8e:	9b03      	ldr	r3, [sp, #12]
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	9a01      	ldr	r2, [sp, #4]
 8001a94:	9902      	ldr	r1, [sp, #8]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff fb8e 	bl	80011b8 <memcpy>
    oqp->q_wrptr += n;
 8001a9c:	9b03      	ldr	r3, [sp, #12]
 8001a9e:	695a      	ldr	r2, [r3, #20]
 8001aa0:	9b01      	ldr	r3, [sp, #4]
 8001aa2:	441a      	add	r2, r3
 8001aa4:	9b03      	ldr	r3, [sp, #12]
 8001aa6:	615a      	str	r2, [r3, #20]
 8001aa8:	e02b      	b.n	8001b02 <oq_write+0xa2>
  }
  else if (n > s1) {
 8001aaa:	9a01      	ldr	r2, [sp, #4]
 8001aac:	9b05      	ldr	r3, [sp, #20]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d91c      	bls.n	8001aec <oq_write+0x8c>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8001ab2:	9b03      	ldr	r3, [sp, #12]
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	9a05      	ldr	r2, [sp, #20]
 8001ab8:	9902      	ldr	r1, [sp, #8]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff fb7c 	bl	80011b8 <memcpy>
    bp += s1;
 8001ac0:	9a02      	ldr	r2, [sp, #8]
 8001ac2:	9b05      	ldr	r3, [sp, #20]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	9302      	str	r3, [sp, #8]
    s2 = n - s1;
 8001ac8:	9a01      	ldr	r2, [sp, #4]
 8001aca:	9b05      	ldr	r3, [sp, #20]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	9304      	str	r3, [sp, #16]
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 8001ad0:	9b03      	ldr	r3, [sp, #12]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	9a04      	ldr	r2, [sp, #16]
 8001ad6:	9902      	ldr	r1, [sp, #8]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff fb6d 	bl	80011b8 <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
 8001ade:	9b03      	ldr	r3, [sp, #12]
 8001ae0:	68da      	ldr	r2, [r3, #12]
 8001ae2:	9b04      	ldr	r3, [sp, #16]
 8001ae4:	441a      	add	r2, r3
 8001ae6:	9b03      	ldr	r3, [sp, #12]
 8001ae8:	615a      	str	r2, [r3, #20]
 8001aea:	e00a      	b.n	8001b02 <oq_write+0xa2>
  }
  else {
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8001aec:	9b03      	ldr	r3, [sp, #12]
 8001aee:	695b      	ldr	r3, [r3, #20]
 8001af0:	9a01      	ldr	r2, [sp, #4]
 8001af2:	9902      	ldr	r1, [sp, #8]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff fb5f 	bl	80011b8 <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 8001afa:	9b03      	ldr	r3, [sp, #12]
 8001afc:	68da      	ldr	r2, [r3, #12]
 8001afe:	9b03      	ldr	r3, [sp, #12]
 8001b00:	615a      	str	r2, [r3, #20]
  }

  oqp->q_counter -= n;
 8001b02:	9b03      	ldr	r3, [sp, #12]
 8001b04:	689a      	ldr	r2, [r3, #8]
 8001b06:	9b01      	ldr	r3, [sp, #4]
 8001b08:	1ad2      	subs	r2, r2, r3
 8001b0a:	9b03      	ldr	r3, [sp, #12]
 8001b0c:	609a      	str	r2, [r3, #8]
  return n;
 8001b0e:	9b01      	ldr	r3, [sp, #4]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	b007      	add	sp, #28
 8001b14:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001b20 <iqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {
 8001b20:	b500      	push	{lr}
 8001b22:	b085      	sub	sp, #20
 8001b24:	9003      	str	r0, [sp, #12]
 8001b26:	9102      	str	r1, [sp, #8]
 8001b28:	9201      	str	r2, [sp, #4]
 8001b2a:	9300      	str	r3, [sp, #0]

  osalThreadQueueObjectInit(&iqp->q_waiting);
 8001b2c:	9b03      	ldr	r3, [sp, #12]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff ff06 	bl	8001940 <osalThreadQueueObjectInit.lto_priv.1>
  iqp->q_counter = 0;
 8001b34:	9b03      	ldr	r3, [sp, #12]
 8001b36:	2200      	movs	r2, #0
 8001b38:	609a      	str	r2, [r3, #8]
  iqp->q_buffer  = bp;
 8001b3a:	9b03      	ldr	r3, [sp, #12]
 8001b3c:	9a02      	ldr	r2, [sp, #8]
 8001b3e:	60da      	str	r2, [r3, #12]
  iqp->q_rdptr   = bp;
 8001b40:	9b03      	ldr	r3, [sp, #12]
 8001b42:	9a02      	ldr	r2, [sp, #8]
 8001b44:	619a      	str	r2, [r3, #24]
  iqp->q_wrptr   = bp;
 8001b46:	9b03      	ldr	r3, [sp, #12]
 8001b48:	9a02      	ldr	r2, [sp, #8]
 8001b4a:	615a      	str	r2, [r3, #20]
  iqp->q_top     = bp + size;
 8001b4c:	9a02      	ldr	r2, [sp, #8]
 8001b4e:	9b01      	ldr	r3, [sp, #4]
 8001b50:	441a      	add	r2, r3
 8001b52:	9b03      	ldr	r3, [sp, #12]
 8001b54:	611a      	str	r2, [r3, #16]
  iqp->q_notify  = infy;
 8001b56:	9b03      	ldr	r3, [sp, #12]
 8001b58:	9a00      	ldr	r2, [sp, #0]
 8001b5a:	61da      	str	r2, [r3, #28]
  iqp->q_link    = link;
 8001b5c:	9b03      	ldr	r3, [sp, #12]
 8001b5e:	9a06      	ldr	r2, [sp, #24]
 8001b60:	621a      	str	r2, [r3, #32]
}
 8001b62:	bf00      	nop
 8001b64:	b005      	add	sp, #20
 8001b66:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b6a:	bf00      	nop
 8001b6c:	0000      	movs	r0, r0
	...

08001b70 <iqPutI>:
 * @retval MSG_OK       if the operation has been completed with success.
 * @retval MSG_TIMEOUT  if the queue is full.
 *
 * @iclass
 */
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {
 8001b70:	b500      	push	{lr}
 8001b72:	b083      	sub	sp, #12
 8001b74:	9001      	str	r0, [sp, #4]
 8001b76:	460b      	mov	r3, r1
 8001b78:	f88d 3003 	strb.w	r3, [sp, #3]

  osalDbgCheckClassI();

  /* Queue space check.*/
  if (!iqIsFullI(iqp)) {
 8001b7c:	9b01      	ldr	r3, [sp, #4]
 8001b7e:	695a      	ldr	r2, [r3, #20]
 8001b80:	9b01      	ldr	r3, [sp, #4]
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d105      	bne.n	8001b94 <iqPutI+0x24>
 8001b88:	9b01      	ldr	r3, [sp, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <iqPutI+0x24>
 8001b90:	2301      	movs	r3, #1
 8001b92:	e000      	b.n	8001b96 <iqPutI+0x26>
 8001b94:	2300      	movs	r3, #0
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	f083 0301 	eor.w	r3, r3, #1
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d01d      	beq.n	8001be2 <iqPutI+0x72>
    iqp->q_counter++;
 8001ba6:	9b01      	ldr	r3, [sp, #4]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	1c5a      	adds	r2, r3, #1
 8001bac:	9b01      	ldr	r3, [sp, #4]
 8001bae:	609a      	str	r2, [r3, #8]
    *iqp->q_wrptr++ = b;
 8001bb0:	9b01      	ldr	r3, [sp, #4]
 8001bb2:	695b      	ldr	r3, [r3, #20]
 8001bb4:	1c59      	adds	r1, r3, #1
 8001bb6:	9a01      	ldr	r2, [sp, #4]
 8001bb8:	6151      	str	r1, [r2, #20]
 8001bba:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001bbe:	701a      	strb	r2, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top) {
 8001bc0:	9b01      	ldr	r3, [sp, #4]
 8001bc2:	695a      	ldr	r2, [r3, #20]
 8001bc4:	9b01      	ldr	r3, [sp, #4]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d303      	bcc.n	8001bd4 <iqPutI+0x64>
      iqp->q_wrptr = iqp->q_buffer;
 8001bcc:	9b01      	ldr	r3, [sp, #4]
 8001bce:	68da      	ldr	r2, [r3, #12]
 8001bd0:	9b01      	ldr	r3, [sp, #4]
 8001bd2:	615a      	str	r2, [r3, #20]
    }

    osalThreadDequeueNextI(&iqp->q_waiting, MSG_OK);
 8001bd4:	9b01      	ldr	r3, [sp, #4]
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff fed1 	bl	8001980 <osalThreadDequeueNextI.lto_priv.1>

    return MSG_OK;
 8001bde:	2300      	movs	r3, #0
 8001be0:	e001      	b.n	8001be6 <iqPutI+0x76>
  }

  return MSG_TIMEOUT;
 8001be2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	b003      	add	sp, #12
 8001bea:	f85d fb04 	ldr.w	pc, [sp], #4
 8001bee:	bf00      	nop

08001bf0 <iqGetTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 8001bf0:	b500      	push	{lr}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	9001      	str	r0, [sp, #4]
 8001bf6:	9100      	str	r1, [sp, #0]
  uint8_t b;

  osalSysLock();
 8001bf8:	f7ff fe92 	bl	8001920 <osalSysLock.lto_priv.1>

  /* Waiting until there is a character available or a timeout occurs.*/
  while (iqIsEmptyI(iqp)) {
 8001bfc:	e00c      	b.n	8001c18 <iqGetTimeout+0x28>
    msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
 8001bfe:	9b01      	ldr	r3, [sp, #4]
 8001c00:	9900      	ldr	r1, [sp, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff feac 	bl	8001960 <osalThreadEnqueueTimeoutS.lto_priv.1>
 8001c08:	9002      	str	r0, [sp, #8]
    if (msg < MSG_OK) {
 8001c0a:	9b02      	ldr	r3, [sp, #8]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	da03      	bge.n	8001c18 <iqGetTimeout+0x28>
      osalSysUnlock();
 8001c10:	f7ff fe8e 	bl	8001930 <osalSysUnlock.lto_priv.1>
      return msg;
 8001c14:	9b02      	ldr	r3, [sp, #8]
 8001c16:	e026      	b.n	8001c66 <iqGetTimeout+0x76>
  while (iqIsEmptyI(iqp)) {
 8001c18:	9b01      	ldr	r3, [sp, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d0ee      	beq.n	8001bfe <iqGetTimeout+0xe>
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
 8001c20:	9b01      	ldr	r3, [sp, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	1e5a      	subs	r2, r3, #1
 8001c26:	9b01      	ldr	r3, [sp, #4]
 8001c28:	609a      	str	r2, [r3, #8]
  b = *iqp->q_rdptr++;
 8001c2a:	9b01      	ldr	r3, [sp, #4]
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	1c59      	adds	r1, r3, #1
 8001c30:	9a01      	ldr	r2, [sp, #4]
 8001c32:	6191      	str	r1, [r2, #24]
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	f88d 300f 	strb.w	r3, [sp, #15]
  if (iqp->q_rdptr >= iqp->q_top) {
 8001c3a:	9b01      	ldr	r3, [sp, #4]
 8001c3c:	699a      	ldr	r2, [r3, #24]
 8001c3e:	9b01      	ldr	r3, [sp, #4]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d303      	bcc.n	8001c4e <iqGetTimeout+0x5e>
    iqp->q_rdptr = iqp->q_buffer;
 8001c46:	9b01      	ldr	r3, [sp, #4]
 8001c48:	68da      	ldr	r2, [r3, #12]
 8001c4a:	9b01      	ldr	r3, [sp, #4]
 8001c4c:	619a      	str	r2, [r3, #24]
  }

  /* Inform the low side that the queue has at least one slot available.*/
  if (iqp->q_notify != NULL) {
 8001c4e:	9b01      	ldr	r3, [sp, #4]
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <iqGetTimeout+0x6e>
    iqp->q_notify(iqp);
 8001c56:	9b01      	ldr	r3, [sp, #4]
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	9801      	ldr	r0, [sp, #4]
 8001c5c:	4798      	blx	r3
  }

  osalSysUnlock();
 8001c5e:	f7ff fe67 	bl	8001930 <osalSysUnlock.lto_priv.1>

  return (msg_t)b;
 8001c62:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	b005      	add	sp, #20
 8001c6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c6e:	bf00      	nop

08001c70 <iqReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t iqReadTimeout(input_queue_t *iqp, uint8_t *bp,
                     size_t n, sysinterval_t timeout) {
 8001c70:	b500      	push	{lr}
 8001c72:	b089      	sub	sp, #36	; 0x24
 8001c74:	9003      	str	r0, [sp, #12]
 8001c76:	9102      	str	r1, [sp, #8]
 8001c78:	9201      	str	r2, [sp, #4]
 8001c7a:	9300      	str	r3, [sp, #0]
  qnotify_t nfy = iqp->q_notify;
 8001c7c:	9b03      	ldr	r3, [sp, #12]
 8001c7e:	69db      	ldr	r3, [r3, #28]
 8001c80:	9307      	str	r3, [sp, #28]
  size_t max = n;
 8001c82:	9b01      	ldr	r3, [sp, #4]
 8001c84:	9306      	str	r3, [sp, #24]

  osalDbgCheck(n > 0U);

  osalSysLock();
 8001c86:	f7ff fe4b 	bl	8001920 <osalSysLock.lto_priv.1>

  while (n > 0U) {
 8001c8a:	e024      	b.n	8001cd6 <iqReadTimeout+0x66>
    size_t done;

    done = iq_read(iqp, bp, n);
 8001c8c:	9a01      	ldr	r2, [sp, #4]
 8001c8e:	9902      	ldr	r1, [sp, #8]
 8001c90:	9803      	ldr	r0, [sp, #12]
 8001c92:	f7ff fe85 	bl	80019a0 <iq_read>
 8001c96:	9005      	str	r0, [sp, #20]
    if (done == (size_t)0) {
 8001c98:	9b05      	ldr	r3, [sp, #20]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d109      	bne.n	8001cb2 <iqReadTimeout+0x42>
      msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
 8001c9e:	9b03      	ldr	r3, [sp, #12]
 8001ca0:	9900      	ldr	r1, [sp, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff fe5c 	bl	8001960 <osalThreadEnqueueTimeoutS.lto_priv.1>
 8001ca8:	9004      	str	r0, [sp, #16]

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 8001caa:	9b04      	ldr	r3, [sp, #16]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d012      	beq.n	8001cd6 <iqReadTimeout+0x66>
        break;
 8001cb0:	e014      	b.n	8001cdc <iqReadTimeout+0x6c>
      }
    }
    else {
      /* Inform the low side that the queue has at least one empty slot
         available.*/
      if (nfy != NULL) {
 8001cb2:	9b07      	ldr	r3, [sp, #28]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d002      	beq.n	8001cbe <iqReadTimeout+0x4e>
        nfy(iqp);
 8001cb8:	9b07      	ldr	r3, [sp, #28]
 8001cba:	9803      	ldr	r0, [sp, #12]
 8001cbc:	4798      	blx	r3
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();
 8001cbe:	f7ff fe37 	bl	8001930 <osalSysUnlock.lto_priv.1>

      n  -= done;
 8001cc2:	9a01      	ldr	r2, [sp, #4]
 8001cc4:	9b05      	ldr	r3, [sp, #20]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	9301      	str	r3, [sp, #4]
      bp += done;
 8001cca:	9a02      	ldr	r2, [sp, #8]
 8001ccc:	9b05      	ldr	r3, [sp, #20]
 8001cce:	4413      	add	r3, r2
 8001cd0:	9302      	str	r3, [sp, #8]

      osalSysLock();
 8001cd2:	f7ff fe25 	bl	8001920 <osalSysLock.lto_priv.1>
  while (n > 0U) {
 8001cd6:	9b01      	ldr	r3, [sp, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1d7      	bne.n	8001c8c <iqReadTimeout+0x1c>
    }
  }

  osalSysUnlock();
 8001cdc:	f7ff fe28 	bl	8001930 <osalSysUnlock.lto_priv.1>
  return max - n;
 8001ce0:	9a06      	ldr	r2, [sp, #24]
 8001ce2:	9b01      	ldr	r3, [sp, #4]
 8001ce4:	1ad3      	subs	r3, r2, r3
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	b009      	add	sp, #36	; 0x24
 8001cea:	f85d fb04 	ldr.w	pc, [sp], #4
 8001cee:	bf00      	nop

08001cf0 <oqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {
 8001cf0:	b500      	push	{lr}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	9003      	str	r0, [sp, #12]
 8001cf6:	9102      	str	r1, [sp, #8]
 8001cf8:	9201      	str	r2, [sp, #4]
 8001cfa:	9300      	str	r3, [sp, #0]

  osalThreadQueueObjectInit(&oqp->q_waiting);
 8001cfc:	9b03      	ldr	r3, [sp, #12]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff fe1e 	bl	8001940 <osalThreadQueueObjectInit.lto_priv.1>
  oqp->q_counter = size;
 8001d04:	9b03      	ldr	r3, [sp, #12]
 8001d06:	9a01      	ldr	r2, [sp, #4]
 8001d08:	609a      	str	r2, [r3, #8]
  oqp->q_buffer  = bp;
 8001d0a:	9b03      	ldr	r3, [sp, #12]
 8001d0c:	9a02      	ldr	r2, [sp, #8]
 8001d0e:	60da      	str	r2, [r3, #12]
  oqp->q_rdptr   = bp;
 8001d10:	9b03      	ldr	r3, [sp, #12]
 8001d12:	9a02      	ldr	r2, [sp, #8]
 8001d14:	619a      	str	r2, [r3, #24]
  oqp->q_wrptr   = bp;
 8001d16:	9b03      	ldr	r3, [sp, #12]
 8001d18:	9a02      	ldr	r2, [sp, #8]
 8001d1a:	615a      	str	r2, [r3, #20]
  oqp->q_top     = bp + size;
 8001d1c:	9a02      	ldr	r2, [sp, #8]
 8001d1e:	9b01      	ldr	r3, [sp, #4]
 8001d20:	441a      	add	r2, r3
 8001d22:	9b03      	ldr	r3, [sp, #12]
 8001d24:	611a      	str	r2, [r3, #16]
  oqp->q_notify  = onfy;
 8001d26:	9b03      	ldr	r3, [sp, #12]
 8001d28:	9a00      	ldr	r2, [sp, #0]
 8001d2a:	61da      	str	r2, [r3, #28]
  oqp->q_link    = link;
 8001d2c:	9b03      	ldr	r3, [sp, #12]
 8001d2e:	9a06      	ldr	r2, [sp, #24]
 8001d30:	621a      	str	r2, [r3, #32]
}
 8001d32:	bf00      	nop
 8001d34:	b005      	add	sp, #20
 8001d36:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d3a:	bf00      	nop
 8001d3c:	0000      	movs	r0, r0
	...

08001d40 <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8001d40:	b500      	push	{lr}
 8001d42:	b087      	sub	sp, #28
 8001d44:	9003      	str	r0, [sp, #12]
 8001d46:	460b      	mov	r3, r1
 8001d48:	9201      	str	r2, [sp, #4]
 8001d4a:	f88d 300b 	strb.w	r3, [sp, #11]

  osalSysLock();
 8001d4e:	f7ff fde7 	bl	8001920 <osalSysLock.lto_priv.1>

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
 8001d52:	e00c      	b.n	8001d6e <oqPutTimeout+0x2e>
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8001d54:	9b03      	ldr	r3, [sp, #12]
 8001d56:	9901      	ldr	r1, [sp, #4]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff fe01 	bl	8001960 <osalThreadEnqueueTimeoutS.lto_priv.1>
 8001d5e:	9005      	str	r0, [sp, #20]
    if (msg < MSG_OK) {
 8001d60:	9b05      	ldr	r3, [sp, #20]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	da03      	bge.n	8001d6e <oqPutTimeout+0x2e>
      osalSysUnlock();
 8001d66:	f7ff fde3 	bl	8001930 <osalSysUnlock.lto_priv.1>
      return msg;
 8001d6a:	9b05      	ldr	r3, [sp, #20]
 8001d6c:	e025      	b.n	8001dba <oqPutTimeout+0x7a>
  while (oqIsFullI(oqp)) {
 8001d6e:	9b03      	ldr	r3, [sp, #12]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0ee      	beq.n	8001d54 <oqPutTimeout+0x14>
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
 8001d76:	9b03      	ldr	r3, [sp, #12]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	1e5a      	subs	r2, r3, #1
 8001d7c:	9b03      	ldr	r3, [sp, #12]
 8001d7e:	609a      	str	r2, [r3, #8]
  *oqp->q_wrptr++ = b;
 8001d80:	9b03      	ldr	r3, [sp, #12]
 8001d82:	695b      	ldr	r3, [r3, #20]
 8001d84:	1c59      	adds	r1, r3, #1
 8001d86:	9a03      	ldr	r2, [sp, #12]
 8001d88:	6151      	str	r1, [r2, #20]
 8001d8a:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8001d8e:	701a      	strb	r2, [r3, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8001d90:	9b03      	ldr	r3, [sp, #12]
 8001d92:	695a      	ldr	r2, [r3, #20]
 8001d94:	9b03      	ldr	r3, [sp, #12]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d303      	bcc.n	8001da4 <oqPutTimeout+0x64>
    oqp->q_wrptr = oqp->q_buffer;
 8001d9c:	9b03      	ldr	r3, [sp, #12]
 8001d9e:	68da      	ldr	r2, [r3, #12]
 8001da0:	9b03      	ldr	r3, [sp, #12]
 8001da2:	615a      	str	r2, [r3, #20]
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
 8001da4:	9b03      	ldr	r3, [sp, #12]
 8001da6:	69db      	ldr	r3, [r3, #28]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d003      	beq.n	8001db4 <oqPutTimeout+0x74>
    oqp->q_notify(oqp);
 8001dac:	9b03      	ldr	r3, [sp, #12]
 8001dae:	69db      	ldr	r3, [r3, #28]
 8001db0:	9803      	ldr	r0, [sp, #12]
 8001db2:	4798      	blx	r3
  }

  osalSysUnlock();
 8001db4:	f7ff fdbc 	bl	8001930 <osalSysUnlock.lto_priv.1>

  return MSG_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	b007      	add	sp, #28
 8001dbe:	f85d fb04 	ldr.w	pc, [sp], #4
 8001dc2:	bf00      	nop
	...

08001dd0 <oqGetI>:
 * @return              The byte value from the queue.
 * @retval MSG_TIMEOUT  if the queue is empty.
 *
 * @iclass
 */
msg_t oqGetI(output_queue_t *oqp) {
 8001dd0:	b500      	push	{lr}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	9001      	str	r0, [sp, #4]

  osalDbgCheckClassI();

  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
 8001dd6:	9b01      	ldr	r3, [sp, #4]
 8001dd8:	695a      	ldr	r2, [r3, #20]
 8001dda:	9b01      	ldr	r3, [sp, #4]
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d105      	bne.n	8001dee <oqGetI+0x1e>
 8001de2:	9b01      	ldr	r3, [sp, #4]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <oqGetI+0x1e>
 8001dea:	2301      	movs	r3, #1
 8001dec:	e000      	b.n	8001df0 <oqGetI+0x20>
 8001dee:	2300      	movs	r3, #0
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	f083 0301 	eor.w	r3, r3, #1
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d01e      	beq.n	8001e3e <oqGetI+0x6e>
    uint8_t b;

    oqp->q_counter++;
 8001e00:	9b01      	ldr	r3, [sp, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	1c5a      	adds	r2, r3, #1
 8001e06:	9b01      	ldr	r3, [sp, #4]
 8001e08:	609a      	str	r2, [r3, #8]
    b = *oqp->q_rdptr++;
 8001e0a:	9b01      	ldr	r3, [sp, #4]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	1c59      	adds	r1, r3, #1
 8001e10:	9a01      	ldr	r2, [sp, #4]
 8001e12:	6191      	str	r1, [r2, #24]
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	f88d 300f 	strb.w	r3, [sp, #15]
    if (oqp->q_rdptr >= oqp->q_top) {
 8001e1a:	9b01      	ldr	r3, [sp, #4]
 8001e1c:	699a      	ldr	r2, [r3, #24]
 8001e1e:	9b01      	ldr	r3, [sp, #4]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d303      	bcc.n	8001e2e <oqGetI+0x5e>
      oqp->q_rdptr = oqp->q_buffer;
 8001e26:	9b01      	ldr	r3, [sp, #4]
 8001e28:	68da      	ldr	r2, [r3, #12]
 8001e2a:	9b01      	ldr	r3, [sp, #4]
 8001e2c:	619a      	str	r2, [r3, #24]
    }

    osalThreadDequeueNextI(&oqp->q_waiting, MSG_OK);
 8001e2e:	9b01      	ldr	r3, [sp, #4]
 8001e30:	2100      	movs	r1, #0
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff fda4 	bl	8001980 <osalThreadDequeueNextI.lto_priv.1>

    return (msg_t)b;
 8001e38:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8001e3c:	e001      	b.n	8001e42 <oqGetI+0x72>
  }

  return MSG_TIMEOUT;
 8001e3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	b005      	add	sp, #20
 8001e46:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e4a:	bf00      	nop
 8001e4c:	0000      	movs	r0, r0
	...

08001e50 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8001e50:	b500      	push	{lr}
 8001e52:	b089      	sub	sp, #36	; 0x24
 8001e54:	9003      	str	r0, [sp, #12]
 8001e56:	9102      	str	r1, [sp, #8]
 8001e58:	9201      	str	r2, [sp, #4]
 8001e5a:	9300      	str	r3, [sp, #0]
  qnotify_t nfy = oqp->q_notify;
 8001e5c:	9b03      	ldr	r3, [sp, #12]
 8001e5e:	69db      	ldr	r3, [r3, #28]
 8001e60:	9307      	str	r3, [sp, #28]
  size_t max = n;
 8001e62:	9b01      	ldr	r3, [sp, #4]
 8001e64:	9306      	str	r3, [sp, #24]

  osalDbgCheck(n > 0U);

  osalSysLock();
 8001e66:	f7ff fd5b 	bl	8001920 <osalSysLock.lto_priv.1>

  while (n > 0U) {
 8001e6a:	e024      	b.n	8001eb6 <oqWriteTimeout+0x66>
    size_t done;

    done = oq_write(oqp, bp, n);
 8001e6c:	9a01      	ldr	r2, [sp, #4]
 8001e6e:	9902      	ldr	r1, [sp, #8]
 8001e70:	9803      	ldr	r0, [sp, #12]
 8001e72:	f7ff fdf5 	bl	8001a60 <oq_write>
 8001e76:	9005      	str	r0, [sp, #20]
    if (done == (size_t)0) {
 8001e78:	9b05      	ldr	r3, [sp, #20]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d109      	bne.n	8001e92 <oqWriteTimeout+0x42>
      msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8001e7e:	9b03      	ldr	r3, [sp, #12]
 8001e80:	9900      	ldr	r1, [sp, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff fd6c 	bl	8001960 <osalThreadEnqueueTimeoutS.lto_priv.1>
 8001e88:	9004      	str	r0, [sp, #16]

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 8001e8a:	9b04      	ldr	r3, [sp, #16]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d012      	beq.n	8001eb6 <oqWriteTimeout+0x66>
        break;
 8001e90:	e014      	b.n	8001ebc <oqWriteTimeout+0x6c>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 8001e92:	9b07      	ldr	r3, [sp, #28]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d002      	beq.n	8001e9e <oqWriteTimeout+0x4e>
        nfy(oqp);
 8001e98:	9b07      	ldr	r3, [sp, #28]
 8001e9a:	9803      	ldr	r0, [sp, #12]
 8001e9c:	4798      	blx	r3
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();
 8001e9e:	f7ff fd47 	bl	8001930 <osalSysUnlock.lto_priv.1>

      n  -= done;
 8001ea2:	9a01      	ldr	r2, [sp, #4]
 8001ea4:	9b05      	ldr	r3, [sp, #20]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	9301      	str	r3, [sp, #4]
      bp += done;
 8001eaa:	9a02      	ldr	r2, [sp, #8]
 8001eac:	9b05      	ldr	r3, [sp, #20]
 8001eae:	4413      	add	r3, r2
 8001eb0:	9302      	str	r3, [sp, #8]

      osalSysLock();
 8001eb2:	f7ff fd35 	bl	8001920 <osalSysLock.lto_priv.1>
  while (n > 0U) {
 8001eb6:	9b01      	ldr	r3, [sp, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1d7      	bne.n	8001e6c <oqWriteTimeout+0x1c>
    }
  }

  osalSysUnlock();
 8001ebc:	f7ff fd38 	bl	8001930 <osalSysUnlock.lto_priv.1>
  return max - n;
 8001ec0:	9a06      	ldr	r2, [sp, #24]
 8001ec2:	9b01      	ldr	r3, [sp, #4]
 8001ec4:	1ad3      	subs	r3, r2, r3
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	b009      	add	sp, #36	; 0x24
 8001eca:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ece:	bf00      	nop

08001ed0 <_mmcsd_get_slice>:
 *
 * @notapi
 */
uint32_t _mmcsd_get_slice(const uint32_t *data,
                          uint32_t end,
                          uint32_t start) {
 8001ed0:	b088      	sub	sp, #32
 8001ed2:	9003      	str	r0, [sp, #12]
 8001ed4:	9102      	str	r1, [sp, #8]
 8001ed6:	9201      	str	r2, [sp, #4]
  unsigned startidx, endidx, startoff;
  uint32_t endmask;

  osalDbgCheck((end >= start) && ((end - start) < 32U));

  startidx = start / 32U;
 8001ed8:	9b01      	ldr	r3, [sp, #4]
 8001eda:	095b      	lsrs	r3, r3, #5
 8001edc:	9305      	str	r3, [sp, #20]
  startoff = start % 32U;
 8001ede:	9b01      	ldr	r3, [sp, #4]
 8001ee0:	f003 031f 	and.w	r3, r3, #31
 8001ee4:	9304      	str	r3, [sp, #16]
  endidx   = end / 32U;
 8001ee6:	9b02      	ldr	r3, [sp, #8]
 8001ee8:	095b      	lsrs	r3, r3, #5
 8001eea:	9307      	str	r3, [sp, #28]
  endmask  = ((uint32_t)1U << ((end % 32U) + 1U)) - 1U;
 8001eec:	9b02      	ldr	r3, [sp, #8]
 8001eee:	f003 031f 	and.w	r3, r3, #31
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	3b01      	subs	r3, #1
 8001efc:	9306      	str	r3, [sp, #24]

  /* One or two pieces?*/
  if (startidx < endidx) {
 8001efe:	9a05      	ldr	r2, [sp, #20]
 8001f00:	9b07      	ldr	r3, [sp, #28]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d214      	bcs.n	8001f30 <_mmcsd_get_slice+0x60>
    return (data[startidx] >> startoff) |               /* Two pieces case. */
 8001f06:	9b05      	ldr	r3, [sp, #20]
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	9a03      	ldr	r2, [sp, #12]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	9b04      	ldr	r3, [sp, #16]
 8001f12:	40da      	lsrs	r2, r3
           ((data[endidx] & endmask) << (32U - startoff));
 8001f14:	9b07      	ldr	r3, [sp, #28]
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	9903      	ldr	r1, [sp, #12]
 8001f1a:	440b      	add	r3, r1
 8001f1c:	6819      	ldr	r1, [r3, #0]
 8001f1e:	9b06      	ldr	r3, [sp, #24]
 8001f20:	4019      	ands	r1, r3
 8001f22:	9b04      	ldr	r3, [sp, #16]
 8001f24:	f1c3 0320 	rsb	r3, r3, #32
 8001f28:	fa01 f303 	lsl.w	r3, r1, r3
    return (data[startidx] >> startoff) |               /* Two pieces case. */
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	e009      	b.n	8001f44 <_mmcsd_get_slice+0x74>
  }
  return (data[startidx] & endmask) >> startoff;        /* One piece case.  */
 8001f30:	9b05      	ldr	r3, [sp, #20]
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	9a03      	ldr	r2, [sp, #12]
 8001f36:	4413      	add	r3, r2
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	9b06      	ldr	r3, [sp, #24]
 8001f3c:	401a      	ands	r2, r3
 8001f3e:	9b04      	ldr	r3, [sp, #16]
 8001f40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	b008      	add	sp, #32
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	0000      	movs	r0, r0
	...

08001f50 <_mmcsd_get_capacity>:
 * @return              The card capacity.
 * @retval 0            CSD format error
 *
 * @notapi
 */
uint32_t _mmcsd_get_capacity(const uint32_t *csd) {
 8001f50:	b500      	push	{lr}
 8001f52:	b087      	sub	sp, #28
 8001f54:	9001      	str	r0, [sp, #4]
  uint32_t a, b, c;

  osalDbgCheck(NULL != csd);

  switch (_mmcsd_get_slice(csd, MMCSD_CSD_10_CSD_STRUCTURE_SLICE)) {
 8001f56:	227e      	movs	r2, #126	; 0x7e
 8001f58:	217f      	movs	r1, #127	; 0x7f
 8001f5a:	9801      	ldr	r0, [sp, #4]
 8001f5c:	f7ff ffb8 	bl	8001ed0 <_mmcsd_get_slice>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d004      	beq.n	8001f70 <_mmcsd_get_capacity+0x20>
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d01e      	beq.n	8001fa8 <_mmcsd_get_capacity+0x58>
  case 1:
    /* CSD version 2.0.*/
    return 1024U * (_mmcsd_get_slice(csd, MMCSD_CSD_20_C_SIZE_SLICE) + 1U);
  default:
    /* Reserved value detected.*/
    break;
 8001f6a:	bf00      	nop
  }
  return 0U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	e023      	b.n	8001fb8 <_mmcsd_get_capacity+0x68>
    a = _mmcsd_get_slice(csd, MMCSD_CSD_10_C_SIZE_SLICE);
 8001f70:	223e      	movs	r2, #62	; 0x3e
 8001f72:	2149      	movs	r1, #73	; 0x49
 8001f74:	9801      	ldr	r0, [sp, #4]
 8001f76:	f7ff ffab 	bl	8001ed0 <_mmcsd_get_slice>
 8001f7a:	9005      	str	r0, [sp, #20]
    b = _mmcsd_get_slice(csd, MMCSD_CSD_10_C_SIZE_MULT_SLICE);
 8001f7c:	222f      	movs	r2, #47	; 0x2f
 8001f7e:	2131      	movs	r1, #49	; 0x31
 8001f80:	9801      	ldr	r0, [sp, #4]
 8001f82:	f7ff ffa5 	bl	8001ed0 <_mmcsd_get_slice>
 8001f86:	9004      	str	r0, [sp, #16]
    c = _mmcsd_get_slice(csd, MMCSD_CSD_10_READ_BL_LEN_SLICE);
 8001f88:	2250      	movs	r2, #80	; 0x50
 8001f8a:	2153      	movs	r1, #83	; 0x53
 8001f8c:	9801      	ldr	r0, [sp, #4]
 8001f8e:	f7ff ff9f 	bl	8001ed0 <_mmcsd_get_slice>
 8001f92:	9003      	str	r0, [sp, #12]
    return ((a + 1U) << (b + 2U)) << (c - 9U);  /* 2^9 == MMCSD_BLOCK_SIZE. */
 8001f94:	9b05      	ldr	r3, [sp, #20]
 8001f96:	1c5a      	adds	r2, r3, #1
 8001f98:	9b04      	ldr	r3, [sp, #16]
 8001f9a:	3302      	adds	r3, #2
 8001f9c:	409a      	lsls	r2, r3
 8001f9e:	9b03      	ldr	r3, [sp, #12]
 8001fa0:	3b09      	subs	r3, #9
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	e007      	b.n	8001fb8 <_mmcsd_get_capacity+0x68>
    return 1024U * (_mmcsd_get_slice(csd, MMCSD_CSD_20_C_SIZE_SLICE) + 1U);
 8001fa8:	2230      	movs	r2, #48	; 0x30
 8001faa:	2145      	movs	r1, #69	; 0x45
 8001fac:	9801      	ldr	r0, [sp, #4]
 8001fae:	f7ff ff8f 	bl	8001ed0 <_mmcsd_get_slice>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	029b      	lsls	r3, r3, #10
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	b007      	add	sp, #28
 8001fbc:	f85d fb04 	ldr.w	pc, [sp], #4

08001fc0 <chSysLock.lto_priv.2>:
static inline void chSysLock(void) {
 8001fc0:	b082      	sub	sp, #8
 8001fc2:	2330      	movs	r3, #48	; 0x30
 8001fc4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001fc6:	9b01      	ldr	r3, [sp, #4]
 8001fc8:	f383 8811 	msr	BASEPRI, r3
}
 8001fcc:	bf00      	nop
}
 8001fce:	bf00      	nop
}
 8001fd0:	bf00      	nop
 8001fd2:	b002      	add	sp, #8
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
	...

08001fe0 <chSysUnlock.lto_priv.2>:
static inline void chSysUnlock(void) {
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001fe6:	9b01      	ldr	r3, [sp, #4]
 8001fe8:	f383 8811 	msr	BASEPRI, r3
}
 8001fec:	bf00      	nop
}
 8001fee:	bf00      	nop
}
 8001ff0:	bf00      	nop
 8001ff2:	b002      	add	sp, #8
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
	...

08002000 <osalSysLock.lto_priv.2>:
static inline void osalSysLock(void) {
 8002000:	b508      	push	{r3, lr}
  chSysLock();
 8002002:	f7ff ffdd 	bl	8001fc0 <chSysLock.lto_priv.2>
}
 8002006:	bf00      	nop
 8002008:	bd08      	pop	{r3, pc}
 800200a:	bf00      	nop
 800200c:	0000      	movs	r0, r0
	...

08002010 <osalSysUnlock.lto_priv.2>:
static inline void osalSysUnlock(void) {
 8002010:	b508      	push	{r3, lr}
  chSysUnlock();
 8002012:	f7ff ffe5 	bl	8001fe0 <chSysUnlock.lto_priv.2>
}
 8002016:	bf00      	nop
 8002018:	bd08      	pop	{r3, pc}
 800201a:	bf00      	nop
 800201c:	0000      	movs	r0, r0
	...

08002020 <osalMutexObjectInit.lto_priv.0>:
 *
 * @param[out] mp       pointer to the @p mutex_t object
 *
 * @init
 */
static inline void osalMutexObjectInit(mutex_t *mp) {
 8002020:	b500      	push	{lr}
 8002022:	b083      	sub	sp, #12
 8002024:	9001      	str	r0, [sp, #4]

#if CH_CFG_USE_MUTEXES
  chMtxObjectInit(mp);
 8002026:	9801      	ldr	r0, [sp, #4]
 8002028:	f005 fc32 	bl	8007890 <chMtxObjectInit>
#elif CH_CFG_USE_SEMAPHORES
  chSemObjectInit((semaphore_t *)mp, 1);
#else
 *mp = 0;
#endif
}
 800202c:	bf00      	nop
 800202e:	b003      	add	sp, #12
 8002030:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002040 <i2cInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void i2cInit(void) {
 8002040:	b508      	push	{r3, lr}

  i2c_lld_init();
 8002042:	f002 fd0d 	bl	8004a60 <i2c_lld_init>
}
 8002046:	bf00      	nop
 8002048:	bd08      	pop	{r3, pc}
 800204a:	bf00      	nop
 800204c:	0000      	movs	r0, r0
	...

08002050 <i2cObjectInit>:
 *
 * @param[out] i2cp     pointer to the @p I2CDriver object
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {
 8002050:	b500      	push	{lr}
 8002052:	b083      	sub	sp, #12
 8002054:	9001      	str	r0, [sp, #4]

  i2cp->state  = I2C_STOP;
 8002056:	9b01      	ldr	r3, [sp, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	701a      	strb	r2, [r3, #0]
  i2cp->config = NULL;
 800205c:	9b01      	ldr	r3, [sp, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	605a      	str	r2, [r3, #4]

#if I2C_USE_MUTUAL_EXCLUSION == TRUE
  osalMutexObjectInit(&i2cp->mutex);
 8002062:	9b01      	ldr	r3, [sp, #4]
 8002064:	330c      	adds	r3, #12
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff ffda 	bl	8002020 <osalMutexObjectInit.lto_priv.0>
#endif

#if defined(I2C_DRIVER_EXT_INIT_HOOK)
  I2C_DRIVER_EXT_INIT_HOOK(i2cp);
#endif
}
 800206c:	bf00      	nop
 800206e:	b003      	add	sp, #12
 8002070:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002080 <i2cStart>:
 * @param[in] config    pointer to the @p I2CConfig object
 * @return              The operation status.
 *
 * @api
 */
msg_t i2cStart(I2CDriver *i2cp, const I2CConfig *config) {
 8002080:	b500      	push	{lr}
 8002082:	b085      	sub	sp, #20
 8002084:	9001      	str	r0, [sp, #4]
 8002086:	9100      	str	r1, [sp, #0]
  msg_t msg;

  osalDbgCheck((i2cp != NULL) && (config != NULL));

  osalSysLock();
 8002088:	f7ff ffba 	bl	8002000 <osalSysLock.lto_priv.2>
  osalDbgAssert((i2cp->state == I2C_STOP) || (i2cp->state == I2C_READY) ||
                (i2cp->state == I2C_LOCKED), "invalid state");

  i2cp->config = config;
 800208c:	9b01      	ldr	r3, [sp, #4]
 800208e:	9a00      	ldr	r2, [sp, #0]
 8002090:	605a      	str	r2, [r3, #4]

#if defined(I2C_LLD_ENHANCED_API)
  msg = i2c_lld_start(i2cp);
#else
  i2c_lld_start(i2cp);
 8002092:	9801      	ldr	r0, [sp, #4]
 8002094:	f002 fcfc 	bl	8004a90 <i2c_lld_start>
  msg = HAL_RET_SUCCESS;
 8002098:	2300      	movs	r3, #0
 800209a:	9303      	str	r3, [sp, #12]
#endif
  if (msg == HAL_RET_SUCCESS) {
 800209c:	9b03      	ldr	r3, [sp, #12]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d103      	bne.n	80020aa <i2cStart+0x2a>
    i2cp->state = I2C_READY;
 80020a2:	9b01      	ldr	r3, [sp, #4]
 80020a4:	2202      	movs	r2, #2
 80020a6:	701a      	strb	r2, [r3, #0]
 80020a8:	e002      	b.n	80020b0 <i2cStart+0x30>
  }
  else {
    i2cp->state = I2C_STOP;
 80020aa:	9b01      	ldr	r3, [sp, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	701a      	strb	r2, [r3, #0]
  }

  osalSysUnlock();
 80020b0:	f7ff ffae 	bl	8002010 <osalSysUnlock.lto_priv.2>

  return msg;
 80020b4:	9b03      	ldr	r3, [sp, #12]
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	b005      	add	sp, #20
 80020ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80020be:	bf00      	nop

080020c0 <i2cMasterTransmitTimeout>:
                               i2caddr_t addr,
                               const uint8_t *txbuf,
                               size_t txbytes,
                               uint8_t *rxbuf,
                               size_t rxbytes,
                               sysinterval_t timeout) {
 80020c0:	b500      	push	{lr}
 80020c2:	b08b      	sub	sp, #44	; 0x2c
 80020c4:	9007      	str	r0, [sp, #28]
 80020c6:	9205      	str	r2, [sp, #20]
 80020c8:	9304      	str	r3, [sp, #16]
 80020ca:	460b      	mov	r3, r1
 80020cc:	f8ad 301a 	strh.w	r3, [sp, #26]
               ((rxbytes == 0U) || ((rxbytes > 0U) && (rxbuf != NULL))) &&
               (timeout != TIME_IMMEDIATE));

  osalDbgAssert(i2cp->state == I2C_READY, "not ready");

  osalSysLock();
 80020d0:	f7ff ff96 	bl	8002000 <osalSysLock.lto_priv.2>
  i2cp->errors = I2C_NO_ERROR;
 80020d4:	9b07      	ldr	r3, [sp, #28]
 80020d6:	2200      	movs	r2, #0
 80020d8:	609a      	str	r2, [r3, #8]
  i2cp->state = I2C_ACTIVE_TX;
 80020da:	9b07      	ldr	r3, [sp, #28]
 80020dc:	2203      	movs	r2, #3
 80020de:	701a      	strb	r2, [r3, #0]
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
 80020e0:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 80020e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80020e6:	9302      	str	r3, [sp, #8]
 80020e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80020ea:	9301      	str	r3, [sp, #4]
 80020ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80020ee:	9300      	str	r3, [sp, #0]
 80020f0:	9b04      	ldr	r3, [sp, #16]
 80020f2:	9a05      	ldr	r2, [sp, #20]
 80020f4:	9807      	ldr	r0, [sp, #28]
 80020f6:	f002 fd5b 	bl	8004bb0 <i2c_lld_master_transmit_timeout>
 80020fa:	9009      	str	r0, [sp, #36]	; 0x24
                                           rxbuf, rxbytes, timeout);
  if (rdymsg == MSG_TIMEOUT) {
 80020fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80020fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002102:	d103      	bne.n	800210c <i2cMasterTransmitTimeout+0x4c>
    i2cp->state = I2C_LOCKED;
 8002104:	9b07      	ldr	r3, [sp, #28]
 8002106:	2205      	movs	r2, #5
 8002108:	701a      	strb	r2, [r3, #0]
 800210a:	e002      	b.n	8002112 <i2cMasterTransmitTimeout+0x52>
  }
  else {
    i2cp->state = I2C_READY;
 800210c:	9b07      	ldr	r3, [sp, #28]
 800210e:	2202      	movs	r2, #2
 8002110:	701a      	strb	r2, [r3, #0]
  }
  osalSysUnlock();
 8002112:	f7ff ff7d 	bl	8002010 <osalSysUnlock.lto_priv.2>
  return rdymsg;
 8002116:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
 8002118:	4618      	mov	r0, r3
 800211a:	b00b      	add	sp, #44	; 0x2c
 800211c:	f85d fb04 	ldr.w	pc, [sp], #4

08002120 <chSysLock.lto_priv.3>:
static inline void chSysLock(void) {
 8002120:	b082      	sub	sp, #8
 8002122:	2330      	movs	r3, #48	; 0x30
 8002124:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002126:	9b01      	ldr	r3, [sp, #4]
 8002128:	f383 8811 	msr	BASEPRI, r3
}
 800212c:	bf00      	nop
}
 800212e:	bf00      	nop
}
 8002130:	bf00      	nop
 8002132:	b002      	add	sp, #8
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
	...

08002140 <chSysUnlock.lto_priv.3>:
static inline void chSysUnlock(void) {
 8002140:	b082      	sub	sp, #8
 8002142:	2300      	movs	r3, #0
 8002144:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002146:	9b01      	ldr	r3, [sp, #4]
 8002148:	f383 8811 	msr	BASEPRI, r3
}
 800214c:	bf00      	nop
}
 800214e:	bf00      	nop
}
 8002150:	bf00      	nop
 8002152:	b002      	add	sp, #8
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
	...

08002160 <osalSysLock.lto_priv.3>:
static inline void osalSysLock(void) {
 8002160:	b508      	push	{r3, lr}
  chSysLock();
 8002162:	f7ff ffdd 	bl	8002120 <chSysLock.lto_priv.3>
}
 8002166:	bf00      	nop
 8002168:	bd08      	pop	{r3, pc}
 800216a:	bf00      	nop
 800216c:	0000      	movs	r0, r0
	...

08002170 <osalSysUnlock.lto_priv.3>:
static inline void osalSysUnlock(void) {
 8002170:	b508      	push	{r3, lr}
  chSysUnlock();
 8002172:	f7ff ffe5 	bl	8002140 <chSysUnlock.lto_priv.3>
}
 8002176:	bf00      	nop
 8002178:	bd08      	pop	{r3, pc}
 800217a:	bf00      	nop
 800217c:	0000      	movs	r0, r0
	...

08002180 <osalThreadSleep.lto_priv.1>:
static inline void osalThreadSleep(sysinterval_t delay) {
 8002180:	b500      	push	{lr}
 8002182:	b083      	sub	sp, #12
 8002184:	9001      	str	r0, [sp, #4]
  chThdSleep(delay);
 8002186:	9801      	ldr	r0, [sp, #4]
 8002188:	f005 f9a2 	bl	80074d0 <chThdSleep>
}
 800218c:	bf00      	nop
 800218e:	b003      	add	sp, #12
 8002190:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080021a0 <mmc_read>:
/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static bool mmc_read(void *instance, uint32_t startblk,
                uint8_t *buffer, uint32_t n) {
 80021a0:	b500      	push	{lr}
 80021a2:	b085      	sub	sp, #20
 80021a4:	9003      	str	r0, [sp, #12]
 80021a6:	9102      	str	r1, [sp, #8]
 80021a8:	9201      	str	r2, [sp, #4]
 80021aa:	9300      	str	r3, [sp, #0]

  if (mmcStartSequentialRead((MMCDriver *)instance, startblk)) {
 80021ac:	9902      	ldr	r1, [sp, #8]
 80021ae:	9803      	ldr	r0, [sp, #12]
 80021b0:	f000 fb4e 	bl	8002850 <mmcStartSequentialRead>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d011      	beq.n	80021de <mmc_read+0x3e>
    return HAL_FAILED;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e01b      	b.n	80021f6 <mmc_read+0x56>
  }

  while (n > 0U) {
    if (mmcSequentialRead((MMCDriver *)instance, buffer)) {
 80021be:	9901      	ldr	r1, [sp, #4]
 80021c0:	9803      	ldr	r0, [sp, #12]
 80021c2:	f000 fb85 	bl	80028d0 <mmcSequentialRead>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <mmc_read+0x30>
      return HAL_FAILED;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e012      	b.n	80021f6 <mmc_read+0x56>
    }
    buffer += MMCSD_BLOCK_SIZE;
 80021d0:	9b01      	ldr	r3, [sp, #4]
 80021d2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80021d6:	9301      	str	r3, [sp, #4]
    n--;
 80021d8:	9b00      	ldr	r3, [sp, #0]
 80021da:	3b01      	subs	r3, #1
 80021dc:	9300      	str	r3, [sp, #0]
  while (n > 0U) {
 80021de:	9b00      	ldr	r3, [sp, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1ec      	bne.n	80021be <mmc_read+0x1e>
  }

  if (mmcStopSequentialRead((MMCDriver *)instance)) {
 80021e4:	9803      	ldr	r0, [sp, #12]
 80021e6:	f000 fbbb 	bl	8002960 <mmcStopSequentialRead>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <mmc_read+0x54>
    return HAL_FAILED;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e000      	b.n	80021f6 <mmc_read+0x56>
  }
  return HAL_SUCCESS;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	b005      	add	sp, #20
 80021fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80021fe:	bf00      	nop

08002200 <mmc_write>:

static bool mmc_write(void *instance, uint32_t startblk,
                 const uint8_t *buffer, uint32_t n) {
 8002200:	b500      	push	{lr}
 8002202:	b085      	sub	sp, #20
 8002204:	9003      	str	r0, [sp, #12]
 8002206:	9102      	str	r1, [sp, #8]
 8002208:	9201      	str	r2, [sp, #4]
 800220a:	9300      	str	r3, [sp, #0]

  if (mmcStartSequentialWrite((MMCDriver *)instance, startblk)) {
 800220c:	9902      	ldr	r1, [sp, #8]
 800220e:	9803      	ldr	r0, [sp, #12]
 8002210:	f000 fbce 	bl	80029b0 <mmcStartSequentialWrite>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d011      	beq.n	800223e <mmc_write+0x3e>
    return HAL_FAILED;
 800221a:	2301      	movs	r3, #1
 800221c:	e01b      	b.n	8002256 <mmc_write+0x56>
  }

  while (n > 0U) {
    if (mmcSequentialWrite((MMCDriver *)instance, buffer)) {
 800221e:	9901      	ldr	r1, [sp, #4]
 8002220:	9803      	ldr	r0, [sp, #12]
 8002222:	f000 fc05 	bl	8002a30 <mmcSequentialWrite>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <mmc_write+0x30>
      return HAL_FAILED;
 800222c:	2301      	movs	r3, #1
 800222e:	e012      	b.n	8002256 <mmc_write+0x56>
    }
    buffer += MMCSD_BLOCK_SIZE;
 8002230:	9b01      	ldr	r3, [sp, #4]
 8002232:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002236:	9301      	str	r3, [sp, #4]
    n--;
 8002238:	9b00      	ldr	r3, [sp, #0]
 800223a:	3b01      	subs	r3, #1
 800223c:	9300      	str	r3, [sp, #0]
  while (n > 0U) {
 800223e:	9b00      	ldr	r3, [sp, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d1ec      	bne.n	800221e <mmc_write+0x1e>
  }

  if (mmcStopSequentialWrite((MMCDriver *)instance)) {
 8002244:	9803      	ldr	r0, [sp, #12]
 8002246:	f000 fc43 	bl	8002ad0 <mmcStopSequentialWrite>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <mmc_write+0x54>
    return HAL_FAILED;
 8002250:	2301      	movs	r3, #1
 8002252:	e000      	b.n	8002256 <mmc_write+0x56>
  }
  return HAL_SUCCESS;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	b005      	add	sp, #20
 800225a:	f85d fb04 	ldr.w	pc, [sp], #4
 800225e:	bf00      	nop

08002260 <crc7>:
 * @param[in] crc       start value for CRC
 * @param[in] buffer    pointer to data buffer
 * @param[in] len       length of data
 * @return              Calculated CRC
 */
static uint8_t crc7(uint8_t crc, const uint8_t *buffer, size_t len) {
 8002260:	b084      	sub	sp, #16
 8002262:	4603      	mov	r3, r0
 8002264:	9102      	str	r1, [sp, #8]
 8002266:	9201      	str	r2, [sp, #4]
 8002268:	f88d 300f 	strb.w	r3, [sp, #15]

  while (len > 0U) {
 800226c:	e00e      	b.n	800228c <crc7+0x2c>
    crc = crc7_lookup_table[(crc << 1) ^ (*buffer++)];
 800226e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8002272:	005a      	lsls	r2, r3, #1
 8002274:	9b02      	ldr	r3, [sp, #8]
 8002276:	1c59      	adds	r1, r3, #1
 8002278:	9102      	str	r1, [sp, #8]
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	4053      	eors	r3, r2
 800227e:	4a07      	ldr	r2, [pc, #28]	; (800229c <crc7+0x3c>)
 8002280:	5cd3      	ldrb	r3, [r2, r3]
 8002282:	f88d 300f 	strb.w	r3, [sp, #15]
    len--;
 8002286:	9b01      	ldr	r3, [sp, #4]
 8002288:	3b01      	subs	r3, #1
 800228a:	9301      	str	r3, [sp, #4]
  while (len > 0U) {
 800228c:	9b01      	ldr	r3, [sp, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1ed      	bne.n	800226e <crc7+0xe>
  }
  return crc;
 8002292:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
 8002296:	4618      	mov	r0, r3
 8002298:	b004      	add	sp, #16
 800229a:	4770      	bx	lr
 800229c:	0800eb2c 	.word	0x0800eb2c

080022a0 <wait>:
 *
 * @param[in] mmcp      pointer to the @p MMCDriver object
 *
 * @notapi
 */
static void wait(MMCDriver *mmcp) {
 80022a0:	b500      	push	{lr}
 80022a2:	b085      	sub	sp, #20
 80022a4:	9001      	str	r0, [sp, #4]
  int i;
  uint8_t buf[4];

  for (i = 0; i < 16; i++) {
 80022a6:	2300      	movs	r3, #0
 80022a8:	9303      	str	r3, [sp, #12]
 80022aa:	e00e      	b.n	80022ca <wait+0x2a>
    spiReceive(mmcp->config->spip, 1, buf);
 80022ac:	9b01      	ldr	r3, [sp, #4]
 80022ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	aa02      	add	r2, sp, #8
 80022b4:	2101      	movs	r1, #1
 80022b6:	4618      	mov	r0, r3
 80022b8:	f000 ff8a 	bl	80031d0 <spiReceive>
    if (buf[0] == 0xFFU) {
 80022bc:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80022c0:	2bff      	cmp	r3, #255	; 0xff
 80022c2:	d015      	beq.n	80022f0 <wait+0x50>
  for (i = 0; i < 16; i++) {
 80022c4:	9b03      	ldr	r3, [sp, #12]
 80022c6:	3301      	adds	r3, #1
 80022c8:	9303      	str	r3, [sp, #12]
 80022ca:	9b03      	ldr	r3, [sp, #12]
 80022cc:	2b0f      	cmp	r3, #15
 80022ce:	dded      	ble.n	80022ac <wait+0xc>
      return;
    }
  }
  /* Looks like it is a long wait.*/
  while (true) {
    spiReceive(mmcp->config->spip, 1, buf);
 80022d0:	9b01      	ldr	r3, [sp, #4]
 80022d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	aa02      	add	r2, sp, #8
 80022d8:	2101      	movs	r1, #1
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 ff78 	bl	80031d0 <spiReceive>
    if (buf[0] == 0xFFU) {
 80022e0:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80022e4:	2bff      	cmp	r3, #255	; 0xff
 80022e6:	d005      	beq.n	80022f4 <wait+0x54>
      break;
    }
#if MMC_NICE_WAITING == TRUE
    /* Trying to be nice with the other threads.*/
    osalThreadSleepMilliseconds(1);
 80022e8:	200a      	movs	r0, #10
 80022ea:	f7ff ff49 	bl	8002180 <osalThreadSleep.lto_priv.1>
    spiReceive(mmcp->config->spip, 1, buf);
 80022ee:	e7ef      	b.n	80022d0 <wait+0x30>
      return;
 80022f0:	bf00      	nop
 80022f2:	e000      	b.n	80022f6 <wait+0x56>
      break;
 80022f4:	bf00      	nop
#endif
  }
}
 80022f6:	b005      	add	sp, #20
 80022f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80022fc:	0000      	movs	r0, r0
	...

08002300 <send_hdr>:
 * @param[in] cmd       the command id
 * @param[in] arg       the command argument
 *
 * @notapi
 */
static void send_hdr(MMCDriver *mmcp, uint8_t cmd, uint32_t arg) {
 8002300:	b500      	push	{lr}
 8002302:	b087      	sub	sp, #28
 8002304:	9003      	str	r0, [sp, #12]
 8002306:	460b      	mov	r3, r1
 8002308:	9201      	str	r2, [sp, #4]
 800230a:	f88d 300b 	strb.w	r3, [sp, #11]
  uint8_t buf[6];

  /* Wait for the bus to become idle if a write operation was in progress.*/
  wait(mmcp);
 800230e:	9803      	ldr	r0, [sp, #12]
 8002310:	f7ff ffc6 	bl	80022a0 <wait>

  buf[0] = (uint8_t)0x40U | cmd;
 8002314:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8002318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800231c:	b2db      	uxtb	r3, r3
 800231e:	f88d 3010 	strb.w	r3, [sp, #16]
  buf[1] = (uint8_t)(arg >> 24U);
 8002322:	9b01      	ldr	r3, [sp, #4]
 8002324:	0e1b      	lsrs	r3, r3, #24
 8002326:	b2db      	uxtb	r3, r3
 8002328:	f88d 3011 	strb.w	r3, [sp, #17]
  buf[2] = (uint8_t)(arg >> 16U);
 800232c:	9b01      	ldr	r3, [sp, #4]
 800232e:	0c1b      	lsrs	r3, r3, #16
 8002330:	b2db      	uxtb	r3, r3
 8002332:	f88d 3012 	strb.w	r3, [sp, #18]
  buf[3] = (uint8_t)(arg >> 8U);
 8002336:	9b01      	ldr	r3, [sp, #4]
 8002338:	0a1b      	lsrs	r3, r3, #8
 800233a:	b2db      	uxtb	r3, r3
 800233c:	f88d 3013 	strb.w	r3, [sp, #19]
  buf[4] = (uint8_t)arg;
 8002340:	9b01      	ldr	r3, [sp, #4]
 8002342:	b2db      	uxtb	r3, r3
 8002344:	f88d 3014 	strb.w	r3, [sp, #20]
  /* Calculate CRC for command header, shift to right position, add stop bit.*/
  buf[5] = ((crc7(0, buf, 5U) & 0x7FU) << 1U) | 0x01U;
 8002348:	ab04      	add	r3, sp, #16
 800234a:	2205      	movs	r2, #5
 800234c:	4619      	mov	r1, r3
 800234e:	2000      	movs	r0, #0
 8002350:	f7ff ff86 	bl	8002260 <crc7>
 8002354:	4603      	mov	r3, r0
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	b2db      	uxtb	r3, r3
 800235a:	f043 0301 	orr.w	r3, r3, #1
 800235e:	b2db      	uxtb	r3, r3
 8002360:	f88d 3015 	strb.w	r3, [sp, #21]

  spiSend(mmcp->config->spip, 6, buf);
 8002364:	9b03      	ldr	r3, [sp, #12]
 8002366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	aa04      	add	r2, sp, #16
 800236c:	2106      	movs	r1, #6
 800236e:	4618      	mov	r0, r3
 8002370:	f000 ff0e 	bl	8003190 <spiSend>
}
 8002374:	bf00      	nop
 8002376:	b007      	add	sp, #28
 8002378:	f85d fb04 	ldr.w	pc, [sp], #4
 800237c:	0000      	movs	r0, r0
	...

08002380 <recvr1>:
 * @return              The response as an @p uint8_t value.
 * @retval 0xFF         timed out.
 *
 * @notapi
 */
static uint8_t recvr1(MMCDriver *mmcp) {
 8002380:	b500      	push	{lr}
 8002382:	b085      	sub	sp, #20
 8002384:	9001      	str	r0, [sp, #4]
  int i;
  uint8_t r1[1];

  for (i = 0; i < 9; i++) {
 8002386:	2300      	movs	r3, #0
 8002388:	9303      	str	r3, [sp, #12]
 800238a:	e011      	b.n	80023b0 <recvr1+0x30>
    spiReceive(mmcp->config->spip, 1, r1);
 800238c:	9b01      	ldr	r3, [sp, #4]
 800238e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	aa02      	add	r2, sp, #8
 8002394:	2101      	movs	r1, #1
 8002396:	4618      	mov	r0, r3
 8002398:	f000 ff1a 	bl	80031d0 <spiReceive>
    if (r1[0] != 0xFFU) {
 800239c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80023a0:	2bff      	cmp	r3, #255	; 0xff
 80023a2:	d002      	beq.n	80023aa <recvr1+0x2a>
      return r1[0];
 80023a4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80023a8:	e007      	b.n	80023ba <recvr1+0x3a>
  for (i = 0; i < 9; i++) {
 80023aa:	9b03      	ldr	r3, [sp, #12]
 80023ac:	3301      	adds	r3, #1
 80023ae:	9303      	str	r3, [sp, #12]
 80023b0:	9b03      	ldr	r3, [sp, #12]
 80023b2:	2b08      	cmp	r3, #8
 80023b4:	ddea      	ble.n	800238c <recvr1+0xc>
    }
  }
  return 0xFFU;
 80023b6:	23ff      	movs	r3, #255	; 0xff
 80023b8:	bf00      	nop
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	b005      	add	sp, #20
 80023be:	f85d fb04 	ldr.w	pc, [sp], #4
 80023c2:	bf00      	nop
	...

080023d0 <recvr3>:
 * @return              First response byte as an @p uint8_t value.
 * @retval 0xFF         timed out.
 *
 * @notapi
 */
static uint8_t recvr3(MMCDriver *mmcp, uint8_t* buffer) {
 80023d0:	b500      	push	{lr}
 80023d2:	b085      	sub	sp, #20
 80023d4:	9001      	str	r0, [sp, #4]
 80023d6:	9100      	str	r1, [sp, #0]
  uint8_t r1;

  r1 = recvr1(mmcp);
 80023d8:	9801      	ldr	r0, [sp, #4]
 80023da:	f7ff ffd1 	bl	8002380 <recvr1>
 80023de:	4603      	mov	r3, r0
 80023e0:	f88d 300f 	strb.w	r3, [sp, #15]
  spiReceive(mmcp->config->spip, 4, buffer);
 80023e4:	9b01      	ldr	r3, [sp, #4]
 80023e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	9a00      	ldr	r2, [sp, #0]
 80023ec:	2104      	movs	r1, #4
 80023ee:	4618      	mov	r0, r3
 80023f0:	f000 feee 	bl	80031d0 <spiReceive>

  return r1;
 80023f4:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	b005      	add	sp, #20
 80023fc:	f85d fb04 	ldr.w	pc, [sp], #4

08002400 <send_command_R1>:
 * @return              The response as an @p uint8_t value.
 * @retval 0xFF         timed out.
 *
 * @notapi
 */
static uint8_t send_command_R1(MMCDriver *mmcp, uint8_t cmd, uint32_t arg) {
 8002400:	b500      	push	{lr}
 8002402:	b087      	sub	sp, #28
 8002404:	9003      	str	r0, [sp, #12]
 8002406:	460b      	mov	r3, r1
 8002408:	9201      	str	r2, [sp, #4]
 800240a:	f88d 300b 	strb.w	r3, [sp, #11]
  uint8_t r1;

  spiSelect(mmcp->config->spip);
 800240e:	9b03      	ldr	r3, [sp, #12]
 8002410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4618      	mov	r0, r3
 8002416:	f000 fe0b 	bl	8003030 <spiSelect>
  send_hdr(mmcp, cmd, arg);
 800241a:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800241e:	9a01      	ldr	r2, [sp, #4]
 8002420:	4619      	mov	r1, r3
 8002422:	9803      	ldr	r0, [sp, #12]
 8002424:	f7ff ff6c 	bl	8002300 <send_hdr>
  r1 = recvr1(mmcp);
 8002428:	9803      	ldr	r0, [sp, #12]
 800242a:	f7ff ffa9 	bl	8002380 <recvr1>
 800242e:	4603      	mov	r3, r0
 8002430:	f88d 3017 	strb.w	r3, [sp, #23]
  spiUnselect(mmcp->config->spip);
 8002434:	9b03      	ldr	r3, [sp, #12]
 8002436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f000 fe10 	bl	8003060 <spiUnselect>
  return r1;
 8002440:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
 8002444:	4618      	mov	r0, r3
 8002446:	b007      	add	sp, #28
 8002448:	f85d fb04 	ldr.w	pc, [sp], #4
 800244c:	0000      	movs	r0, r0
	...

08002450 <send_command_R3>:
 * @retval 0xFF         timed out.
 *
 * @notapi
 */
static uint8_t send_command_R3(MMCDriver *mmcp, uint8_t cmd, uint32_t arg,
                               uint8_t *response) {
 8002450:	b500      	push	{lr}
 8002452:	b087      	sub	sp, #28
 8002454:	9003      	str	r0, [sp, #12]
 8002456:	9201      	str	r2, [sp, #4]
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	460b      	mov	r3, r1
 800245c:	f88d 300b 	strb.w	r3, [sp, #11]
  uint8_t r1;

  spiSelect(mmcp->config->spip);
 8002460:	9b03      	ldr	r3, [sp, #12]
 8002462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f000 fde2 	bl	8003030 <spiSelect>
  send_hdr(mmcp, cmd, arg);
 800246c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8002470:	9a01      	ldr	r2, [sp, #4]
 8002472:	4619      	mov	r1, r3
 8002474:	9803      	ldr	r0, [sp, #12]
 8002476:	f7ff ff43 	bl	8002300 <send_hdr>
  r1 = recvr3(mmcp, response);
 800247a:	9900      	ldr	r1, [sp, #0]
 800247c:	9803      	ldr	r0, [sp, #12]
 800247e:	f7ff ffa7 	bl	80023d0 <recvr3>
 8002482:	4603      	mov	r3, r0
 8002484:	f88d 3017 	strb.w	r3, [sp, #23]
  spiUnselect(mmcp->config->spip);
 8002488:	9b03      	ldr	r3, [sp, #12]
 800248a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f000 fde6 	bl	8003060 <spiUnselect>
  return r1;
 8002494:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
 8002498:	4618      	mov	r0, r3
 800249a:	b007      	add	sp, #28
 800249c:	f85d fb04 	ldr.w	pc, [sp], #4

080024a0 <read_CxD>:
 * @retval HAL_SUCCESS  the operation succeeded.
 * @retval HAL_FAILED   the operation failed.
 *
 * @notapi
 */
static bool read_CxD(MMCDriver *mmcp, uint8_t cmd, uint32_t cxd[4]) {
 80024a0:	b500      	push	{lr}
 80024a2:	b08d      	sub	sp, #52	; 0x34
 80024a4:	9003      	str	r0, [sp, #12]
 80024a6:	460b      	mov	r3, r1
 80024a8:	9201      	str	r2, [sp, #4]
 80024aa:	f88d 300b 	strb.w	r3, [sp, #11]
  unsigned i;
  uint8_t *bp, buf[16];

  spiSelect(mmcp->config->spip);
 80024ae:	9b03      	ldr	r3, [sp, #12]
 80024b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f000 fdbb 	bl	8003030 <spiSelect>
  send_hdr(mmcp, cmd, 0);
 80024ba:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80024be:	2200      	movs	r2, #0
 80024c0:	4619      	mov	r1, r3
 80024c2:	9803      	ldr	r0, [sp, #12]
 80024c4:	f7ff ff1c 	bl	8002300 <send_hdr>
  if (recvr1(mmcp) != 0x00U) {
 80024c8:	9803      	ldr	r0, [sp, #12]
 80024ca:	f7ff ff59 	bl	8002380 <recvr1>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d007      	beq.n	80024e4 <read_CxD+0x44>
    spiUnselect(mmcp->config->spip);
 80024d4:	9b03      	ldr	r3, [sp, #12]
 80024d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f000 fdc0 	bl	8003060 <spiUnselect>
    return HAL_FAILED;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e052      	b.n	800258a <read_CxD+0xea>
  }

  /* Wait for data availability.*/
  for (i = 0U; i < MMC_WAIT_DATA; i++) {
 80024e4:	2300      	movs	r3, #0
 80024e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80024e8:	e048      	b.n	800257c <read_CxD+0xdc>
    spiReceive(mmcp->config->spip, 1, buf);
 80024ea:	9b03      	ldr	r3, [sp, #12]
 80024ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	aa05      	add	r2, sp, #20
 80024f2:	2101      	movs	r1, #1
 80024f4:	4618      	mov	r0, r3
 80024f6:	f000 fe6b 	bl	80031d0 <spiReceive>
    if (buf[0] == 0xFEU) {
 80024fa:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80024fe:	2bfe      	cmp	r3, #254	; 0xfe
 8002500:	d139      	bne.n	8002576 <read_CxD+0xd6>
      uint32_t *wp;

      spiReceive(mmcp->config->spip, 16, buf);
 8002502:	9b03      	ldr	r3, [sp, #12]
 8002504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	aa05      	add	r2, sp, #20
 800250a:	2110      	movs	r1, #16
 800250c:	4618      	mov	r0, r3
 800250e:	f000 fe5f 	bl	80031d0 <spiReceive>
      bp = buf;
 8002512:	ab05      	add	r3, sp, #20
 8002514:	930a      	str	r3, [sp, #40]	; 0x28
      for (wp = &cxd[3]; wp >= cxd; wp--) {
 8002516:	9b01      	ldr	r3, [sp, #4]
 8002518:	330c      	adds	r3, #12
 800251a:	9309      	str	r3, [sp, #36]	; 0x24
 800251c:	e018      	b.n	8002550 <read_CxD+0xb0>
        *wp = ((uint32_t)bp[0] << 24U) | ((uint32_t)bp[1] << 16U) |
 800251e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	061a      	lsls	r2, r3, #24
 8002524:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002526:	3301      	adds	r3, #1
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	041b      	lsls	r3, r3, #16
 800252c:	431a      	orrs	r2, r3
              ((uint32_t)bp[2] << 8U)  | (uint32_t)bp[3];
 800252e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002530:	3302      	adds	r3, #2
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	021b      	lsls	r3, r3, #8
        *wp = ((uint32_t)bp[0] << 24U) | ((uint32_t)bp[1] << 16U) |
 8002536:	4313      	orrs	r3, r2
              ((uint32_t)bp[2] << 8U)  | (uint32_t)bp[3];
 8002538:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800253a:	3203      	adds	r2, #3
 800253c:	7812      	ldrb	r2, [r2, #0]
 800253e:	431a      	orrs	r2, r3
        *wp = ((uint32_t)bp[0] << 24U) | ((uint32_t)bp[1] << 16U) |
 8002540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002542:	601a      	str	r2, [r3, #0]
        bp += 4;
 8002544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002546:	3304      	adds	r3, #4
 8002548:	930a      	str	r3, [sp, #40]	; 0x28
      for (wp = &cxd[3]; wp >= cxd; wp--) {
 800254a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800254c:	3b04      	subs	r3, #4
 800254e:	9309      	str	r3, [sp, #36]	; 0x24
 8002550:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002552:	9b01      	ldr	r3, [sp, #4]
 8002554:	429a      	cmp	r2, r3
 8002556:	d2e2      	bcs.n	800251e <read_CxD+0x7e>
      }

      /* CRC ignored then end of transaction. */
      spiIgnore(mmcp->config->spip, 2);
 8002558:	9b03      	ldr	r3, [sp, #12]
 800255a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2102      	movs	r1, #2
 8002560:	4618      	mov	r0, r3
 8002562:	f000 fdf5 	bl	8003150 <spiIgnore>
      spiUnselect(mmcp->config->spip);
 8002566:	9b03      	ldr	r3, [sp, #12]
 8002568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4618      	mov	r0, r3
 800256e:	f000 fd77 	bl	8003060 <spiUnselect>

      return HAL_SUCCESS;
 8002572:	2300      	movs	r3, #0
 8002574:	e009      	b.n	800258a <read_CxD+0xea>
  for (i = 0U; i < MMC_WAIT_DATA; i++) {
 8002576:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002578:	3301      	adds	r3, #1
 800257a:	930b      	str	r3, [sp, #44]	; 0x2c
 800257c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800257e:	f242 720f 	movw	r2, #9999	; 0x270f
 8002582:	4293      	cmp	r3, r2
 8002584:	d9b1      	bls.n	80024ea <read_CxD+0x4a>
    }
  }
  return HAL_FAILED;
 8002586:	2301      	movs	r3, #1
 8002588:	bf00      	nop
}
 800258a:	4618      	mov	r0, r3
 800258c:	b00d      	add	sp, #52	; 0x34
 800258e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002592:	bf00      	nop
	...

080025a0 <sync>:
 *
 * @param[in] mmcp      pointer to the @p MMCDriver object
 *
 * @notapi
 */
static void sync(MMCDriver *mmcp) {
 80025a0:	b500      	push	{lr}
 80025a2:	b085      	sub	sp, #20
 80025a4:	9001      	str	r0, [sp, #4]
  uint8_t buf[1];

  spiSelect(mmcp->config->spip);
 80025a6:	9b01      	ldr	r3, [sp, #4]
 80025a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f000 fd3f 	bl	8003030 <spiSelect>
  while (true) {
    spiReceive(mmcp->config->spip, 1, buf);
 80025b2:	9b01      	ldr	r3, [sp, #4]
 80025b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	aa03      	add	r2, sp, #12
 80025ba:	2101      	movs	r1, #1
 80025bc:	4618      	mov	r0, r3
 80025be:	f000 fe07 	bl	80031d0 <spiReceive>
    if (buf[0] == 0xFFU) {
 80025c2:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80025c6:	2bff      	cmp	r3, #255	; 0xff
 80025c8:	d003      	beq.n	80025d2 <sync+0x32>
      break;
    }
#if MMC_NICE_WAITING == TRUE
    /* Trying to be nice with the other threads.*/
    osalThreadSleepMilliseconds(1);
 80025ca:	200a      	movs	r0, #10
 80025cc:	f7ff fdd8 	bl	8002180 <osalThreadSleep.lto_priv.1>
    spiReceive(mmcp->config->spip, 1, buf);
 80025d0:	e7ef      	b.n	80025b2 <sync+0x12>
      break;
 80025d2:	bf00      	nop
#endif
  }
  spiUnselect(mmcp->config->spip);
 80025d4:	9b01      	ldr	r3, [sp, #4]
 80025d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 fd40 	bl	8003060 <spiUnselect>
}
 80025e0:	bf00      	nop
 80025e2:	b005      	add	sp, #20
 80025e4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080025f0 <mmcInit>:
 *
 * @init
 */
void mmcInit(void) {

}
 80025f0:	bf00      	nop
 80025f2:	4770      	bx	lr
	...

08002600 <mmcObjectInit>:
 *
 * @param[out] mmcp         pointer to the @p MMCDriver object
 *
 * @init
 */
void mmcObjectInit(MMCDriver *mmcp) {
 8002600:	b082      	sub	sp, #8
 8002602:	9001      	str	r0, [sp, #4]

  mmcp->vmt = &mmc_vmt;
 8002604:	9b01      	ldr	r3, [sp, #4]
 8002606:	4a07      	ldr	r2, [pc, #28]	; (8002624 <mmcObjectInit+0x24>)
 8002608:	601a      	str	r2, [r3, #0]
  mmcp->state = BLK_STOP;
 800260a:	9b01      	ldr	r3, [sp, #4]
 800260c:	2201      	movs	r2, #1
 800260e:	711a      	strb	r2, [r3, #4]
  mmcp->config = NULL;
 8002610:	9b01      	ldr	r3, [sp, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	62da      	str	r2, [r3, #44]	; 0x2c
  mmcp->block_addresses = false;
 8002616:	9b01      	ldr	r3, [sp, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 800261e:	bf00      	nop
 8002620:	b002      	add	sp, #8
 8002622:	4770      	bx	lr
 8002624:	0800eb08 	.word	0x0800eb08
	...

08002630 <mmcConnect>:
 *                      in the @p MMC_READY state.
 * @retval HAL_FAILED    the operation failed.
 *
 * @api
 */
bool mmcConnect(MMCDriver *mmcp) {
 8002630:	b500      	push	{lr}
 8002632:	b087      	sub	sp, #28
 8002634:	9001      	str	r0, [sp, #4]

  osalDbgAssert((mmcp->state == BLK_ACTIVE) || (mmcp->state == BLK_READY),
                "invalid state");

  /* Connection procedure in progress.*/
  mmcp->state = BLK_CONNECTING;
 8002636:	9b01      	ldr	r3, [sp, #4]
 8002638:	2203      	movs	r2, #3
 800263a:	711a      	strb	r2, [r3, #4]
  mmcp->block_addresses = false;
 800263c:	9b01      	ldr	r3, [sp, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Slow clock mode and 128 clock pulses.*/
  spiStart(mmcp->config->spip, mmcp->config->lscfg);
 8002644:	9b01      	ldr	r3, [sp, #4]
 8002646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	9b01      	ldr	r3, [sp, #4]
 800264c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	4619      	mov	r1, r3
 8002652:	4610      	mov	r0, r2
 8002654:	f000 fcb4 	bl	8002fc0 <spiStart>
  spiIgnore(mmcp->config->spip, 16);
 8002658:	9b01      	ldr	r3, [sp, #4]
 800265a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2110      	movs	r1, #16
 8002660:	4618      	mov	r0, r3
 8002662:	f000 fd75 	bl	8003150 <spiIgnore>

  /* SPI mode selection.*/
  i = 0;
 8002666:	2300      	movs	r3, #0
 8002668:	9305      	str	r3, [sp, #20]
  while (true) {
    if (send_command_R1(mmcp, MMCSD_CMD_GO_IDLE_STATE, 0) == 0x01U) {
 800266a:	2200      	movs	r2, #0
 800266c:	2100      	movs	r1, #0
 800266e:	9801      	ldr	r0, [sp, #4]
 8002670:	f7ff fec6 	bl	8002400 <send_command_R1>
 8002674:	4603      	mov	r3, r0
 8002676:	2b01      	cmp	r3, #1
 8002678:	d00a      	beq.n	8002690 <mmcConnect+0x60>
      break;
    }
    if (++i >= MMC_CMD0_RETRY) {
 800267a:	9b05      	ldr	r3, [sp, #20]
 800267c:	3301      	adds	r3, #1
 800267e:	9305      	str	r3, [sp, #20]
 8002680:	9b05      	ldr	r3, [sp, #20]
 8002682:	2b09      	cmp	r3, #9
 8002684:	f200 8092 	bhi.w	80027ac <mmcConnect+0x17c>
      goto failed;
    }
    osalThreadSleepMilliseconds(10);
 8002688:	2064      	movs	r0, #100	; 0x64
 800268a:	f7ff fd79 	bl	8002180 <osalThreadSleep.lto_priv.1>
    if (send_command_R1(mmcp, MMCSD_CMD_GO_IDLE_STATE, 0) == 0x01U) {
 800268e:	e7ec      	b.n	800266a <mmcConnect+0x3a>
      break;
 8002690:	bf00      	nop

  /* Try to detect if this is a high capacity card and switch to block
     addresses if possible.
     This method is based on "How to support SDC Ver2 and high capacity cards"
     by ElmChan.*/
  if (send_command_R3(mmcp, MMCSD_CMD_SEND_IF_COND,
 8002692:	ab03      	add	r3, sp, #12
 8002694:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8002698:	2108      	movs	r1, #8
 800269a:	9801      	ldr	r0, [sp, #4]
 800269c:	f7ff fed8 	bl	8002450 <send_command_R3>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b05      	cmp	r3, #5
 80026a4:	d02d      	beq.n	8002702 <mmcConnect+0xd2>
                      MMCSD_CMD8_PATTERN, r3) != 0x05U) {

    /* Switch to SDHC mode.*/
    i = 0;
 80026a6:	2300      	movs	r3, #0
 80026a8:	9305      	str	r3, [sp, #20]
    while (true) {
      /*lint -save -e9007 [13.5] Side effect unimportant.*/
      if ((send_command_R1(mmcp, MMCSD_CMD_APP_CMD, 0) <= 0x01U) &&
 80026aa:	2200      	movs	r2, #0
 80026ac:	2137      	movs	r1, #55	; 0x37
 80026ae:	9801      	ldr	r0, [sp, #4]
 80026b0:	f7ff fea6 	bl	8002400 <send_command_R1>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d808      	bhi.n	80026cc <mmcConnect+0x9c>
          (send_command_R3(mmcp, MMCSD_CMD_APP_OP_COND, 0x400001AAU, r3) == 0x00U)) {
 80026ba:	ab03      	add	r3, sp, #12
 80026bc:	4a4a      	ldr	r2, [pc, #296]	; (80027e8 <mmcConnect+0x1b8>)
 80026be:	2129      	movs	r1, #41	; 0x29
 80026c0:	9801      	ldr	r0, [sp, #4]
 80026c2:	f7ff fec5 	bl	8002450 <send_command_R3>
 80026c6:	4603      	mov	r3, r0
      if ((send_command_R1(mmcp, MMCSD_CMD_APP_CMD, 0) <= 0x01U) &&
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d009      	beq.n	80026e0 <mmcConnect+0xb0>
      /*lint -restore*/
        break;
      }

      if (++i >= MMC_ACMD41_RETRY) {
 80026cc:	9b05      	ldr	r3, [sp, #20]
 80026ce:	3301      	adds	r3, #1
 80026d0:	9305      	str	r3, [sp, #20]
 80026d2:	9b05      	ldr	r3, [sp, #20]
 80026d4:	2b63      	cmp	r3, #99	; 0x63
 80026d6:	d86b      	bhi.n	80027b0 <mmcConnect+0x180>
        goto failed;
      }
      osalThreadSleepMilliseconds(10);
 80026d8:	2064      	movs	r0, #100	; 0x64
 80026da:	f7ff fd51 	bl	8002180 <osalThreadSleep.lto_priv.1>
      if ((send_command_R1(mmcp, MMCSD_CMD_APP_CMD, 0) <= 0x01U) &&
 80026de:	e7e4      	b.n	80026aa <mmcConnect+0x7a>
        break;
 80026e0:	bf00      	nop
    }

    /* Execute dedicated read on OCR register */
    (void) send_command_R3(mmcp, MMCSD_CMD_READ_OCR, 0, r3);
 80026e2:	ab03      	add	r3, sp, #12
 80026e4:	2200      	movs	r2, #0
 80026e6:	213a      	movs	r1, #58	; 0x3a
 80026e8:	9801      	ldr	r0, [sp, #4]
 80026ea:	f7ff feb1 	bl	8002450 <send_command_R3>

    /* Check if CCS is set in response. Card operates in block mode if set.*/
    if ((r3[0] & 0x40U) != 0U) {
 80026ee:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80026f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <mmcConnect+0xd2>
      mmcp->block_addresses = true;
 80026fa:	9b01      	ldr	r3, [sp, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    }
  }

  /* Initialization.*/
  i = 0;
 8002702:	2300      	movs	r3, #0
 8002704:	9305      	str	r3, [sp, #20]
  while (true) {
    uint8_t b = send_command_R1(mmcp, MMCSD_CMD_INIT, 0);
 8002706:	2200      	movs	r2, #0
 8002708:	2101      	movs	r1, #1
 800270a:	9801      	ldr	r0, [sp, #4]
 800270c:	f7ff fe78 	bl	8002400 <send_command_R1>
 8002710:	4603      	mov	r3, r0
 8002712:	f88d 3013 	strb.w	r3, [sp, #19]
    if (b == 0x00U) {
 8002716:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00d      	beq.n	800273a <mmcConnect+0x10a>
      break;
    }
    if (b != 0x01U) {
 800271e:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d146      	bne.n	80027b4 <mmcConnect+0x184>
      goto failed;
    }
    if (++i >= MMC_CMD1_RETRY) {
 8002726:	9b05      	ldr	r3, [sp, #20]
 8002728:	3301      	adds	r3, #1
 800272a:	9305      	str	r3, [sp, #20]
 800272c:	9b05      	ldr	r3, [sp, #20]
 800272e:	2b63      	cmp	r3, #99	; 0x63
 8002730:	d842      	bhi.n	80027b8 <mmcConnect+0x188>
      goto failed;
    }
    osalThreadSleepMilliseconds(10);
 8002732:	2064      	movs	r0, #100	; 0x64
 8002734:	f7ff fd24 	bl	8002180 <osalThreadSleep.lto_priv.1>
  while (true) {
 8002738:	e7e5      	b.n	8002706 <mmcConnect+0xd6>
      break;
 800273a:	bf00      	nop
  }

  /* Initialization complete, full speed.*/
  spiStart(mmcp->config->spip, mmcp->config->hscfg);
 800273c:	9b01      	ldr	r3, [sp, #4]
 800273e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	9b01      	ldr	r3, [sp, #4]
 8002744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	4619      	mov	r1, r3
 800274a:	4610      	mov	r0, r2
 800274c:	f000 fc38 	bl	8002fc0 <spiStart>

  /* Setting block size.*/
  if (send_command_R1(mmcp, MMCSD_CMD_SET_BLOCKLEN,
 8002750:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002754:	2110      	movs	r1, #16
 8002756:	9801      	ldr	r0, [sp, #4]
 8002758:	f7ff fe52 	bl	8002400 <send_command_R1>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d12c      	bne.n	80027bc <mmcConnect+0x18c>
                      MMCSD_BLOCK_SIZE) != 0x00U) {
    goto failed;
  }

  /* Determine capacity.*/
  if (read_CxD(mmcp, MMCSD_CMD_SEND_CSD, mmcp->csd)) {
 8002762:	9b01      	ldr	r3, [sp, #4]
 8002764:	3318      	adds	r3, #24
 8002766:	461a      	mov	r2, r3
 8002768:	2109      	movs	r1, #9
 800276a:	9801      	ldr	r0, [sp, #4]
 800276c:	f7ff fe98 	bl	80024a0 <read_CxD>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d124      	bne.n	80027c0 <mmcConnect+0x190>
    goto failed;
  }

  mmcp->capacity = _mmcsd_get_capacity(mmcp->csd);
 8002776:	9b01      	ldr	r3, [sp, #4]
 8002778:	3318      	adds	r3, #24
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff fbe8 	bl	8001f50 <_mmcsd_get_capacity>
 8002780:	4602      	mov	r2, r0
 8002782:	9b01      	ldr	r3, [sp, #4]
 8002784:	629a      	str	r2, [r3, #40]	; 0x28
  if (mmcp->capacity == 0U) {
 8002786:	9b01      	ldr	r3, [sp, #4]
 8002788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278a:	2b00      	cmp	r3, #0
 800278c:	d01a      	beq.n	80027c4 <mmcConnect+0x194>
    goto failed;
  }

  if (read_CxD(mmcp, MMCSD_CMD_SEND_CID, mmcp->cid)) {
 800278e:	9b01      	ldr	r3, [sp, #4]
 8002790:	3308      	adds	r3, #8
 8002792:	461a      	mov	r2, r3
 8002794:	210a      	movs	r1, #10
 8002796:	9801      	ldr	r0, [sp, #4]
 8002798:	f7ff fe82 	bl	80024a0 <read_CxD>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d112      	bne.n	80027c8 <mmcConnect+0x198>
    goto failed;
  }

  mmcp->state = BLK_READY;
 80027a2:	9b01      	ldr	r3, [sp, #4]
 80027a4:	2205      	movs	r2, #5
 80027a6:	711a      	strb	r2, [r3, #4]
  return HAL_SUCCESS;
 80027a8:	2300      	movs	r3, #0
 80027aa:	e019      	b.n	80027e0 <mmcConnect+0x1b0>
      goto failed;
 80027ac:	bf00      	nop
 80027ae:	e00c      	b.n	80027ca <mmcConnect+0x19a>
        goto failed;
 80027b0:	bf00      	nop
 80027b2:	e00a      	b.n	80027ca <mmcConnect+0x19a>
      goto failed;
 80027b4:	bf00      	nop
 80027b6:	e008      	b.n	80027ca <mmcConnect+0x19a>
      goto failed;
 80027b8:	bf00      	nop
 80027ba:	e006      	b.n	80027ca <mmcConnect+0x19a>
    goto failed;
 80027bc:	bf00      	nop
 80027be:	e004      	b.n	80027ca <mmcConnect+0x19a>
    goto failed;
 80027c0:	bf00      	nop
 80027c2:	e002      	b.n	80027ca <mmcConnect+0x19a>
    goto failed;
 80027c4:	bf00      	nop
 80027c6:	e000      	b.n	80027ca <mmcConnect+0x19a>
    goto failed;
 80027c8:	bf00      	nop

  /* Connection failed, state reset to BLK_ACTIVE.*/
failed:
  spiStop(mmcp->config->spip);
 80027ca:	9b01      	ldr	r3, [sp, #4]
 80027cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f000 fc15 	bl	8003000 <spiStop>
  mmcp->state = BLK_ACTIVE;
 80027d6:	9b01      	ldr	r3, [sp, #4]
 80027d8:	2202      	movs	r2, #2
 80027da:	711a      	strb	r2, [r3, #4]
  return HAL_FAILED;
 80027dc:	2301      	movs	r3, #1
 80027de:	bf00      	nop
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	b007      	add	sp, #28
 80027e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80027e8:	400001aa 	.word	0x400001aa
 80027ec:	00000000 	.word	0x00000000

080027f0 <mmcDisconnect>:
 *                      in the @p MMC_INSERTED state.
 * @retval HAL_FAILED    the operation failed.
 *
 * @api
 */
bool mmcDisconnect(MMCDriver *mmcp) {
 80027f0:	b500      	push	{lr}
 80027f2:	b083      	sub	sp, #12
 80027f4:	9001      	str	r0, [sp, #4]

  osalDbgCheck(mmcp != NULL);

  osalSysLock();
 80027f6:	f7ff fcb3 	bl	8002160 <osalSysLock.lto_priv.3>
  osalDbgAssert((mmcp->state == BLK_ACTIVE) || (mmcp->state == BLK_READY),
                "invalid state");
  if (mmcp->state == BLK_ACTIVE) {
 80027fa:	9b01      	ldr	r3, [sp, #4]
 80027fc:	791b      	ldrb	r3, [r3, #4]
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d103      	bne.n	800280a <mmcDisconnect+0x1a>
    osalSysUnlock();
 8002802:	f7ff fcb5 	bl	8002170 <osalSysUnlock.lto_priv.3>
    return HAL_SUCCESS;
 8002806:	2300      	movs	r3, #0
 8002808:	e01b      	b.n	8002842 <mmcDisconnect+0x52>
  }
  mmcp->state = BLK_DISCONNECTING;
 800280a:	9b01      	ldr	r3, [sp, #4]
 800280c:	2204      	movs	r2, #4
 800280e:	711a      	strb	r2, [r3, #4]
  osalSysUnlock();
 8002810:	f7ff fcae 	bl	8002170 <osalSysUnlock.lto_priv.3>

  /* Wait for the pending write operations to complete.*/
  spiStart(mmcp->config->spip, mmcp->config->hscfg);
 8002814:	9b01      	ldr	r3, [sp, #4]
 8002816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	9b01      	ldr	r3, [sp, #4]
 800281c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	4619      	mov	r1, r3
 8002822:	4610      	mov	r0, r2
 8002824:	f000 fbcc 	bl	8002fc0 <spiStart>
  sync(mmcp);
 8002828:	9801      	ldr	r0, [sp, #4]
 800282a:	f7ff feb9 	bl	80025a0 <sync>

  spiStop(mmcp->config->spip);
 800282e:	9b01      	ldr	r3, [sp, #4]
 8002830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f000 fbe3 	bl	8003000 <spiStop>
  mmcp->state = BLK_ACTIVE;
 800283a:	9b01      	ldr	r3, [sp, #4]
 800283c:	2202      	movs	r2, #2
 800283e:	711a      	strb	r2, [r3, #4]
  return HAL_SUCCESS;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	b003      	add	sp, #12
 8002846:	f85d fb04 	ldr.w	pc, [sp], #4
 800284a:	bf00      	nop
 800284c:	0000      	movs	r0, r0
	...

08002850 <mmcStartSequentialRead>:
 * @retval HAL_SUCCESS   the operation succeeded.
 * @retval HAL_FAILED    the operation failed.
 *
 * @api
 */
bool mmcStartSequentialRead(MMCDriver *mmcp, uint32_t startblk) {
 8002850:	b500      	push	{lr}
 8002852:	b083      	sub	sp, #12
 8002854:	9001      	str	r0, [sp, #4]
 8002856:	9100      	str	r1, [sp, #0]

  osalDbgCheck(mmcp != NULL);
  osalDbgAssert(mmcp->state == BLK_READY, "invalid state");

  /* Read operation in progress.*/
  mmcp->state = BLK_READING;
 8002858:	9b01      	ldr	r3, [sp, #4]
 800285a:	2206      	movs	r2, #6
 800285c:	711a      	strb	r2, [r3, #4]

  /* (Re)starting the SPI in case it has been reprogrammed externally, it can
     happen if the SPI bus is shared among multiple peripherals.*/
  spiStart(mmcp->config->spip, mmcp->config->hscfg);
 800285e:	9b01      	ldr	r3, [sp, #4]
 8002860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	9b01      	ldr	r3, [sp, #4]
 8002866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	4619      	mov	r1, r3
 800286c:	4610      	mov	r0, r2
 800286e:	f000 fba7 	bl	8002fc0 <spiStart>
  spiSelect(mmcp->config->spip);
 8002872:	9b01      	ldr	r3, [sp, #4]
 8002874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f000 fbd9 	bl	8003030 <spiSelect>

  if (mmcp->block_addresses) {
 800287e:	9b01      	ldr	r3, [sp, #4]
 8002880:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002884:	2b00      	cmp	r3, #0
 8002886:	d005      	beq.n	8002894 <mmcStartSequentialRead+0x44>
    send_hdr(mmcp, MMCSD_CMD_READ_MULTIPLE_BLOCK, startblk);
 8002888:	9a00      	ldr	r2, [sp, #0]
 800288a:	2112      	movs	r1, #18
 800288c:	9801      	ldr	r0, [sp, #4]
 800288e:	f7ff fd37 	bl	8002300 <send_hdr>
 8002892:	e006      	b.n	80028a2 <mmcStartSequentialRead+0x52>
  }
  else {
    send_hdr(mmcp, MMCSD_CMD_READ_MULTIPLE_BLOCK, startblk * MMCSD_BLOCK_SIZE);
 8002894:	9b00      	ldr	r3, [sp, #0]
 8002896:	025b      	lsls	r3, r3, #9
 8002898:	461a      	mov	r2, r3
 800289a:	2112      	movs	r1, #18
 800289c:	9801      	ldr	r0, [sp, #4]
 800289e:	f7ff fd2f 	bl	8002300 <send_hdr>
  }

  if (recvr1(mmcp) != 0x00U) {
 80028a2:	9801      	ldr	r0, [sp, #4]
 80028a4:	f7ff fd6c 	bl	8002380 <recvr1>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00a      	beq.n	80028c4 <mmcStartSequentialRead+0x74>
    spiStop(mmcp->config->spip);
 80028ae:	9b01      	ldr	r3, [sp, #4]
 80028b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f000 fba3 	bl	8003000 <spiStop>
    mmcp->state = BLK_READY;
 80028ba:	9b01      	ldr	r3, [sp, #4]
 80028bc:	2205      	movs	r2, #5
 80028be:	711a      	strb	r2, [r3, #4]
    return HAL_FAILED;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e000      	b.n	80028c6 <mmcStartSequentialRead+0x76>
  }
  return HAL_SUCCESS;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	b003      	add	sp, #12
 80028ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80028ce:	bf00      	nop

080028d0 <mmcSequentialRead>:
 * @retval HAL_SUCCESS   the operation succeeded.
 * @retval HAL_FAILED    the operation failed.
 *
 * @api
 */
bool mmcSequentialRead(MMCDriver *mmcp, uint8_t *buffer) {
 80028d0:	b500      	push	{lr}
 80028d2:	b085      	sub	sp, #20
 80028d4:	9001      	str	r0, [sp, #4]
 80028d6:	9100      	str	r1, [sp, #0]
  unsigned i;

  osalDbgCheck((mmcp != NULL) && (buffer != NULL));

  if (mmcp->state != BLK_READING) {
 80028d8:	9b01      	ldr	r3, [sp, #4]
 80028da:	791b      	ldrb	r3, [r3, #4]
 80028dc:	2b06      	cmp	r3, #6
 80028de:	d001      	beq.n	80028e4 <mmcSequentialRead+0x14>
    return HAL_FAILED;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e038      	b.n	8002956 <mmcSequentialRead+0x86>
  }

  for (i = 0; i < MMC_WAIT_DATA; i++) {
 80028e4:	2300      	movs	r3, #0
 80028e6:	9303      	str	r3, [sp, #12]
 80028e8:	e020      	b.n	800292c <mmcSequentialRead+0x5c>
    spiReceive(mmcp->config->spip, 1, buffer);
 80028ea:	9b01      	ldr	r3, [sp, #4]
 80028ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	9a00      	ldr	r2, [sp, #0]
 80028f2:	2101      	movs	r1, #1
 80028f4:	4618      	mov	r0, r3
 80028f6:	f000 fc6b 	bl	80031d0 <spiReceive>
    if (buffer[0] == 0xFEU) {
 80028fa:	9b00      	ldr	r3, [sp, #0]
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	2bfe      	cmp	r3, #254	; 0xfe
 8002900:	d111      	bne.n	8002926 <mmcSequentialRead+0x56>
      spiReceive(mmcp->config->spip, MMCSD_BLOCK_SIZE, buffer);
 8002902:	9b01      	ldr	r3, [sp, #4]
 8002904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	9a00      	ldr	r2, [sp, #0]
 800290a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800290e:	4618      	mov	r0, r3
 8002910:	f000 fc5e 	bl	80031d0 <spiReceive>
      /* CRC ignored. */
      spiIgnore(mmcp->config->spip, 2);
 8002914:	9b01      	ldr	r3, [sp, #4]
 8002916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2102      	movs	r1, #2
 800291c:	4618      	mov	r0, r3
 800291e:	f000 fc17 	bl	8003150 <spiIgnore>
      return HAL_SUCCESS;
 8002922:	2300      	movs	r3, #0
 8002924:	e017      	b.n	8002956 <mmcSequentialRead+0x86>
  for (i = 0; i < MMC_WAIT_DATA; i++) {
 8002926:	9b03      	ldr	r3, [sp, #12]
 8002928:	3301      	adds	r3, #1
 800292a:	9303      	str	r3, [sp, #12]
 800292c:	9b03      	ldr	r3, [sp, #12]
 800292e:	f242 720f 	movw	r2, #9999	; 0x270f
 8002932:	4293      	cmp	r3, r2
 8002934:	d9d9      	bls.n	80028ea <mmcSequentialRead+0x1a>
    }
  }
  /* Timeout.*/
  spiUnselect(mmcp->config->spip);
 8002936:	9b01      	ldr	r3, [sp, #4]
 8002938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f000 fb8f 	bl	8003060 <spiUnselect>
  spiStop(mmcp->config->spip);
 8002942:	9b01      	ldr	r3, [sp, #4]
 8002944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4618      	mov	r0, r3
 800294a:	f000 fb59 	bl	8003000 <spiStop>
  mmcp->state = BLK_READY;
 800294e:	9b01      	ldr	r3, [sp, #4]
 8002950:	2205      	movs	r2, #5
 8002952:	711a      	strb	r2, [r3, #4]
  return HAL_FAILED;
 8002954:	2301      	movs	r3, #1
}
 8002956:	4618      	mov	r0, r3
 8002958:	b005      	add	sp, #20
 800295a:	f85d fb04 	ldr.w	pc, [sp], #4
 800295e:	bf00      	nop

08002960 <mmcStopSequentialRead>:
 * @retval HAL_SUCCESS   the operation succeeded.
 * @retval HAL_FAILED    the operation failed.
 *
 * @api
 */
bool mmcStopSequentialRead(MMCDriver *mmcp) {
 8002960:	b500      	push	{lr}
 8002962:	b083      	sub	sp, #12
 8002964:	9001      	str	r0, [sp, #4]
    (uint8_t)(0x40U | MMCSD_CMD_STOP_TRANSMISSION), 0, 0, 0, 0, 1, 0xFF
  };

  osalDbgCheck(mmcp != NULL);

  if (mmcp->state != BLK_READING) {
 8002966:	9b01      	ldr	r3, [sp, #4]
 8002968:	791b      	ldrb	r3, [r3, #4]
 800296a:	2b06      	cmp	r3, #6
 800296c:	d001      	beq.n	8002972 <mmcStopSequentialRead+0x12>
    return HAL_FAILED;
 800296e:	2301      	movs	r3, #1
 8002970:	e015      	b.n	800299e <mmcStopSequentialRead+0x3e>
  }

  spiSend(mmcp->config->spip, sizeof(stopcmd), stopcmd);
 8002972:	9b01      	ldr	r3, [sp, #4]
 8002974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a0b      	ldr	r2, [pc, #44]	; (80029a8 <mmcStopSequentialRead+0x48>)
 800297a:	2107      	movs	r1, #7
 800297c:	4618      	mov	r0, r3
 800297e:	f000 fc07 	bl	8003190 <spiSend>
/*  result = recvr1(mmcp) != 0x00U;*/
  /* Note, ignored r1 response, it can be not zero, unknown issue.*/
  (void) recvr1(mmcp);
 8002982:	9801      	ldr	r0, [sp, #4]
 8002984:	f7ff fcfc 	bl	8002380 <recvr1>

  /* Read operation finished.*/
  spiUnselect(mmcp->config->spip);
 8002988:	9b01      	ldr	r3, [sp, #4]
 800298a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f000 fb66 	bl	8003060 <spiUnselect>
  mmcp->state = BLK_READY;
 8002994:	9b01      	ldr	r3, [sp, #4]
 8002996:	2205      	movs	r2, #5
 8002998:	711a      	strb	r2, [r3, #4]
  return HAL_SUCCESS;
 800299a:	2300      	movs	r3, #0
 800299c:	bf00      	nop
}
 800299e:	4618      	mov	r0, r3
 80029a0:	b003      	add	sp, #12
 80029a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80029a6:	bf00      	nop
 80029a8:	0800ec2c 	.word	0x0800ec2c
 80029ac:	00000000 	.word	0x00000000

080029b0 <mmcStartSequentialWrite>:
 * @retval HAL_SUCCESS   the operation succeeded.
 * @retval HAL_FAILED    the operation failed.
 *
 * @api
 */
bool mmcStartSequentialWrite(MMCDriver *mmcp, uint32_t startblk) {
 80029b0:	b500      	push	{lr}
 80029b2:	b083      	sub	sp, #12
 80029b4:	9001      	str	r0, [sp, #4]
 80029b6:	9100      	str	r1, [sp, #0]

  osalDbgCheck(mmcp != NULL);
  osalDbgAssert(mmcp->state == BLK_READY, "invalid state");

  /* Write operation in progress.*/
  mmcp->state = BLK_WRITING;
 80029b8:	9b01      	ldr	r3, [sp, #4]
 80029ba:	2207      	movs	r2, #7
 80029bc:	711a      	strb	r2, [r3, #4]

  spiStart(mmcp->config->spip, mmcp->config->hscfg);
 80029be:	9b01      	ldr	r3, [sp, #4]
 80029c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	9b01      	ldr	r3, [sp, #4]
 80029c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	4619      	mov	r1, r3
 80029cc:	4610      	mov	r0, r2
 80029ce:	f000 faf7 	bl	8002fc0 <spiStart>
  spiSelect(mmcp->config->spip);
 80029d2:	9b01      	ldr	r3, [sp, #4]
 80029d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4618      	mov	r0, r3
 80029da:	f000 fb29 	bl	8003030 <spiSelect>
  if (mmcp->block_addresses) {
 80029de:	9b01      	ldr	r3, [sp, #4]
 80029e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d005      	beq.n	80029f4 <mmcStartSequentialWrite+0x44>
    send_hdr(mmcp, MMCSD_CMD_WRITE_MULTIPLE_BLOCK, startblk);
 80029e8:	9a00      	ldr	r2, [sp, #0]
 80029ea:	2119      	movs	r1, #25
 80029ec:	9801      	ldr	r0, [sp, #4]
 80029ee:	f7ff fc87 	bl	8002300 <send_hdr>
 80029f2:	e006      	b.n	8002a02 <mmcStartSequentialWrite+0x52>
  }
  else {
    send_hdr(mmcp, MMCSD_CMD_WRITE_MULTIPLE_BLOCK,
 80029f4:	9b00      	ldr	r3, [sp, #0]
 80029f6:	025b      	lsls	r3, r3, #9
 80029f8:	461a      	mov	r2, r3
 80029fa:	2119      	movs	r1, #25
 80029fc:	9801      	ldr	r0, [sp, #4]
 80029fe:	f7ff fc7f 	bl	8002300 <send_hdr>
             startblk * MMCSD_BLOCK_SIZE);
  }

  if (recvr1(mmcp) != 0x00U) {
 8002a02:	9801      	ldr	r0, [sp, #4]
 8002a04:	f7ff fcbc 	bl	8002380 <recvr1>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00a      	beq.n	8002a24 <mmcStartSequentialWrite+0x74>
    spiStop(mmcp->config->spip);
 8002a0e:	9b01      	ldr	r3, [sp, #4]
 8002a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f000 faf3 	bl	8003000 <spiStop>
    mmcp->state = BLK_READY;
 8002a1a:	9b01      	ldr	r3, [sp, #4]
 8002a1c:	2205      	movs	r2, #5
 8002a1e:	711a      	strb	r2, [r3, #4]
    return HAL_FAILED;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e000      	b.n	8002a26 <mmcStartSequentialWrite+0x76>
  }
  return HAL_SUCCESS;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	b003      	add	sp, #12
 8002a2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a2e:	bf00      	nop

08002a30 <mmcSequentialWrite>:
 * @retval HAL_SUCCESS   the operation succeeded.
 * @retval HAL_FAILED    the operation failed.
 *
 * @api
 */
bool mmcSequentialWrite(MMCDriver *mmcp, const uint8_t *buffer) {
 8002a30:	b500      	push	{lr}
 8002a32:	b085      	sub	sp, #20
 8002a34:	9001      	str	r0, [sp, #4]
 8002a36:	9100      	str	r1, [sp, #0]
  static const uint8_t start[] = {0xFF, 0xFC};
  uint8_t b[1];

  osalDbgCheck((mmcp != NULL) && (buffer != NULL));

  if (mmcp->state != BLK_WRITING) {
 8002a38:	9b01      	ldr	r3, [sp, #4]
 8002a3a:	791b      	ldrb	r3, [r3, #4]
 8002a3c:	2b07      	cmp	r3, #7
 8002a3e:	d001      	beq.n	8002a44 <mmcSequentialWrite+0x14>
    return HAL_FAILED;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e03b      	b.n	8002abc <mmcSequentialWrite+0x8c>
  }

  spiSend(mmcp->config->spip, sizeof(start), start);    /* Data prologue.   */
 8002a44:	9b01      	ldr	r3, [sp, #4]
 8002a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a1e      	ldr	r2, [pc, #120]	; (8002ac4 <mmcSequentialWrite+0x94>)
 8002a4c:	2102      	movs	r1, #2
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 fb9e 	bl	8003190 <spiSend>
  spiSend(mmcp->config->spip, MMCSD_BLOCK_SIZE, buffer);/* Data.            */
 8002a54:	9b01      	ldr	r3, [sp, #4]
 8002a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	9a00      	ldr	r2, [sp, #0]
 8002a5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a60:	4618      	mov	r0, r3
 8002a62:	f000 fb95 	bl	8003190 <spiSend>
  spiIgnore(mmcp->config->spip, 2);                     /* CRC ignored.     */
 8002a66:	9b01      	ldr	r3, [sp, #4]
 8002a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2102      	movs	r1, #2
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f000 fb6e 	bl	8003150 <spiIgnore>
  spiReceive(mmcp->config->spip, 1, b);
 8002a74:	9b01      	ldr	r3, [sp, #4]
 8002a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	aa03      	add	r2, sp, #12
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f000 fba6 	bl	80031d0 <spiReceive>
  if ((b[0] & 0x1FU) == 0x05U) {
 8002a84:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8002a88:	f003 031f 	and.w	r3, r3, #31
 8002a8c:	2b05      	cmp	r3, #5
 8002a8e:	d104      	bne.n	8002a9a <mmcSequentialWrite+0x6a>
    wait(mmcp);
 8002a90:	9801      	ldr	r0, [sp, #4]
 8002a92:	f7ff fc05 	bl	80022a0 <wait>
    return HAL_SUCCESS;
 8002a96:	2300      	movs	r3, #0
 8002a98:	e010      	b.n	8002abc <mmcSequentialWrite+0x8c>
  }

  /* Error.*/
  spiUnselect(mmcp->config->spip);
 8002a9a:	9b01      	ldr	r3, [sp, #4]
 8002a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f000 fadd 	bl	8003060 <spiUnselect>
  spiStop(mmcp->config->spip);
 8002aa6:	9b01      	ldr	r3, [sp, #4]
 8002aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f000 faa7 	bl	8003000 <spiStop>
  mmcp->state = BLK_READY;
 8002ab2:	9b01      	ldr	r3, [sp, #4]
 8002ab4:	2205      	movs	r2, #5
 8002ab6:	711a      	strb	r2, [r3, #4]
  return HAL_FAILED;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	bf00      	nop
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	b005      	add	sp, #20
 8002ac0:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ac4:	0800ec34 	.word	0x0800ec34
	...

08002ad0 <mmcStopSequentialWrite>:
 * @retval HAL_SUCCESS   the operation succeeded.
 * @retval HAL_FAILED    the operation failed.
 *
 * @api
 */
bool mmcStopSequentialWrite(MMCDriver *mmcp) {
 8002ad0:	b500      	push	{lr}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	9001      	str	r0, [sp, #4]
  static const uint8_t stop[] = {0xFD, 0xFF};

  osalDbgCheck(mmcp != NULL);

  if (mmcp->state != BLK_WRITING) {
 8002ad6:	9b01      	ldr	r3, [sp, #4]
 8002ad8:	791b      	ldrb	r3, [r3, #4]
 8002ada:	2b07      	cmp	r3, #7
 8002adc:	d001      	beq.n	8002ae2 <mmcStopSequentialWrite+0x12>
    return HAL_FAILED;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e012      	b.n	8002b08 <mmcStopSequentialWrite+0x38>
  }

  spiSend(mmcp->config->spip, sizeof(stop), stop);
 8002ae2:	9b01      	ldr	r3, [sp, #4]
 8002ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a09      	ldr	r2, [pc, #36]	; (8002b10 <mmcStopSequentialWrite+0x40>)
 8002aea:	2102      	movs	r1, #2
 8002aec:	4618      	mov	r0, r3
 8002aee:	f000 fb4f 	bl	8003190 <spiSend>
  spiUnselect(mmcp->config->spip);
 8002af2:	9b01      	ldr	r3, [sp, #4]
 8002af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f000 fab1 	bl	8003060 <spiUnselect>

  /* Write operation finished.*/
  mmcp->state = BLK_READY;
 8002afe:	9b01      	ldr	r3, [sp, #4]
 8002b00:	2205      	movs	r2, #5
 8002b02:	711a      	strb	r2, [r3, #4]
  return HAL_SUCCESS;
 8002b04:	2300      	movs	r3, #0
 8002b06:	bf00      	nop
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	b003      	add	sp, #12
 8002b0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b10:	0800ec38 	.word	0x0800ec38
	...

08002b20 <mmcSync>:
 * @retval HAL_SUCCESS   the operation succeeded.
 * @retval HAL_FAILED    the operation failed.
 *
 * @api
 */
bool mmcSync(MMCDriver *mmcp) {
 8002b20:	b500      	push	{lr}
 8002b22:	b083      	sub	sp, #12
 8002b24:	9001      	str	r0, [sp, #4]

  osalDbgCheck(mmcp != NULL);

  if (mmcp->state != BLK_READY) {
 8002b26:	9b01      	ldr	r3, [sp, #4]
 8002b28:	791b      	ldrb	r3, [r3, #4]
 8002b2a:	2b05      	cmp	r3, #5
 8002b2c:	d001      	beq.n	8002b32 <mmcSync+0x12>
    return HAL_FAILED;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e013      	b.n	8002b5a <mmcSync+0x3a>
  }

  /* Synchronization operation in progress.*/
  mmcp->state = BLK_SYNCING;
 8002b32:	9b01      	ldr	r3, [sp, #4]
 8002b34:	2208      	movs	r2, #8
 8002b36:	711a      	strb	r2, [r3, #4]

  spiStart(mmcp->config->spip, mmcp->config->hscfg);
 8002b38:	9b01      	ldr	r3, [sp, #4]
 8002b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	9b01      	ldr	r3, [sp, #4]
 8002b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	4619      	mov	r1, r3
 8002b46:	4610      	mov	r0, r2
 8002b48:	f000 fa3a 	bl	8002fc0 <spiStart>
  sync(mmcp);
 8002b4c:	9801      	ldr	r0, [sp, #4]
 8002b4e:	f7ff fd27 	bl	80025a0 <sync>

  /* Synchronization operation finished.*/
  mmcp->state = BLK_READY;
 8002b52:	9b01      	ldr	r3, [sp, #4]
 8002b54:	2205      	movs	r2, #5
 8002b56:	711a      	strb	r2, [r3, #4]
  return HAL_SUCCESS;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	b003      	add	sp, #12
 8002b5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b62:	bf00      	nop
	...

08002b70 <mmcGetInfo>:
 * @retval HAL_SUCCESS   the operation succeeded.
 * @retval HAL_FAILED    the operation failed.
 *
 * @api
 */
bool mmcGetInfo(MMCDriver *mmcp, BlockDeviceInfo *bdip) {
 8002b70:	b082      	sub	sp, #8
 8002b72:	9001      	str	r0, [sp, #4]
 8002b74:	9100      	str	r1, [sp, #0]

  osalDbgCheck((mmcp != NULL) && (bdip != NULL));

  if (mmcp->state != BLK_READY) {
 8002b76:	9b01      	ldr	r3, [sp, #4]
 8002b78:	791b      	ldrb	r3, [r3, #4]
 8002b7a:	2b05      	cmp	r3, #5
 8002b7c:	d001      	beq.n	8002b82 <mmcGetInfo+0x12>
    return HAL_FAILED;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e008      	b.n	8002b94 <mmcGetInfo+0x24>
  }

  bdip->blk_num  = mmcp->capacity;
 8002b82:	9b01      	ldr	r3, [sp, #4]
 8002b84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b86:	9b00      	ldr	r3, [sp, #0]
 8002b88:	605a      	str	r2, [r3, #4]
  bdip->blk_size = MMCSD_BLOCK_SIZE;
 8002b8a:	9b00      	ldr	r3, [sp, #0]
 8002b8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b90:	601a      	str	r2, [r3, #0]

  return HAL_SUCCESS;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	b002      	add	sp, #8
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	0000      	movs	r0, r0
	...

08002ba0 <chSysLock.lto_priv.4>:
static inline void chSysLock(void) {
 8002ba0:	b082      	sub	sp, #8
 8002ba2:	2330      	movs	r3, #48	; 0x30
 8002ba4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002ba6:	9b01      	ldr	r3, [sp, #4]
 8002ba8:	f383 8811 	msr	BASEPRI, r3
}
 8002bac:	bf00      	nop
}
 8002bae:	bf00      	nop
}
 8002bb0:	bf00      	nop
 8002bb2:	b002      	add	sp, #8
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
	...

08002bc0 <chSysUnlock.lto_priv.4>:
static inline void chSysUnlock(void) {
 8002bc0:	b082      	sub	sp, #8
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002bc6:	9b01      	ldr	r3, [sp, #4]
 8002bc8:	f383 8811 	msr	BASEPRI, r3
}
 8002bcc:	bf00      	nop
}
 8002bce:	bf00      	nop
}
 8002bd0:	bf00      	nop
 8002bd2:	b002      	add	sp, #8
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
	...

08002be0 <chEvtObjectInit.lto_priv.0>:
 *
 * @param[in] esp       pointer to the @p event_source_t structure
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {
 8002be0:	b082      	sub	sp, #8
 8002be2:	9001      	str	r0, [sp, #4]

  esp->next = (event_listener_t *)esp;
 8002be4:	9b01      	ldr	r3, [sp, #4]
 8002be6:	9a01      	ldr	r2, [sp, #4]
 8002be8:	601a      	str	r2, [r3, #0]
}
 8002bea:	bf00      	nop
 8002bec:	b002      	add	sp, #8
 8002bee:	4770      	bx	lr

08002bf0 <osalSysLock.lto_priv.4>:
static inline void osalSysLock(void) {
 8002bf0:	b508      	push	{r3, lr}
  chSysLock();
 8002bf2:	f7ff ffd5 	bl	8002ba0 <chSysLock.lto_priv.4>
}
 8002bf6:	bf00      	nop
 8002bf8:	bd08      	pop	{r3, pc}
 8002bfa:	bf00      	nop
 8002bfc:	0000      	movs	r0, r0
	...

08002c00 <osalSysUnlock.lto_priv.4>:
static inline void osalSysUnlock(void) {
 8002c00:	b508      	push	{r3, lr}
  chSysUnlock();
 8002c02:	f7ff ffdd 	bl	8002bc0 <chSysUnlock.lto_priv.4>
}
 8002c06:	bf00      	nop
 8002c08:	bd08      	pop	{r3, pc}
 8002c0a:	bf00      	nop
 8002c0c:	0000      	movs	r0, r0
	...

08002c10 <osalEventObjectInit>:
static inline void osalEventObjectInit(event_source_t *esp) {
 8002c10:	b500      	push	{lr}
 8002c12:	b083      	sub	sp, #12
 8002c14:	9001      	str	r0, [sp, #4]
  chEvtObjectInit(esp);
 8002c16:	9801      	ldr	r0, [sp, #4]
 8002c18:	f7ff ffe2 	bl	8002be0 <chEvtObjectInit.lto_priv.0>
}
 8002c1c:	bf00      	nop
 8002c1e:	b003      	add	sp, #12
 8002c20:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002c30 <osalEventBroadcastFlagsI.lto_priv.0>:
                                            eventflags_t flags) {
 8002c30:	b500      	push	{lr}
 8002c32:	b083      	sub	sp, #12
 8002c34:	9001      	str	r0, [sp, #4]
 8002c36:	9100      	str	r1, [sp, #0]
  chEvtBroadcastFlagsI(esp, flags);
 8002c38:	9900      	ldr	r1, [sp, #0]
 8002c3a:	9801      	ldr	r0, [sp, #4]
 8002c3c:	f004 fe68 	bl	8007910 <chEvtBroadcastFlagsI>
}
 8002c40:	bf00      	nop
 8002c42:	b003      	add	sp, #12
 8002c44:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002c50 <_write>:
/*
 * Interface implementation, the following functions just invoke the equivalent
 * queue-level function or macro.
 */

static size_t _write(void *ip, const uint8_t *bp, size_t n) {
 8002c50:	b500      	push	{lr}
 8002c52:	b085      	sub	sp, #20
 8002c54:	9003      	str	r0, [sp, #12]
 8002c56:	9102      	str	r1, [sp, #8]
 8002c58:	9201      	str	r2, [sp, #4]

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8002c5a:	9b03      	ldr	r3, [sp, #12]
 8002c5c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8002c60:	f04f 33ff 	mov.w	r3, #4294967295
 8002c64:	9a01      	ldr	r2, [sp, #4]
 8002c66:	9902      	ldr	r1, [sp, #8]
 8002c68:	f7ff f8f2 	bl	8001e50 <oqWriteTimeout>
 8002c6c:	4603      	mov	r3, r0
                        n, TIME_INFINITE);
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	b005      	add	sp, #20
 8002c72:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c76:	bf00      	nop
	...

08002c80 <_read>:

static size_t _read(void *ip, uint8_t *bp, size_t n) {
 8002c80:	b500      	push	{lr}
 8002c82:	b085      	sub	sp, #20
 8002c84:	9003      	str	r0, [sp, #12]
 8002c86:	9102      	str	r1, [sp, #8]
 8002c88:	9201      	str	r2, [sp, #4]

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8002c8a:	9b03      	ldr	r3, [sp, #12]
 8002c8c:	f103 000c 	add.w	r0, r3, #12
 8002c90:	f04f 33ff 	mov.w	r3, #4294967295
 8002c94:	9a01      	ldr	r2, [sp, #4]
 8002c96:	9902      	ldr	r1, [sp, #8]
 8002c98:	f7fe ffea 	bl	8001c70 <iqReadTimeout>
 8002c9c:	4603      	mov	r3, r0
                       n, TIME_INFINITE);
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	b005      	add	sp, #20
 8002ca2:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ca6:	bf00      	nop
	...

08002cb0 <_put.lto_priv.0>:

static msg_t _put(void *ip, uint8_t b) {
 8002cb0:	b500      	push	{lr}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	9001      	str	r0, [sp, #4]
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	f88d 3003 	strb.w	r3, [sp, #3]

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8002cbc:	9b01      	ldr	r3, [sp, #4]
 8002cbe:	3330      	adds	r3, #48	; 0x30
 8002cc0:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8002cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff f839 	bl	8001d40 <oqPutTimeout>
 8002cce:	4603      	mov	r3, r0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	b003      	add	sp, #12
 8002cd4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002ce0 <_get.lto_priv.0>:

static msg_t _get(void *ip) {
 8002ce0:	b500      	push	{lr}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	9001      	str	r0, [sp, #4]

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8002ce6:	9b01      	ldr	r3, [sp, #4]
 8002ce8:	330c      	adds	r3, #12
 8002cea:	f04f 31ff 	mov.w	r1, #4294967295
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fe ff7e 	bl	8001bf0 <iqGetTimeout>
 8002cf4:	4603      	mov	r3, r0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	b003      	add	sp, #12
 8002cfa:	f85d fb04 	ldr.w	pc, [sp], #4
 8002cfe:	bf00      	nop

08002d00 <_putt>:

static msg_t _putt(void *ip, uint8_t b, sysinterval_t timeout) {
 8002d00:	b500      	push	{lr}
 8002d02:	b085      	sub	sp, #20
 8002d04:	9003      	str	r0, [sp, #12]
 8002d06:	460b      	mov	r3, r1
 8002d08:	9201      	str	r2, [sp, #4]
 8002d0a:	f88d 300b 	strb.w	r3, [sp, #11]

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8002d0e:	9b03      	ldr	r3, [sp, #12]
 8002d10:	3330      	adds	r3, #48	; 0x30
 8002d12:	f89d 100b 	ldrb.w	r1, [sp, #11]
 8002d16:	9a01      	ldr	r2, [sp, #4]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff f811 	bl	8001d40 <oqPutTimeout>
 8002d1e:	4603      	mov	r3, r0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	b005      	add	sp, #20
 8002d24:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002d30 <_gett>:

static msg_t _gett(void *ip, sysinterval_t timeout) {
 8002d30:	b500      	push	{lr}
 8002d32:	b083      	sub	sp, #12
 8002d34:	9001      	str	r0, [sp, #4]
 8002d36:	9100      	str	r1, [sp, #0]

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8002d38:	9b01      	ldr	r3, [sp, #4]
 8002d3a:	330c      	adds	r3, #12
 8002d3c:	9900      	ldr	r1, [sp, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fe ff56 	bl	8001bf0 <iqGetTimeout>
 8002d44:	4603      	mov	r3, r0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	b003      	add	sp, #12
 8002d4a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d4e:	bf00      	nop

08002d50 <_writet>:

static size_t _writet(void *ip, const uint8_t *bp, size_t n,
                      sysinterval_t timeout) {
 8002d50:	b500      	push	{lr}
 8002d52:	b085      	sub	sp, #20
 8002d54:	9003      	str	r0, [sp, #12]
 8002d56:	9102      	str	r1, [sp, #8]
 8002d58:	9201      	str	r2, [sp, #4]
 8002d5a:	9300      	str	r3, [sp, #0]

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8002d5c:	9b03      	ldr	r3, [sp, #12]
 8002d5e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8002d62:	9b00      	ldr	r3, [sp, #0]
 8002d64:	9a01      	ldr	r2, [sp, #4]
 8002d66:	9902      	ldr	r1, [sp, #8]
 8002d68:	f7ff f872 	bl	8001e50 <oqWriteTimeout>
 8002d6c:	4603      	mov	r3, r0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	b005      	add	sp, #20
 8002d72:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d76:	bf00      	nop
	...

08002d80 <_readt>:

static size_t _readt(void *ip, uint8_t *bp, size_t n,
                     sysinterval_t timeout) {
 8002d80:	b500      	push	{lr}
 8002d82:	b085      	sub	sp, #20
 8002d84:	9003      	str	r0, [sp, #12]
 8002d86:	9102      	str	r1, [sp, #8]
 8002d88:	9201      	str	r2, [sp, #4]
 8002d8a:	9300      	str	r3, [sp, #0]

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8002d8c:	9b03      	ldr	r3, [sp, #12]
 8002d8e:	f103 000c 	add.w	r0, r3, #12
 8002d92:	9b00      	ldr	r3, [sp, #0]
 8002d94:	9a01      	ldr	r2, [sp, #4]
 8002d96:	9902      	ldr	r1, [sp, #8]
 8002d98:	f7fe ff6a 	bl	8001c70 <iqReadTimeout>
 8002d9c:	4603      	mov	r3, r0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	b005      	add	sp, #20
 8002da2:	f85d fb04 	ldr.w	pc, [sp], #4
 8002da6:	bf00      	nop
	...

08002db0 <_ctl>:

static msg_t _ctl(void *ip, unsigned int operation, void *arg) {
 8002db0:	b086      	sub	sp, #24
 8002db2:	9003      	str	r0, [sp, #12]
 8002db4:	9102      	str	r1, [sp, #8]
 8002db6:	9201      	str	r2, [sp, #4]
  SerialDriver *sdp = (SerialDriver *)ip;
 8002db8:	9b03      	ldr	r3, [sp, #12]
 8002dba:	9305      	str	r3, [sp, #20]

  osalDbgCheck(sdp != NULL);

  switch (operation) {
 8002dbc:	9b02      	ldr	r3, [sp, #8]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d002      	beq.n	8002dc8 <_ctl+0x18>
 8002dc2:	9b02      	ldr	r3, [sp, #8]
 8002dc4:	2b01      	cmp	r3, #1
  default:
#if defined(SD_LLD_IMPLEMENTS_CTL)
    /* Delegating to the LLD if supported.*/
    return sd_lld_control(sdp, operation, arg);
#else
    break;
 8002dc6:	e000      	b.n	8002dca <_ctl+0x1a>
    break;
 8002dc8:	bf00      	nop
#endif
  }
  return MSG_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	b006      	add	sp, #24
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
	...

08002de0 <sdInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void sdInit(void) {
 8002de0:	b508      	push	{r3, lr}

  sd_lld_init();
 8002de2:	f002 fdbd 	bl	8005960 <sd_lld_init>
}
 8002de6:	bf00      	nop
 8002de8:	bd08      	pop	{r3, pc}
 8002dea:	bf00      	nop
 8002dec:	0000      	movs	r0, r0
	...

08002df0 <sdObjectInit>:
 * @init
 */
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 8002df0:	b500      	push	{lr}
 8002df2:	b087      	sub	sp, #28
 8002df4:	9005      	str	r0, [sp, #20]
 8002df6:	9104      	str	r1, [sp, #16]
 8002df8:	9203      	str	r2, [sp, #12]

  sdp->vmt = &vmt;
 8002dfa:	9b05      	ldr	r3, [sp, #20]
 8002dfc:	4a12      	ldr	r2, [pc, #72]	; (8002e48 <sdObjectInit+0x58>)
 8002dfe:	601a      	str	r2, [r3, #0]
  osalEventObjectInit(&sdp->event);
 8002e00:	9b05      	ldr	r3, [sp, #20]
 8002e02:	3304      	adds	r3, #4
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff ff03 	bl	8002c10 <osalEventObjectInit>
  sdp->state = SD_STOP;
 8002e0a:	9b05      	ldr	r3, [sp, #20]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	721a      	strb	r2, [r3, #8]
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8002e10:	9b05      	ldr	r3, [sp, #20]
 8002e12:	f103 000c 	add.w	r0, r3, #12
 8002e16:	9b05      	ldr	r3, [sp, #20]
 8002e18:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8002e1c:	9b05      	ldr	r3, [sp, #20]
 8002e1e:	9300      	str	r3, [sp, #0]
 8002e20:	9b04      	ldr	r3, [sp, #16]
 8002e22:	2210      	movs	r2, #16
 8002e24:	f7fe fe7c 	bl	8001b20 <iqObjectInit>
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
 8002e28:	9b05      	ldr	r3, [sp, #20]
 8002e2a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8002e2e:	9b05      	ldr	r3, [sp, #20]
 8002e30:	f103 0164 	add.w	r1, r3, #100	; 0x64
 8002e34:	9b05      	ldr	r3, [sp, #20]
 8002e36:	9300      	str	r3, [sp, #0]
 8002e38:	9b03      	ldr	r3, [sp, #12]
 8002e3a:	2210      	movs	r2, #16
 8002e3c:	f7fe ff58 	bl	8001cf0 <oqObjectInit>
}
 8002e40:	bf00      	nop
 8002e42:	b007      	add	sp, #28
 8002e44:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e48:	0800ec3c 	.word	0x0800ec3c
 8002e4c:	00000000 	.word	0x00000000

08002e50 <sdStart>:
 *                      configuration is used.
 * @return              The operation status.
 *
 * @api
 */
msg_t sdStart(SerialDriver *sdp, const SerialConfig *config) {
 8002e50:	b500      	push	{lr}
 8002e52:	b085      	sub	sp, #20
 8002e54:	9001      	str	r0, [sp, #4]
 8002e56:	9100      	str	r1, [sp, #0]
  msg_t msg;

  osalDbgCheck(sdp != NULL);

  osalSysLock();
 8002e58:	f7ff feca 	bl	8002bf0 <osalSysLock.lto_priv.4>
                "invalid state");

#if defined(SD_LLD_ENHANCED_API)
  msg = sd_lld_start(sdp, config);
#else
  sd_lld_start(sdp, config);
 8002e5c:	9900      	ldr	r1, [sp, #0]
 8002e5e:	9801      	ldr	r0, [sp, #4]
 8002e60:	f002 fd96 	bl	8005990 <sd_lld_start>
  msg = HAL_RET_SUCCESS;
 8002e64:	2300      	movs	r3, #0
 8002e66:	9303      	str	r3, [sp, #12]
#endif
  if (msg == HAL_RET_SUCCESS) {
 8002e68:	9b03      	ldr	r3, [sp, #12]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d103      	bne.n	8002e76 <sdStart+0x26>
    sdp->state = SD_READY;
 8002e6e:	9b01      	ldr	r3, [sp, #4]
 8002e70:	2202      	movs	r2, #2
 8002e72:	721a      	strb	r2, [r3, #8]
 8002e74:	e002      	b.n	8002e7c <sdStart+0x2c>
  }
  else {
    sdp->state = SD_STOP;
 8002e76:	9b01      	ldr	r3, [sp, #4]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	721a      	strb	r2, [r3, #8]
  }

  osalSysUnlock();
 8002e7c:	f7ff fec0 	bl	8002c00 <osalSysUnlock.lto_priv.4>

  return msg;
 8002e80:	9b03      	ldr	r3, [sp, #12]
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	b005      	add	sp, #20
 8002e86:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e8a:	bf00      	nop
 8002e8c:	0000      	movs	r0, r0
	...

08002e90 <sdIncomingDataI>:
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
 8002e90:	b500      	push	{lr}
 8002e92:	b083      	sub	sp, #12
 8002e94:	9001      	str	r0, [sp, #4]
 8002e96:	460b      	mov	r3, r1
 8002e98:	f88d 3003 	strb.w	r3, [sp, #3]

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8002e9c:	9b01      	ldr	r3, [sp, #4]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d105      	bne.n	8002eb0 <sdIncomingDataI+0x20>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
 8002ea4:	9b01      	ldr	r3, [sp, #4]
 8002ea6:	3304      	adds	r3, #4
 8002ea8:	2104      	movs	r1, #4
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff fec0 	bl	8002c30 <osalEventBroadcastFlagsI.lto_priv.0>
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
 8002eb0:	9b01      	ldr	r3, [sp, #4]
 8002eb2:	330c      	adds	r3, #12
 8002eb4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002eb8:	4611      	mov	r1, r2
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7fe fe58 	bl	8001b70 <iqPutI>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	da06      	bge.n	8002ed4 <sdIncomingDataI+0x44>
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
 8002ec6:	9b01      	ldr	r3, [sp, #4]
 8002ec8:	3304      	adds	r3, #4
 8002eca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff feae 	bl	8002c30 <osalEventBroadcastFlagsI.lto_priv.0>
}
 8002ed4:	bf00      	nop
 8002ed6:	b003      	add	sp, #12
 8002ed8:	f85d fb04 	ldr.w	pc, [sp], #4
 8002edc:	0000      	movs	r0, r0
	...

08002ee0 <chSysLock.lto_priv.5>:
static inline void chSysLock(void) {
 8002ee0:	b082      	sub	sp, #8
 8002ee2:	2330      	movs	r3, #48	; 0x30
 8002ee4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002ee6:	9b01      	ldr	r3, [sp, #4]
 8002ee8:	f383 8811 	msr	BASEPRI, r3
}
 8002eec:	bf00      	nop
}
 8002eee:	bf00      	nop
}
 8002ef0:	bf00      	nop
 8002ef2:	b002      	add	sp, #8
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
	...

08002f00 <chSysUnlock.lto_priv.5>:
static inline void chSysUnlock(void) {
 8002f00:	b082      	sub	sp, #8
 8002f02:	2300      	movs	r3, #0
 8002f04:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002f06:	9b01      	ldr	r3, [sp, #4]
 8002f08:	f383 8811 	msr	BASEPRI, r3
}
 8002f0c:	bf00      	nop
}
 8002f0e:	bf00      	nop
}
 8002f10:	bf00      	nop
 8002f12:	b002      	add	sp, #8
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
	...

08002f20 <osalSysLock.lto_priv.5>:
static inline void osalSysLock(void) {
 8002f20:	b508      	push	{r3, lr}
  chSysLock();
 8002f22:	f7ff ffdd 	bl	8002ee0 <chSysLock.lto_priv.5>
}
 8002f26:	bf00      	nop
 8002f28:	bd08      	pop	{r3, pc}
 8002f2a:	bf00      	nop
 8002f2c:	0000      	movs	r0, r0
	...

08002f30 <osalSysUnlock.lto_priv.5>:
static inline void osalSysUnlock(void) {
 8002f30:	b508      	push	{r3, lr}
  chSysUnlock();
 8002f32:	f7ff ffe5 	bl	8002f00 <chSysUnlock.lto_priv.5>
}
 8002f36:	bf00      	nop
 8002f38:	bd08      	pop	{r3, pc}
 8002f3a:	bf00      	nop
 8002f3c:	0000      	movs	r0, r0
	...

08002f40 <osalThreadSuspendTimeoutS.lto_priv.0>:
                                              sysinterval_t timeout) {
 8002f40:	b500      	push	{lr}
 8002f42:	b083      	sub	sp, #12
 8002f44:	9001      	str	r0, [sp, #4]
 8002f46:	9100      	str	r1, [sp, #0]
  return chThdSuspendTimeoutS(trp, timeout);
 8002f48:	9900      	ldr	r1, [sp, #0]
 8002f4a:	9801      	ldr	r0, [sp, #4]
 8002f4c:	f004 fae8 	bl	8007520 <chThdSuspendTimeoutS>
 8002f50:	4603      	mov	r3, r0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	b003      	add	sp, #12
 8002f56:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f5a:	bf00      	nop
 8002f5c:	0000      	movs	r0, r0
	...

08002f60 <osalMutexObjectInit.lto_priv.1>:
static inline void osalMutexObjectInit(mutex_t *mp) {
 8002f60:	b500      	push	{lr}
 8002f62:	b083      	sub	sp, #12
 8002f64:	9001      	str	r0, [sp, #4]
  chMtxObjectInit(mp);
 8002f66:	9801      	ldr	r0, [sp, #4]
 8002f68:	f004 fc92 	bl	8007890 <chMtxObjectInit>
}
 8002f6c:	bf00      	nop
 8002f6e:	b003      	add	sp, #12
 8002f70:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002f80 <spiInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void spiInit(void) {
 8002f80:	b508      	push	{r3, lr}

  spi_lld_init();
 8002f82:	f002 f935 	bl	80051f0 <spi_lld_init>
}
 8002f86:	bf00      	nop
 8002f88:	bd08      	pop	{r3, pc}
 8002f8a:	bf00      	nop
 8002f8c:	0000      	movs	r0, r0
	...

08002f90 <spiObjectInit>:
 *
 * @param[out] spip             pointer to the @p SPIDriver object
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {
 8002f90:	b500      	push	{lr}
 8002f92:	b083      	sub	sp, #12
 8002f94:	9001      	str	r0, [sp, #4]

  spip->state           = SPI_STOP;
 8002f96:	9b01      	ldr	r3, [sp, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	701a      	strb	r2, [r3, #0]
  spip->config          = NULL;
 8002f9c:	9b01      	ldr	r3, [sp, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	605a      	str	r2, [r3, #4]
#if SPI_USE_SYNCHRONIZATION == TRUE
  spip->sync_transfer   = NULL;
 8002fa2:	9b01      	ldr	r3, [sp, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	609a      	str	r2, [r3, #8]
#endif
#if SPI_USE_MUTUAL_EXCLUSION == TRUE
  osalMutexObjectInit(&spip->mutex);
 8002fa8:	9b01      	ldr	r3, [sp, #4]
 8002faa:	330c      	adds	r3, #12
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7ff ffd7 	bl	8002f60 <osalMutexObjectInit.lto_priv.1>
#endif
#if defined(SPI_DRIVER_EXT_INIT_HOOK)
  SPI_DRIVER_EXT_INIT_HOOK(spip);
#endif
}
 8002fb2:	bf00      	nop
 8002fb4:	b003      	add	sp, #12
 8002fb6:	f85d fb04 	ldr.w	pc, [sp], #4
 8002fba:	bf00      	nop
 8002fbc:	0000      	movs	r0, r0
	...

08002fc0 <spiStart>:
 * @param[in] config            pointer to the @p SPIConfig object
 * @return                      The operation status.
 *
 * @api
 */
msg_t spiStart(SPIDriver *spip, const SPIConfig *config) {
 8002fc0:	b500      	push	{lr}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	9001      	str	r0, [sp, #4]
 8002fc6:	9100      	str	r1, [sp, #0]
  msg_t msg;

  osalDbgCheck((spip != NULL) && (config != NULL));

  osalSysLock();
 8002fc8:	f7ff ffaa 	bl	8002f20 <osalSysLock.lto_priv.5>
  osalDbgAssert((spip->state == SPI_STOP) || (spip->state == SPI_READY),
                "invalid state");

  spip->config = config;
 8002fcc:	9b01      	ldr	r3, [sp, #4]
 8002fce:	9a00      	ldr	r2, [sp, #0]
 8002fd0:	605a      	str	r2, [r3, #4]

  msg = spi_lld_start(spip);
 8002fd2:	9801      	ldr	r0, [sp, #4]
 8002fd4:	f002 f944 	bl	8005260 <spi_lld_start>
 8002fd8:	9003      	str	r0, [sp, #12]
  if (msg == HAL_RET_SUCCESS) {
 8002fda:	9b03      	ldr	r3, [sp, #12]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d103      	bne.n	8002fe8 <spiStart+0x28>
    spip->state = SPI_READY;
 8002fe0:	9b01      	ldr	r3, [sp, #4]
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	701a      	strb	r2, [r3, #0]
 8002fe6:	e002      	b.n	8002fee <spiStart+0x2e>
  }
  else {
    spip->state = SPI_STOP;
 8002fe8:	9b01      	ldr	r3, [sp, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	701a      	strb	r2, [r3, #0]
  }

  osalSysUnlock();
 8002fee:	f7ff ff9f 	bl	8002f30 <osalSysUnlock.lto_priv.5>

#if SPI_USE_ASSERT_ON_ERROR == TRUE
  osalDbgAssert(msg == HAL_RET_SUCCESS, "function failed");
#endif

  return msg;
 8002ff2:	9b03      	ldr	r3, [sp, #12]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	b005      	add	sp, #20
 8002ff8:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ffc:	0000      	movs	r0, r0
	...

08003000 <spiStop>:
 *
 * @param[in] spip              pointer to the @p SPIDriver object
 *
 * @api
 */
void spiStop(SPIDriver *spip) {
 8003000:	b500      	push	{lr}
 8003002:	b083      	sub	sp, #12
 8003004:	9001      	str	r0, [sp, #4]

  osalDbgCheck(spip != NULL);

  osalSysLock();
 8003006:	f7ff ff8b 	bl	8002f20 <osalSysLock.lto_priv.5>

  osalDbgAssert((spip->state == SPI_STOP) || (spip->state == SPI_READY),
                "invalid state");

  spi_lld_stop(spip);
 800300a:	9801      	ldr	r0, [sp, #4]
 800300c:	f002 f9f0 	bl	80053f0 <spi_lld_stop>
  spip->config = NULL;
 8003010:	9b01      	ldr	r3, [sp, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	605a      	str	r2, [r3, #4]
  spip->state  = SPI_STOP;
 8003016:	9b01      	ldr	r3, [sp, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	701a      	strb	r2, [r3, #0]

  osalSysUnlock();
 800301c:	f7ff ff88 	bl	8002f30 <osalSysUnlock.lto_priv.5>
}
 8003020:	bf00      	nop
 8003022:	b003      	add	sp, #12
 8003024:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003030 <spiSelect>:
 *
 * @param[in] spip              pointer to the @p SPIDriver object
 *
 * @api
 */
void spiSelect(SPIDriver *spip) {
 8003030:	b500      	push	{lr}
 8003032:	b083      	sub	sp, #12
 8003034:	9001      	str	r0, [sp, #4]

  osalDbgCheck(spip != NULL);

  osalSysLock();
 8003036:	f7ff ff73 	bl	8002f20 <osalSysLock.lto_priv.5>
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  spiSelectI(spip);
 800303a:	9b01      	ldr	r3, [sp, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	2201      	movs	r2, #1
 8003042:	409a      	lsls	r2, r3
 8003044:	9b01      	ldr	r3, [sp, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	b292      	uxth	r2, r2
 800304c:	835a      	strh	r2, [r3, #26]
  osalSysUnlock();
 800304e:	f7ff ff6f 	bl	8002f30 <osalSysUnlock.lto_priv.5>
}
 8003052:	bf00      	nop
 8003054:	b003      	add	sp, #12
 8003056:	f85d fb04 	ldr.w	pc, [sp], #4
 800305a:	bf00      	nop
 800305c:	0000      	movs	r0, r0
	...

08003060 <spiUnselect>:
 *
 * @param[in] spip              pointer to the @p SPIDriver object
 *
 * @api
 */
void spiUnselect(SPIDriver *spip) {
 8003060:	b500      	push	{lr}
 8003062:	b083      	sub	sp, #12
 8003064:	9001      	str	r0, [sp, #4]

  osalDbgCheck(spip != NULL);

  osalSysLock();
 8003066:	f7ff ff5b 	bl	8002f20 <osalSysLock.lto_priv.5>
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  spiUnselectI(spip);
 800306a:	9b01      	ldr	r3, [sp, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	2201      	movs	r2, #1
 8003072:	409a      	lsls	r2, r3
 8003074:	9b01      	ldr	r3, [sp, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	b292      	uxth	r2, r2
 800307c:	831a      	strh	r2, [r3, #24]
  osalSysUnlock();
 800307e:	f7ff ff57 	bl	8002f30 <osalSysUnlock.lto_priv.5>
}
 8003082:	bf00      	nop
 8003084:	b003      	add	sp, #12
 8003086:	f85d fb04 	ldr.w	pc, [sp], #4
 800308a:	bf00      	nop
 800308c:	0000      	movs	r0, r0
	...

08003090 <spiStartIgnoreI>:
 * @param[in] n                 number of words to be ignored
 * @return                      The operation status.
 *
 * @iclass
 */
msg_t spiStartIgnoreI(SPIDriver *spip, size_t n) {
 8003090:	b500      	push	{lr}
 8003092:	b085      	sub	sp, #20
 8003094:	9001      	str	r0, [sp, #4]
 8003096:	9100      	str	r1, [sp, #0]
  osalDbgCheck((spip->config->circular == false) || ((n & 1U) == 0U));
#endif

  osalDbgAssert(spip->state == SPI_READY, "not ready");

  spip->state = SPI_ACTIVE;
 8003098:	9b01      	ldr	r3, [sp, #4]
 800309a:	2203      	movs	r2, #3
 800309c:	701a      	strb	r2, [r3, #0]
  msg = spi_lld_ignore(spip, n);
 800309e:	9900      	ldr	r1, [sp, #0]
 80030a0:	9801      	ldr	r0, [sp, #4]
 80030a2:	f002 f9fd 	bl	80054a0 <spi_lld_ignore>
 80030a6:	9003      	str	r0, [sp, #12]

#if SPI_USE_ASSERT_ON_ERROR == TRUE
  osalDbgAssert(msg == HAL_RET_SUCCESS, "function failed");
#endif

  return msg;
 80030a8:	9b03      	ldr	r3, [sp, #12]
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	b005      	add	sp, #20
 80030ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80030b2:	bf00      	nop
	...

080030c0 <spiStartSendI>:
 * @param[in] txbuf             the pointer to the transmit buffer
 * @return                      The operation status.
 *
 * @iclass
 */
msg_t spiStartSendI(SPIDriver *spip, size_t n, const void *txbuf) {
 80030c0:	b500      	push	{lr}
 80030c2:	b087      	sub	sp, #28
 80030c4:	9003      	str	r0, [sp, #12]
 80030c6:	9102      	str	r1, [sp, #8]
 80030c8:	9201      	str	r2, [sp, #4]
  osalDbgCheck((spip->config->circular == false) || ((n & 1U) == 0U));
#endif

  osalDbgAssert(spip->state == SPI_READY, "not ready");

  spip->state = SPI_ACTIVE;
 80030ca:	9b03      	ldr	r3, [sp, #12]
 80030cc:	2203      	movs	r2, #3
 80030ce:	701a      	strb	r2, [r3, #0]
  msg = spi_lld_send(spip, n, txbuf);
 80030d0:	9a01      	ldr	r2, [sp, #4]
 80030d2:	9902      	ldr	r1, [sp, #8]
 80030d4:	9803      	ldr	r0, [sp, #12]
 80030d6:	f002 fa2b 	bl	8005530 <spi_lld_send>
 80030da:	9005      	str	r0, [sp, #20]

#if SPI_USE_ASSERT_ON_ERROR == TRUE
  osalDbgAssert(msg == HAL_RET_SUCCESS, "function failed");
#endif

  return msg;
 80030dc:	9b05      	ldr	r3, [sp, #20]
}
 80030de:	4618      	mov	r0, r3
 80030e0:	b007      	add	sp, #28
 80030e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80030e6:	bf00      	nop
	...

080030f0 <spiStartReceiveI>:
 * @param[out] rxbuf            the pointer to the receive buffer
 * @return                      The operation status.
 *
 * @iclass
 */
msg_t spiStartReceiveI(SPIDriver *spip, size_t n, void *rxbuf) {
 80030f0:	b500      	push	{lr}
 80030f2:	b087      	sub	sp, #28
 80030f4:	9003      	str	r0, [sp, #12]
 80030f6:	9102      	str	r1, [sp, #8]
 80030f8:	9201      	str	r2, [sp, #4]
  osalDbgCheck((spip->config->circular == false) || ((n & 1U) == 0U));
#endif

  osalDbgAssert(spip->state == SPI_READY, "not ready");

  spip->state = SPI_ACTIVE;
 80030fa:	9b03      	ldr	r3, [sp, #12]
 80030fc:	2203      	movs	r2, #3
 80030fe:	701a      	strb	r2, [r3, #0]
  msg = spi_lld_receive(spip, n, rxbuf);
 8003100:	9a01      	ldr	r2, [sp, #4]
 8003102:	9902      	ldr	r1, [sp, #8]
 8003104:	9803      	ldr	r0, [sp, #12]
 8003106:	f002 fa5b 	bl	80055c0 <spi_lld_receive>
 800310a:	9005      	str	r0, [sp, #20]

#if SPI_USE_ASSERT_ON_ERROR == TRUE
  osalDbgAssert(msg == HAL_RET_SUCCESS, "function failed");
#endif

  return msg;
 800310c:	9b05      	ldr	r3, [sp, #20]
}
 800310e:	4618      	mov	r0, r3
 8003110:	b007      	add	sp, #28
 8003112:	f85d fb04 	ldr.w	pc, [sp], #4
 8003116:	bf00      	nop
	...

08003120 <spiSynchronizeS>:
 * @retval MSG_TIMEOUT          if synchronization timed out.
 * @retval MSG_RESET            if the transfer has been stopped.
 *
 * @sclass
 */
msg_t spiSynchronizeS(SPIDriver *spip, sysinterval_t timeout) {
 8003120:	b500      	push	{lr}
 8003122:	b085      	sub	sp, #20
 8003124:	9001      	str	r0, [sp, #4]
 8003126:	9100      	str	r1, [sp, #0]

  osalDbgCheck(spip != NULL);
  osalDbgAssert((spip->state == SPI_ACTIVE) || (spip->state == SPI_READY),
                "invalid state");

  if (spip->state == SPI_ACTIVE) {
 8003128:	9b01      	ldr	r3, [sp, #4]
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b03      	cmp	r3, #3
 800312e:	d107      	bne.n	8003140 <spiSynchronizeS+0x20>
    msg = osalThreadSuspendTimeoutS(&spip->sync_transfer, timeout);
 8003130:	9b01      	ldr	r3, [sp, #4]
 8003132:	3308      	adds	r3, #8
 8003134:	9900      	ldr	r1, [sp, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff ff02 	bl	8002f40 <osalThreadSuspendTimeoutS.lto_priv.0>
 800313c:	9003      	str	r0, [sp, #12]
 800313e:	e001      	b.n	8003144 <spiSynchronizeS+0x24>
  }
  else {
    msg = MSG_OK;
 8003140:	2300      	movs	r3, #0
 8003142:	9303      	str	r3, [sp, #12]
  }

  return msg;
 8003144:	9b03      	ldr	r3, [sp, #12]
}
 8003146:	4618      	mov	r0, r3
 8003148:	b005      	add	sp, #20
 800314a:	f85d fb04 	ldr.w	pc, [sp], #4
 800314e:	bf00      	nop

08003150 <spiIgnore>:
 * @retval MSG_TIMEOUT          if synchronization timed out.
 * @retval MSG_RESET            if the transfer has been stopped.
 *
 * @api
 */
msg_t spiIgnore(SPIDriver *spip, size_t n) {
 8003150:	b500      	push	{lr}
 8003152:	b085      	sub	sp, #20
 8003154:	9001      	str	r0, [sp, #4]
 8003156:	9100      	str	r1, [sp, #0]
  msg_t msg;

  osalSysLock();
 8003158:	f7ff fee2 	bl	8002f20 <osalSysLock.lto_priv.5>

    msg = spiStartIgnoreI(spip, n);
 800315c:	9900      	ldr	r1, [sp, #0]
 800315e:	9801      	ldr	r0, [sp, #4]
 8003160:	f7ff ff96 	bl	8003090 <spiStartIgnoreI>
 8003164:	9003      	str	r0, [sp, #12]
    if (msg == MSG_OK) {
 8003166:	9b03      	ldr	r3, [sp, #12]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d105      	bne.n	8003178 <spiIgnore+0x28>
      msg = spiSynchronizeS(spip, TIME_INFINITE);
 800316c:	f04f 31ff 	mov.w	r1, #4294967295
 8003170:	9801      	ldr	r0, [sp, #4]
 8003172:	f7ff ffd5 	bl	8003120 <spiSynchronizeS>
 8003176:	9003      	str	r0, [sp, #12]
    }

  osalSysUnlock();
 8003178:	f7ff feda 	bl	8002f30 <osalSysUnlock.lto_priv.5>

  return msg;
 800317c:	9b03      	ldr	r3, [sp, #12]
}
 800317e:	4618      	mov	r0, r3
 8003180:	b005      	add	sp, #20
 8003182:	f85d fb04 	ldr.w	pc, [sp], #4
 8003186:	bf00      	nop
	...

08003190 <spiSend>:
 * @retval MSG_TIMEOUT          if synchronization timed out.
 * @retval MSG_RESET            if the transfer has been stopped.
 *
 * @api
 */
msg_t spiSend(SPIDriver *spip, size_t n, const void *txbuf) {
 8003190:	b500      	push	{lr}
 8003192:	b087      	sub	sp, #28
 8003194:	9003      	str	r0, [sp, #12]
 8003196:	9102      	str	r1, [sp, #8]
 8003198:	9201      	str	r2, [sp, #4]
  msg_t msg;

  osalSysLock();
 800319a:	f7ff fec1 	bl	8002f20 <osalSysLock.lto_priv.5>

  msg = spiStartSendI(spip, n, txbuf);
 800319e:	9a01      	ldr	r2, [sp, #4]
 80031a0:	9902      	ldr	r1, [sp, #8]
 80031a2:	9803      	ldr	r0, [sp, #12]
 80031a4:	f7ff ff8c 	bl	80030c0 <spiStartSendI>
 80031a8:	9005      	str	r0, [sp, #20]
  if (msg == MSG_OK) {
 80031aa:	9b05      	ldr	r3, [sp, #20]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d105      	bne.n	80031bc <spiSend+0x2c>
    msg = spiSynchronizeS(spip, TIME_INFINITE);
 80031b0:	f04f 31ff 	mov.w	r1, #4294967295
 80031b4:	9803      	ldr	r0, [sp, #12]
 80031b6:	f7ff ffb3 	bl	8003120 <spiSynchronizeS>
 80031ba:	9005      	str	r0, [sp, #20]
  }

  osalSysUnlock();
 80031bc:	f7ff feb8 	bl	8002f30 <osalSysUnlock.lto_priv.5>

  return msg;
 80031c0:	9b05      	ldr	r3, [sp, #20]
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	b007      	add	sp, #28
 80031c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80031ca:	bf00      	nop
 80031cc:	0000      	movs	r0, r0
	...

080031d0 <spiReceive>:
 * @retval MSG_TIMEOUT          if synchronization timed out.
 * @retval MSG_RESET            if the transfer has been stopped.
 *
 * @api
 */
msg_t spiReceive(SPIDriver *spip, size_t n, void *rxbuf) {
 80031d0:	b500      	push	{lr}
 80031d2:	b087      	sub	sp, #28
 80031d4:	9003      	str	r0, [sp, #12]
 80031d6:	9102      	str	r1, [sp, #8]
 80031d8:	9201      	str	r2, [sp, #4]
  msg_t msg;

  osalSysLock();
 80031da:	f7ff fea1 	bl	8002f20 <osalSysLock.lto_priv.5>

  msg = spiStartReceiveI(spip, n, rxbuf);
 80031de:	9a01      	ldr	r2, [sp, #4]
 80031e0:	9902      	ldr	r1, [sp, #8]
 80031e2:	9803      	ldr	r0, [sp, #12]
 80031e4:	f7ff ff84 	bl	80030f0 <spiStartReceiveI>
 80031e8:	9005      	str	r0, [sp, #20]
  if (msg == MSG_OK) {
 80031ea:	9b05      	ldr	r3, [sp, #20]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d105      	bne.n	80031fc <spiReceive+0x2c>
    msg = spiSynchronizeS(spip, TIME_INFINITE);
 80031f0:	f04f 31ff 	mov.w	r1, #4294967295
 80031f4:	9803      	ldr	r0, [sp, #12]
 80031f6:	f7ff ff93 	bl	8003120 <spiSynchronizeS>
 80031fa:	9005      	str	r0, [sp, #20]
  }

  osalSysUnlock();
 80031fc:	f7ff fe98 	bl	8002f30 <osalSysUnlock.lto_priv.5>

  return msg;
 8003200:	9b05      	ldr	r3, [sp, #20]
}
 8003202:	4618      	mov	r0, r3
 8003204:	b007      	add	sp, #28
 8003206:	f85d fb04 	ldr.w	pc, [sp], #4
 800320a:	bf00      	nop
 800320c:	0000      	movs	r0, r0
	...

08003210 <chSysLock.lto_priv.6>:
static inline void chSysLock(void) {
 8003210:	b082      	sub	sp, #8
 8003212:	2330      	movs	r3, #48	; 0x30
 8003214:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003216:	9b01      	ldr	r3, [sp, #4]
 8003218:	f383 8811 	msr	BASEPRI, r3
}
 800321c:	bf00      	nop
}
 800321e:	bf00      	nop
}
 8003220:	bf00      	nop
 8003222:	b002      	add	sp, #8
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
	...

08003230 <chSysUnlock.lto_priv.6>:
static inline void chSysUnlock(void) {
 8003230:	b082      	sub	sp, #8
 8003232:	2300      	movs	r3, #0
 8003234:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003236:	9b01      	ldr	r3, [sp, #4]
 8003238:	f383 8811 	msr	BASEPRI, r3
}
 800323c:	bf00      	nop
}
 800323e:	bf00      	nop
}
 8003240:	bf00      	nop
 8003242:	b002      	add	sp, #8
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
	...

08003250 <osalSysLock.lto_priv.6>:
static inline void osalSysLock(void) {
 8003250:	b508      	push	{r3, lr}
  chSysLock();
 8003252:	f7ff ffdd 	bl	8003210 <chSysLock.lto_priv.6>
}
 8003256:	bf00      	nop
 8003258:	bd08      	pop	{r3, pc}
 800325a:	bf00      	nop
 800325c:	0000      	movs	r0, r0
	...

08003260 <osalSysUnlock.lto_priv.6>:
static inline void osalSysUnlock(void) {
 8003260:	b508      	push	{r3, lr}
  chSysUnlock();
 8003262:	f7ff ffe5 	bl	8003230 <chSysUnlock.lto_priv.6>
}
 8003266:	bf00      	nop
 8003268:	bd08      	pop	{r3, pc}
 800326a:	bf00      	nop
 800326c:	0000      	movs	r0, r0
	...

08003270 <uartInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void uartInit(void) {
 8003270:	b508      	push	{r3, lr}

  uart_lld_init();
 8003272:	f002 fe3d 	bl	8005ef0 <uart_lld_init>
}
 8003276:	bf00      	nop
 8003278:	bd08      	pop	{r3, pc}
 800327a:	bf00      	nop
 800327c:	0000      	movs	r0, r0
	...

08003280 <uartObjectInit>:
 *
 * @param[out] uartp    pointer to the @p UARTDriver object
 *
 * @init
 */
void uartObjectInit(UARTDriver *uartp) {
 8003280:	b082      	sub	sp, #8
 8003282:	9001      	str	r0, [sp, #4]

  uartp->state      = UART_STOP;
 8003284:	9b01      	ldr	r3, [sp, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	701a      	strb	r2, [r3, #0]
  uartp->txstate    = UART_TX_IDLE;
 800328a:	9b01      	ldr	r3, [sp, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	705a      	strb	r2, [r3, #1]
  uartp->rxstate    = UART_RX_IDLE;
 8003290:	9b01      	ldr	r3, [sp, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	709a      	strb	r2, [r3, #2]
  uartp->config     = NULL;
 8003296:	9b01      	ldr	r3, [sp, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	605a      	str	r2, [r3, #4]

  /* Optional, user-defined initializer.*/
#if defined(UART_DRIVER_EXT_INIT_HOOK)
  UART_DRIVER_EXT_INIT_HOOK(uartp);
#endif
}
 800329c:	bf00      	nop
 800329e:	b002      	add	sp, #8
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
	...

080032b0 <uartStart>:
 * @param[in] config    pointer to the @p UARTConfig object
 * @return              The operation status.
 *
 * @api
 */
msg_t uartStart(UARTDriver *uartp, const UARTConfig *config) {
 80032b0:	b500      	push	{lr}
 80032b2:	b085      	sub	sp, #20
 80032b4:	9001      	str	r0, [sp, #4]
 80032b6:	9100      	str	r1, [sp, #0]
  msg_t msg;

  osalDbgCheck((uartp != NULL) && (config != NULL));

  osalSysLock();
 80032b8:	f7ff ffca 	bl	8003250 <osalSysLock.lto_priv.6>
  osalDbgAssert((uartp->state == UART_STOP) || (uartp->state == UART_READY),
                "invalid state");

  uartp->config = config;
 80032bc:	9b01      	ldr	r3, [sp, #4]
 80032be:	9a00      	ldr	r2, [sp, #0]
 80032c0:	605a      	str	r2, [r3, #4]

#if defined(UART_LLD_ENHANCED_API)
  msg = uart_lld_start(uartp);
#else
  uart_lld_start(uartp);
 80032c2:	9801      	ldr	r0, [sp, #4]
 80032c4:	f002 fe34 	bl	8005f30 <uart_lld_start>
  msg = HAL_RET_SUCCESS;
 80032c8:	2300      	movs	r3, #0
 80032ca:	9303      	str	r3, [sp, #12]
#endif
  if (msg == HAL_RET_SUCCESS) {
 80032cc:	9b03      	ldr	r3, [sp, #12]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d103      	bne.n	80032da <uartStart+0x2a>
    uartp->state = UART_READY;
 80032d2:	9b01      	ldr	r3, [sp, #4]
 80032d4:	2202      	movs	r2, #2
 80032d6:	701a      	strb	r2, [r3, #0]
 80032d8:	e002      	b.n	80032e0 <uartStart+0x30>
  }
  else {
    uartp->state = UART_STOP;
 80032da:	9b01      	ldr	r3, [sp, #4]
 80032dc:	2201      	movs	r2, #1
 80032de:	701a      	strb	r2, [r3, #0]
  }

  osalSysUnlock();
 80032e0:	f7ff ffbe 	bl	8003260 <osalSysUnlock.lto_priv.6>

  return msg;
 80032e4:	9b03      	ldr	r3, [sp, #12]
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	b005      	add	sp, #20
 80032ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80032ee:	bf00      	nop

080032f0 <uartStop>:
 *
 * @param[in] uartp     pointer to the @p UARTDriver object
 *
 * @api
 */
void uartStop(UARTDriver *uartp) {
 80032f0:	b500      	push	{lr}
 80032f2:	b083      	sub	sp, #12
 80032f4:	9001      	str	r0, [sp, #4]

  osalDbgCheck(uartp != NULL);

  osalSysLock();
 80032f6:	f7ff ffab 	bl	8003250 <osalSysLock.lto_priv.6>

  osalDbgAssert((uartp->state == UART_STOP) || (uartp->state == UART_READY),
                "invalid state");

  uart_lld_stop(uartp);
 80032fa:	9801      	ldr	r0, [sp, #4]
 80032fc:	f002 fe90 	bl	8006020 <uart_lld_stop>
  uartp->config  = NULL;
 8003300:	9b01      	ldr	r3, [sp, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	605a      	str	r2, [r3, #4]
  uartp->state   = UART_STOP;
 8003306:	9b01      	ldr	r3, [sp, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	701a      	strb	r2, [r3, #0]
  uartp->txstate = UART_TX_IDLE;
 800330c:	9b01      	ldr	r3, [sp, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	705a      	strb	r2, [r3, #1]
  uartp->rxstate = UART_RX_IDLE;
 8003312:	9b01      	ldr	r3, [sp, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	709a      	strb	r2, [r3, #2]

  osalSysUnlock();
 8003318:	f7ff ffa2 	bl	8003260 <osalSysUnlock.lto_priv.6>
}
 800331c:	bf00      	nop
 800331e:	b003      	add	sp, #12
 8003320:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003330 <nvicEnableVector>:
 * @brief   Sets the priority of an interrupt handler and enables it.
 *
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {
 8003330:	b082      	sub	sp, #8
 8003332:	9001      	str	r0, [sp, #4]
 8003334:	9100      	str	r1, [sp, #0]
#if defined(__CORE_CM0_H_GENERIC) || defined(__CORE_CM0PLUS_H_GENERIC) ||   \
    defined(__CORE_CM23_H_GENERIC)
  NVIC->__IPR[_IP_IDX(n)] = (NVIC->__IPR[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                            (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
 8003336:	9b00      	ldr	r3, [sp, #0]
 8003338:	b2db      	uxtb	r3, r3
 800333a:	4a11      	ldr	r2, [pc, #68]	; (8003380 <nvicEnableVector+0x50>)
 800333c:	011b      	lsls	r3, r3, #4
 800333e:	b2d9      	uxtb	r1, r3
 8003340:	9b01      	ldr	r3, [sp, #4]
 8003342:	4413      	add	r3, r2
 8003344:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003348:	460a      	mov	r2, r1
 800334a:	701a      	strb	r2, [r3, #0]
#endif
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800334c:	9b01      	ldr	r3, [sp, #4]
 800334e:	f003 021f 	and.w	r2, r3, #31
 8003352:	490b      	ldr	r1, [pc, #44]	; (8003380 <nvicEnableVector+0x50>)
 8003354:	9b01      	ldr	r3, [sp, #4]
 8003356:	095b      	lsrs	r3, r3, #5
 8003358:	2001      	movs	r0, #1
 800335a:	fa00 f202 	lsl.w	r2, r0, r2
 800335e:	3360      	adds	r3, #96	; 0x60
 8003360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003364:	9b01      	ldr	r3, [sp, #4]
 8003366:	f003 021f 	and.w	r2, r3, #31
 800336a:	4905      	ldr	r1, [pc, #20]	; (8003380 <nvicEnableVector+0x50>)
 800336c:	9b01      	ldr	r3, [sp, #4]
 800336e:	095b      	lsrs	r3, r3, #5
 8003370:	2001      	movs	r0, #1
 8003372:	fa00 f202 	lsl.w	r2, r0, r2
 8003376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3)
  /* If the IRQ is enabled from secure mode then it is marked as secure
     interrupt in ITNS.*/
  NVIC->__ITNS[n >> 5U] &= ~(1U << (n & 0x1FU));
#endif
}
 800337a:	bf00      	nop
 800337c:	b002      	add	sp, #8
 800337e:	4770      	bx	lr
 8003380:	e000e100 	.word	0xe000e100
	...

08003390 <nvicDisableVector>:
/**
 * @brief   Disables an interrupt handler.
 *
 * @param[in] n         the interrupt number
 */
void nvicDisableVector(uint32_t n) {
 8003390:	b082      	sub	sp, #8
 8003392:	9001      	str	r0, [sp, #4]

  NVIC->__ICER[n >> 5U] = 1U << (n & 0x1FU);
 8003394:	9b01      	ldr	r3, [sp, #4]
 8003396:	f003 021f 	and.w	r2, r3, #31
 800339a:	490f      	ldr	r1, [pc, #60]	; (80033d8 <nvicDisableVector+0x48>)
 800339c:	9b01      	ldr	r3, [sp, #4]
 800339e:	095b      	lsrs	r3, r3, #5
 80033a0:	2001      	movs	r0, #1
 80033a2:	fa00 f202 	lsl.w	r2, r0, r2
 80033a6:	3320      	adds	r3, #32
 80033a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80033ac:	9b01      	ldr	r3, [sp, #4]
 80033ae:	f003 021f 	and.w	r2, r3, #31
 80033b2:	4909      	ldr	r1, [pc, #36]	; (80033d8 <nvicDisableVector+0x48>)
 80033b4:	9b01      	ldr	r3, [sp, #4]
 80033b6:	095b      	lsrs	r3, r3, #5
 80033b8:	2001      	movs	r0, #1
 80033ba:	fa00 f202 	lsl.w	r2, r0, r2
 80033be:	3360      	adds	r3, #96	; 0x60
 80033c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#if defined(__CORE_CM0_H_GENERIC) || defined(__CORE_CM0PLUS_H_GENERIC) ||   \
    defined(__CORE_CM23_H_GENERIC)
  NVIC->__IPR[_IP_IDX(n)] = NVIC->__IPR[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n));
#else
  NVIC->__IPR[n] = 0U;
 80033c4:	4a04      	ldr	r2, [pc, #16]	; (80033d8 <nvicDisableVector+0x48>)
 80033c6:	9b01      	ldr	r3, [sp, #4]
 80033c8:	4413      	add	r3, r2
 80033ca:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80033ce:	2200      	movs	r2, #0
 80033d0:	701a      	strb	r2, [r3, #0]
#endif
#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3)
  /* Marked as not secure again.*/
  NVIC->__ITNS[n >> 5U] |= 1U << (n & 0x1FU);
#endif
}
 80033d2:	bf00      	nop
 80033d4:	b002      	add	sp, #8
 80033d6:	4770      	bx	lr
 80033d8:	e000e100 	.word	0xe000e100
 80033dc:	00000000 	.word	0x00000000

080033e0 <exti0_irq_init>:

static inline void exti0_irq_init(void) {
#if (HAL_USE_PAL && (PAL_USE_WAIT || PAL_USE_CALLBACKS))
  nvicEnableVector(STM32_EXTI0_NUMBER, STM32_IRQ_EXTI0_PRIORITY);
#endif
}
 80033e0:	bf00      	nop
 80033e2:	4770      	bx	lr
	...

080033f0 <exti1_irq_init>:

static inline void exti1_irq_init(void) {
#if (HAL_USE_PAL && (PAL_USE_WAIT || PAL_USE_CALLBACKS))
  nvicEnableVector(STM32_EXTI1_NUMBER, STM32_IRQ_EXTI1_PRIORITY);
#endif
}
 80033f0:	bf00      	nop
 80033f2:	4770      	bx	lr
	...

08003400 <exti2_irq_init>:

static inline void exti2_irq_init(void) {
#if (HAL_USE_PAL && (PAL_USE_WAIT || PAL_USE_CALLBACKS))
  nvicEnableVector(STM32_EXTI2_NUMBER, STM32_IRQ_EXTI2_PRIORITY);
#endif
}
 8003400:	bf00      	nop
 8003402:	4770      	bx	lr
	...

08003410 <exti3_irq_init>:

static inline void exti3_irq_init(void) {
#if (HAL_USE_PAL && (PAL_USE_WAIT || PAL_USE_CALLBACKS))
  nvicEnableVector(STM32_EXTI3_NUMBER, STM32_IRQ_EXTI3_PRIORITY);
#endif
}
 8003410:	bf00      	nop
 8003412:	4770      	bx	lr
	...

08003420 <exti4_irq_init>:

static inline void exti4_irq_init(void) {
#if (HAL_USE_PAL && (PAL_USE_WAIT || PAL_USE_CALLBACKS))
  nvicEnableVector(STM32_EXTI4_NUMBER, STM32_IRQ_EXTI4_PRIORITY);
#endif
}
 8003420:	bf00      	nop
 8003422:	4770      	bx	lr
	...

08003430 <exti5_9_irq_init>:

static inline void exti5_9_irq_init(void) {
#if (HAL_USE_PAL && (PAL_USE_WAIT || PAL_USE_CALLBACKS))
  nvicEnableVector(STM32_EXTI5_9_NUMBER, STM32_IRQ_EXTI5_9_PRIORITY);
#endif
}
 8003430:	bf00      	nop
 8003432:	4770      	bx	lr
	...

08003440 <exti10_15_irq_init>:

static inline void exti10_15_irq_init(void) {
#if (HAL_USE_PAL && (PAL_USE_WAIT || PAL_USE_CALLBACKS))
  nvicEnableVector(STM32_EXTI10_15_NUMBER, STM32_IRQ_EXTI10_15_PRIORITY);
#endif
}
 8003440:	bf00      	nop
 8003442:	4770      	bx	lr
	...

08003450 <exti16_irq_init>:

static inline void exti16_irq_init(void) {
#if defined(STM32_EXTI16_IS_USED)
  nvicEnableVector(STM32_EXTI16_NUMBER, STM32_IRQ_EXTI16_PRIORITY);
#endif
}
 8003450:	bf00      	nop
 8003452:	4770      	bx	lr
	...

08003460 <exti17_irq_init>:

static inline void exti17_irq_init(void) {
#if defined(STM32_EXTI17_IS_USED)
  nvicEnableVector(STM32_EXTI17_NUMBER, STM32_IRQ_EXTI17_PRIORITY);
#endif
}
 8003460:	bf00      	nop
 8003462:	4770      	bx	lr
	...

08003470 <exti18_irq_init>:

static inline void exti18_irq_init(void) {
#if defined(STM32_EXTI18_IS_USED)
  nvicEnableVector(STM32_EXTI18_NUMBER, STM32_IRQ_EXTI18_PRIORITY);
#endif
}
 8003470:	bf00      	nop
 8003472:	4770      	bx	lr
	...

08003480 <exti19_irq_init>:

static inline void exti19_irq_init(void) {
#if defined(STM32_EXTI19_IS_USED)
  nvicEnableVector(STM32_EXTI19_NUMBER, STM32_IRQ_EXTI19_PRIORITY);
#endif
}
 8003480:	bf00      	nop
 8003482:	4770      	bx	lr
	...

08003490 <exti20_irq_init>:

static inline void exti20_irq_init(void) {
#if defined(STM32_EXTI20_IS_USED)
  nvicEnableVector(STM32_EXTI20_NUMBER, STM32_IRQ_EXTI20_PRIORITY);
#endif
}
 8003490:	bf00      	nop
 8003492:	4770      	bx	lr
	...

080034a0 <exti21_irq_init>:

static inline void exti21_irq_init(void) {
#if defined(STM32_EXTI21_IS_USED)
  nvicEnableVector(STM32_EXTI21_NUMBER, STM32_IRQ_EXTI21_PRIORITY);
#endif
}
 80034a0:	bf00      	nop
 80034a2:	4770      	bx	lr
	...

080034b0 <exti22_irq_init>:

static inline void exti22_irq_init(void) {
#if defined(STM32_EXTI22_IS_USED)
  nvicEnableVector(STM32_EXTI22_NUMBER, STM32_IRQ_EXTI22_PRIORITY);
#endif
}
 80034b0:	bf00      	nop
 80034b2:	4770      	bx	lr
	...

080034c0 <usart1_irq_init>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static inline void usart1_irq_init(void) {
 80034c0:	b508      	push	{r3, lr}
#if defined(STM32_USART1_IS_USED)
  nvicEnableVector(STM32_USART1_NUMBER, STM32_IRQ_USART1_PRIORITY);
 80034c2:	210c      	movs	r1, #12
 80034c4:	2025      	movs	r0, #37	; 0x25
 80034c6:	f7ff ff33 	bl	8003330 <nvicEnableVector>
#endif
}
 80034ca:	bf00      	nop
 80034cc:	bd08      	pop	{r3, pc}
 80034ce:	bf00      	nop

080034d0 <VectorD4>:
/**
 * @brief   USART1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 80034d0:	b508      	push	{r3, lr}
#endif
#endif

#if HAL_USE_UART
#if STM32_UART_USE_USART1
  uart_lld_serve_interrupt(&UARTD1);
 80034d2:	4803      	ldr	r0, [pc, #12]	; (80034e0 <VectorD4+0x10>)
 80034d4:	f002 fddc 	bl	8006090 <uart_lld_serve_interrupt>
#endif
#endif

  OSAL_IRQ_EPILOGUE();
 80034d8:	f004 fe3a 	bl	8008150 <__port_irq_epilogue>
}
 80034dc:	bf00      	nop
 80034de:	bd08      	pop	{r3, pc}
 80034e0:	20000e1c 	.word	0x20000e1c
	...

080034f0 <usart2_irq_init>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static inline void usart2_irq_init(void) {
 80034f0:	b508      	push	{r3, lr}
#if defined(STM32_USART2_IS_USED)
  nvicEnableVector(STM32_USART2_NUMBER, STM32_IRQ_USART2_PRIORITY);
 80034f2:	210c      	movs	r1, #12
 80034f4:	2026      	movs	r0, #38	; 0x26
 80034f6:	f7ff ff1b 	bl	8003330 <nvicEnableVector>
#endif
}
 80034fa:	bf00      	nop
 80034fc:	bd08      	pop	{r3, pc}
 80034fe:	bf00      	nop

08003500 <VectorD8>:
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8003500:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

#if HAL_USE_SERIAL
#if STM32_SERIAL_USE_USART2
  sd_lld_serve_interrupt(&SD2);
 8003502:	4803      	ldr	r0, [pc, #12]	; (8003510 <VectorD8+0x10>)
 8003504:	f002 fa74 	bl	80059f0 <sd_lld_serve_interrupt>
#if STM32_UART_USE_USART2
  uart_lld_serve_interrupt(&UARTD2);
#endif
#endif

  OSAL_IRQ_EPILOGUE();
 8003508:	f004 fe22 	bl	8008150 <__port_irq_epilogue>
}
 800350c:	bf00      	nop
 800350e:	bd08      	pop	{r3, pc}
 8003510:	20000d9c 	.word	0x20000d9c
	...

08003520 <usart3_irq_init>:

static inline void usart3_irq_init(void) {
#if defined(STM32_USART3_IS_USED)
  nvicEnableVector(STM32_USART3_NUMBER, STM32_IRQ_USART3_PRIORITY);
#endif
}
 8003520:	bf00      	nop
 8003522:	4770      	bx	lr
	...

08003530 <uart4_irq_init>:

static inline void uart4_irq_init(void) {
#if defined(STM32_UART4_IS_USED)
  nvicEnableVector(STM32_UART4_NUMBER, STM32_IRQ_UART4_PRIORITY);
#endif
}
 8003530:	bf00      	nop
 8003532:	4770      	bx	lr
	...

08003540 <uart5_irq_init>:

static inline void uart5_irq_init(void) {
#if defined(STM32_UART5_IS_USED)
  nvicEnableVector(STM32_UART5_NUMBER, STM32_IRQ_UART5_PRIORITY);
#endif
}
 8003540:	bf00      	nop
 8003542:	4770      	bx	lr
	...

08003550 <usart6_irq_init>:

static inline void usart6_irq_init(void) {
#if defined(STM32_USART6_IS_USED)
  nvicEnableVector(STM32_USART6_NUMBER, STM32_IRQ_USART6_PRIORITY);
#endif
}
 8003550:	bf00      	nop
 8003552:	4770      	bx	lr
	...

08003560 <uart7_irq_init>:

static inline void uart7_irq_init(void) {
#if defined(STM32_UART7_IS_USED)
  nvicEnableVector(STM32_UART7_NUMBER, STM32_IRQ_UART7_PRIORITY);
#endif
}
 8003560:	bf00      	nop
 8003562:	4770      	bx	lr
	...

08003570 <uart8_irq_init>:

static inline void uart8_irq_init(void) {
#if defined(STM32_UART8_IS_USED)
  nvicEnableVector(STM32_UART8_NUMBER, STM32_IRQ_UART8_PRIORITY);
#endif
}
 8003570:	bf00      	nop
 8003572:	4770      	bx	lr
	...

08003580 <uart9_irq_init>:

static inline void uart9_irq_init(void) {
#if defined(STM32_UART9_IS_USED)
  nvicEnableVector(STM32_UART9_NUMBER, STM32_IRQ_UART9_PRIORITY);
#endif
}
 8003580:	bf00      	nop
 8003582:	4770      	bx	lr
	...

08003590 <uart10_irq_init>:

static inline void uart10_irq_init(void) {
#if defined(STM32_UART10_IS_USED)
  nvicEnableVector(STM32_UART10_NUMBER, STM32_IRQ_UART10_PRIORITY);
#endif
}
 8003590:	bf00      	nop
 8003592:	4770      	bx	lr
	...

080035a0 <tim1_tim9_tim10_tim11_irq_init>:
#endif
#if defined(STM32_TIM1_IS_USED)
  nvicEnableVector(STM32_TIM1_CC_NUMBER,
                   STM32_IRQ_TIM1_CC_PRIORITY);
#endif
}
 80035a0:	bf00      	nop
 80035a2:	4770      	bx	lr
	...

080035b0 <tim2_irq_init>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static inline void tim2_irq_init(void) {
 80035b0:	b508      	push	{r3, lr}
#if defined(STM32_TIM2_IS_USED)
  nvicEnableVector(STM32_TIM2_NUMBER, STM32_IRQ_TIM2_PRIORITY);
 80035b2:	2107      	movs	r1, #7
 80035b4:	201c      	movs	r0, #28
 80035b6:	f7ff febb 	bl	8003330 <nvicEnableVector>
#endif
}
 80035ba:	bf00      	nop
 80035bc:	bd08      	pop	{r3, pc}
 80035be:	bf00      	nop

080035c0 <VectorB0>:
/**
 * @brief   TIM2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM2_HANDLER) {
 80035c0:	b508      	push	{r3, lr}
  pwm_lld_serve_interrupt(&PWMD2);
#endif
#endif
#if 1
#if STM32_ST_USE_TIM2
  st_lld_serve_interrupt();
 80035c2:	f002 f8bd 	bl	8005740 <st_lld_serve_interrupt>
#endif
#endif

  OSAL_IRQ_EPILOGUE();
 80035c6:	f004 fdc3 	bl	8008150 <__port_irq_epilogue>
}
 80035ca:	bf00      	nop
 80035cc:	bd08      	pop	{r3, pc}
 80035ce:	bf00      	nop

080035d0 <tim3_irq_init>:

static inline void tim3_irq_init(void) {
#if defined(STM32_TIM3_IS_USED)
  nvicEnableVector(STM32_TIM3_NUMBER, STM32_IRQ_TIM3_PRIORITY);
#endif
}
 80035d0:	bf00      	nop
 80035d2:	4770      	bx	lr
	...

080035e0 <tim4_irq_init>:

static inline void tim4_irq_init(void) {
#if defined(STM32_TIM4_IS_USED)
  nvicEnableVector(STM32_TIM4_NUMBER, STM32_IRQ_TIM4_PRIORITY);
#endif
}
 80035e0:	bf00      	nop
 80035e2:	4770      	bx	lr
	...

080035f0 <tim5_irq_init>:

static inline void tim5_irq_init(void) {
#if defined(STM32_TIM5_IS_USED)
  nvicEnableVector(STM32_TIM5_NUMBER, STM32_IRQ_TIM5_PRIORITY);
#endif
}
 80035f0:	bf00      	nop
 80035f2:	4770      	bx	lr
	...

08003600 <tim6_irq_init>:

static inline void tim6_irq_init(void) {
#if defined(STM32_TIM6_IS_USED)
  nvicEnableVector(STM32_TIM6_NUMBER, STM32_IRQ_TIM6_PRIORITY);
#endif
}
 8003600:	bf00      	nop
 8003602:	4770      	bx	lr
	...

08003610 <tim7_irq_init>:

static inline void tim7_irq_init(void) {
#if defined(STM32_TIM7_IS_USED)
  nvicEnableVector(STM32_TIM7_NUMBER, STM32_IRQ_TIM7_PRIORITY);
#endif
}
 8003610:	bf00      	nop
 8003612:	4770      	bx	lr
	...

08003620 <tim8_tim12_tim13_tim14_irq_init>:
#endif
#if defined(STM32_TIM8_IS_USED)
  nvicEnableVector(STM32_TIM8_CC_NUMBER,
                   STM32_IRQ_TIM8_CC_PRIORITY);
#endif
}
 8003620:	bf00      	nop
 8003622:	4770      	bx	lr
	...

08003630 <irqInit>:
/**
 * @brief   Enables IRQ sources.
 *
 * @notapi
 */
void irqInit(void) {
 8003630:	b508      	push	{r3, lr}

  exti0_irq_init();
 8003632:	f7ff fed5 	bl	80033e0 <exti0_irq_init>
  exti1_irq_init();
 8003636:	f7ff fedb 	bl	80033f0 <exti1_irq_init>
  exti2_irq_init();
 800363a:	f7ff fee1 	bl	8003400 <exti2_irq_init>
  exti3_irq_init();
 800363e:	f7ff fee7 	bl	8003410 <exti3_irq_init>
  exti4_irq_init();
 8003642:	f7ff feed 	bl	8003420 <exti4_irq_init>
  exti5_9_irq_init();
 8003646:	f7ff fef3 	bl	8003430 <exti5_9_irq_init>
  exti10_15_irq_init();
 800364a:	f7ff fef9 	bl	8003440 <exti10_15_irq_init>
  exti16_irq_init();
 800364e:	f7ff feff 	bl	8003450 <exti16_irq_init>
  exti17_irq_init();
 8003652:	f7ff ff05 	bl	8003460 <exti17_irq_init>
  exti18_irq_init();
 8003656:	f7ff ff0b 	bl	8003470 <exti18_irq_init>
  exti19_irq_init();
 800365a:	f7ff ff11 	bl	8003480 <exti19_irq_init>
  exti20_irq_init();
 800365e:	f7ff ff17 	bl	8003490 <exti20_irq_init>
  exti21_irq_init();
 8003662:	f7ff ff1d 	bl	80034a0 <exti21_irq_init>
  exti22_irq_init();
 8003666:	f7ff ff23 	bl	80034b0 <exti22_irq_init>

  tim1_tim9_tim10_tim11_irq_init();
 800366a:	f7ff ff99 	bl	80035a0 <tim1_tim9_tim10_tim11_irq_init>
  tim2_irq_init();
 800366e:	f7ff ff9f 	bl	80035b0 <tim2_irq_init>
  tim3_irq_init();
 8003672:	f7ff ffad 	bl	80035d0 <tim3_irq_init>
  tim4_irq_init();
 8003676:	f7ff ffb3 	bl	80035e0 <tim4_irq_init>
  tim5_irq_init();
 800367a:	f7ff ffb9 	bl	80035f0 <tim5_irq_init>
  tim6_irq_init();
 800367e:	f7ff ffbf 	bl	8003600 <tim6_irq_init>
  tim7_irq_init();
 8003682:	f7ff ffc5 	bl	8003610 <tim7_irq_init>
  tim8_tim12_tim13_tim14_irq_init();
 8003686:	f7ff ffcb 	bl	8003620 <tim8_tim12_tim13_tim14_irq_init>

  usart1_irq_init();
 800368a:	f7ff ff19 	bl	80034c0 <usart1_irq_init>
  usart2_irq_init();
 800368e:	f7ff ff2f 	bl	80034f0 <usart2_irq_init>
  usart3_irq_init();
 8003692:	f7ff ff45 	bl	8003520 <usart3_irq_init>
  uart4_irq_init();
 8003696:	f7ff ff4b 	bl	8003530 <uart4_irq_init>
  uart5_irq_init();
 800369a:	f7ff ff51 	bl	8003540 <uart5_irq_init>
  usart6_irq_init();
 800369e:	f7ff ff57 	bl	8003550 <usart6_irq_init>
  uart7_irq_init();
 80036a2:	f7ff ff5d 	bl	8003560 <uart7_irq_init>
  uart8_irq_init();
 80036a6:	f7ff ff63 	bl	8003570 <uart8_irq_init>
  uart9_irq_init();
 80036aa:	f7ff ff69 	bl	8003580 <uart9_irq_init>
  uart10_irq_init();
 80036ae:	f7ff ff6f 	bl	8003590 <uart10_irq_init>
}
 80036b2:	bf00      	nop
 80036b4:	bd08      	pop	{r3, pc}
 80036b6:	bf00      	nop
	...

080036c0 <hal_lld_backup_domain_init>:
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 80036c0:	4b0d      	ldr	r3, [pc, #52]	; (80036f8 <hal_lld_backup_domain_init+0x38>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a0c      	ldr	r2, [pc, #48]	; (80036f8 <hal_lld_backup_domain_init+0x38>)
 80036c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ca:	6013      	str	r3, [r2, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 80036cc:	4b0b      	ldr	r3, [pc, #44]	; (80036fc <hal_lld_backup_domain_init+0x3c>)
 80036ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036d8:	d006      	beq.n	80036e8 <hal_lld_backup_domain_init+0x28>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 80036da:	4b08      	ldr	r3, [pc, #32]	; (80036fc <hal_lld_backup_domain_init+0x3c>)
 80036dc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80036e0:	671a      	str	r2, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 80036e2:	4b06      	ldr	r3, [pc, #24]	; (80036fc <hal_lld_backup_domain_init+0x3c>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	671a      	str	r2, [r3, #112]	; 0x70

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 80036e8:	4b03      	ldr	r3, [pc, #12]	; (80036f8 <hal_lld_backup_domain_init+0x38>)
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	4a02      	ldr	r2, [pc, #8]	; (80036f8 <hal_lld_backup_domain_init+0x38>)
 80036ee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036f2:	6053      	str	r3, [r2, #4]
#endif /* STM32_BKPRAM_ENABLE */
}
 80036f4:	bf00      	nop
 80036f6:	4770      	bx	lr
 80036f8:	40007000 	.word	0x40007000
 80036fc:	40023800 	.word	0x40023800

08003700 <hal_lld_init>:
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
 8003700:	b508      	push	{r3, lr}

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8003702:	4b26      	ldr	r3, [pc, #152]	; (800379c <hal_lld_init+0x9c>)
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	4a25      	ldr	r2, [pc, #148]	; (800379c <hal_lld_init+0x9c>)
 8003708:	f063 031f 	orn	r3, r3, #31
 800370c:	6113      	str	r3, [r2, #16]
 800370e:	4b23      	ldr	r3, [pc, #140]	; (800379c <hal_lld_init+0x9c>)
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	4a22      	ldr	r2, [pc, #136]	; (800379c <hal_lld_init+0x9c>)
 8003714:	f003 031f 	and.w	r3, r3, #31
 8003718:	6113      	str	r3, [r2, #16]
 800371a:	4b20      	ldr	r3, [pc, #128]	; (800379c <hal_lld_init+0x9c>)
 800371c:	691b      	ldr	r3, [r3, #16]
#if !defined(STM32F410xx)
  rccResetAHB2(~0);
 800371e:	4b1f      	ldr	r3, [pc, #124]	; (800379c <hal_lld_init+0x9c>)
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	4b1e      	ldr	r3, [pc, #120]	; (800379c <hal_lld_init+0x9c>)
 8003724:	f04f 32ff 	mov.w	r2, #4294967295
 8003728:	615a      	str	r2, [r3, #20]
 800372a:	4b1c      	ldr	r3, [pc, #112]	; (800379c <hal_lld_init+0x9c>)
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	4b1b      	ldr	r3, [pc, #108]	; (800379c <hal_lld_init+0x9c>)
 8003730:	2200      	movs	r2, #0
 8003732:	615a      	str	r2, [r3, #20]
 8003734:	4b19      	ldr	r3, [pc, #100]	; (800379c <hal_lld_init+0x9c>)
 8003736:	695b      	ldr	r3, [r3, #20]
#endif
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8003738:	4b18      	ldr	r3, [pc, #96]	; (800379c <hal_lld_init+0x9c>)
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	4a17      	ldr	r2, [pc, #92]	; (800379c <hal_lld_init+0x9c>)
 800373e:	f063 5380 	orn	r3, r3, #268435456	; 0x10000000
 8003742:	6213      	str	r3, [r2, #32]
 8003744:	4b15      	ldr	r3, [pc, #84]	; (800379c <hal_lld_init+0x9c>)
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	4a14      	ldr	r2, [pc, #80]	; (800379c <hal_lld_init+0x9c>)
 800374a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800374e:	6213      	str	r3, [r2, #32]
 8003750:	4b12      	ldr	r3, [pc, #72]	; (800379c <hal_lld_init+0x9c>)
 8003752:	6a1b      	ldr	r3, [r3, #32]
  rccResetAPB2(~0);
 8003754:	4b11      	ldr	r3, [pc, #68]	; (800379c <hal_lld_init+0x9c>)
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	4b10      	ldr	r3, [pc, #64]	; (800379c <hal_lld_init+0x9c>)
 800375a:	f04f 32ff 	mov.w	r2, #4294967295
 800375e:	625a      	str	r2, [r3, #36]	; 0x24
 8003760:	4b0e      	ldr	r3, [pc, #56]	; (800379c <hal_lld_init+0x9c>)
 8003762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003764:	4b0d      	ldr	r3, [pc, #52]	; (800379c <hal_lld_init+0x9c>)
 8003766:	2200      	movs	r2, #0
 8003768:	625a      	str	r2, [r3, #36]	; 0x24
 800376a:	4b0c      	ldr	r3, [pc, #48]	; (800379c <hal_lld_init+0x9c>)
 800376c:	6a5b      	ldr	r3, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(true);
 800376e:	4b0b      	ldr	r3, [pc, #44]	; (800379c <hal_lld_init+0x9c>)
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	4a0a      	ldr	r2, [pc, #40]	; (800379c <hal_lld_init+0x9c>)
 8003774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003778:	6413      	str	r3, [r2, #64]	; 0x40
 800377a:	4b08      	ldr	r3, [pc, #32]	; (800379c <hal_lld_init+0x9c>)
 800377c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800377e:	4a07      	ldr	r2, [pc, #28]	; (800379c <hal_lld_init+0x9c>)
 8003780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003784:	6613      	str	r3, [r2, #96]	; 0x60
 8003786:	4b05      	ldr	r3, [pc, #20]	; (800379c <hal_lld_init+0x9c>)
 8003788:	6e1b      	ldr	r3, [r3, #96]	; 0x60

  /* Initializes the backup domain.*/
  hal_lld_backup_domain_init();
 800378a:	f7ff ff99 	bl	80036c0 <hal_lld_backup_domain_init>

  /* DMA subsystems initialization.*/
#if defined(STM32_DMA_REQUIRED)
  dmaInit();
 800378e:	f000 fb0f 	bl	8003db0 <dmaInit>
#endif

  /* IRQ subsystem initialization.*/
  irqInit();
 8003792:	f7ff ff4d 	bl	8003630 <irqInit>

  /* Programmable voltage detector enable.*/
#if STM32_PVD_ENABLE
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */
}
 8003796:	bf00      	nop
 8003798:	bd08      	pop	{r3, pc}
 800379a:	bf00      	nop
 800379c:	40023800 	.word	0x40023800

080037a0 <stm32_clock_init>:
 * @note    All the involved constants come from the file @p board.h.
 * @note    This function should be invoked just after the system reset.
 *
 * @special
 */
void stm32_clock_init(void) {
 80037a0:	b082      	sub	sp, #8
#if !STM32_NO_INIT
  /* PWR clock enable.*/
#if defined(HAL_USE_RTC) && defined(RCC_APB1ENR_RTCAPBEN)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCAPBEN;
#else
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 80037a2:	4b49      	ldr	r3, [pc, #292]	; (80038c8 <stm32_clock_init+0x128>)
 80037a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037a8:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 80037aa:	4b48      	ldr	r3, [pc, #288]	; (80038cc <stm32_clock_init+0x12c>)
 80037ac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80037b0:	601a      	str	r2, [r3, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 80037b2:	4b45      	ldr	r3, [pc, #276]	; (80038c8 <stm32_clock_init+0x128>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a44      	ldr	r2, [pc, #272]	; (80038c8 <stm32_clock_init+0x128>)
 80037b8:	f043 0301 	orr.w	r3, r3, #1
 80037bc:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 80037be:	bf00      	nop
 80037c0:	4b41      	ldr	r3, [pc, #260]	; (80038c8 <stm32_clock_init+0x128>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d0f9      	beq.n	80037c0 <stm32_clock_init+0x20>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 80037cc:	4b3e      	ldr	r3, [pc, #248]	; (80038c8 <stm32_clock_init+0x128>)
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	4a3d      	ldr	r2, [pc, #244]	; (80038c8 <stm32_clock_init+0x128>)
 80037d2:	f023 0303 	bic.w	r3, r3, #3
 80037d6:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80037d8:	bf00      	nop
 80037da:	4b3b      	ldr	r3, [pc, #236]	; (80038c8 <stm32_clock_init+0x128>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f003 030c 	and.w	r3, r3, #12
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1f9      	bne.n	80037da <stm32_clock_init+0x3a>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80037e6:	4b38      	ldr	r3, [pc, #224]	; (80038c8 <stm32_clock_init+0x128>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a37      	ldr	r2, [pc, #220]	; (80038c8 <stm32_clock_init+0x128>)
 80037ec:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
 80037f0:	6013      	str	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 80037f2:	4b35      	ldr	r3, [pc, #212]	; (80038c8 <stm32_clock_init+0x128>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	609a      	str	r2, [r3, #8]
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 80037f8:	4b33      	ldr	r3, [pc, #204]	; (80038c8 <stm32_clock_init+0x128>)
 80037fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037fc:	4a32      	ldr	r2, [pc, #200]	; (80038c8 <stm32_clock_init+0x128>)
 80037fe:	f043 0301 	orr.w	r3, r3, #1
 8003802:	6753      	str	r3, [r2, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8003804:	bf00      	nop
 8003806:	4b30      	ldr	r3, [pc, #192]	; (80038c8 <stm32_clock_init+0x128>)
 8003808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d0f9      	beq.n	8003806 <stm32_clock_init+0x66>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 8003812:	4b2d      	ldr	r3, [pc, #180]	; (80038c8 <stm32_clock_init+0x128>)
 8003814:	4a2e      	ldr	r2, [pc, #184]	; (80038d0 <stm32_clock_init+0x130>)
 8003816:	605a      	str	r2, [r3, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8003818:	4b2b      	ldr	r3, [pc, #172]	; (80038c8 <stm32_clock_init+0x128>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a2a      	ldr	r2, [pc, #168]	; (80038c8 <stm32_clock_init+0x128>)
 800381e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003822:	6013      	str	r3, [r2, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8003824:	bf00      	nop
 8003826:	4b29      	ldr	r3, [pc, #164]	; (80038cc <stm32_clock_init+0x12c>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d0f9      	beq.n	8003826 <stm32_clock_init+0x86>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8003832:	bf00      	nop
 8003834:	4b24      	ldr	r3, [pc, #144]	; (80038c8 <stm32_clock_init+0x128>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d0f9      	beq.n	8003834 <stm32_clock_init+0x94>
    ;
#endif /* STM32_ACTIVATE_PLLSAI */

  /* Other clock-related settings (dividers, MCO etc).*/
#if !defined(STM32F413xx)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8003840:	4b21      	ldr	r3, [pc, #132]	; (80038c8 <stm32_clock_init+0x128>)
 8003842:	4a24      	ldr	r2, [pc, #144]	; (80038d4 <stm32_clock_init+0x134>)
 8003844:	609a      	str	r2, [r3, #8]

#if STM32_HAS_RCC_DCKCFGR
  /* DCKCFGR register initialization, note, must take care of the _OFF
   pseudo settings.*/
  {
    uint32_t dckcfgr = 0;
 8003846:	2300      	movs	r3, #0
 8003848:	9301      	str	r3, [sp, #4]
  /* Special case, in those devices STM32_CK48MSEL is located in the
     DCKCFGR register.*/
    dckcfgr |= STM32_CK48MSEL;
#endif
#if !defined(STM32F413xx)
    RCC->DCKCFGR = dckcfgr |
 800384a:	4a1f      	ldr	r2, [pc, #124]	; (80038c8 <stm32_clock_init+0x128>)
                   STM32_TIMPRE | STM32_PLLSAIDIVQ | STM32_PLLI2SDIVQ;
 800384c:	9b01      	ldr	r3, [sp, #4]
 800384e:	f043 0303 	orr.w	r3, r3, #3
    RCC->DCKCFGR = dckcfgr |
 8003852:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8003856:	4b20      	ldr	r3, [pc, #128]	; (80038d8 <stm32_clock_init+0x138>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a20      	ldr	r2, [pc, #128]	; (80038dc <stm32_clock_init+0x13c>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d109      	bne.n	8003874 <stm32_clock_init+0xd4>
 8003860:	4b1f      	ldr	r3, [pc, #124]	; (80038e0 <stm32_clock_init+0x140>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a1f      	ldr	r2, [pc, #124]	; (80038e4 <stm32_clock_init+0x144>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d104      	bne.n	8003874 <stm32_clock_init+0xd4>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 800386a:	4b1f      	ldr	r3, [pc, #124]	; (80038e8 <stm32_clock_init+0x148>)
 800386c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8003870:	601a      	str	r2, [r3, #0]
 8003872:	e003      	b.n	800387c <stm32_clock_init+0xdc>
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8003874:	4b1c      	ldr	r3, [pc, #112]	; (80038e8 <stm32_clock_init+0x148>)
 8003876:	f240 7202 	movw	r2, #1794	; 0x702
 800387a:	601a      	str	r2, [r3, #0]
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif
  while ((FLASH->ACR & FLASH_ACR_LATENCY_Msk) !=
 800387c:	bf00      	nop
 800387e:	4b1a      	ldr	r3, [pc, #104]	; (80038e8 <stm32_clock_init+0x148>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 030f 	and.w	r3, r3, #15
 8003886:	2b02      	cmp	r3, #2
 8003888:	d1f9      	bne.n	800387e <stm32_clock_init+0xde>
         (STM32_FLASHBITS & FLASH_ACR_LATENCY_Msk)) {
  }

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 800388a:	4b0f      	ldr	r3, [pc, #60]	; (80038c8 <stm32_clock_init+0x128>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	4a0e      	ldr	r2, [pc, #56]	; (80038c8 <stm32_clock_init+0x128>)
 8003890:	f043 0302 	orr.w	r3, r3, #2
 8003894:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8003896:	bf00      	nop
 8003898:	4b0b      	ldr	r3, [pc, #44]	; (80038c8 <stm32_clock_init+0x128>)
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f003 030c 	and.w	r3, r3, #12
 80038a0:	2b08      	cmp	r3, #8
 80038a2:	d1f9      	bne.n	8003898 <stm32_clock_init+0xf8>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 80038a4:	4b08      	ldr	r3, [pc, #32]	; (80038c8 <stm32_clock_init+0x128>)
 80038a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a8:	4a07      	ldr	r2, [pc, #28]	; (80038c8 <stm32_clock_init+0x128>)
 80038aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038ae:	6453      	str	r3, [r2, #68]	; 0x44
 80038b0:	4b05      	ldr	r3, [pc, #20]	; (80038c8 <stm32_clock_init+0x128>)
 80038b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038b4:	4a04      	ldr	r2, [pc, #16]	; (80038c8 <stm32_clock_init+0x128>)
 80038b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038ba:	6653      	str	r3, [r2, #100]	; 0x64
 80038bc:	4b02      	ldr	r3, [pc, #8]	; (80038c8 <stm32_clock_init+0x128>)
 80038be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
 80038c0:	bf00      	nop
 80038c2:	b002      	add	sp, #8
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	40023800 	.word	0x40023800
 80038cc:	40007000 	.word	0x40007000
 80038d0:	07015410 	.word	0x07015410
 80038d4:	38881000 	.word	0x38881000
 80038d8:	e0042000 	.word	0xe0042000
 80038dc:	20006411 	.word	0x20006411
 80038e0:	e000ed00 	.word	0xe000ed00
 80038e4:	410fc241 	.word	0x410fc241
 80038e8:	40023c00 	.word	0x40023c00
 80038ec:	00000000 	.word	0x00000000

080038f0 <Vector6C>:
/**
 * @brief   DMA1 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 80038f0:	b500      	push	{lr}
 80038f2:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80038f4:	4b0c      	ldr	r3, [pc, #48]	; (8003928 <Vector6C+0x38>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 80038fc:	9301      	str	r3, [sp, #4]
  DMA1->LIFCR = flags << 0U;
 80038fe:	4a0a      	ldr	r2, [pc, #40]	; (8003928 <Vector6C+0x38>)
 8003900:	9b01      	ldr	r3, [sp, #4]
 8003902:	6093      	str	r3, [r2, #8]
  if (dma.streams[0].func)
 8003904:	4b09      	ldr	r3, [pc, #36]	; (800392c <Vector6C+0x3c>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d006      	beq.n	800391a <Vector6C+0x2a>
    dma.streams[0].func(dma.streams[0].param, flags);
 800390c:	4b07      	ldr	r3, [pc, #28]	; (800392c <Vector6C+0x3c>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	4a06      	ldr	r2, [pc, #24]	; (800392c <Vector6C+0x3c>)
 8003912:	6892      	ldr	r2, [r2, #8]
 8003914:	9901      	ldr	r1, [sp, #4]
 8003916:	4610      	mov	r0, r2
 8003918:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 800391a:	f004 fc19 	bl	8008150 <__port_irq_epilogue>
}
 800391e:	bf00      	nop
 8003920:	b003      	add	sp, #12
 8003922:	f85d fb04 	ldr.w	pc, [sp], #4
 8003926:	bf00      	nop
 8003928:	40026000 	.word	0x40026000
 800392c:	20000c68 	.word	0x20000c68

08003930 <Vector70>:
/**
 * @brief   DMA1 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8003930:	b500      	push	{lr}
 8003932:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8003934:	4b0d      	ldr	r3, [pc, #52]	; (800396c <Vector70+0x3c>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	099b      	lsrs	r3, r3, #6
 800393a:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 800393e:	9301      	str	r3, [sp, #4]
  DMA1->LIFCR = flags << 6U;
 8003940:	4a0a      	ldr	r2, [pc, #40]	; (800396c <Vector70+0x3c>)
 8003942:	9b01      	ldr	r3, [sp, #4]
 8003944:	019b      	lsls	r3, r3, #6
 8003946:	6093      	str	r3, [r2, #8]
  if (dma.streams[1].func)
 8003948:	4b09      	ldr	r3, [pc, #36]	; (8003970 <Vector70+0x40>)
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d006      	beq.n	800395e <Vector70+0x2e>
    dma.streams[1].func(dma.streams[1].param, flags);
 8003950:	4b07      	ldr	r3, [pc, #28]	; (8003970 <Vector70+0x40>)
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	4a06      	ldr	r2, [pc, #24]	; (8003970 <Vector70+0x40>)
 8003956:	6912      	ldr	r2, [r2, #16]
 8003958:	9901      	ldr	r1, [sp, #4]
 800395a:	4610      	mov	r0, r2
 800395c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 800395e:	f004 fbf7 	bl	8008150 <__port_irq_epilogue>
}
 8003962:	bf00      	nop
 8003964:	b003      	add	sp, #12
 8003966:	f85d fb04 	ldr.w	pc, [sp], #4
 800396a:	bf00      	nop
 800396c:	40026000 	.word	0x40026000
 8003970:	20000c68 	.word	0x20000c68
	...

08003980 <Vector74>:
/**
 * @brief   DMA1 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8003980:	b500      	push	{lr}
 8003982:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8003984:	4b0d      	ldr	r3, [pc, #52]	; (80039bc <Vector74+0x3c>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	0c1b      	lsrs	r3, r3, #16
 800398a:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 800398e:	9301      	str	r3, [sp, #4]
  DMA1->LIFCR = flags << 16U;
 8003990:	4a0a      	ldr	r2, [pc, #40]	; (80039bc <Vector74+0x3c>)
 8003992:	9b01      	ldr	r3, [sp, #4]
 8003994:	041b      	lsls	r3, r3, #16
 8003996:	6093      	str	r3, [r2, #8]
  if (dma.streams[2].func)
 8003998:	4b09      	ldr	r3, [pc, #36]	; (80039c0 <Vector74+0x40>)
 800399a:	695b      	ldr	r3, [r3, #20]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d006      	beq.n	80039ae <Vector74+0x2e>
    dma.streams[2].func(dma.streams[2].param, flags);
 80039a0:	4b07      	ldr	r3, [pc, #28]	; (80039c0 <Vector74+0x40>)
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	4a06      	ldr	r2, [pc, #24]	; (80039c0 <Vector74+0x40>)
 80039a6:	6992      	ldr	r2, [r2, #24]
 80039a8:	9901      	ldr	r1, [sp, #4]
 80039aa:	4610      	mov	r0, r2
 80039ac:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 80039ae:	f004 fbcf 	bl	8008150 <__port_irq_epilogue>
}
 80039b2:	bf00      	nop
 80039b4:	b003      	add	sp, #12
 80039b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80039ba:	bf00      	nop
 80039bc:	40026000 	.word	0x40026000
 80039c0:	20000c68 	.word	0x20000c68
	...

080039d0 <Vector78>:
/**
 * @brief   DMA1 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 80039d0:	b500      	push	{lr}
 80039d2:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80039d4:	4b0d      	ldr	r3, [pc, #52]	; (8003a0c <Vector78+0x3c>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	0d9b      	lsrs	r3, r3, #22
 80039da:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 80039de:	9301      	str	r3, [sp, #4]
  DMA1->LIFCR = flags << 22U;
 80039e0:	4a0a      	ldr	r2, [pc, #40]	; (8003a0c <Vector78+0x3c>)
 80039e2:	9b01      	ldr	r3, [sp, #4]
 80039e4:	059b      	lsls	r3, r3, #22
 80039e6:	6093      	str	r3, [r2, #8]
  if (dma.streams[3].func)
 80039e8:	4b09      	ldr	r3, [pc, #36]	; (8003a10 <Vector78+0x40>)
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d006      	beq.n	80039fe <Vector78+0x2e>
    dma.streams[3].func(dma.streams[3].param, flags);
 80039f0:	4b07      	ldr	r3, [pc, #28]	; (8003a10 <Vector78+0x40>)
 80039f2:	69db      	ldr	r3, [r3, #28]
 80039f4:	4a06      	ldr	r2, [pc, #24]	; (8003a10 <Vector78+0x40>)
 80039f6:	6a12      	ldr	r2, [r2, #32]
 80039f8:	9901      	ldr	r1, [sp, #4]
 80039fa:	4610      	mov	r0, r2
 80039fc:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 80039fe:	f004 fba7 	bl	8008150 <__port_irq_epilogue>
}
 8003a02:	bf00      	nop
 8003a04:	b003      	add	sp, #12
 8003a06:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a0a:	bf00      	nop
 8003a0c:	40026000 	.word	0x40026000
 8003a10:	20000c68 	.word	0x20000c68
	...

08003a20 <Vector7C>:
/**
 * @brief   DMA1 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8003a20:	b500      	push	{lr}
 8003a22:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8003a24:	4b0c      	ldr	r3, [pc, #48]	; (8003a58 <Vector7C+0x38>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8003a2c:	9301      	str	r3, [sp, #4]
  DMA1->HIFCR = flags << 0U;
 8003a2e:	4a0a      	ldr	r2, [pc, #40]	; (8003a58 <Vector7C+0x38>)
 8003a30:	9b01      	ldr	r3, [sp, #4]
 8003a32:	60d3      	str	r3, [r2, #12]
  if (dma.streams[4].func)
 8003a34:	4b09      	ldr	r3, [pc, #36]	; (8003a5c <Vector7C+0x3c>)
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d006      	beq.n	8003a4a <Vector7C+0x2a>
    dma.streams[4].func(dma.streams[4].param, flags);
 8003a3c:	4b07      	ldr	r3, [pc, #28]	; (8003a5c <Vector7C+0x3c>)
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a40:	4a06      	ldr	r2, [pc, #24]	; (8003a5c <Vector7C+0x3c>)
 8003a42:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003a44:	9901      	ldr	r1, [sp, #4]
 8003a46:	4610      	mov	r0, r2
 8003a48:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8003a4a:	f004 fb81 	bl	8008150 <__port_irq_epilogue>
}
 8003a4e:	bf00      	nop
 8003a50:	b003      	add	sp, #12
 8003a52:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a56:	bf00      	nop
 8003a58:	40026000 	.word	0x40026000
 8003a5c:	20000c68 	.word	0x20000c68

08003a60 <Vector80>:
/**
 * @brief   DMA1 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8003a60:	b500      	push	{lr}
 8003a62:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8003a64:	4b0d      	ldr	r3, [pc, #52]	; (8003a9c <Vector80+0x3c>)
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	099b      	lsrs	r3, r3, #6
 8003a6a:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8003a6e:	9301      	str	r3, [sp, #4]
  DMA1->HIFCR = flags << 6U;
 8003a70:	4a0a      	ldr	r2, [pc, #40]	; (8003a9c <Vector80+0x3c>)
 8003a72:	9b01      	ldr	r3, [sp, #4]
 8003a74:	019b      	lsls	r3, r3, #6
 8003a76:	60d3      	str	r3, [r2, #12]
  if (dma.streams[5].func)
 8003a78:	4b09      	ldr	r3, [pc, #36]	; (8003aa0 <Vector80+0x40>)
 8003a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d006      	beq.n	8003a8e <Vector80+0x2e>
    dma.streams[5].func(dma.streams[5].param, flags);
 8003a80:	4b07      	ldr	r3, [pc, #28]	; (8003aa0 <Vector80+0x40>)
 8003a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a84:	4a06      	ldr	r2, [pc, #24]	; (8003aa0 <Vector80+0x40>)
 8003a86:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a88:	9901      	ldr	r1, [sp, #4]
 8003a8a:	4610      	mov	r0, r2
 8003a8c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8003a8e:	f004 fb5f 	bl	8008150 <__port_irq_epilogue>
}
 8003a92:	bf00      	nop
 8003a94:	b003      	add	sp, #12
 8003a96:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a9a:	bf00      	nop
 8003a9c:	40026000 	.word	0x40026000
 8003aa0:	20000c68 	.word	0x20000c68
	...

08003ab0 <Vector84>:
/**
 * @brief   DMA1 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8003ab0:	b500      	push	{lr}
 8003ab2:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8003ab4:	4b0d      	ldr	r3, [pc, #52]	; (8003aec <Vector84+0x3c>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	0c1b      	lsrs	r3, r3, #16
 8003aba:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8003abe:	9301      	str	r3, [sp, #4]
  DMA1->HIFCR = flags << 16U;
 8003ac0:	4a0a      	ldr	r2, [pc, #40]	; (8003aec <Vector84+0x3c>)
 8003ac2:	9b01      	ldr	r3, [sp, #4]
 8003ac4:	041b      	lsls	r3, r3, #16
 8003ac6:	60d3      	str	r3, [r2, #12]
  if (dma.streams[6].func)
 8003ac8:	4b09      	ldr	r3, [pc, #36]	; (8003af0 <Vector84+0x40>)
 8003aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d006      	beq.n	8003ade <Vector84+0x2e>
    dma.streams[6].func(dma.streams[6].param, flags);
 8003ad0:	4b07      	ldr	r3, [pc, #28]	; (8003af0 <Vector84+0x40>)
 8003ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ad4:	4a06      	ldr	r2, [pc, #24]	; (8003af0 <Vector84+0x40>)
 8003ad6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ad8:	9901      	ldr	r1, [sp, #4]
 8003ada:	4610      	mov	r0, r2
 8003adc:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8003ade:	f004 fb37 	bl	8008150 <__port_irq_epilogue>
}
 8003ae2:	bf00      	nop
 8003ae4:	b003      	add	sp, #12
 8003ae6:	f85d fb04 	ldr.w	pc, [sp], #4
 8003aea:	bf00      	nop
 8003aec:	40026000 	.word	0x40026000
 8003af0:	20000c68 	.word	0x20000c68
	...

08003b00 <VectorFC>:
/**
 * @brief   DMA1 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 8003b00:	b500      	push	{lr}
 8003b02:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8003b04:	4b0d      	ldr	r3, [pc, #52]	; (8003b3c <VectorFC+0x3c>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	0d9b      	lsrs	r3, r3, #22
 8003b0a:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8003b0e:	9301      	str	r3, [sp, #4]
  DMA1->HIFCR = flags << 22U;
 8003b10:	4a0a      	ldr	r2, [pc, #40]	; (8003b3c <VectorFC+0x3c>)
 8003b12:	9b01      	ldr	r3, [sp, #4]
 8003b14:	059b      	lsls	r3, r3, #22
 8003b16:	60d3      	str	r3, [r2, #12]
  if (dma.streams[7].func)
 8003b18:	4b09      	ldr	r3, [pc, #36]	; (8003b40 <VectorFC+0x40>)
 8003b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d006      	beq.n	8003b2e <VectorFC+0x2e>
    dma.streams[7].func(dma.streams[7].param, flags);
 8003b20:	4b07      	ldr	r3, [pc, #28]	; (8003b40 <VectorFC+0x40>)
 8003b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b24:	4a06      	ldr	r2, [pc, #24]	; (8003b40 <VectorFC+0x40>)
 8003b26:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003b28:	9901      	ldr	r1, [sp, #4]
 8003b2a:	4610      	mov	r0, r2
 8003b2c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8003b2e:	f004 fb0f 	bl	8008150 <__port_irq_epilogue>
}
 8003b32:	bf00      	nop
 8003b34:	b003      	add	sp, #12
 8003b36:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b3a:	bf00      	nop
 8003b3c:	40026000 	.word	0x40026000
 8003b40:	20000c68 	.word	0x20000c68
	...

08003b50 <Vector120>:
/**
 * @brief   DMA2 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 8003b50:	b500      	push	{lr}
 8003b52:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8003b54:	4b0c      	ldr	r3, [pc, #48]	; (8003b88 <Vector120+0x38>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8003b5c:	9301      	str	r3, [sp, #4]
  DMA2->LIFCR = flags << 0U;
 8003b5e:	4a0a      	ldr	r2, [pc, #40]	; (8003b88 <Vector120+0x38>)
 8003b60:	9b01      	ldr	r3, [sp, #4]
 8003b62:	6093      	str	r3, [r2, #8]
  if (dma.streams[8].func)
 8003b64:	4b09      	ldr	r3, [pc, #36]	; (8003b8c <Vector120+0x3c>)
 8003b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d006      	beq.n	8003b7a <Vector120+0x2a>
    dma.streams[8].func(dma.streams[8].param, flags);
 8003b6c:	4b07      	ldr	r3, [pc, #28]	; (8003b8c <Vector120+0x3c>)
 8003b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b70:	4a06      	ldr	r2, [pc, #24]	; (8003b8c <Vector120+0x3c>)
 8003b72:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003b74:	9901      	ldr	r1, [sp, #4]
 8003b76:	4610      	mov	r0, r2
 8003b78:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8003b7a:	f004 fae9 	bl	8008150 <__port_irq_epilogue>
}
 8003b7e:	bf00      	nop
 8003b80:	b003      	add	sp, #12
 8003b82:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b86:	bf00      	nop
 8003b88:	40026400 	.word	0x40026400
 8003b8c:	20000c68 	.word	0x20000c68

08003b90 <Vector124>:
/**
 * @brief   DMA2 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 8003b90:	b500      	push	{lr}
 8003b92:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8003b94:	4b0d      	ldr	r3, [pc, #52]	; (8003bcc <Vector124+0x3c>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	099b      	lsrs	r3, r3, #6
 8003b9a:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8003b9e:	9301      	str	r3, [sp, #4]
  DMA2->LIFCR = flags << 6U;
 8003ba0:	4a0a      	ldr	r2, [pc, #40]	; (8003bcc <Vector124+0x3c>)
 8003ba2:	9b01      	ldr	r3, [sp, #4]
 8003ba4:	019b      	lsls	r3, r3, #6
 8003ba6:	6093      	str	r3, [r2, #8]
  if (dma.streams[9].func)
 8003ba8:	4b09      	ldr	r3, [pc, #36]	; (8003bd0 <Vector124+0x40>)
 8003baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d006      	beq.n	8003bbe <Vector124+0x2e>
    dma.streams[9].func(dma.streams[9].param, flags);
 8003bb0:	4b07      	ldr	r3, [pc, #28]	; (8003bd0 <Vector124+0x40>)
 8003bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bb4:	4a06      	ldr	r2, [pc, #24]	; (8003bd0 <Vector124+0x40>)
 8003bb6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003bb8:	9901      	ldr	r1, [sp, #4]
 8003bba:	4610      	mov	r0, r2
 8003bbc:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8003bbe:	f004 fac7 	bl	8008150 <__port_irq_epilogue>
}
 8003bc2:	bf00      	nop
 8003bc4:	b003      	add	sp, #12
 8003bc6:	f85d fb04 	ldr.w	pc, [sp], #4
 8003bca:	bf00      	nop
 8003bcc:	40026400 	.word	0x40026400
 8003bd0:	20000c68 	.word	0x20000c68
	...

08003be0 <Vector128>:
/**
 * @brief   DMA2 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 8003be0:	b500      	push	{lr}
 8003be2:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8003be4:	4b0d      	ldr	r3, [pc, #52]	; (8003c1c <Vector128+0x3c>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	0c1b      	lsrs	r3, r3, #16
 8003bea:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8003bee:	9301      	str	r3, [sp, #4]
  DMA2->LIFCR = flags << 16U;
 8003bf0:	4a0a      	ldr	r2, [pc, #40]	; (8003c1c <Vector128+0x3c>)
 8003bf2:	9b01      	ldr	r3, [sp, #4]
 8003bf4:	041b      	lsls	r3, r3, #16
 8003bf6:	6093      	str	r3, [r2, #8]
  if (dma.streams[10].func)
 8003bf8:	4b09      	ldr	r3, [pc, #36]	; (8003c20 <Vector128+0x40>)
 8003bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d006      	beq.n	8003c0e <Vector128+0x2e>
    dma.streams[10].func(dma.streams[10].param, flags);
 8003c00:	4b07      	ldr	r3, [pc, #28]	; (8003c20 <Vector128+0x40>)
 8003c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c04:	4a06      	ldr	r2, [pc, #24]	; (8003c20 <Vector128+0x40>)
 8003c06:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003c08:	9901      	ldr	r1, [sp, #4]
 8003c0a:	4610      	mov	r0, r2
 8003c0c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8003c0e:	f004 fa9f 	bl	8008150 <__port_irq_epilogue>
}
 8003c12:	bf00      	nop
 8003c14:	b003      	add	sp, #12
 8003c16:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c1a:	bf00      	nop
 8003c1c:	40026400 	.word	0x40026400
 8003c20:	20000c68 	.word	0x20000c68
	...

08003c30 <Vector12C>:
/**
 * @brief   DMA2 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 8003c30:	b500      	push	{lr}
 8003c32:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8003c34:	4b0d      	ldr	r3, [pc, #52]	; (8003c6c <Vector12C+0x3c>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	0d9b      	lsrs	r3, r3, #22
 8003c3a:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8003c3e:	9301      	str	r3, [sp, #4]
  DMA2->LIFCR = flags << 22U;
 8003c40:	4a0a      	ldr	r2, [pc, #40]	; (8003c6c <Vector12C+0x3c>)
 8003c42:	9b01      	ldr	r3, [sp, #4]
 8003c44:	059b      	lsls	r3, r3, #22
 8003c46:	6093      	str	r3, [r2, #8]
  if (dma.streams[11].func)
 8003c48:	4b09      	ldr	r3, [pc, #36]	; (8003c70 <Vector12C+0x40>)
 8003c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d006      	beq.n	8003c5e <Vector12C+0x2e>
    dma.streams[11].func(dma.streams[11].param, flags);
 8003c50:	4b07      	ldr	r3, [pc, #28]	; (8003c70 <Vector12C+0x40>)
 8003c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c54:	4a06      	ldr	r2, [pc, #24]	; (8003c70 <Vector12C+0x40>)
 8003c56:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8003c58:	9901      	ldr	r1, [sp, #4]
 8003c5a:	4610      	mov	r0, r2
 8003c5c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8003c5e:	f004 fa77 	bl	8008150 <__port_irq_epilogue>
}
 8003c62:	bf00      	nop
 8003c64:	b003      	add	sp, #12
 8003c66:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c6a:	bf00      	nop
 8003c6c:	40026400 	.word	0x40026400
 8003c70:	20000c68 	.word	0x20000c68
	...

08003c80 <Vector130>:
/**
 * @brief   DMA2 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 8003c80:	b500      	push	{lr}
 8003c82:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8003c84:	4b0c      	ldr	r3, [pc, #48]	; (8003cb8 <Vector130+0x38>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8003c8c:	9301      	str	r3, [sp, #4]
  DMA2->HIFCR = flags << 0U;
 8003c8e:	4a0a      	ldr	r2, [pc, #40]	; (8003cb8 <Vector130+0x38>)
 8003c90:	9b01      	ldr	r3, [sp, #4]
 8003c92:	60d3      	str	r3, [r2, #12]
  if (dma.streams[12].func)
 8003c94:	4b09      	ldr	r3, [pc, #36]	; (8003cbc <Vector130+0x3c>)
 8003c96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d006      	beq.n	8003caa <Vector130+0x2a>
    dma.streams[12].func(dma.streams[12].param, flags);
 8003c9c:	4b07      	ldr	r3, [pc, #28]	; (8003cbc <Vector130+0x3c>)
 8003c9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ca0:	4a06      	ldr	r2, [pc, #24]	; (8003cbc <Vector130+0x3c>)
 8003ca2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003ca4:	9901      	ldr	r1, [sp, #4]
 8003ca6:	4610      	mov	r0, r2
 8003ca8:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8003caa:	f004 fa51 	bl	8008150 <__port_irq_epilogue>
}
 8003cae:	bf00      	nop
 8003cb0:	b003      	add	sp, #12
 8003cb2:	f85d fb04 	ldr.w	pc, [sp], #4
 8003cb6:	bf00      	nop
 8003cb8:	40026400 	.word	0x40026400
 8003cbc:	20000c68 	.word	0x20000c68

08003cc0 <Vector150>:
/**
 * @brief   DMA2 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 8003cc0:	b500      	push	{lr}
 8003cc2:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8003cc4:	4b0d      	ldr	r3, [pc, #52]	; (8003cfc <Vector150+0x3c>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	099b      	lsrs	r3, r3, #6
 8003cca:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8003cce:	9301      	str	r3, [sp, #4]
  DMA2->HIFCR = flags << 6U;
 8003cd0:	4a0a      	ldr	r2, [pc, #40]	; (8003cfc <Vector150+0x3c>)
 8003cd2:	9b01      	ldr	r3, [sp, #4]
 8003cd4:	019b      	lsls	r3, r3, #6
 8003cd6:	60d3      	str	r3, [r2, #12]
  if (dma.streams[13].func)
 8003cd8:	4b09      	ldr	r3, [pc, #36]	; (8003d00 <Vector150+0x40>)
 8003cda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d006      	beq.n	8003cee <Vector150+0x2e>
    dma.streams[13].func(dma.streams[13].param, flags);
 8003ce0:	4b07      	ldr	r3, [pc, #28]	; (8003d00 <Vector150+0x40>)
 8003ce2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ce4:	4a06      	ldr	r2, [pc, #24]	; (8003d00 <Vector150+0x40>)
 8003ce6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003ce8:	9901      	ldr	r1, [sp, #4]
 8003cea:	4610      	mov	r0, r2
 8003cec:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8003cee:	f004 fa2f 	bl	8008150 <__port_irq_epilogue>
}
 8003cf2:	bf00      	nop
 8003cf4:	b003      	add	sp, #12
 8003cf6:	f85d fb04 	ldr.w	pc, [sp], #4
 8003cfa:	bf00      	nop
 8003cfc:	40026400 	.word	0x40026400
 8003d00:	20000c68 	.word	0x20000c68
	...

08003d10 <Vector154>:
/**
 * @brief   DMA2 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 8003d10:	b500      	push	{lr}
 8003d12:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8003d14:	4b0d      	ldr	r3, [pc, #52]	; (8003d4c <Vector154+0x3c>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	0c1b      	lsrs	r3, r3, #16
 8003d1a:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8003d1e:	9301      	str	r3, [sp, #4]
  DMA2->HIFCR = flags << 16U;
 8003d20:	4a0a      	ldr	r2, [pc, #40]	; (8003d4c <Vector154+0x3c>)
 8003d22:	9b01      	ldr	r3, [sp, #4]
 8003d24:	041b      	lsls	r3, r3, #16
 8003d26:	60d3      	str	r3, [r2, #12]
  if (dma.streams[14].func)
 8003d28:	4b09      	ldr	r3, [pc, #36]	; (8003d50 <Vector154+0x40>)
 8003d2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d006      	beq.n	8003d3e <Vector154+0x2e>
    dma.streams[14].func(dma.streams[14].param, flags);
 8003d30:	4b07      	ldr	r3, [pc, #28]	; (8003d50 <Vector154+0x40>)
 8003d32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d34:	4a06      	ldr	r2, [pc, #24]	; (8003d50 <Vector154+0x40>)
 8003d36:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8003d38:	9901      	ldr	r1, [sp, #4]
 8003d3a:	4610      	mov	r0, r2
 8003d3c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8003d3e:	f004 fa07 	bl	8008150 <__port_irq_epilogue>
}
 8003d42:	bf00      	nop
 8003d44:	b003      	add	sp, #12
 8003d46:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d4a:	bf00      	nop
 8003d4c:	40026400 	.word	0x40026400
 8003d50:	20000c68 	.word	0x20000c68
	...

08003d60 <Vector158>:
/**
 * @brief   DMA2 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 8003d60:	b500      	push	{lr}
 8003d62:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8003d64:	4b0d      	ldr	r3, [pc, #52]	; (8003d9c <Vector158+0x3c>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	0d9b      	lsrs	r3, r3, #22
 8003d6a:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8003d6e:	9301      	str	r3, [sp, #4]
  DMA2->HIFCR = flags << 22U;
 8003d70:	4a0a      	ldr	r2, [pc, #40]	; (8003d9c <Vector158+0x3c>)
 8003d72:	9b01      	ldr	r3, [sp, #4]
 8003d74:	059b      	lsls	r3, r3, #22
 8003d76:	60d3      	str	r3, [r2, #12]
  if (dma.streams[15].func)
 8003d78:	4b09      	ldr	r3, [pc, #36]	; (8003da0 <Vector158+0x40>)
 8003d7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d007      	beq.n	8003d90 <Vector158+0x30>
    dma.streams[15].func(dma.streams[15].param, flags);
 8003d80:	4b07      	ldr	r3, [pc, #28]	; (8003da0 <Vector158+0x40>)
 8003d82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d84:	4a06      	ldr	r2, [pc, #24]	; (8003da0 <Vector158+0x40>)
 8003d86:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8003d8a:	9901      	ldr	r1, [sp, #4]
 8003d8c:	4610      	mov	r0, r2
 8003d8e:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8003d90:	f004 f9de 	bl	8008150 <__port_irq_epilogue>
}
 8003d94:	bf00      	nop
 8003d96:	b003      	add	sp, #12
 8003d98:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d9c:	40026400 	.word	0x40026400
 8003da0:	20000c68 	.word	0x20000c68
	...

08003db0 <dmaInit>:
/**
 * @brief   STM32 DMA helper initialization.
 *
 * @init
 */
void dmaInit(void) {
 8003db0:	b082      	sub	sp, #8
  unsigned i;

  dma.allocated_mask = 0U;
 8003db2:	4b17      	ldr	r3, [pc, #92]	; (8003e10 <dmaInit+0x60>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8003db8:	2300      	movs	r3, #0
 8003dba:	9301      	str	r3, [sp, #4]
 8003dbc:	e012      	b.n	8003de4 <dmaInit+0x34>
    _stm32_dma_streams[i].stream->CR = STM32_DMA_CR_RESET_VALUE;
 8003dbe:	4915      	ldr	r1, [pc, #84]	; (8003e14 <dmaInit+0x64>)
 8003dc0:	9a01      	ldr	r2, [sp, #4]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	4413      	add	r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	440b      	add	r3, r1
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	601a      	str	r2, [r3, #0]
    dma.streams[i].func = NULL;
 8003dd2:	4a0f      	ldr	r2, [pc, #60]	; (8003e10 <dmaInit+0x60>)
 8003dd4:	9b01      	ldr	r3, [sp, #4]
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	4413      	add	r3, r2
 8003dda:	2200      	movs	r2, #0
 8003ddc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8003dde:	9b01      	ldr	r3, [sp, #4]
 8003de0:	3301      	adds	r3, #1
 8003de2:	9301      	str	r3, [sp, #4]
 8003de4:	9b01      	ldr	r3, [sp, #4]
 8003de6:	2b0f      	cmp	r3, #15
 8003de8:	d9e9      	bls.n	8003dbe <dmaInit+0xe>
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
 8003dea:	4b0b      	ldr	r3, [pc, #44]	; (8003e18 <dmaInit+0x68>)
 8003dec:	f04f 32ff 	mov.w	r2, #4294967295
 8003df0:	609a      	str	r2, [r3, #8]
  DMA1->HIFCR = 0xFFFFFFFFU;
 8003df2:	4b09      	ldr	r3, [pc, #36]	; (8003e18 <dmaInit+0x68>)
 8003df4:	f04f 32ff 	mov.w	r2, #4294967295
 8003df8:	60da      	str	r2, [r3, #12]
  DMA2->LIFCR = 0xFFFFFFFFU;
 8003dfa:	4b08      	ldr	r3, [pc, #32]	; (8003e1c <dmaInit+0x6c>)
 8003dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8003e00:	609a      	str	r2, [r3, #8]
  DMA2->HIFCR = 0xFFFFFFFFU;
 8003e02:	4b06      	ldr	r3, [pc, #24]	; (8003e1c <dmaInit+0x6c>)
 8003e04:	f04f 32ff 	mov.w	r2, #4294967295
 8003e08:	60da      	str	r2, [r3, #12]
}
 8003e0a:	bf00      	nop
 8003e0c:	b002      	add	sp, #8
 8003e0e:	4770      	bx	lr
 8003e10:	20000c68 	.word	0x20000c68
 8003e14:	0800ec64 	.word	0x0800ec64
 8003e18:	40026000 	.word	0x40026000
 8003e1c:	40026400 	.word	0x40026400

08003e20 <dmaStreamAllocI>:
 * @iclass
 */
const stm32_dma_stream_t *dmaStreamAllocI(uint32_t id,
                                          uint32_t priority,
                                          stm32_dmaisr_t func,
                                          void *param) {
 8003e20:	b500      	push	{lr}
 8003e22:	b08b      	sub	sp, #44	; 0x2c
 8003e24:	9003      	str	r0, [sp, #12]
 8003e26:	9102      	str	r1, [sp, #8]
 8003e28:	9201      	str	r2, [sp, #4]
 8003e2a:	9300      	str	r3, [sp, #0]
  uint32_t i, startid, endid;

  osalDbgCheckClassI();

  if (id < STM32_DMA_STREAMS) {
 8003e2c:	9b03      	ldr	r3, [sp, #12]
 8003e2e:	2b0f      	cmp	r3, #15
 8003e30:	d806      	bhi.n	8003e40 <dmaStreamAllocI+0x20>
    startid = id;
 8003e32:	9b03      	ldr	r3, [sp, #12]
 8003e34:	9308      	str	r3, [sp, #32]
    endid   = id;
 8003e36:	9b03      	ldr	r3, [sp, #12]
 8003e38:	9307      	str	r3, [sp, #28]
  else {
    osalDbgCheck(false);
    return NULL;
  }

  for (i = startid; i <= endid; i++) {
 8003e3a:	9b08      	ldr	r3, [sp, #32]
 8003e3c:	9309      	str	r3, [sp, #36]	; 0x24
 8003e3e:	e078      	b.n	8003f32 <dmaStreamAllocI+0x112>
    return NULL;
 8003e40:	2300      	movs	r3, #0
 8003e42:	e07b      	b.n	8003f3c <dmaStreamAllocI+0x11c>
    uint32_t mask = (1U << i);
 8003e44:	2201      	movs	r2, #1
 8003e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e48:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4c:	9306      	str	r3, [sp, #24]
    if ((dma.allocated_mask & mask) == 0U) {
 8003e4e:	4b3d      	ldr	r3, [pc, #244]	; (8003f44 <dmaStreamAllocI+0x124>)
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	9b06      	ldr	r3, [sp, #24]
 8003e54:	4013      	ands	r3, r2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d168      	bne.n	8003f2c <dmaStreamAllocI+0x10c>
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 8003e5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	4413      	add	r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	4a38      	ldr	r2, [pc, #224]	; (8003f48 <dmaStreamAllocI+0x128>)
 8003e66:	4413      	add	r3, r2
 8003e68:	9305      	str	r3, [sp, #20]

      /* Installs the DMA handler.*/
      dma.streams[i].func  = func;
 8003e6a:	4a36      	ldr	r2, [pc, #216]	; (8003f44 <dmaStreamAllocI+0x124>)
 8003e6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e6e:	00db      	lsls	r3, r3, #3
 8003e70:	4413      	add	r3, r2
 8003e72:	9a01      	ldr	r2, [sp, #4]
 8003e74:	605a      	str	r2, [r3, #4]
      dma.streams[i].param = param;
 8003e76:	4a33      	ldr	r2, [pc, #204]	; (8003f44 <dmaStreamAllocI+0x124>)
 8003e78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	4413      	add	r3, r2
 8003e7e:	9a00      	ldr	r2, [sp, #0]
 8003e80:	609a      	str	r2, [r3, #8]
      dma.allocated_mask  |= mask;
 8003e82:	4b30      	ldr	r3, [pc, #192]	; (8003f44 <dmaStreamAllocI+0x124>)
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	9b06      	ldr	r3, [sp, #24]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	4a2e      	ldr	r2, [pc, #184]	; (8003f44 <dmaStreamAllocI+0x124>)
 8003e8c:	6013      	str	r3, [r2, #0]

      /* Enabling DMA clocks required by the current streams set.*/
      if ((STM32_DMA1_STREAMS_MASK & mask) != 0U) {
 8003e8e:	9b06      	ldr	r3, [sp, #24]
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00d      	beq.n	8003eb2 <dmaStreamAllocI+0x92>
        rccEnableDMA1(true);
 8003e96:	4b2d      	ldr	r3, [pc, #180]	; (8003f4c <dmaStreamAllocI+0x12c>)
 8003e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9a:	4a2c      	ldr	r2, [pc, #176]	; (8003f4c <dmaStreamAllocI+0x12c>)
 8003e9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ea2:	4b2a      	ldr	r3, [pc, #168]	; (8003f4c <dmaStreamAllocI+0x12c>)
 8003ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ea6:	4a29      	ldr	r2, [pc, #164]	; (8003f4c <dmaStreamAllocI+0x12c>)
 8003ea8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003eac:	6513      	str	r3, [r2, #80]	; 0x50
 8003eae:	4b27      	ldr	r3, [pc, #156]	; (8003f4c <dmaStreamAllocI+0x12c>)
 8003eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
      }
      if ((STM32_DMA2_STREAMS_MASK & mask) != 0U) {
 8003eb2:	9b06      	ldr	r3, [sp, #24]
 8003eb4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00d      	beq.n	8003ed8 <dmaStreamAllocI+0xb8>
        rccEnableDMA2(true);
 8003ebc:	4b23      	ldr	r3, [pc, #140]	; (8003f4c <dmaStreamAllocI+0x12c>)
 8003ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec0:	4a22      	ldr	r2, [pc, #136]	; (8003f4c <dmaStreamAllocI+0x12c>)
 8003ec2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ec6:	6313      	str	r3, [r2, #48]	; 0x30
 8003ec8:	4b20      	ldr	r3, [pc, #128]	; (8003f4c <dmaStreamAllocI+0x12c>)
 8003eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ecc:	4a1f      	ldr	r2, [pc, #124]	; (8003f4c <dmaStreamAllocI+0x12c>)
 8003ece:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ed2:	6513      	str	r3, [r2, #80]	; 0x50
 8003ed4:	4b1d      	ldr	r3, [pc, #116]	; (8003f4c <dmaStreamAllocI+0x12c>)
 8003ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
        rccEnableDMAMUX(true);
      }
#endif

      /* Putting the stream in a safe state.*/
      dmaStreamDisable(dmastp);
 8003ed8:	9b05      	ldr	r3, [sp, #20]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	9b05      	ldr	r3, [sp, #20]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 021f 	bic.w	r2, r2, #31
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	9b05      	ldr	r3, [sp, #20]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1f8      	bne.n	8003ee8 <dmaStreamAllocI+0xc8>
 8003ef6:	9b05      	ldr	r3, [sp, #20]
 8003ef8:	7a5b      	ldrb	r3, [r3, #9]
 8003efa:	4619      	mov	r1, r3
 8003efc:	9b05      	ldr	r3, [sp, #20]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	223d      	movs	r2, #61	; 0x3d
 8003f02:	408a      	lsls	r2, r1
 8003f04:	601a      	str	r2, [r3, #0]
      dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 8003f06:	9b05      	ldr	r3, [sp, #20]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	601a      	str	r2, [r3, #0]
      dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 8003f0e:	9b05      	ldr	r3, [sp, #20]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2221      	movs	r2, #33	; 0x21
 8003f14:	615a      	str	r2, [r3, #20]

      /* Enables the associated IRQ vector if a callback is defined.*/
      if (func != NULL) {
 8003f16:	9b01      	ldr	r3, [sp, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d005      	beq.n	8003f28 <dmaStreamAllocI+0x108>
        nvicEnableVector(dmastp->vector, priority);
 8003f1c:	9b05      	ldr	r3, [sp, #20]
 8003f1e:	7adb      	ldrb	r3, [r3, #11]
 8003f20:	9902      	ldr	r1, [sp, #8]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7ff fa04 	bl	8003330 <nvicEnableVector>
      }

      return dmastp;
 8003f28:	9b05      	ldr	r3, [sp, #20]
 8003f2a:	e007      	b.n	8003f3c <dmaStreamAllocI+0x11c>
  for (i = startid; i <= endid; i++) {
 8003f2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f2e:	3301      	adds	r3, #1
 8003f30:	9309      	str	r3, [sp, #36]	; 0x24
 8003f32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f34:	9b07      	ldr	r3, [sp, #28]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d984      	bls.n	8003e44 <dmaStreamAllocI+0x24>
    }
  }

  return NULL;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	b00b      	add	sp, #44	; 0x2c
 8003f40:	f85d fb04 	ldr.w	pc, [sp], #4
 8003f44:	20000c68 	.word	0x20000c68
 8003f48:	0800ec64 	.word	0x0800ec64
 8003f4c:	40023800 	.word	0x40023800

08003f50 <dmaStreamFreeI>:
 *
 * @param[in] dmastp    pointer to a stm32_dma_stream_t structure
 *
 * @iclass
 */
void dmaStreamFreeI(const stm32_dma_stream_t *dmastp) {
 8003f50:	b500      	push	{lr}
 8003f52:	b083      	sub	sp, #12
 8003f54:	9001      	str	r0, [sp, #4]
  /* Check if the streams is not taken.*/
  osalDbgAssert((dma.allocated_mask & (1U << dmastp->selfindex)) != 0U,
                "not allocated");

  /* Disables the associated IRQ vector.*/
  nvicDisableVector(dmastp->vector);
 8003f56:	9b01      	ldr	r3, [sp, #4]
 8003f58:	7adb      	ldrb	r3, [r3, #11]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7ff fa18 	bl	8003390 <nvicDisableVector>

  /* Marks the stream as not allocated.*/
  dma.allocated_mask &= ~(1U << dmastp->selfindex);
 8003f60:	4b1a      	ldr	r3, [pc, #104]	; (8003fcc <dmaStreamFreeI+0x7c>)
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	9b01      	ldr	r3, [sp, #4]
 8003f66:	7a9b      	ldrb	r3, [r3, #10]
 8003f68:	4619      	mov	r1, r3
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	408b      	lsls	r3, r1
 8003f6e:	43db      	mvns	r3, r3
 8003f70:	4013      	ands	r3, r2
 8003f72:	4a16      	ldr	r2, [pc, #88]	; (8003fcc <dmaStreamFreeI+0x7c>)
 8003f74:	6013      	str	r3, [r2, #0]

  /* Shutting down clocks that are no more required, if any.*/
  if ((dma.allocated_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
 8003f76:	4b15      	ldr	r3, [pc, #84]	; (8003fcc <dmaStreamFreeI+0x7c>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d10d      	bne.n	8003f9c <dmaStreamFreeI+0x4c>
    rccDisableDMA1();
 8003f80:	4b13      	ldr	r3, [pc, #76]	; (8003fd0 <dmaStreamFreeI+0x80>)
 8003f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f84:	4a12      	ldr	r2, [pc, #72]	; (8003fd0 <dmaStreamFreeI+0x80>)
 8003f86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f8a:	6313      	str	r3, [r2, #48]	; 0x30
 8003f8c:	4b10      	ldr	r3, [pc, #64]	; (8003fd0 <dmaStreamFreeI+0x80>)
 8003f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f90:	4a0f      	ldr	r2, [pc, #60]	; (8003fd0 <dmaStreamFreeI+0x80>)
 8003f92:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f96:	6513      	str	r3, [r2, #80]	; 0x50
 8003f98:	4b0d      	ldr	r3, [pc, #52]	; (8003fd0 <dmaStreamFreeI+0x80>)
 8003f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  }
  if ((dma.allocated_mask & STM32_DMA2_STREAMS_MASK) == 0U) {
 8003f9c:	4b0b      	ldr	r3, [pc, #44]	; (8003fcc <dmaStreamFreeI+0x7c>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d10d      	bne.n	8003fc4 <dmaStreamFreeI+0x74>
    rccDisableDMA2();
 8003fa8:	4b09      	ldr	r3, [pc, #36]	; (8003fd0 <dmaStreamFreeI+0x80>)
 8003faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fac:	4a08      	ldr	r2, [pc, #32]	; (8003fd0 <dmaStreamFreeI+0x80>)
 8003fae:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003fb2:	6313      	str	r3, [r2, #48]	; 0x30
 8003fb4:	4b06      	ldr	r3, [pc, #24]	; (8003fd0 <dmaStreamFreeI+0x80>)
 8003fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fb8:	4a05      	ldr	r2, [pc, #20]	; (8003fd0 <dmaStreamFreeI+0x80>)
 8003fba:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003fbe:	6513      	str	r3, [r2, #80]	; 0x50
 8003fc0:	4b03      	ldr	r3, [pc, #12]	; (8003fd0 <dmaStreamFreeI+0x80>)
 8003fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  /* Shutting down DMAMUX if present.*/
  if (dma.allocated_mask == 0U) {
    rccDisableDMAMUX();
  }
#endif
}
 8003fc4:	bf00      	nop
 8003fc6:	b003      	add	sp, #12
 8003fc8:	f85d fb04 	ldr.w	pc, [sp], #4
 8003fcc:	20000c68 	.word	0x20000c68
 8003fd0:	40023800 	.word	0x40023800
	...

08003fe0 <_pal_lld_init>:

  for (i = 0; i < 16; i++) {
    _pal_init_event(i);
  }
#endif
}
 8003fe0:	bf00      	nop
 8003fe2:	4770      	bx	lr
	...

08003ff0 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 8003ff0:	b08e      	sub	sp, #56	; 0x38
 8003ff2:	9003      	str	r0, [sp, #12]
 8003ff4:	9102      	str	r1, [sp, #8]
 8003ff6:	9201      	str	r2, [sp, #4]

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8003ff8:	9b01      	ldr	r3, [sp, #4]
 8003ffa:	f003 0303 	and.w	r3, r3, #3
 8003ffe:	930d      	str	r3, [sp, #52]	; 0x34
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
 8004000:	9b01      	ldr	r3, [sp, #4]
 8004002:	089b      	lsrs	r3, r3, #2
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	930c      	str	r3, [sp, #48]	; 0x30
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 800400a:	9b01      	ldr	r3, [sp, #4]
 800400c:	08db      	lsrs	r3, r3, #3
 800400e:	f003 0303 	and.w	r3, r3, #3
 8004012:	930b      	str	r3, [sp, #44]	; 0x2c
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
 8004014:	9b01      	ldr	r3, [sp, #4]
 8004016:	095b      	lsrs	r3, r3, #5
 8004018:	f003 0303 	and.w	r3, r3, #3
 800401c:	930a      	str	r3, [sp, #40]	; 0x28
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 800401e:	9b01      	ldr	r3, [sp, #4]
 8004020:	09db      	lsrs	r3, r3, #7
 8004022:	f003 030f 	and.w	r3, r3, #15
 8004026:	9308      	str	r3, [sp, #32]
  uint32_t bit     = 0;
 8004028:	2300      	movs	r3, #0
 800402a:	9309      	str	r3, [sp, #36]	; 0x24
  while (true) {
    if ((mask & 1) != 0) {
 800402c:	9b02      	ldr	r3, [sp, #8]
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	2b00      	cmp	r3, #0
 8004034:	d079      	beq.n	800412a <_pal_lld_setgroupmode+0x13a>
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 8004036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004038:	f003 0307 	and.w	r3, r3, #7
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	9a08      	ldr	r2, [sp, #32]
 8004040:	fa02 f303 	lsl.w	r3, r2, r3
 8004044:	9307      	str	r3, [sp, #28]
      m1 = 1 << bit;
 8004046:	2201      	movs	r2, #1
 8004048:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800404a:	fa02 f303 	lsl.w	r3, r2, r3
 800404e:	9306      	str	r3, [sp, #24]
      m2 = 3 << (bit * 2);
 8004050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	2203      	movs	r2, #3
 8004056:	fa02 f303 	lsl.w	r3, r2, r3
 800405a:	9305      	str	r3, [sp, #20]
      m4 = 15 << ((bit & 7) * 4);
 800405c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800405e:	f003 0307 	and.w	r3, r3, #7
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	220f      	movs	r2, #15
 8004066:	fa02 f303 	lsl.w	r3, r2, r3
 800406a:	9304      	str	r3, [sp, #16]
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 800406c:	9b03      	ldr	r3, [sp, #12]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	9b06      	ldr	r3, [sp, #24]
 8004072:	43db      	mvns	r3, r3
 8004074:	401a      	ands	r2, r3
 8004076:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004078:	431a      	orrs	r2, r3
 800407a:	9b03      	ldr	r3, [sp, #12]
 800407c:	605a      	str	r2, [r3, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 800407e:	9b03      	ldr	r3, [sp, #12]
 8004080:	689a      	ldr	r2, [r3, #8]
 8004082:	9b05      	ldr	r3, [sp, #20]
 8004084:	43db      	mvns	r3, r3
 8004086:	401a      	ands	r2, r3
 8004088:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800408a:	431a      	orrs	r2, r3
 800408c:	9b03      	ldr	r3, [sp, #12]
 800408e:	609a      	str	r2, [r3, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8004090:	9b03      	ldr	r3, [sp, #12]
 8004092:	68da      	ldr	r2, [r3, #12]
 8004094:	9b05      	ldr	r3, [sp, #20]
 8004096:	43db      	mvns	r3, r3
 8004098:	401a      	ands	r2, r3
 800409a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800409c:	431a      	orrs	r2, r3
 800409e:	9b03      	ldr	r3, [sp, #12]
 80040a0:	60da      	str	r2, [r3, #12]
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 80040a2:	9b01      	ldr	r3, [sp, #4]
 80040a4:	f003 0303 	and.w	r3, r3, #3
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d11f      	bne.n	80040ec <_pal_lld_setgroupmode+0xfc>
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
 80040ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040ae:	2b07      	cmp	r3, #7
 80040b0:	d809      	bhi.n	80040c6 <_pal_lld_setgroupmode+0xd6>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 80040b2:	9b03      	ldr	r3, [sp, #12]
 80040b4:	6a1a      	ldr	r2, [r3, #32]
 80040b6:	9b04      	ldr	r3, [sp, #16]
 80040b8:	43db      	mvns	r3, r3
 80040ba:	401a      	ands	r2, r3
 80040bc:	9b07      	ldr	r3, [sp, #28]
 80040be:	431a      	orrs	r2, r3
 80040c0:	9b03      	ldr	r3, [sp, #12]
 80040c2:	621a      	str	r2, [r3, #32]
 80040c4:	e008      	b.n	80040d8 <_pal_lld_setgroupmode+0xe8>
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 80040c6:	9b03      	ldr	r3, [sp, #12]
 80040c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040ca:	9b04      	ldr	r3, [sp, #16]
 80040cc:	43db      	mvns	r3, r3
 80040ce:	401a      	ands	r2, r3
 80040d0:	9b07      	ldr	r3, [sp, #28]
 80040d2:	431a      	orrs	r2, r3
 80040d4:	9b03      	ldr	r3, [sp, #12]
 80040d6:	625a      	str	r2, [r3, #36]	; 0x24
        port->MODER   = (port->MODER & ~m2) | moder;
 80040d8:	9b03      	ldr	r3, [sp, #12]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	9b05      	ldr	r3, [sp, #20]
 80040de:	43db      	mvns	r3, r3
 80040e0:	401a      	ands	r2, r3
 80040e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80040e4:	431a      	orrs	r2, r3
 80040e6:	9b03      	ldr	r3, [sp, #12]
 80040e8:	601a      	str	r2, [r3, #0]
 80040ea:	e01e      	b.n	800412a <_pal_lld_setgroupmode+0x13a>
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 80040ec:	9b03      	ldr	r3, [sp, #12]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	9b05      	ldr	r3, [sp, #20]
 80040f2:	43db      	mvns	r3, r3
 80040f4:	401a      	ands	r2, r3
 80040f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80040f8:	431a      	orrs	r2, r3
 80040fa:	9b03      	ldr	r3, [sp, #12]
 80040fc:	601a      	str	r2, [r3, #0]
        if (bit < 8)
 80040fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004100:	2b07      	cmp	r3, #7
 8004102:	d809      	bhi.n	8004118 <_pal_lld_setgroupmode+0x128>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8004104:	9b03      	ldr	r3, [sp, #12]
 8004106:	6a1a      	ldr	r2, [r3, #32]
 8004108:	9b04      	ldr	r3, [sp, #16]
 800410a:	43db      	mvns	r3, r3
 800410c:	401a      	ands	r2, r3
 800410e:	9b07      	ldr	r3, [sp, #28]
 8004110:	431a      	orrs	r2, r3
 8004112:	9b03      	ldr	r3, [sp, #12]
 8004114:	621a      	str	r2, [r3, #32]
 8004116:	e008      	b.n	800412a <_pal_lld_setgroupmode+0x13a>
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8004118:	9b03      	ldr	r3, [sp, #12]
 800411a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800411c:	9b04      	ldr	r3, [sp, #16]
 800411e:	43db      	mvns	r3, r3
 8004120:	401a      	ands	r2, r3
 8004122:	9b07      	ldr	r3, [sp, #28]
 8004124:	431a      	orrs	r2, r3
 8004126:	9b03      	ldr	r3, [sp, #12]
 8004128:	625a      	str	r2, [r3, #36]	; 0x24
      }
    }
    mask >>= 1;
 800412a:	9b02      	ldr	r3, [sp, #8]
 800412c:	085b      	lsrs	r3, r3, #1
 800412e:	9302      	str	r3, [sp, #8]
    if (!mask)
 8004130:	9b02      	ldr	r3, [sp, #8]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00f      	beq.n	8004156 <_pal_lld_setgroupmode+0x166>
      return;
    otyper <<= 1;
 8004136:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	930c      	str	r3, [sp, #48]	; 0x30
    ospeedr <<= 2;
 800413c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	930b      	str	r3, [sp, #44]	; 0x2c
    pupdr <<= 2;
 8004142:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	930a      	str	r3, [sp, #40]	; 0x28
    moder <<= 2;
 8004148:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	930d      	str	r3, [sp, #52]	; 0x34
    bit++;
 800414e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004150:	3301      	adds	r3, #1
 8004152:	9309      	str	r3, [sp, #36]	; 0x24
    if ((mask & 1) != 0) {
 8004154:	e76a      	b.n	800402c <_pal_lld_setgroupmode+0x3c>
      return;
 8004156:	bf00      	nop
  }
}
 8004158:	b00e      	add	sp, #56	; 0x38
 800415a:	4770      	bx	lr
 800415c:	0000      	movs	r0, r0
	...

08004160 <chTimeAddX.lto_priv.0>:
 * @return              The new system time.
 *
 * @xclass
 */
static inline systime_t chTimeAddX(systime_t systime,
                                   sysinterval_t interval) {
 8004160:	b082      	sub	sp, #8
 8004162:	9001      	str	r0, [sp, #4]
 8004164:	9100      	str	r1, [sp, #0]

#if CH_CFG_ST_RESOLUTION != CH_CFG_INTERVALS_SIZE
  chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
#endif

  return systime + (systime_t)interval;
 8004166:	9a01      	ldr	r2, [sp, #4]
 8004168:	9b00      	ldr	r3, [sp, #0]
 800416a:	4413      	add	r3, r2
}
 800416c:	4618      	mov	r0, r3
 800416e:	b002      	add	sp, #8
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
	...

08004180 <chTimeIsInRangeX.lto_priv.0>:
 *
 * @xclass
 */
static inline bool chTimeIsInRangeX(systime_t time,
                                    systime_t start,
                                    systime_t end) {
 8004180:	b084      	sub	sp, #16
 8004182:	9003      	str	r0, [sp, #12]
 8004184:	9102      	str	r1, [sp, #8]
 8004186:	9201      	str	r2, [sp, #4]

  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 8004188:	9a03      	ldr	r2, [sp, #12]
 800418a:	9b02      	ldr	r3, [sp, #8]
 800418c:	1ad2      	subs	r2, r2, r3
                (systime_t)((systime_t)end - (systime_t)start));
 800418e:	9901      	ldr	r1, [sp, #4]
 8004190:	9b02      	ldr	r3, [sp, #8]
 8004192:	1acb      	subs	r3, r1, r3
  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 8004194:	429a      	cmp	r2, r3
 8004196:	bf34      	ite	cc
 8004198:	2301      	movcc	r3, #1
 800419a:	2300      	movcs	r3, #0
 800419c:	b2db      	uxtb	r3, r3
}
 800419e:	4618      	mov	r0, r3
 80041a0:	b004      	add	sp, #16
 80041a2:	4770      	bx	lr
	...

080041b0 <port_timer_get_time.lto_priv.0>:
 *
 * @return              The system time.
 *
 * @notapi
 */
static inline systime_t port_timer_get_time(void) {
 80041b0:	b508      	push	{r3, lr}

  return stGetCounter();
 80041b2:	f7fd fb45 	bl	8001840 <stGetCounter>
 80041b6:	4603      	mov	r3, r0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	bd08      	pop	{r3, pc}
 80041bc:	0000      	movs	r0, r0
	...

080041c0 <chSysLock.lto_priv.8>:
static inline void chSysLock(void) {
 80041c0:	b082      	sub	sp, #8
 80041c2:	2330      	movs	r3, #48	; 0x30
 80041c4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80041c6:	9b01      	ldr	r3, [sp, #4]
 80041c8:	f383 8811 	msr	BASEPRI, r3
}
 80041cc:	bf00      	nop
}
 80041ce:	bf00      	nop
}
 80041d0:	bf00      	nop
 80041d2:	b002      	add	sp, #8
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
	...

080041e0 <chSysUnlock.lto_priv.8>:
static inline void chSysUnlock(void) {
 80041e0:	b082      	sub	sp, #8
 80041e2:	2300      	movs	r3, #0
 80041e4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80041e6:	9b01      	ldr	r3, [sp, #4]
 80041e8:	f383 8811 	msr	BASEPRI, r3
}
 80041ec:	bf00      	nop
}
 80041ee:	bf00      	nop
}
 80041f0:	bf00      	nop
 80041f2:	b002      	add	sp, #8
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
	...

08004200 <chSysLockFromISR.lto_priv.0>:
 *          not be limited to disabling interrupts.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysLockFromISR(void) {
 8004200:	b082      	sub	sp, #8
 8004202:	2330      	movs	r3, #48	; 0x30
 8004204:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004206:	9b01      	ldr	r3, [sp, #4]
 8004208:	f383 8811 	msr	BASEPRI, r3
}
 800420c:	bf00      	nop
}
 800420e:	bf00      	nop
 * @note    Same as @p port_lock() in this port.
 */
__STATIC_FORCEINLINE void port_lock_from_isr(void) {

  port_lock();
}
 8004210:	bf00      	nop

  port_lock_from_isr();
  __stats_start_measure_crit_isr();
  __dbg_check_lock_from_isr();
}
 8004212:	bf00      	nop
 8004214:	b002      	add	sp, #8
 8004216:	4770      	bx	lr
	...

08004220 <chSysUnlockFromISR.lto_priv.0>:
 *          not be limited to enabling interrupts.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {
 8004220:	b082      	sub	sp, #8
 8004222:	2300      	movs	r3, #0
 8004224:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004226:	9b01      	ldr	r3, [sp, #4]
 8004228:	f383 8811 	msr	BASEPRI, r3
}
 800422c:	bf00      	nop
}
 800422e:	bf00      	nop
 * @note    Same as @p port_unlock() in this port.
 */
__STATIC_FORCEINLINE void port_unlock_from_isr(void) {

  port_unlock();
}
 8004230:	bf00      	nop

  __dbg_check_unlock_from_isr();
  __stats_stop_measure_crit_isr();
  port_unlock_from_isr();
}
 8004232:	bf00      	nop
 8004234:	b002      	add	sp, #8
 8004236:	4770      	bx	lr
	...

08004240 <chVTGetSystemTimeX.lto_priv.0>:
 *
 * @return              The system time in ticks.
 *
 * @xclass
 */
static inline systime_t chVTGetSystemTimeX(void) {
 8004240:	b508      	push	{r3, lr}

#if CH_CFG_ST_TIMEDELTA == 0
  return currcore->vtlist.systime;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  return port_timer_get_time();
 8004242:	f7ff ffb5 	bl	80041b0 <port_timer_get_time.lto_priv.0>
 8004246:	4603      	mov	r3, r0
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8004248:	4618      	mov	r0, r3
 800424a:	bd08      	pop	{r3, pc}
 800424c:	0000      	movs	r0, r0
	...

08004250 <osalSysHalt.lto_priv.0>:
static inline void osalSysHalt(const char *reason) {
 8004250:	b500      	push	{lr}
 8004252:	b083      	sub	sp, #12
 8004254:	9001      	str	r0, [sp, #4]
  chSysHalt(reason);
 8004256:	9801      	ldr	r0, [sp, #4]
 8004258:	f002 f89a 	bl	8006390 <chSysHalt>
}
 800425c:	bf00      	nop
 800425e:	b003      	add	sp, #12
 8004260:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004270 <osalSysLock.lto_priv.8>:
static inline void osalSysLock(void) {
 8004270:	b508      	push	{r3, lr}
  chSysLock();
 8004272:	f7ff ffa5 	bl	80041c0 <chSysLock.lto_priv.8>
}
 8004276:	bf00      	nop
 8004278:	bd08      	pop	{r3, pc}
 800427a:	bf00      	nop
 800427c:	0000      	movs	r0, r0
	...

08004280 <osalSysUnlock.lto_priv.8>:
static inline void osalSysUnlock(void) {
 8004280:	b508      	push	{r3, lr}
  chSysUnlock();
 8004282:	f7ff ffad 	bl	80041e0 <chSysUnlock.lto_priv.8>
}
 8004286:	bf00      	nop
 8004288:	bd08      	pop	{r3, pc}
 800428a:	bf00      	nop
 800428c:	0000      	movs	r0, r0
	...

08004290 <osalSysLockFromISR.lto_priv.0>:
static inline void osalSysLockFromISR(void) {
 8004290:	b508      	push	{r3, lr}
  chSysLockFromISR();
 8004292:	f7ff ffb5 	bl	8004200 <chSysLockFromISR.lto_priv.0>
}
 8004296:	bf00      	nop
 8004298:	bd08      	pop	{r3, pc}
 800429a:	bf00      	nop
 800429c:	0000      	movs	r0, r0
	...

080042a0 <osalSysUnlockFromISR.lto_priv.0>:
static inline void osalSysUnlockFromISR(void) {
 80042a0:	b508      	push	{r3, lr}
  chSysUnlockFromISR();
 80042a2:	f7ff ffbd 	bl	8004220 <chSysUnlockFromISR.lto_priv.0>
}
 80042a6:	bf00      	nop
 80042a8:	bd08      	pop	{r3, pc}
 80042aa:	bf00      	nop
 80042ac:	0000      	movs	r0, r0
	...

080042b0 <osalOsGetSystemTimeX>:
static inline systime_t osalOsGetSystemTimeX(void) {
 80042b0:	b508      	push	{r3, lr}
  return chVTGetSystemTimeX();
 80042b2:	f7ff ffc5 	bl	8004240 <chVTGetSystemTimeX.lto_priv.0>
 80042b6:	4603      	mov	r3, r0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	bd08      	pop	{r3, pc}
 80042bc:	0000      	movs	r0, r0
	...

080042c0 <osalTimeAddX>:
                                     sysinterval_t interval) {
 80042c0:	b500      	push	{lr}
 80042c2:	b083      	sub	sp, #12
 80042c4:	9001      	str	r0, [sp, #4]
 80042c6:	9100      	str	r1, [sp, #0]
  return chTimeAddX(systime, interval);
 80042c8:	9900      	ldr	r1, [sp, #0]
 80042ca:	9801      	ldr	r0, [sp, #4]
 80042cc:	f7ff ff48 	bl	8004160 <chTimeAddX.lto_priv.0>
 80042d0:	4603      	mov	r3, r0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	b003      	add	sp, #12
 80042d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80042da:	bf00      	nop
 80042dc:	0000      	movs	r0, r0
	...

080042e0 <osalTimeIsInRangeX>:
                                      systime_t end) {
 80042e0:	b500      	push	{lr}
 80042e2:	b085      	sub	sp, #20
 80042e4:	9003      	str	r0, [sp, #12]
 80042e6:	9102      	str	r1, [sp, #8]
 80042e8:	9201      	str	r2, [sp, #4]
  return chTimeIsInRangeX(time, start, end);
 80042ea:	9a01      	ldr	r2, [sp, #4]
 80042ec:	9902      	ldr	r1, [sp, #8]
 80042ee:	9803      	ldr	r0, [sp, #12]
 80042f0:	f7ff ff46 	bl	8004180 <chTimeIsInRangeX.lto_priv.0>
 80042f4:	4603      	mov	r3, r0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	b005      	add	sp, #20
 80042fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80042fe:	bf00      	nop

08004300 <osalThreadSuspendTimeoutS.lto_priv.1>:
                                              sysinterval_t timeout) {
 8004300:	b500      	push	{lr}
 8004302:	b083      	sub	sp, #12
 8004304:	9001      	str	r0, [sp, #4]
 8004306:	9100      	str	r1, [sp, #0]
  return chThdSuspendTimeoutS(trp, timeout);
 8004308:	9900      	ldr	r1, [sp, #0]
 800430a:	9801      	ldr	r0, [sp, #4]
 800430c:	f003 f908 	bl	8007520 <chThdSuspendTimeoutS>
 8004310:	4603      	mov	r3, r0
}
 8004312:	4618      	mov	r0, r3
 8004314:	b003      	add	sp, #12
 8004316:	f85d fb04 	ldr.w	pc, [sp], #4
 800431a:	bf00      	nop
 800431c:	0000      	movs	r0, r0
	...

08004320 <osalThreadResumeI.lto_priv.1>:
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {
 8004320:	b500      	push	{lr}
 8004322:	b083      	sub	sp, #12
 8004324:	9001      	str	r0, [sp, #4]
 8004326:	9100      	str	r1, [sp, #0]
  chThdResumeI(trp, msg);
 8004328:	9900      	ldr	r1, [sp, #0]
 800432a:	9801      	ldr	r0, [sp, #4]
 800432c:	f003 f920 	bl	8007570 <chThdResumeI>
}
 8004330:	bf00      	nop
 8004332:	b003      	add	sp, #12
 8004334:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004340 <i2c_lld_abort_operation>:
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_abort_operation(I2CDriver *i2cp) {
 8004340:	b084      	sub	sp, #16
 8004342:	9001      	str	r0, [sp, #4]
  I2C_TypeDef *dp = i2cp->i2c;
 8004344:	9b01      	ldr	r3, [sp, #4]
 8004346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004348:	9303      	str	r3, [sp, #12]

  /* Stops the I2C peripheral.*/
  dp->CR1 = I2C_CR1_SWRST;
 800434a:	9b03      	ldr	r3, [sp, #12]
 800434c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004350:	601a      	str	r2, [r3, #0]
  dp->CR1 = 0;
 8004352:	9b03      	ldr	r3, [sp, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	601a      	str	r2, [r3, #0]
  dp->CR2 = 0;
 8004358:	9b03      	ldr	r3, [sp, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	605a      	str	r2, [r3, #4]
  dp->SR1 = 0;
 800435e:	9b03      	ldr	r3, [sp, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	615a      	str	r2, [r3, #20]

  /* Stops the associated DMA streams.*/
  dmaStreamDisable(i2cp->dmatx);
 8004364:	9b01      	ldr	r3, [sp, #4]
 8004366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	9b01      	ldr	r3, [sp, #4]
 800436e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 021f 	bic.w	r2, r2, #31
 8004376:	601a      	str	r2, [r3, #0]
 8004378:	9b01      	ldr	r3, [sp, #4]
 800437a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0301 	and.w	r3, r3, #1
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1f7      	bne.n	8004378 <i2c_lld_abort_operation+0x38>
 8004388:	9b01      	ldr	r3, [sp, #4]
 800438a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438c:	7a5b      	ldrb	r3, [r3, #9]
 800438e:	4619      	mov	r1, r3
 8004390:	9b01      	ldr	r3, [sp, #4]
 8004392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	223d      	movs	r2, #61	; 0x3d
 8004398:	408a      	lsls	r2, r1
 800439a:	601a      	str	r2, [r3, #0]
  dmaStreamDisable(i2cp->dmarx);
 800439c:	9b01      	ldr	r3, [sp, #4]
 800439e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	9b01      	ldr	r3, [sp, #4]
 80043a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 021f 	bic.w	r2, r2, #31
 80043ae:	601a      	str	r2, [r3, #0]
 80043b0:	9b01      	ldr	r3, [sp, #4]
 80043b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0301 	and.w	r3, r3, #1
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1f7      	bne.n	80043b0 <i2c_lld_abort_operation+0x70>
 80043c0:	9b01      	ldr	r3, [sp, #4]
 80043c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c4:	7a5b      	ldrb	r3, [r3, #9]
 80043c6:	4619      	mov	r1, r3
 80043c8:	9b01      	ldr	r3, [sp, #4]
 80043ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	223d      	movs	r2, #61	; 0x3d
 80043d0:	408a      	lsls	r2, r1
 80043d2:	601a      	str	r2, [r3, #0]
}
 80043d4:	bf00      	nop
 80043d6:	b004      	add	sp, #16
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	0000      	movs	r0, r0
	...

080043e0 <i2c_lld_set_clock>:
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_set_clock(I2CDriver *i2cp) {
 80043e0:	b086      	sub	sp, #24
 80043e2:	9001      	str	r0, [sp, #4]
  I2C_TypeDef *dp = i2cp->i2c;
 80043e4:	9b01      	ldr	r3, [sp, #4]
 80043e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043e8:	9304      	str	r3, [sp, #16]
  uint16_t regCCR, clock_div;
  int32_t clock_speed = i2cp->config->clock_speed;
 80043ea:	9b01      	ldr	r3, [sp, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	9303      	str	r3, [sp, #12]
  i2cdutycycle_t duty = i2cp->config->duty_cycle;
 80043f2:	9b01      	ldr	r3, [sp, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	7a1b      	ldrb	r3, [r3, #8]
 80043f8:	f88d 300b 	strb.w	r3, [sp, #11]
  osalDbgCheck((i2cp != NULL) &&
               (clock_speed > 0) &&
               (clock_speed <= 400000));

  /* CR2 Configuration.*/
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 80043fc:	9b04      	ldr	r3, [sp, #16]
 80043fe:	685a      	ldr	r2, [r3, #4]
 8004400:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8004404:	4013      	ands	r3, r2
 8004406:	9a04      	ldr	r2, [sp, #16]
 8004408:	6053      	str	r3, [r2, #4]
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 800440a:	9b04      	ldr	r3, [sp, #16]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f043 022a 	orr.w	r2, r3, #42	; 0x2a
 8004412:	9b04      	ldr	r3, [sp, #16]
 8004414:	605a      	str	r2, [r3, #4]

  /* CCR Configuration.*/
  regCCR = 0;
 8004416:	2300      	movs	r3, #0
 8004418:	f8ad 3016 	strh.w	r3, [sp, #22]
  clock_div = I2C_CCR_CCR;
 800441c:	f640 73ff 	movw	r3, #4095	; 0xfff
 8004420:	f8ad 3014 	strh.w	r3, [sp, #20]

  if (clock_speed <= 100000) {
 8004424:	9b03      	ldr	r3, [sp, #12]
 8004426:	4a2c      	ldr	r2, [pc, #176]	; (80044d8 <i2c_lld_set_clock+0xf8>)
 8004428:	4293      	cmp	r3, r2
 800442a:	dc14      	bgt.n	8004456 <i2c_lld_set_clock+0x76>
    osalDbgAssert(duty == STD_DUTY_CYCLE, "invalid standard mode duty cycle");

    /* Standard mode clock_div calculate: Tlow/Thigh = 1/1.*/
    osalDbgAssert((STM32_PCLK1 % (clock_speed * 2)) == 0,
                  "PCLK1 must be divisible without remainder");
    clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 2));
 800442c:	9b03      	ldr	r3, [sp, #12]
 800442e:	005b      	lsls	r3, r3, #1
 8004430:	4a2a      	ldr	r2, [pc, #168]	; (80044dc <i2c_lld_set_clock+0xfc>)
 8004432:	fb92 f3f3 	sdiv	r3, r2, r3
 8004436:	f8ad 3014 	strh.w	r3, [sp, #20]

    osalDbgAssert(clock_div >= 0x04,
                  "clock divider less then 0x04 not allowed");
    regCCR |= (clock_div & I2C_CCR_CCR);
 800443a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800443e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004442:	b29a      	uxth	r2, r3
 8004444:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8004448:	4313      	orrs	r3, r2
 800444a:	f8ad 3016 	strh.w	r3, [sp, #22]

    /* Sets the Maximum Rise Time for standard mode.*/
    dp->TRISE = I2C_CLK_FREQ + 1;
 800444e:	9b04      	ldr	r3, [sp, #16]
 8004450:	222b      	movs	r2, #43	; 0x2b
 8004452:	621a      	str	r2, [r3, #32]
 8004454:	e038      	b.n	80044c8 <i2c_lld_set_clock+0xe8>
  }
  else if (clock_speed <= 400000) {
 8004456:	9b03      	ldr	r3, [sp, #12]
 8004458:	4a21      	ldr	r2, [pc, #132]	; (80044e0 <i2c_lld_set_clock+0x100>)
 800445a:	4293      	cmp	r3, r2
 800445c:	dc34      	bgt.n	80044c8 <i2c_lld_set_clock+0xe8>
    /* Configure clock_div in fast mode.*/
    osalDbgAssert((duty == FAST_DUTY_CYCLE_2) ||
                  (duty == FAST_DUTY_CYCLE_16_9),
                  "invalid fast mode duty cycle");

    if (duty == FAST_DUTY_CYCLE_2) {
 800445e:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8004462:	2b02      	cmp	r3, #2
 8004464:	d109      	bne.n	800447a <i2c_lld_set_clock+0x9a>
      /* Fast mode clock_div calculate: Tlow/Thigh = 2/1.*/
      osalDbgAssert((STM32_PCLK1 % (clock_speed * 3)) == 0,
                    "PCLK1 must be divided without remainder");
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 3));
 8004466:	9a03      	ldr	r2, [sp, #12]
 8004468:	4613      	mov	r3, r2
 800446a:	005b      	lsls	r3, r3, #1
 800446c:	4413      	add	r3, r2
 800446e:	4a1b      	ldr	r2, [pc, #108]	; (80044dc <i2c_lld_set_clock+0xfc>)
 8004470:	fb92 f3f3 	sdiv	r3, r2, r3
 8004474:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004478:	e014      	b.n	80044a4 <i2c_lld_set_clock+0xc4>
    }
    else if (duty == FAST_DUTY_CYCLE_16_9) {
 800447a:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800447e:	2b03      	cmp	r3, #3
 8004480:	d110      	bne.n	80044a4 <i2c_lld_set_clock+0xc4>
      /* Fast mode clock_div calculate: Tlow/Thigh = 16/9.*/
      osalDbgAssert((STM32_PCLK1 % (clock_speed * 25)) == 0,
                    "PCLK1 must be divided without remainder");
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 25));
 8004482:	9a03      	ldr	r2, [sp, #12]
 8004484:	4613      	mov	r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	4413      	add	r3, r2
 800448a:	009a      	lsls	r2, r3, #2
 800448c:	4413      	add	r3, r2
 800448e:	4a13      	ldr	r2, [pc, #76]	; (80044dc <i2c_lld_set_clock+0xfc>)
 8004490:	fb92 f3f3 	sdiv	r3, r2, r3
 8004494:	f8ad 3014 	strh.w	r3, [sp, #20]
      regCCR |= I2C_CCR_DUTY;
 8004498:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800449c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044a0:	f8ad 3016 	strh.w	r3, [sp, #22]
    }

    osalDbgAssert(clock_div >= 0x01,
                  "clock divider less then 0x04 not allowed");
    regCCR |= (I2C_CCR_FS | (clock_div & I2C_CCR_CCR));
 80044a4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80044a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044be:	f8ad 3016 	strh.w	r3, [sp, #22]

    /* Sets the Maximum Rise Time for fast mode.*/
    dp->TRISE = (I2C_CLK_FREQ * 300 / 1000) + 1;
 80044c2:	9b04      	ldr	r3, [sp, #16]
 80044c4:	220d      	movs	r2, #13
 80044c6:	621a      	str	r2, [r3, #32]
  }

  osalDbgAssert((clock_div <= I2C_CCR_CCR), "the selected clock is too low");

  dp->CCR = regCCR;
 80044c8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80044cc:	9b04      	ldr	r3, [sp, #16]
 80044ce:	61da      	str	r2, [r3, #28]
}
 80044d0:	bf00      	nop
 80044d2:	b006      	add	sp, #24
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	000186a0 	.word	0x000186a0
 80044dc:	0280de80 	.word	0x0280de80
 80044e0:	00061a80 	.word	0x00061a80
	...

080044f0 <i2c_lld_set_opmode>:
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_set_opmode(I2CDriver *i2cp) {
 80044f0:	b086      	sub	sp, #24
 80044f2:	9001      	str	r0, [sp, #4]
  I2C_TypeDef *dp = i2cp->i2c;
 80044f4:	9b01      	ldr	r3, [sp, #4]
 80044f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f8:	9304      	str	r3, [sp, #16]
  i2copmode_t opmode = i2cp->config->op_mode;
 80044fa:	9b01      	ldr	r3, [sp, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	f88d 300f 	strb.w	r3, [sp, #15]
  uint16_t regCR1;

  regCR1 = dp->CR1;
 8004504:	9b04      	ldr	r3, [sp, #16]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f8ad 3016 	strh.w	r3, [sp, #22]
  switch (opmode) {
 800450c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8004510:	2b03      	cmp	r3, #3
 8004512:	d01a      	beq.n	800454a <i2c_lld_set_opmode+0x5a>
 8004514:	2b03      	cmp	r3, #3
 8004516:	dc1f      	bgt.n	8004558 <i2c_lld_set_opmode+0x68>
 8004518:	2b01      	cmp	r3, #1
 800451a:	d002      	beq.n	8004522 <i2c_lld_set_opmode+0x32>
 800451c:	2b02      	cmp	r3, #2
 800451e:	d007      	beq.n	8004530 <i2c_lld_set_opmode+0x40>
 8004520:	e01a      	b.n	8004558 <i2c_lld_set_opmode+0x68>
  case OPMODE_I2C:
    regCR1 &= (uint16_t)~(I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 8004522:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8004526:	f023 030a 	bic.w	r3, r3, #10
 800452a:	f8ad 3016 	strh.w	r3, [sp, #22]
    break;
 800452e:	e013      	b.n	8004558 <i2c_lld_set_opmode+0x68>
  case OPMODE_SMBUS_DEVICE:
    regCR1 |= I2C_CR1_SMBUS;
 8004530:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8004534:	f043 0302 	orr.w	r3, r3, #2
 8004538:	f8ad 3016 	strh.w	r3, [sp, #22]
    regCR1 &= (uint16_t)~(I2C_CR1_SMBTYPE);
 800453c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8004540:	f023 0308 	bic.w	r3, r3, #8
 8004544:	f8ad 3016 	strh.w	r3, [sp, #22]
    break;
 8004548:	e006      	b.n	8004558 <i2c_lld_set_opmode+0x68>
  case OPMODE_SMBUS_HOST:
    regCR1 |= (I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 800454a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800454e:	f043 030a 	orr.w	r3, r3, #10
 8004552:	f8ad 3016 	strh.w	r3, [sp, #22]
    break;
 8004556:	bf00      	nop
  }
  dp->CR1 = regCR1;
 8004558:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800455c:	9b04      	ldr	r3, [sp, #16]
 800455e:	601a      	str	r2, [r3, #0]
}
 8004560:	bf00      	nop
 8004562:	b006      	add	sp, #24
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
	...

08004570 <i2c_lld_serve_event_interrupt>:
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_event_interrupt(I2CDriver *i2cp) {
 8004570:	b500      	push	{lr}
 8004572:	b087      	sub	sp, #28
 8004574:	9001      	str	r0, [sp, #4]
  I2C_TypeDef *dp = i2cp->i2c;
 8004576:	9b01      	ldr	r3, [sp, #4]
 8004578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800457a:	9305      	str	r3, [sp, #20]
  uint32_t regSR2 = dp->SR2;
 800457c:	9b05      	ldr	r3, [sp, #20]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	9304      	str	r3, [sp, #16]
  uint32_t event = dp->SR1;
 8004582:	9b05      	ldr	r3, [sp, #20]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	9303      	str	r3, [sp, #12]

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8004588:	9b04      	ldr	r3, [sp, #16]
 800458a:	041a      	lsls	r2, r3, #16
 800458c:	9b03      	ldr	r3, [sp, #12]
 800458e:	4313      	orrs	r3, r2
 8004590:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8004594:	4a75      	ldr	r2, [pc, #468]	; (800476c <i2c_lld_serve_event_interrupt+0x1fc>)
 8004596:	4293      	cmp	r3, r2
 8004598:	f000 80a3 	beq.w	80046e2 <i2c_lld_serve_event_interrupt+0x172>
 800459c:	4a73      	ldr	r2, [pc, #460]	; (800476c <i2c_lld_serve_event_interrupt+0x1fc>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	f200 80d6 	bhi.w	8004750 <i2c_lld_serve_event_interrupt+0x1e0>
 80045a4:	4a72      	ldr	r2, [pc, #456]	; (8004770 <i2c_lld_serve_event_interrupt+0x200>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	f000 808a 	beq.w	80046c0 <i2c_lld_serve_event_interrupt+0x150>
 80045ac:	4a70      	ldr	r2, [pc, #448]	; (8004770 <i2c_lld_serve_event_interrupt+0x200>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	f200 80ce 	bhi.w	8004750 <i2c_lld_serve_event_interrupt+0x1e0>
 80045b4:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 80045b8:	d036      	beq.n	8004628 <i2c_lld_serve_event_interrupt+0xb8>
 80045ba:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 80045be:	f0c0 80c7 	bcc.w	8004750 <i2c_lld_serve_event_interrupt+0x1e0>
 80045c2:	4a6c      	ldr	r2, [pc, #432]	; (8004774 <i2c_lld_serve_event_interrupt+0x204>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	f200 80c3 	bhi.w	8004750 <i2c_lld_serve_event_interrupt+0x1e0>
 80045ca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80045ce:	f240 80bf 	bls.w	8004750 <i2c_lld_serve_event_interrupt+0x1e0>
 80045d2:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80045d6:	3b01      	subs	r3, #1
 80045d8:	2b10      	cmp	r3, #16
 80045da:	f200 80b9 	bhi.w	8004750 <i2c_lld_serve_event_interrupt+0x1e0>
 80045de:	a201      	add	r2, pc, #4	; (adr r2, 80045e4 <i2c_lld_serve_event_interrupt+0x74>)
 80045e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e4:	08004629 	.word	0x08004629
 80045e8:	0800467b 	.word	0x0800467b
 80045ec:	08004751 	.word	0x08004751
 80045f0:	08004751 	.word	0x08004751
 80045f4:	08004751 	.word	0x08004751
 80045f8:	08004751 	.word	0x08004751
 80045fc:	08004751 	.word	0x08004751
 8004600:	0800466b 	.word	0x0800466b
 8004604:	08004751 	.word	0x08004751
 8004608:	08004751 	.word	0x08004751
 800460c:	08004751 	.word	0x08004751
 8004610:	08004751 	.word	0x08004751
 8004614:	08004751 	.word	0x08004751
 8004618:	08004751 	.word	0x08004751
 800461c:	08004751 	.word	0x08004751
 8004620:	08004751 	.word	0x08004751
 8004624:	0800473d 	.word	0x0800473d
  case I2C_EV5_MASTER_MODE_SELECT:
  case I2C_EV5_MASTER_MODE_SELECT_NO_BUSY:
    if ((i2cp->addr >> 8) > 0) {
 8004628:	9b01      	ldr	r3, [sp, #4]
 800462a:	8c1b      	ldrh	r3, [r3, #32]
 800462c:	0a1b      	lsrs	r3, r3, #8
 800462e:	b29b      	uxth	r3, r3
 8004630:	2b00      	cmp	r3, #0
 8004632:	d014      	beq.n	800465e <i2c_lld_serve_event_interrupt+0xee>
      /* 10-bit address: 1 1 1 1 0 X X R/W */
      dp->DR = 0xF0 | (0x6 & (i2cp->addr >> 8)) | (0x1 & i2cp->addr);
 8004634:	9b01      	ldr	r3, [sp, #4]
 8004636:	8c1b      	ldrh	r3, [r3, #32]
 8004638:	0a1b      	lsrs	r3, r3, #8
 800463a:	b29b      	uxth	r3, r3
 800463c:	f003 0306 	and.w	r3, r3, #6
 8004640:	b29a      	uxth	r2, r3
 8004642:	9b01      	ldr	r3, [sp, #4]
 8004644:	8c1b      	ldrh	r3, [r3, #32]
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	b29b      	uxth	r3, r3
 800464c:	4313      	orrs	r3, r2
 800464e:	b29b      	uxth	r3, r3
 8004650:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8004654:	b29b      	uxth	r3, r3
 8004656:	461a      	mov	r2, r3
 8004658:	9b05      	ldr	r3, [sp, #20]
 800465a:	611a      	str	r2, [r3, #16]
    } else {
      dp->DR = i2cp->addr;
    }
    break;
 800465c:	e07b      	b.n	8004756 <i2c_lld_serve_event_interrupt+0x1e6>
      dp->DR = i2cp->addr;
 800465e:	9b01      	ldr	r3, [sp, #4]
 8004660:	8c1b      	ldrh	r3, [r3, #32]
 8004662:	461a      	mov	r2, r3
 8004664:	9b05      	ldr	r3, [sp, #20]
 8004666:	611a      	str	r2, [r3, #16]
    break;
 8004668:	e075      	b.n	8004756 <i2c_lld_serve_event_interrupt+0x1e6>
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
 800466a:	9b01      	ldr	r3, [sp, #4]
 800466c:	8c1b      	ldrh	r3, [r3, #32]
 800466e:	085b      	lsrs	r3, r3, #1
 8004670:	b29b      	uxth	r3, r3
 8004672:	b2da      	uxtb	r2, r3
 8004674:	9b05      	ldr	r3, [sp, #20]
 8004676:	611a      	str	r2, [r3, #16]
    break;
 8004678:	e06d      	b.n	8004756 <i2c_lld_serve_event_interrupt+0x1e6>
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800467a:	9b05      	ldr	r3, [sp, #20]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004682:	9b05      	ldr	r3, [sp, #20]
 8004684:	605a      	str	r2, [r3, #4]
    dmaStreamEnable(i2cp->dmarx);
 8004686:	9b01      	ldr	r3, [sp, #4]
 8004688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	9b01      	ldr	r3, [sp, #4]
 8004690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f042 0201 	orr.w	r2, r2, #1
 8004698:	601a      	str	r2, [r3, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
 800469a:	9b05      	ldr	r3, [sp, #20]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80046a2:	9b05      	ldr	r3, [sp, #20]
 80046a4:	605a      	str	r2, [r3, #4]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
 80046a6:	9b01      	ldr	r3, [sp, #4]
 80046a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d850      	bhi.n	8004754 <i2c_lld_serve_event_interrupt+0x1e4>
      dp->CR1 &= ~I2C_CR1_ACK;
 80046b2:	9b05      	ldr	r3, [sp, #20]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80046ba:	9b05      	ldr	r3, [sp, #20]
 80046bc:	601a      	str	r2, [r3, #0]
    break;
 80046be:	e049      	b.n	8004754 <i2c_lld_serve_event_interrupt+0x1e4>
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80046c0:	9b05      	ldr	r3, [sp, #20]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80046c8:	9b05      	ldr	r3, [sp, #20]
 80046ca:	605a      	str	r2, [r3, #4]
    dmaStreamEnable(i2cp->dmatx);
 80046cc:	9b01      	ldr	r3, [sp, #4]
 80046ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	9b01      	ldr	r3, [sp, #4]
 80046d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f042 0201 	orr.w	r2, r2, #1
 80046de:	601a      	str	r2, [r3, #0]
    break;
 80046e0:	e039      	b.n	8004756 <i2c_lld_serve_event_interrupt+0x1e6>
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    (void)dp->DR; /* Clear BTF.*/
 80046e2:	9b05      	ldr	r3, [sp, #20]
 80046e4:	691b      	ldr	r3, [r3, #16]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 80046e6:	9b01      	ldr	r3, [sp, #4]
 80046e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00d      	beq.n	800470e <i2c_lld_serve_event_interrupt+0x19e>
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
 80046f2:	9b01      	ldr	r3, [sp, #4]
 80046f4:	8c1b      	ldrh	r3, [r3, #32]
 80046f6:	f043 0301 	orr.w	r3, r3, #1
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	9b01      	ldr	r3, [sp, #4]
 80046fe:	841a      	strh	r2, [r3, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8004700:	9b05      	ldr	r3, [sp, #20]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f443 62a0 	orr.w	r2, r3, #1280	; 0x500
 8004708:	9b05      	ldr	r3, [sp, #20]
 800470a:	601a      	str	r2, [r3, #0]
      return;
 800470c:	e02a      	b.n	8004764 <i2c_lld_serve_event_interrupt+0x1f4>
    }
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800470e:	9b05      	ldr	r3, [sp, #20]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004716:	9b05      	ldr	r3, [sp, #20]
 8004718:	605a      	str	r2, [r3, #4]
    dp->CR1 |= I2C_CR1_STOP;
 800471a:	9b05      	ldr	r3, [sp, #20]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004722:	9b05      	ldr	r3, [sp, #20]
 8004724:	601a      	str	r2, [r3, #0]
    _i2c_wakeup_isr(i2cp);
 8004726:	f7ff fdb3 	bl	8004290 <osalSysLockFromISR.lto_priv.0>
 800472a:	9b01      	ldr	r3, [sp, #4]
 800472c:	331c      	adds	r3, #28
 800472e:	2100      	movs	r1, #0
 8004730:	4618      	mov	r0, r3
 8004732:	f7ff fdf5 	bl	8004320 <osalThreadResumeI.lto_priv.1>
 8004736:	f7ff fdb3 	bl	80042a0 <osalSysUnlockFromISR.lto_priv.0>
    break;
 800473a:	e00c      	b.n	8004756 <i2c_lld_serve_event_interrupt+0x1e6>
  case I2C_EV5_MASTER_MODE_INVALID:
    i2c_lld_abort_operation(i2cp);
 800473c:	9801      	ldr	r0, [sp, #4]
 800473e:	f7ff fdff 	bl	8004340 <i2c_lld_abort_operation>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8004742:	9b05      	ldr	r3, [sp, #20]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800474a:	9b05      	ldr	r3, [sp, #20]
 800474c:	605a      	str	r2, [r3, #4]
    break;
 800474e:	e002      	b.n	8004756 <i2c_lld_serve_event_interrupt+0x1e6>
  default:
    break;
 8004750:	bf00      	nop
 8004752:	e000      	b.n	8004756 <i2c_lld_serve_event_interrupt+0x1e6>
    break;
 8004754:	bf00      	nop
  }
  /* Clear ADDR flag. */
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 8004756:	9b03      	ldr	r3, [sp, #12]
 8004758:	f003 030a 	and.w	r3, r3, #10
 800475c:	2b00      	cmp	r3, #0
 800475e:	d001      	beq.n	8004764 <i2c_lld_serve_event_interrupt+0x1f4>
    (void)dp->SR2;
 8004760:	9b05      	ldr	r3, [sp, #20]
 8004762:	699b      	ldr	r3, [r3, #24]
  /* Errata 2.4.6 for STM32F40x, Spurious Bus Error detection in Master mode.*/
  if (event & I2C_SR1_BERR) {
    dp->SR1 &= ~I2C_SR1_BERR;
  }
#endif
}
 8004764:	b007      	add	sp, #28
 8004766:	f85d fb04 	ldr.w	pc, [sp], #4
 800476a:	bf00      	nop
 800476c:	00070084 	.word	0x00070084
 8004770:	00070082 	.word	0x00070082
 8004774:	00030011 	.word	0x00030011
	...

08004780 <i2c_lld_serve_rx_end_irq>:
 * @param[in] i2cp      pointer to the @p I2CDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 *
 * @notapi
 */
static void i2c_lld_serve_rx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 8004780:	b500      	push	{lr}
 8004782:	b085      	sub	sp, #20
 8004784:	9001      	str	r0, [sp, #4]
 8004786:	9100      	str	r1, [sp, #0]
  I2C_TypeDef *dp = i2cp->i2c;
 8004788:	9b01      	ldr	r3, [sp, #4]
 800478a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800478c:	9303      	str	r3, [sp, #12]

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 800478e:	9b00      	ldr	r3, [sp, #0]
 8004790:	f003 030c 	and.w	r3, r3, #12
 8004794:	2b00      	cmp	r3, #0
 8004796:	d002      	beq.n	800479e <i2c_lld_serve_rx_end_irq+0x1e>
    STM32_I2C_DMA_ERROR_HOOK(i2cp);
 8004798:	481f      	ldr	r0, [pc, #124]	; (8004818 <i2c_lld_serve_rx_end_irq+0x98>)
 800479a:	f7ff fd59 	bl	8004250 <osalSysHalt.lto_priv.0>
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(i2cp->dmarx);
 800479e:	9b01      	ldr	r3, [sp, #4]
 80047a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	9b01      	ldr	r3, [sp, #4]
 80047a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f022 021f 	bic.w	r2, r2, #31
 80047b0:	601a      	str	r2, [r3, #0]
 80047b2:	bf00      	nop
 80047b4:	9b01      	ldr	r3, [sp, #4]
 80047b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0301 	and.w	r3, r3, #1
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d1f7      	bne.n	80047b4 <i2c_lld_serve_rx_end_irq+0x34>
 80047c4:	9b01      	ldr	r3, [sp, #4]
 80047c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c8:	7a5b      	ldrb	r3, [r3, #9]
 80047ca:	4619      	mov	r1, r3
 80047cc:	9b01      	ldr	r3, [sp, #4]
 80047ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	223d      	movs	r2, #61	; 0x3d
 80047d4:	408a      	lsls	r2, r1
 80047d6:	601a      	str	r2, [r3, #0]

  dp->CR2 &= ~I2C_CR2_LAST;
 80047d8:	9b03      	ldr	r3, [sp, #12]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047e0:	9b03      	ldr	r3, [sp, #12]
 80047e2:	605a      	str	r2, [r3, #4]
  dp->CR1 &= ~I2C_CR1_ACK;
 80047e4:	9b03      	ldr	r3, [sp, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80047ec:	9b03      	ldr	r3, [sp, #12]
 80047ee:	601a      	str	r2, [r3, #0]
  dp->CR1 |= I2C_CR1_STOP;
 80047f0:	9b03      	ldr	r3, [sp, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80047f8:	9b03      	ldr	r3, [sp, #12]
 80047fa:	601a      	str	r2, [r3, #0]
  _i2c_wakeup_isr(i2cp);
 80047fc:	f7ff fd48 	bl	8004290 <osalSysLockFromISR.lto_priv.0>
 8004800:	9b01      	ldr	r3, [sp, #4]
 8004802:	331c      	adds	r3, #28
 8004804:	2100      	movs	r1, #0
 8004806:	4618      	mov	r0, r3
 8004808:	f7ff fd8a 	bl	8004320 <osalThreadResumeI.lto_priv.1>
 800480c:	f7ff fd48 	bl	80042a0 <osalSysUnlockFromISR.lto_priv.0>
}
 8004810:	bf00      	nop
 8004812:	b005      	add	sp, #20
 8004814:	f85d fb04 	ldr.w	pc, [sp], #4
 8004818:	0800ed24 	.word	0x0800ed24
 800481c:	00000000 	.word	0x00000000

08004820 <i2c_lld_serve_tx_end_irq>:
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_tx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 8004820:	b500      	push	{lr}
 8004822:	b085      	sub	sp, #20
 8004824:	9001      	str	r0, [sp, #4]
 8004826:	9100      	str	r1, [sp, #0]
  I2C_TypeDef *dp = i2cp->i2c;
 8004828:	9b01      	ldr	r3, [sp, #4]
 800482a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800482c:	9303      	str	r3, [sp, #12]

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 800482e:	9b00      	ldr	r3, [sp, #0]
 8004830:	f003 030c 	and.w	r3, r3, #12
 8004834:	2b00      	cmp	r3, #0
 8004836:	d002      	beq.n	800483e <i2c_lld_serve_tx_end_irq+0x1e>
    STM32_I2C_DMA_ERROR_HOOK(i2cp);
 8004838:	4814      	ldr	r0, [pc, #80]	; (800488c <i2c_lld_serve_tx_end_irq+0x6c>)
 800483a:	f7ff fd09 	bl	8004250 <osalSysHalt.lto_priv.0>
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(i2cp->dmatx);
 800483e:	9b01      	ldr	r3, [sp, #4]
 8004840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	9b01      	ldr	r3, [sp, #4]
 8004848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f022 021f 	bic.w	r2, r2, #31
 8004850:	601a      	str	r2, [r3, #0]
 8004852:	bf00      	nop
 8004854:	9b01      	ldr	r3, [sp, #4]
 8004856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1f7      	bne.n	8004854 <i2c_lld_serve_tx_end_irq+0x34>
 8004864:	9b01      	ldr	r3, [sp, #4]
 8004866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004868:	7a5b      	ldrb	r3, [r3, #9]
 800486a:	4619      	mov	r1, r3
 800486c:	9b01      	ldr	r3, [sp, #4]
 800486e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	223d      	movs	r2, #61	; 0x3d
 8004874:	408a      	lsls	r2, r1
 8004876:	601a      	str	r2, [r3, #0]
  /* Enables interrupts to catch BTF event meaning transmission part complete.
     Interrupt handler will decide to generate STOP or to begin receiving part
     of R/W transaction itself.*/
  dp->CR2 |= I2C_CR2_ITEVTEN;
 8004878:	9b03      	ldr	r3, [sp, #12]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004880:	9b03      	ldr	r3, [sp, #12]
 8004882:	605a      	str	r2, [r3, #4]
}
 8004884:	bf00      	nop
 8004886:	b005      	add	sp, #20
 8004888:	f85d fb04 	ldr.w	pc, [sp], #4
 800488c:	0800ed24 	.word	0x0800ed24

08004890 <i2c_lld_serve_error_interrupt>:
 * @param[in] i2cp      pointer to the @p I2CDriver object
 * @param[in]  sr       content of the SR1 register to be decoded
 *
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {
 8004890:	b500      	push	{lr}
 8004892:	b083      	sub	sp, #12
 8004894:	9001      	str	r0, [sp, #4]
 8004896:	460b      	mov	r3, r1
 8004898:	f8ad 3002 	strh.w	r3, [sp, #2]

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 800489c:	9b01      	ldr	r3, [sp, #4]
 800489e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	9b01      	ldr	r3, [sp, #4]
 80048a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f022 021f 	bic.w	r2, r2, #31
 80048ae:	601a      	str	r2, [r3, #0]
 80048b0:	9b01      	ldr	r3, [sp, #4]
 80048b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1f7      	bne.n	80048b0 <i2c_lld_serve_error_interrupt+0x20>
 80048c0:	9b01      	ldr	r3, [sp, #4]
 80048c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c4:	7a5b      	ldrb	r3, [r3, #9]
 80048c6:	4619      	mov	r1, r3
 80048c8:	9b01      	ldr	r3, [sp, #4]
 80048ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	223d      	movs	r2, #61	; 0x3d
 80048d0:	408a      	lsls	r2, r1
 80048d2:	601a      	str	r2, [r3, #0]
  dmaStreamDisable(i2cp->dmarx);
 80048d4:	9b01      	ldr	r3, [sp, #4]
 80048d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	9b01      	ldr	r3, [sp, #4]
 80048de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f022 021f 	bic.w	r2, r2, #31
 80048e6:	601a      	str	r2, [r3, #0]
 80048e8:	9b01      	ldr	r3, [sp, #4]
 80048ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0301 	and.w	r3, r3, #1
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1f7      	bne.n	80048e8 <i2c_lld_serve_error_interrupt+0x58>
 80048f8:	9b01      	ldr	r3, [sp, #4]
 80048fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fc:	7a5b      	ldrb	r3, [r3, #9]
 80048fe:	4619      	mov	r1, r3
 8004900:	9b01      	ldr	r3, [sp, #4]
 8004902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	223d      	movs	r2, #61	; 0x3d
 8004908:	408a      	lsls	r2, r1
 800490a:	601a      	str	r2, [r3, #0]

  i2cp->errors = I2C_NO_ERROR;
 800490c:	9b01      	ldr	r3, [sp, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	609a      	str	r2, [r3, #8]

  if (sr & I2C_SR1_BERR) {                          /* Bus error.           */
 8004912:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8004916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800491a:	2b00      	cmp	r3, #0
 800491c:	d005      	beq.n	800492a <i2c_lld_serve_error_interrupt+0x9a>
    i2cp->errors |= I2C_BUS_ERROR;
 800491e:	9b01      	ldr	r3, [sp, #4]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f043 0201 	orr.w	r2, r3, #1
 8004926:	9b01      	ldr	r3, [sp, #4]
 8004928:	609a      	str	r2, [r3, #8]
       Master mode.*/
    i2cp->i2c->SR1 &= ~I2C_SR1_BERR;
#endif
  }

  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
 800492a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800492e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004932:	2b00      	cmp	r3, #0
 8004934:	d005      	beq.n	8004942 <i2c_lld_serve_error_interrupt+0xb2>
    i2cp->errors |= I2C_ARBITRATION_LOST;
 8004936:	9b01      	ldr	r3, [sp, #4]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f043 0202 	orr.w	r2, r3, #2
 800493e:	9b01      	ldr	r3, [sp, #4]
 8004940:	609a      	str	r2, [r3, #8]

  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 8004942:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8004946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800494a:	2b00      	cmp	r3, #0
 800494c:	d015      	beq.n	800497a <i2c_lld_serve_error_interrupt+0xea>
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 800494e:	9b01      	ldr	r3, [sp, #4]
 8004950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	9b01      	ldr	r3, [sp, #4]
 8004956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004958:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800495c:	605a      	str	r2, [r3, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 800495e:	9b01      	ldr	r3, [sp, #4]
 8004960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	9b01      	ldr	r3, [sp, #4]
 8004966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004968:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800496c:	601a      	str	r2, [r3, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 800496e:	9b01      	ldr	r3, [sp, #4]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f043 0204 	orr.w	r2, r3, #4
 8004976:	9b01      	ldr	r3, [sp, #4]
 8004978:	609a      	str	r2, [r3, #8]
  }

  if (sr & I2C_SR1_OVR)                             /* Overrun.             */
 800497a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800497e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004982:	2b00      	cmp	r3, #0
 8004984:	d005      	beq.n	8004992 <i2c_lld_serve_error_interrupt+0x102>
    i2cp->errors |= I2C_OVERRUN;
 8004986:	9b01      	ldr	r3, [sp, #4]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f043 0208 	orr.w	r2, r3, #8
 800498e:	9b01      	ldr	r3, [sp, #4]
 8004990:	609a      	str	r2, [r3, #8]

  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
 8004992:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8004996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d005      	beq.n	80049aa <i2c_lld_serve_error_interrupt+0x11a>
    i2cp->errors |= I2C_TIMEOUT;
 800499e:	9b01      	ldr	r3, [sp, #4]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f043 0220 	orr.w	r2, r3, #32
 80049a6:	9b01      	ldr	r3, [sp, #4]
 80049a8:	609a      	str	r2, [r3, #8]

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
 80049aa:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80049ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d005      	beq.n	80049c2 <i2c_lld_serve_error_interrupt+0x132>
    i2cp->errors |= I2C_PEC_ERROR;
 80049b6:	9b01      	ldr	r3, [sp, #4]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f043 0210 	orr.w	r2, r3, #16
 80049be:	9b01      	ldr	r3, [sp, #4]
 80049c0:	609a      	str	r2, [r3, #8]

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 80049c2:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	da05      	bge.n	80049d6 <i2c_lld_serve_error_interrupt+0x146>
    i2cp->errors |= I2C_SMB_ALERT;
 80049ca:	9b01      	ldr	r3, [sp, #4]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049d2:	9b01      	ldr	r3, [sp, #4]
 80049d4:	609a      	str	r2, [r3, #8]

  /* If some error has been identified then sends wakes the waiting thread.*/
  if (i2cp->errors != I2C_NO_ERROR)
 80049d6:	9b01      	ldr	r3, [sp, #4]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00a      	beq.n	80049f4 <i2c_lld_serve_error_interrupt+0x164>
    _i2c_wakeup_error_isr(i2cp);
 80049de:	f7ff fc57 	bl	8004290 <osalSysLockFromISR.lto_priv.0>
 80049e2:	9b01      	ldr	r3, [sp, #4]
 80049e4:	331c      	adds	r3, #28
 80049e6:	f06f 0101 	mvn.w	r1, #1
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7ff fc98 	bl	8004320 <osalThreadResumeI.lto_priv.1>
 80049f0:	f7ff fc56 	bl	80042a0 <osalSysUnlockFromISR.lto_priv.0>
}
 80049f4:	bf00      	nop
 80049f6:	b003      	add	sp, #12
 80049f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80049fc:	0000      	movs	r0, r0
	...

08004a00 <VectorBC>:
/**
 * @brief   I2C1 event interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C1_EVENT_HANDLER) {
 8004a00:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);
 8004a02:	4803      	ldr	r0, [pc, #12]	; (8004a10 <VectorBC+0x10>)
 8004a04:	f7ff fdb4 	bl	8004570 <i2c_lld_serve_event_interrupt>

  OSAL_IRQ_EPILOGUE();
 8004a08:	f003 fba2 	bl	8008150 <__port_irq_epilogue>
}
 8004a0c:	bf00      	nop
 8004a0e:	bd08      	pop	{r3, pc}
 8004a10:	20000cec 	.word	0x20000cec
	...

08004a20 <VectorC0>:

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
 8004a20:	b500      	push	{lr}
 8004a22:	b083      	sub	sp, #12
  uint16_t sr = I2CD1.i2c->SR1;
 8004a24:	4b0c      	ldr	r3, [pc, #48]	; (8004a58 <VectorC0+0x38>)
 8004a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a28:	695b      	ldr	r3, [r3, #20]
 8004a2a:	f8ad 3006 	strh.w	r3, [sp, #6]

  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 8004a2e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8004a32:	f403 435f 	and.w	r3, r3, #57088	; 0xdf00
 8004a36:	43da      	mvns	r2, r3
 8004a38:	4b07      	ldr	r3, [pc, #28]	; (8004a58 <VectorC0+0x38>)
 8004a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a3c:	615a      	str	r2, [r3, #20]
  i2c_lld_serve_error_interrupt(&I2CD1, sr);
 8004a3e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8004a42:	4619      	mov	r1, r3
 8004a44:	4804      	ldr	r0, [pc, #16]	; (8004a58 <VectorC0+0x38>)
 8004a46:	f7ff ff23 	bl	8004890 <i2c_lld_serve_error_interrupt>

  OSAL_IRQ_EPILOGUE();
 8004a4a:	f003 fb81 	bl	8008150 <__port_irq_epilogue>
}
 8004a4e:	bf00      	nop
 8004a50:	b003      	add	sp, #12
 8004a52:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a56:	bf00      	nop
 8004a58:	20000cec 	.word	0x20000cec
 8004a5c:	00000000 	.word	0x00000000

08004a60 <i2c_lld_init>:
/**
 * @brief   Low level I2C driver initialization.
 *
 * @notapi
 */
void i2c_lld_init(void) {
 8004a60:	b508      	push	{r3, lr}

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
 8004a62:	4808      	ldr	r0, [pc, #32]	; (8004a84 <i2c_lld_init+0x24>)
 8004a64:	f7fd faf4 	bl	8002050 <i2cObjectInit>
  I2CD1.thread = NULL;
 8004a68:	4b06      	ldr	r3, [pc, #24]	; (8004a84 <i2c_lld_init+0x24>)
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	61da      	str	r2, [r3, #28]
  I2CD1.i2c    = I2C1;
 8004a6e:	4b05      	ldr	r3, [pc, #20]	; (8004a84 <i2c_lld_init+0x24>)
 8004a70:	4a05      	ldr	r2, [pc, #20]	; (8004a88 <i2c_lld_init+0x28>)
 8004a72:	635a      	str	r2, [r3, #52]	; 0x34
  I2CD1.dmarx  = NULL;
 8004a74:	4b03      	ldr	r3, [pc, #12]	; (8004a84 <i2c_lld_init+0x24>)
 8004a76:	2200      	movs	r2, #0
 8004a78:	62da      	str	r2, [r3, #44]	; 0x2c
  I2CD1.dmatx  = NULL;
 8004a7a:	4b02      	ldr	r3, [pc, #8]	; (8004a84 <i2c_lld_init+0x24>)
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	631a      	str	r2, [r3, #48]	; 0x30
  I2CD3.thread = NULL;
  I2CD3.i2c    = I2C3;
  I2CD3.dmarx  = NULL;
  I2CD3.dmatx  = NULL;
#endif /* STM32_I2C_USE_I2C3 */
}
 8004a80:	bf00      	nop
 8004a82:	bd08      	pop	{r3, pc}
 8004a84:	20000cec 	.word	0x20000cec
 8004a88:	40005400 	.word	0x40005400
 8004a8c:	00000000 	.word	0x00000000

08004a90 <i2c_lld_start>:
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
void i2c_lld_start(I2CDriver *i2cp) {
 8004a90:	b500      	push	{lr}
 8004a92:	b085      	sub	sp, #20
 8004a94:	9001      	str	r0, [sp, #4]
  I2C_TypeDef *dp = i2cp->i2c;
 8004a96:	9b01      	ldr	r3, [sp, #4]
 8004a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a9a:	9303      	str	r3, [sp, #12]

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {
 8004a9c:	9b01      	ldr	r3, [sp, #4]
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d151      	bne.n	8004b48 <i2c_lld_start+0xb8>

    i2cp->txdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 8004aa4:	9b01      	ldr	r3, [sp, #4]
 8004aa6:	f240 4256 	movw	r2, #1110	; 0x456
 8004aaa:	629a      	str	r2, [r3, #40]	; 0x28
                      STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                      STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                      STM32_DMA_CR_DIR_M2P;
    i2cp->rxdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 8004aac:	9b01      	ldr	r3, [sp, #4]
 8004aae:	f240 4216 	movw	r2, #1046	; 0x416
 8004ab2:	625a      	str	r2, [r3, #36]	; 0x24
                      STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                      STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                      STM32_DMA_CR_DIR_P2M;

#if STM32_I2C_USE_I2C1
    if (&I2CD1 == i2cp) {
 8004ab4:	9b01      	ldr	r3, [sp, #4]
 8004ab6:	4a39      	ldr	r2, [pc, #228]	; (8004b9c <i2c_lld_start+0x10c>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d145      	bne.n	8004b48 <i2c_lld_start+0xb8>
      rccResetI2C1();
 8004abc:	4b38      	ldr	r3, [pc, #224]	; (8004ba0 <i2c_lld_start+0x110>)
 8004abe:	6a1b      	ldr	r3, [r3, #32]
 8004ac0:	4a37      	ldr	r2, [pc, #220]	; (8004ba0 <i2c_lld_start+0x110>)
 8004ac2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ac6:	6213      	str	r3, [r2, #32]
 8004ac8:	4b35      	ldr	r3, [pc, #212]	; (8004ba0 <i2c_lld_start+0x110>)
 8004aca:	6a1b      	ldr	r3, [r3, #32]
 8004acc:	4a34      	ldr	r2, [pc, #208]	; (8004ba0 <i2c_lld_start+0x110>)
 8004ace:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ad2:	6213      	str	r3, [r2, #32]
 8004ad4:	4b32      	ldr	r3, [pc, #200]	; (8004ba0 <i2c_lld_start+0x110>)
 8004ad6:	6a1b      	ldr	r3, [r3, #32]

      i2cp->dmarx = dmaStreamAllocI(STM32_I2C_I2C1_RX_DMA_STREAM,
 8004ad8:	9b01      	ldr	r3, [sp, #4]
 8004ada:	4a32      	ldr	r2, [pc, #200]	; (8004ba4 <i2c_lld_start+0x114>)
 8004adc:	2105      	movs	r1, #5
 8004ade:	2000      	movs	r0, #0
 8004ae0:	f7ff f99e 	bl	8003e20 <dmaStreamAllocI>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	9b01      	ldr	r3, [sp, #4]
 8004ae8:	62da      	str	r2, [r3, #44]	; 0x2c
                                    STM32_I2C_I2C1_IRQ_PRIORITY,
                                    (stm32_dmaisr_t)i2c_lld_serve_rx_end_irq,
                                    (void *)i2cp);
      osalDbgAssert(i2cp->dmarx != NULL, "unable to allocate stream");
      i2cp->dmatx = dmaStreamAllocI(STM32_I2C_I2C1_TX_DMA_STREAM,
 8004aea:	9b01      	ldr	r3, [sp, #4]
 8004aec:	4a2e      	ldr	r2, [pc, #184]	; (8004ba8 <i2c_lld_start+0x118>)
 8004aee:	2105      	movs	r1, #5
 8004af0:	2006      	movs	r0, #6
 8004af2:	f7ff f995 	bl	8003e20 <dmaStreamAllocI>
 8004af6:	4602      	mov	r2, r0
 8004af8:	9b01      	ldr	r3, [sp, #4]
 8004afa:	631a      	str	r2, [r3, #48]	; 0x30
                                    STM32_I2C_I2C1_IRQ_PRIORITY,
                                    (stm32_dmaisr_t)i2c_lld_serve_tx_end_irq,
                                    (void *)i2cp);
      osalDbgAssert(i2cp->dmatx != NULL, "unable to allocate stream");

      rccEnableI2C1(true);
 8004afc:	4b28      	ldr	r3, [pc, #160]	; (8004ba0 <i2c_lld_start+0x110>)
 8004afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b00:	4a27      	ldr	r2, [pc, #156]	; (8004ba0 <i2c_lld_start+0x110>)
 8004b02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b06:	6413      	str	r3, [r2, #64]	; 0x40
 8004b08:	4b25      	ldr	r3, [pc, #148]	; (8004ba0 <i2c_lld_start+0x110>)
 8004b0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b0c:	4a24      	ldr	r2, [pc, #144]	; (8004ba0 <i2c_lld_start+0x110>)
 8004b0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b12:	6613      	str	r3, [r2, #96]	; 0x60
 8004b14:	4b22      	ldr	r3, [pc, #136]	; (8004ba0 <i2c_lld_start+0x110>)
 8004b16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
      nvicEnableVector(I2C1_EV_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);
 8004b18:	2105      	movs	r1, #5
 8004b1a:	201f      	movs	r0, #31
 8004b1c:	f7fe fc08 	bl	8003330 <nvicEnableVector>
      nvicEnableVector(I2C1_ER_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);
 8004b20:	2105      	movs	r1, #5
 8004b22:	2020      	movs	r0, #32
 8004b24:	f7fe fc04 	bl	8003330 <nvicEnableVector>

      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 8004b28:	9b01      	ldr	r3, [sp, #4]
 8004b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b30:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8004b34:	9a01      	ldr	r2, [sp, #4]
 8004b36:	6253      	str	r3, [r2, #36]	; 0x24
                       STM32_DMA_CR_PL(STM32_I2C_I2C1_DMA_PRIORITY);
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 8004b38:	9b01      	ldr	r3, [sp, #4]
 8004b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b40:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8004b44:	9a01      	ldr	r2, [sp, #4]
 8004b46:	6293      	str	r3, [r2, #40]	; 0x28
    }
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 8004b48:	9b03      	ldr	r3, [sp, #12]
 8004b4a:	f103 0210 	add.w	r2, r3, #16
 8004b4e:	9b01      	ldr	r3, [sp, #4]
 8004b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	609a      	str	r2, [r3, #8]
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 8004b56:	9b03      	ldr	r3, [sp, #12]
 8004b58:	f103 0210 	add.w	r2, r3, #16
 8004b5c:	9b01      	ldr	r3, [sp, #4]
 8004b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	609a      	str	r2, [r3, #8]

  /* Reset i2c peripheral.*/
  dp->CR1 = I2C_CR1_SWRST;
 8004b64:	9b03      	ldr	r3, [sp, #12]
 8004b66:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004b6a:	601a      	str	r2, [r3, #0]
  dp->CR1 = 0;
 8004b6c:	9b03      	ldr	r3, [sp, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	601a      	str	r2, [r3, #0]
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;
 8004b72:	9b03      	ldr	r3, [sp, #12]
 8004b74:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8004b78:	605a      	str	r2, [r3, #4]

  /* Setup I2C parameters.*/
  i2c_lld_set_clock(i2cp);
 8004b7a:	9801      	ldr	r0, [sp, #4]
 8004b7c:	f7ff fc30 	bl	80043e0 <i2c_lld_set_clock>
  i2c_lld_set_opmode(i2cp);
 8004b80:	9801      	ldr	r0, [sp, #4]
 8004b82:	f7ff fcb5 	bl	80044f0 <i2c_lld_set_opmode>

  /* Ready to go.*/
  dp->CR1 |= I2C_CR1_PE;
 8004b86:	9b03      	ldr	r3, [sp, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f043 0201 	orr.w	r2, r3, #1
 8004b8e:	9b03      	ldr	r3, [sp, #12]
 8004b90:	601a      	str	r2, [r3, #0]
}
 8004b92:	bf00      	nop
 8004b94:	b005      	add	sp, #20
 8004b96:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b9a:	bf00      	nop
 8004b9c:	20000cec 	.word	0x20000cec
 8004ba0:	40023800 	.word	0x40023800
 8004ba4:	08004781 	.word	0x08004781
 8004ba8:	08004821 	.word	0x08004821
 8004bac:	00000000 	.word	0x00000000

08004bb0 <i2c_lld_master_transmit_timeout>:
 * @notapi
 */
msg_t i2c_lld_master_transmit_timeout(I2CDriver *i2cp, i2caddr_t addr,
                                      const uint8_t *txbuf, size_t txbytes,
                                      uint8_t *rxbuf, size_t rxbytes,
                                      sysinterval_t timeout) {
 8004bb0:	b500      	push	{lr}
 8004bb2:	b089      	sub	sp, #36	; 0x24
 8004bb4:	9003      	str	r0, [sp, #12]
 8004bb6:	9201      	str	r2, [sp, #4]
 8004bb8:	9300      	str	r3, [sp, #0]
 8004bba:	460b      	mov	r3, r1
 8004bbc:	f8ad 300a 	strh.w	r3, [sp, #10]
  I2C_TypeDef *dp = i2cp->i2c;
 8004bc0:	9b03      	ldr	r3, [sp, #12]
 8004bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc4:	9307      	str	r3, [sp, #28]
#if defined(STM32F1XX_I2C)
  osalDbgCheck((rxbytes == 0) || ((rxbytes > 1) && (rxbuf != NULL)));
#endif

  /* Resetting error flags for this transfer.*/
  i2cp->errors = I2C_NO_ERROR;
 8004bc6:	9b03      	ldr	r3, [sp, #12]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	609a      	str	r2, [r3, #8]

  /* Initializes driver fields, LSB = 0 -> transmit.*/
  i2cp->addr = (addr << 1);
 8004bcc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8004bd0:	005b      	lsls	r3, r3, #1
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	9b03      	ldr	r3, [sp, #12]
 8004bd6:	841a      	strh	r2, [r3, #32]

  /* Releases the lock from high level driver.*/
  osalSysUnlock();
 8004bd8:	f7ff fb52 	bl	8004280 <osalSysUnlock.lto_priv.8>

  /* TX DMA setup.*/
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 8004bdc:	9b03      	ldr	r3, [sp, #12]
 8004bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	9a03      	ldr	r2, [sp, #12]
 8004be4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004be6:	601a      	str	r2, [r3, #0]
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
 8004be8:	9b03      	ldr	r3, [sp, #12]
 8004bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	9a01      	ldr	r2, [sp, #4]
 8004bf0:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);
 8004bf2:	9b03      	ldr	r3, [sp, #12]
 8004bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	9a00      	ldr	r2, [sp, #0]
 8004bfa:	605a      	str	r2, [r3, #4]

  /* RX DMA setup.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8004bfc:	9b03      	ldr	r3, [sp, #12]
 8004bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	9a03      	ldr	r2, [sp, #12]
 8004c04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c06:	601a      	str	r2, [r3, #0]
  dmaStreamSetMemory0(i2cp->dmarx, rxbuf);
 8004c08:	9b03      	ldr	r3, [sp, #12]
 8004c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c10:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(i2cp->dmarx, rxbytes);
 8004c12:	9b03      	ldr	r3, [sp, #12]
 8004c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004c1a:	605a      	str	r2, [r3, #4]

  /* Calculating the time window for the timeout on the busy bus condition.*/
  start = osalOsGetSystemTimeX();
 8004c1c:	f7ff fb48 	bl	80042b0 <osalOsGetSystemTimeX>
 8004c20:	9006      	str	r0, [sp, #24]
  end = osalTimeAddX(start, OSAL_MS2I(STM32_I2C_BUSY_TIMEOUT));
 8004c22:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004c26:	9806      	ldr	r0, [sp, #24]
 8004c28:	f7ff fb4a 	bl	80042c0 <osalTimeAddX>
 8004c2c:	9005      	str	r0, [sp, #20]

  /* Waits until BUSY flag is reset or, alternatively, for a timeout
     condition.*/
  while (true) {
    osalSysLock();
 8004c2e:	f7ff fb1f 	bl	8004270 <osalSysLock.lto_priv.8>

    /* If the bus is not busy then the operation can continue, note, the
       loop is exited in the locked state.*/
    if (!(dp->SR2 & I2C_SR2_BUSY) && !(dp->CR1 & I2C_CR1_STOP))
 8004c32:	9b07      	ldr	r3, [sp, #28]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d105      	bne.n	8004c4a <i2c_lld_master_transmit_timeout+0x9a>
 8004c3e:	9b07      	ldr	r3, [sp, #28]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d04b      	beq.n	8004ce2 <i2c_lld_master_transmit_timeout+0x132>
      break;

    /* If the system time went outside the allowed window then a timeout
       condition is returned.*/
    if (!osalTimeIsInRangeX(osalOsGetSystemTimeX(), start, end)) {
 8004c4a:	f7ff fb31 	bl	80042b0 <osalOsGetSystemTimeX>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	9a05      	ldr	r2, [sp, #20]
 8004c52:	9906      	ldr	r1, [sp, #24]
 8004c54:	4618      	mov	r0, r3
 8004c56:	f7ff fb43 	bl	80042e0 <osalTimeIsInRangeX>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	f083 0301 	eor.w	r3, r3, #1
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d03a      	beq.n	8004cdc <i2c_lld_master_transmit_timeout+0x12c>
      dmaStreamDisable(i2cp->dmatx);
 8004c66:	9b03      	ldr	r3, [sp, #12]
 8004c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	9b03      	ldr	r3, [sp, #12]
 8004c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f022 021f 	bic.w	r2, r2, #31
 8004c78:	601a      	str	r2, [r3, #0]
 8004c7a:	9b03      	ldr	r3, [sp, #12]
 8004c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1f7      	bne.n	8004c7a <i2c_lld_master_transmit_timeout+0xca>
 8004c8a:	9b03      	ldr	r3, [sp, #12]
 8004c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8e:	7a5b      	ldrb	r3, [r3, #9]
 8004c90:	4619      	mov	r1, r3
 8004c92:	9b03      	ldr	r3, [sp, #12]
 8004c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	223d      	movs	r2, #61	; 0x3d
 8004c9a:	408a      	lsls	r2, r1
 8004c9c:	601a      	str	r2, [r3, #0]
      dmaStreamDisable(i2cp->dmarx);
 8004c9e:	9b03      	ldr	r3, [sp, #12]
 8004ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	9b03      	ldr	r3, [sp, #12]
 8004ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f022 021f 	bic.w	r2, r2, #31
 8004cb0:	601a      	str	r2, [r3, #0]
 8004cb2:	9b03      	ldr	r3, [sp, #12]
 8004cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1f7      	bne.n	8004cb2 <i2c_lld_master_transmit_timeout+0x102>
 8004cc2:	9b03      	ldr	r3, [sp, #12]
 8004cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc6:	7a5b      	ldrb	r3, [r3, #9]
 8004cc8:	4619      	mov	r1, r3
 8004cca:	9b03      	ldr	r3, [sp, #12]
 8004ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	223d      	movs	r2, #61	; 0x3d
 8004cd2:	408a      	lsls	r2, r1
 8004cd4:	601a      	str	r2, [r3, #0]
      return MSG_TIMEOUT;
 8004cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8004cda:	e052      	b.n	8004d82 <i2c_lld_master_transmit_timeout+0x1d2>
    }

    osalSysUnlock();
 8004cdc:	f7ff fad0 	bl	8004280 <osalSysUnlock.lto_priv.8>
    osalSysLock();
 8004ce0:	e7a5      	b.n	8004c2e <i2c_lld_master_transmit_timeout+0x7e>
      break;
 8004ce2:	bf00      	nop
  }

  /* Starts the operation.*/
  dp->CR2 |= I2C_CR2_ITEVTEN;
 8004ce4:	9b07      	ldr	r3, [sp, #28]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004cec:	9b07      	ldr	r3, [sp, #28]
 8004cee:	605a      	str	r2, [r3, #4]
  dp->CR1 |= I2C_CR1_START;
 8004cf0:	9b07      	ldr	r3, [sp, #28]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004cf8:	9b07      	ldr	r3, [sp, #28]
 8004cfa:	601a      	str	r2, [r3, #0]

  /* Waits for the operation completion or a timeout.*/
  msg = osalThreadSuspendTimeoutS(&i2cp->thread, timeout);
 8004cfc:	9b03      	ldr	r3, [sp, #12]
 8004cfe:	331c      	adds	r3, #28
 8004d00:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7ff fafc 	bl	8004300 <osalThreadSuspendTimeoutS.lto_priv.1>
 8004d08:	9004      	str	r0, [sp, #16]
  if (msg != MSG_OK) {
 8004d0a:	9b04      	ldr	r3, [sp, #16]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d037      	beq.n	8004d80 <i2c_lld_master_transmit_timeout+0x1d0>
    dmaStreamDisable(i2cp->dmatx);
 8004d10:	9b03      	ldr	r3, [sp, #12]
 8004d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	9b03      	ldr	r3, [sp, #12]
 8004d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f022 021f 	bic.w	r2, r2, #31
 8004d22:	601a      	str	r2, [r3, #0]
 8004d24:	9b03      	ldr	r3, [sp, #12]
 8004d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0301 	and.w	r3, r3, #1
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1f7      	bne.n	8004d24 <i2c_lld_master_transmit_timeout+0x174>
 8004d34:	9b03      	ldr	r3, [sp, #12]
 8004d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d38:	7a5b      	ldrb	r3, [r3, #9]
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	9b03      	ldr	r3, [sp, #12]
 8004d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	223d      	movs	r2, #61	; 0x3d
 8004d44:	408a      	lsls	r2, r1
 8004d46:	601a      	str	r2, [r3, #0]
    dmaStreamDisable(i2cp->dmarx);
 8004d48:	9b03      	ldr	r3, [sp, #12]
 8004d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	9b03      	ldr	r3, [sp, #12]
 8004d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f022 021f 	bic.w	r2, r2, #31
 8004d5a:	601a      	str	r2, [r3, #0]
 8004d5c:	9b03      	ldr	r3, [sp, #12]
 8004d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0301 	and.w	r3, r3, #1
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1f7      	bne.n	8004d5c <i2c_lld_master_transmit_timeout+0x1ac>
 8004d6c:	9b03      	ldr	r3, [sp, #12]
 8004d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d70:	7a5b      	ldrb	r3, [r3, #9]
 8004d72:	4619      	mov	r1, r3
 8004d74:	9b03      	ldr	r3, [sp, #12]
 8004d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	223d      	movs	r2, #61	; 0x3d
 8004d7c:	408a      	lsls	r2, r1
 8004d7e:	601a      	str	r2, [r3, #0]
  }

  return msg;
 8004d80:	9b04      	ldr	r3, [sp, #16]
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	b009      	add	sp, #36	; 0x24
 8004d86:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d8a:	bf00      	nop
 8004d8c:	0000      	movs	r0, r0
	...

08004d90 <chSysLockFromISR.lto_priv.1>:
static inline void chSysLockFromISR(void) {
 8004d90:	b082      	sub	sp, #8
 8004d92:	2330      	movs	r3, #48	; 0x30
 8004d94:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004d96:	9b01      	ldr	r3, [sp, #4]
 8004d98:	f383 8811 	msr	BASEPRI, r3
}
 8004d9c:	bf00      	nop
}
 8004d9e:	bf00      	nop
}
 8004da0:	bf00      	nop
}
 8004da2:	bf00      	nop
 8004da4:	b002      	add	sp, #8
 8004da6:	4770      	bx	lr
	...

08004db0 <chSysUnlockFromISR.lto_priv.1>:
static inline void chSysUnlockFromISR(void) {
 8004db0:	b082      	sub	sp, #8
 8004db2:	2300      	movs	r3, #0
 8004db4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004db6:	9b01      	ldr	r3, [sp, #4]
 8004db8:	f383 8811 	msr	BASEPRI, r3
}
 8004dbc:	bf00      	nop
}
 8004dbe:	bf00      	nop
}
 8004dc0:	bf00      	nop
}
 8004dc2:	bf00      	nop
 8004dc4:	b002      	add	sp, #8
 8004dc6:	4770      	bx	lr
	...

08004dd0 <osalSysHalt.lto_priv.1>:
static inline void osalSysHalt(const char *reason) {
 8004dd0:	b500      	push	{lr}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	9001      	str	r0, [sp, #4]
  chSysHalt(reason);
 8004dd6:	9801      	ldr	r0, [sp, #4]
 8004dd8:	f001 fada 	bl	8006390 <chSysHalt>
}
 8004ddc:	bf00      	nop
 8004dde:	b003      	add	sp, #12
 8004de0:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004df0 <osalSysLockFromISR.lto_priv.1>:
static inline void osalSysLockFromISR(void) {
 8004df0:	b508      	push	{r3, lr}
  chSysLockFromISR();
 8004df2:	f7ff ffcd 	bl	8004d90 <chSysLockFromISR.lto_priv.1>
}
 8004df6:	bf00      	nop
 8004df8:	bd08      	pop	{r3, pc}
 8004dfa:	bf00      	nop
 8004dfc:	0000      	movs	r0, r0
	...

08004e00 <osalSysUnlockFromISR.lto_priv.1>:
static inline void osalSysUnlockFromISR(void) {
 8004e00:	b508      	push	{r3, lr}
  chSysUnlockFromISR();
 8004e02:	f7ff ffd5 	bl	8004db0 <chSysUnlockFromISR.lto_priv.1>
}
 8004e06:	bf00      	nop
 8004e08:	bd08      	pop	{r3, pc}
 8004e0a:	bf00      	nop
 8004e0c:	0000      	movs	r0, r0
	...

08004e10 <osalThreadResumeI.lto_priv.2>:
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {
 8004e10:	b500      	push	{lr}
 8004e12:	b083      	sub	sp, #12
 8004e14:	9001      	str	r0, [sp, #4]
 8004e16:	9100      	str	r1, [sp, #0]
  chThdResumeI(trp, msg);
 8004e18:	9900      	ldr	r1, [sp, #0]
 8004e1a:	9801      	ldr	r0, [sp, #4]
 8004e1c:	f002 fba8 	bl	8007570 <chThdResumeI>
}
 8004e20:	bf00      	nop
 8004e22:	b003      	add	sp, #12
 8004e24:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004e30 <spi_lld_configure>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static void spi_lld_configure(SPIDriver *spip) {
 8004e30:	b082      	sub	sp, #8
 8004e32:	9001      	str	r0, [sp, #4]

  /* SPI setup.*/
  if (spip->config->slave) {
 8004e34:	9b01      	ldr	r3, [sp, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	785b      	ldrb	r3, [r3, #1]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d012      	beq.n	8004e64 <spi_lld_configure+0x34>
    spip->spi->CR1  = spip->config->cr1 & ~(SPI_CR1_MSTR | SPI_CR1_SPE);
 8004e3e:	9b01      	ldr	r3, [sp, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	8a9b      	ldrh	r3, [r3, #20]
 8004e44:	461a      	mov	r2, r3
 8004e46:	9b01      	ldr	r3, [sp, #4]
 8004e48:	69db      	ldr	r3, [r3, #28]
 8004e4a:	f022 0244 	bic.w	r2, r2, #68	; 0x44
 8004e4e:	601a      	str	r2, [r3, #0]
    spip->spi->CR2  = spip->config->cr2 |
 8004e50:	9b01      	ldr	r3, [sp, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	8adb      	ldrh	r3, [r3, #22]
                      SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN;
 8004e56:	f043 0303 	orr.w	r3, r3, #3
 8004e5a:	b29a      	uxth	r2, r3
    spip->spi->CR2  = spip->config->cr2 |
 8004e5c:	9b01      	ldr	r3, [sp, #4]
 8004e5e:	69db      	ldr	r3, [r3, #28]
 8004e60:	605a      	str	r2, [r3, #4]
  else {
    spip->spi->CR1  = (spip->config->cr1 | SPI_CR1_MSTR) & ~SPI_CR1_SPE;
    spip->spi->CR2  = spip->config->cr2 | SPI_CR2_SSOE |
                      SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN;
  }
}
 8004e62:	e014      	b.n	8004e8e <spi_lld_configure+0x5e>
    spip->spi->CR1  = (spip->config->cr1 | SPI_CR1_MSTR) & ~SPI_CR1_SPE;
 8004e64:	9b01      	ldr	r3, [sp, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	8a9b      	ldrh	r3, [r3, #20]
 8004e6a:	f043 0304 	orr.w	r3, r3, #4
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	461a      	mov	r2, r3
 8004e72:	9b01      	ldr	r3, [sp, #4]
 8004e74:	69db      	ldr	r3, [r3, #28]
 8004e76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e7a:	601a      	str	r2, [r3, #0]
    spip->spi->CR2  = spip->config->cr2 | SPI_CR2_SSOE |
 8004e7c:	9b01      	ldr	r3, [sp, #4]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	8adb      	ldrh	r3, [r3, #22]
                      SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN;
 8004e82:	f043 0307 	orr.w	r3, r3, #7
 8004e86:	b29a      	uxth	r2, r3
    spip->spi->CR2  = spip->config->cr2 | SPI_CR2_SSOE |
 8004e88:	9b01      	ldr	r3, [sp, #4]
 8004e8a:	69db      	ldr	r3, [r3, #28]
 8004e8c:	605a      	str	r2, [r3, #4]
}
 8004e8e:	bf00      	nop
 8004e90:	b002      	add	sp, #8
 8004e92:	4770      	bx	lr
	...

08004ea0 <spi_lld_stop_abort>:
 * @note    This is done nicely or by brutally resetting it depending on
 *          the mode and settings.
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 */
static msg_t spi_lld_stop_abort(SPIDriver *spip) {
 8004ea0:	b500      	push	{lr}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	9001      	str	r0, [sp, #4]

  if (!spip->config->slave) {
 8004ea6:	9b01      	ldr	r3, [sp, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	785b      	ldrb	r3, [r3, #1]
 8004eac:	f083 0301 	eor.w	r3, r3, #1
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d048      	beq.n	8004f48 <spi_lld_stop_abort+0xa8>
    /* Master mode, stopping gracefully.*/

    /* Stopping TX DMA channel.*/
    dmaStreamDisable(spip->dmatx);
 8004eb6:	9b01      	ldr	r3, [sp, #4]
 8004eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	9b01      	ldr	r3, [sp, #4]
 8004ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f022 021f 	bic.w	r2, r2, #31
 8004ec8:	601a      	str	r2, [r3, #0]
 8004eca:	9b01      	ldr	r3, [sp, #4]
 8004ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1f7      	bne.n	8004eca <spi_lld_stop_abort+0x2a>
 8004eda:	9b01      	ldr	r3, [sp, #4]
 8004edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ede:	7a5b      	ldrb	r3, [r3, #9]
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	9b01      	ldr	r3, [sp, #4]
 8004ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	223d      	movs	r2, #61	; 0x3d
 8004eea:	408a      	lsls	r2, r1
 8004eec:	601a      	str	r2, [r3, #0]

    /* Waiting for current frame completion then stop SPI.*/
    while ((spip->spi->SR & SPI_SR_BSY) != 0U) {
 8004eee:	bf00      	nop
 8004ef0:	9b01      	ldr	r3, [sp, #4]
 8004ef2:	69db      	ldr	r3, [r3, #28]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1f8      	bne.n	8004ef0 <spi_lld_stop_abort+0x50>
    }
    spip->spi->CR1 &= ~SPI_CR1_SPE;
 8004efe:	9b01      	ldr	r3, [sp, #4]
 8004f00:	69db      	ldr	r3, [r3, #28]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	9b01      	ldr	r3, [sp, #4]
 8004f06:	69db      	ldr	r3, [r3, #28]
 8004f08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f0c:	601a      	str	r2, [r3, #0]

    /* Now it is idle, stopping RX DMA channel.*/
    dmaStreamDisable(spip->dmarx);
 8004f0e:	9b01      	ldr	r3, [sp, #4]
 8004f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	9b01      	ldr	r3, [sp, #4]
 8004f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f022 021f 	bic.w	r2, r2, #31
 8004f20:	601a      	str	r2, [r3, #0]
 8004f22:	9b01      	ldr	r3, [sp, #4]
 8004f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1f7      	bne.n	8004f22 <spi_lld_stop_abort+0x82>
 8004f32:	9b01      	ldr	r3, [sp, #4]
 8004f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f36:	7a5b      	ldrb	r3, [r3, #9]
 8004f38:	4619      	mov	r1, r3
 8004f3a:	9b01      	ldr	r3, [sp, #4]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	223d      	movs	r2, #61	; 0x3d
 8004f42:	408a      	lsls	r2, r1
 8004f44:	601a      	str	r2, [r3, #0]
 8004f46:	e05f      	b.n	8005008 <spi_lld_stop_abort+0x168>
  }
  else {
    /* Slave mode, this will not be nice.*/

    /* Stopping DMAs.*/
    dmaStreamDisable(spip->dmatx);
 8004f48:	9b01      	ldr	r3, [sp, #4]
 8004f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	9b01      	ldr	r3, [sp, #4]
 8004f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f022 021f 	bic.w	r2, r2, #31
 8004f5a:	601a      	str	r2, [r3, #0]
 8004f5c:	9b01      	ldr	r3, [sp, #4]
 8004f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0301 	and.w	r3, r3, #1
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1f7      	bne.n	8004f5c <spi_lld_stop_abort+0xbc>
 8004f6c:	9b01      	ldr	r3, [sp, #4]
 8004f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f70:	7a5b      	ldrb	r3, [r3, #9]
 8004f72:	4619      	mov	r1, r3
 8004f74:	9b01      	ldr	r3, [sp, #4]
 8004f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	223d      	movs	r2, #61	; 0x3d
 8004f7c:	408a      	lsls	r2, r1
 8004f7e:	601a      	str	r2, [r3, #0]
    dmaStreamDisable(spip->dmarx);
 8004f80:	9b01      	ldr	r3, [sp, #4]
 8004f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	9b01      	ldr	r3, [sp, #4]
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f022 021f 	bic.w	r2, r2, #31
 8004f92:	601a      	str	r2, [r3, #0]
 8004f94:	9b01      	ldr	r3, [sp, #4]
 8004f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0301 	and.w	r3, r3, #1
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d1f7      	bne.n	8004f94 <spi_lld_stop_abort+0xf4>
 8004fa4:	9b01      	ldr	r3, [sp, #4]
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa8:	7a5b      	ldrb	r3, [r3, #9]
 8004faa:	4619      	mov	r1, r3
 8004fac:	9b01      	ldr	r3, [sp, #4]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	223d      	movs	r2, #61	; 0x3d
 8004fb4:	408a      	lsls	r2, r1
 8004fb6:	601a      	str	r2, [r3, #0]
       in a clean state.*/
    if (false) {
    }

#if STM32_SPI_USE_SPI1
    else if (&SPID1 == spip) {
 8004fb8:	9b01      	ldr	r3, [sp, #4]
 8004fba:	4a16      	ldr	r2, [pc, #88]	; (8005014 <spi_lld_stop_abort+0x174>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d10e      	bne.n	8004fde <spi_lld_stop_abort+0x13e>
      rccResetSPI1();
 8004fc0:	4b15      	ldr	r3, [pc, #84]	; (8005018 <spi_lld_stop_abort+0x178>)
 8004fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc4:	4a14      	ldr	r2, [pc, #80]	; (8005018 <spi_lld_stop_abort+0x178>)
 8004fc6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004fca:	6253      	str	r3, [r2, #36]	; 0x24
 8004fcc:	4b12      	ldr	r3, [pc, #72]	; (8005018 <spi_lld_stop_abort+0x178>)
 8004fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd0:	4a11      	ldr	r2, [pc, #68]	; (8005018 <spi_lld_stop_abort+0x178>)
 8004fd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fd6:	6253      	str	r3, [r2, #36]	; 0x24
 8004fd8:	4b0f      	ldr	r3, [pc, #60]	; (8005018 <spi_lld_stop_abort+0x178>)
 8004fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fdc:	e011      	b.n	8005002 <spi_lld_stop_abort+0x162>
    }
#endif

#if STM32_SPI_USE_SPI2
    else if (&SPID2 == spip) {
 8004fde:	9b01      	ldr	r3, [sp, #4]
 8004fe0:	4a0e      	ldr	r2, [pc, #56]	; (800501c <spi_lld_stop_abort+0x17c>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d10d      	bne.n	8005002 <spi_lld_stop_abort+0x162>
      rccResetSPI2();
 8004fe6:	4b0c      	ldr	r3, [pc, #48]	; (8005018 <spi_lld_stop_abort+0x178>)
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	4a0b      	ldr	r2, [pc, #44]	; (8005018 <spi_lld_stop_abort+0x178>)
 8004fec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ff0:	6213      	str	r3, [r2, #32]
 8004ff2:	4b09      	ldr	r3, [pc, #36]	; (8005018 <spi_lld_stop_abort+0x178>)
 8004ff4:	6a1b      	ldr	r3, [r3, #32]
 8004ff6:	4a08      	ldr	r2, [pc, #32]	; (8005018 <spi_lld_stop_abort+0x178>)
 8004ff8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ffc:	6213      	str	r3, [r2, #32]
 8004ffe:	4b06      	ldr	r3, [pc, #24]	; (8005018 <spi_lld_stop_abort+0x178>)
 8005000:	6a1b      	ldr	r3, [r3, #32]
    else {
      osalDbgAssert(false, "invalid SPI instance");
    }

    /* Reconfiguring SPI.*/
    spi_lld_configure(spip);
 8005002:	9801      	ldr	r0, [sp, #4]
 8005004:	f7ff ff14 	bl	8004e30 <spi_lld_configure>
  }

  return HAL_RET_SUCCESS;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	b003      	add	sp, #12
 800500e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005012:	bf00      	nop
 8005014:	20000d24 	.word	0x20000d24
 8005018:	40023800 	.word	0x40023800
 800501c:	20000d60 	.word	0x20000d60

08005020 <spi_lld_serve_rx_interrupt>:
 * @brief   Shared end-of-rx service routine.
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {
 8005020:	b500      	push	{lr}
 8005022:	b083      	sub	sp, #12
 8005024:	9001      	str	r0, [sp, #4]
 8005026:	9100      	str	r1, [sp, #0]

  /* DMA errors handling.*/
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8005028:	9b00      	ldr	r3, [sp, #0]
 800502a:	f003 030c 	and.w	r3, r3, #12
 800502e:	2b00      	cmp	r3, #0
 8005030:	d01a      	beq.n	8005068 <spi_lld_serve_rx_interrupt+0x48>
#if defined(STM32_SPI_DMA_ERROR_HOOK)
    /* Hook first, if defined.*/
    STM32_SPI_DMA_ERROR_HOOK(spip);
 8005032:	4839      	ldr	r0, [pc, #228]	; (8005118 <spi_lld_serve_rx_interrupt+0xf8>)
 8005034:	f7ff fecc 	bl	8004dd0 <osalSysHalt.lto_priv.1>
#endif

    /* Aborting the transfer.*/
    (void) spi_lld_stop_abort(spip);
 8005038:	9801      	ldr	r0, [sp, #4]
 800503a:	f7ff ff31 	bl	8004ea0 <spi_lld_stop_abort>

    /* Reporting the failure.*/
    __spi_isr_error_code(spip, HAL_RET_HW_FAILURE);
 800503e:	9b01      	ldr	r3, [sp, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d004      	beq.n	8005052 <spi_lld_serve_rx_interrupt+0x32>
 8005048:	9b01      	ldr	r3, [sp, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	9801      	ldr	r0, [sp, #4]
 8005050:	4798      	blx	r3
 8005052:	f7ff fecd 	bl	8004df0 <osalSysLockFromISR.lto_priv.1>
 8005056:	9b01      	ldr	r3, [sp, #4]
 8005058:	3308      	adds	r3, #8
 800505a:	2100      	movs	r1, #0
 800505c:	4618      	mov	r0, r3
 800505e:	f7ff fed7 	bl	8004e10 <osalThreadResumeI.lto_priv.2>
 8005062:	f7ff fecd 	bl	8004e00 <osalSysUnlockFromISR.lto_priv.1>
    (void) spi_lld_stop_abort(spip);

    /* Operation finished interrupt.*/
    __spi_isr_complete_code(spip);
  }
}
 8005066:	e052      	b.n	800510e <spi_lld_serve_rx_interrupt+0xee>
  else if (spip->config->circular) {
 8005068:	9b01      	ldr	r3, [sp, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d028      	beq.n	80050c4 <spi_lld_serve_rx_interrupt+0xa4>
    if ((flags & STM32_DMA_ISR_HTIF) != 0U) {
 8005072:	9b00      	ldr	r3, [sp, #0]
 8005074:	f003 0310 	and.w	r3, r3, #16
 8005078:	2b00      	cmp	r3, #0
 800507a:	d009      	beq.n	8005090 <spi_lld_serve_rx_interrupt+0x70>
      __spi_isr_half_code(spip);
 800507c:	9b01      	ldr	r3, [sp, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d004      	beq.n	8005090 <spi_lld_serve_rx_interrupt+0x70>
 8005086:	9b01      	ldr	r3, [sp, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	9801      	ldr	r0, [sp, #4]
 800508e:	4798      	blx	r3
    if ((flags & STM32_DMA_ISR_TCIF) != 0U) {
 8005090:	9b00      	ldr	r3, [sp, #0]
 8005092:	f003 0320 	and.w	r3, r3, #32
 8005096:	2b00      	cmp	r3, #0
 8005098:	d039      	beq.n	800510e <spi_lld_serve_rx_interrupt+0xee>
      __spi_isr_full_code(spip);
 800509a:	9b01      	ldr	r3, [sp, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d034      	beq.n	800510e <spi_lld_serve_rx_interrupt+0xee>
 80050a4:	9b01      	ldr	r3, [sp, #4]
 80050a6:	2204      	movs	r2, #4
 80050a8:	701a      	strb	r2, [r3, #0]
 80050aa:	9b01      	ldr	r3, [sp, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	9801      	ldr	r0, [sp, #4]
 80050b2:	4798      	blx	r3
 80050b4:	9b01      	ldr	r3, [sp, #4]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	2b04      	cmp	r3, #4
 80050ba:	d128      	bne.n	800510e <spi_lld_serve_rx_interrupt+0xee>
 80050bc:	9b01      	ldr	r3, [sp, #4]
 80050be:	2203      	movs	r2, #3
 80050c0:	701a      	strb	r2, [r3, #0]
}
 80050c2:	e024      	b.n	800510e <spi_lld_serve_rx_interrupt+0xee>
    (void) spi_lld_stop_abort(spip);
 80050c4:	9801      	ldr	r0, [sp, #4]
 80050c6:	f7ff feeb 	bl	8004ea0 <spi_lld_stop_abort>
    __spi_isr_complete_code(spip);
 80050ca:	9b01      	ldr	r3, [sp, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00f      	beq.n	80050f4 <spi_lld_serve_rx_interrupt+0xd4>
 80050d4:	9b01      	ldr	r3, [sp, #4]
 80050d6:	2204      	movs	r2, #4
 80050d8:	701a      	strb	r2, [r3, #0]
 80050da:	9b01      	ldr	r3, [sp, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	9801      	ldr	r0, [sp, #4]
 80050e2:	4798      	blx	r3
 80050e4:	9b01      	ldr	r3, [sp, #4]
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	2b04      	cmp	r3, #4
 80050ea:	d106      	bne.n	80050fa <spi_lld_serve_rx_interrupt+0xda>
 80050ec:	9b01      	ldr	r3, [sp, #4]
 80050ee:	2202      	movs	r2, #2
 80050f0:	701a      	strb	r2, [r3, #0]
 80050f2:	e002      	b.n	80050fa <spi_lld_serve_rx_interrupt+0xda>
 80050f4:	9b01      	ldr	r3, [sp, #4]
 80050f6:	2202      	movs	r2, #2
 80050f8:	701a      	strb	r2, [r3, #0]
 80050fa:	f7ff fe79 	bl	8004df0 <osalSysLockFromISR.lto_priv.1>
 80050fe:	9b01      	ldr	r3, [sp, #4]
 8005100:	3308      	adds	r3, #8
 8005102:	2100      	movs	r1, #0
 8005104:	4618      	mov	r0, r3
 8005106:	f7ff fe83 	bl	8004e10 <osalThreadResumeI.lto_priv.2>
 800510a:	f7ff fe79 	bl	8004e00 <osalSysUnlockFromISR.lto_priv.1>
}
 800510e:	bf00      	nop
 8005110:	b003      	add	sp, #12
 8005112:	f85d fb04 	ldr.w	pc, [sp], #4
 8005116:	bf00      	nop
 8005118:	0800ed24 	.word	0x0800ed24
 800511c:	00000000 	.word	0x00000000

08005120 <spi_lld_serve_tx_interrupt>:
 * @brief   Shared end-of-tx service routine.
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void spi_lld_serve_tx_interrupt(SPIDriver *spip, uint32_t flags) {
 8005120:	b500      	push	{lr}
 8005122:	b083      	sub	sp, #12
 8005124:	9001      	str	r0, [sp, #4]
 8005126:	9100      	str	r1, [sp, #0]

  /* DMA errors handling.*/
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8005128:	9b00      	ldr	r3, [sp, #0]
 800512a:	f003 030c 	and.w	r3, r3, #12
 800512e:	2b00      	cmp	r3, #0
 8005130:	d019      	beq.n	8005166 <spi_lld_serve_tx_interrupt+0x46>
#if defined(STM32_SPI_DMA_ERROR_HOOK)
    /* Hook first, if defined.*/
    STM32_SPI_DMA_ERROR_HOOK(spip);
 8005132:	480f      	ldr	r0, [pc, #60]	; (8005170 <spi_lld_serve_tx_interrupt+0x50>)
 8005134:	f7ff fe4c 	bl	8004dd0 <osalSysHalt.lto_priv.1>
#endif

    /* Aborting the transfer.*/
    (void) spi_lld_stop_abort(spip);
 8005138:	9801      	ldr	r0, [sp, #4]
 800513a:	f7ff feb1 	bl	8004ea0 <spi_lld_stop_abort>

    /* Reporting the failure.*/
    __spi_isr_error_code(spip, HAL_RET_HW_FAILURE);
 800513e:	9b01      	ldr	r3, [sp, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d004      	beq.n	8005152 <spi_lld_serve_tx_interrupt+0x32>
 8005148:	9b01      	ldr	r3, [sp, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	9801      	ldr	r0, [sp, #4]
 8005150:	4798      	blx	r3
 8005152:	f7ff fe4d 	bl	8004df0 <osalSysLockFromISR.lto_priv.1>
 8005156:	9b01      	ldr	r3, [sp, #4]
 8005158:	3308      	adds	r3, #8
 800515a:	2100      	movs	r1, #0
 800515c:	4618      	mov	r0, r3
 800515e:	f7ff fe57 	bl	8004e10 <osalThreadResumeI.lto_priv.2>
 8005162:	f7ff fe4d 	bl	8004e00 <osalSysUnlockFromISR.lto_priv.1>
  }
}
 8005166:	bf00      	nop
 8005168:	b003      	add	sp, #12
 800516a:	f85d fb04 	ldr.w	pc, [sp], #4
 800516e:	bf00      	nop
 8005170:	0800ed24 	.word	0x0800ed24
	...

08005180 <spi_lld_get_dma>:
 * @param[in] txstream  stream to be allocated for TX
 * @param[in] priority  streams IRQ priority
 * @return              The operation status.
 */
static msg_t spi_lld_get_dma(SPIDriver *spip, uint32_t rxstream,
                             uint32_t txstream, uint32_t priority) {
 8005180:	b500      	push	{lr}
 8005182:	b085      	sub	sp, #20
 8005184:	9003      	str	r0, [sp, #12]
 8005186:	9102      	str	r1, [sp, #8]
 8005188:	9201      	str	r2, [sp, #4]
 800518a:	9300      	str	r3, [sp, #0]

  spip->dmarx = dmaStreamAllocI(rxstream, priority,
 800518c:	9b03      	ldr	r3, [sp, #12]
 800518e:	4a15      	ldr	r2, [pc, #84]	; (80051e4 <spi_lld_get_dma+0x64>)
 8005190:	9900      	ldr	r1, [sp, #0]
 8005192:	9802      	ldr	r0, [sp, #8]
 8005194:	f7fe fe44 	bl	8003e20 <dmaStreamAllocI>
 8005198:	4602      	mov	r2, r0
 800519a:	9b03      	ldr	r3, [sp, #12]
 800519c:	625a      	str	r2, [r3, #36]	; 0x24
                                (stm32_dmaisr_t)spi_lld_serve_rx_interrupt,
                                (void *)spip);
  if (spip->dmarx == NULL) {
 800519e:	9b03      	ldr	r3, [sp, #12]
 80051a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d102      	bne.n	80051ac <spi_lld_get_dma+0x2c>
    return HAL_RET_NO_RESOURCE;
 80051a6:	f06f 0310 	mvn.w	r3, #16
 80051aa:	e016      	b.n	80051da <spi_lld_get_dma+0x5a>
  }

  spip->dmatx = dmaStreamAllocI(txstream, priority,
 80051ac:	9b03      	ldr	r3, [sp, #12]
 80051ae:	4a0e      	ldr	r2, [pc, #56]	; (80051e8 <spi_lld_get_dma+0x68>)
 80051b0:	9900      	ldr	r1, [sp, #0]
 80051b2:	9801      	ldr	r0, [sp, #4]
 80051b4:	f7fe fe34 	bl	8003e20 <dmaStreamAllocI>
 80051b8:	4602      	mov	r2, r0
 80051ba:	9b03      	ldr	r3, [sp, #12]
 80051bc:	629a      	str	r2, [r3, #40]	; 0x28
                                (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                                (void *)spip);
  if (spip->dmatx == NULL) {
 80051be:	9b03      	ldr	r3, [sp, #12]
 80051c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d107      	bne.n	80051d6 <spi_lld_get_dma+0x56>
    dmaStreamFreeI(spip->dmarx);
 80051c6:	9b03      	ldr	r3, [sp, #12]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7fe fec0 	bl	8003f50 <dmaStreamFreeI>
    return HAL_RET_NO_RESOURCE;
 80051d0:	f06f 0310 	mvn.w	r3, #16
 80051d4:	e001      	b.n	80051da <spi_lld_get_dma+0x5a>
  }

  return HAL_RET_SUCCESS;
 80051d6:	2300      	movs	r3, #0
 80051d8:	bf00      	nop
}
 80051da:	4618      	mov	r0, r3
 80051dc:	b005      	add	sp, #20
 80051de:	f85d fb04 	ldr.w	pc, [sp], #4
 80051e2:	bf00      	nop
 80051e4:	08005021 	.word	0x08005021
 80051e8:	08005121 	.word	0x08005121
 80051ec:	00000000 	.word	0x00000000

080051f0 <spi_lld_init>:
/**
 * @brief   Low level SPI driver initialization.
 *
 * @notapi
 */
void spi_lld_init(void) {
 80051f0:	b508      	push	{r3, lr}

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
 80051f2:	4813      	ldr	r0, [pc, #76]	; (8005240 <spi_lld_init+0x50>)
 80051f4:	f7fd fecc 	bl	8002f90 <spiObjectInit>
  SPID1.spi       = SPI1;
 80051f8:	4b11      	ldr	r3, [pc, #68]	; (8005240 <spi_lld_init+0x50>)
 80051fa:	4a12      	ldr	r2, [pc, #72]	; (8005244 <spi_lld_init+0x54>)
 80051fc:	61da      	str	r2, [r3, #28]
  SPID1.dmarx     = NULL;
 80051fe:	4b10      	ldr	r3, [pc, #64]	; (8005240 <spi_lld_init+0x50>)
 8005200:	2200      	movs	r2, #0
 8005202:	625a      	str	r2, [r3, #36]	; 0x24
  SPID1.dmatx     = NULL;
 8005204:	4b0e      	ldr	r3, [pc, #56]	; (8005240 <spi_lld_init+0x50>)
 8005206:	2200      	movs	r2, #0
 8005208:	629a      	str	r2, [r3, #40]	; 0x28
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 800520a:	4b0d      	ldr	r3, [pc, #52]	; (8005240 <spi_lld_init+0x50>)
 800520c:	4a0e      	ldr	r2, [pc, #56]	; (8005248 <spi_lld_init+0x58>)
 800520e:	62da      	str	r2, [r3, #44]	; 0x2c
                    STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 8005210:	4b0b      	ldr	r3, [pc, #44]	; (8005240 <spi_lld_init+0x50>)
 8005212:	4a0e      	ldr	r2, [pc, #56]	; (800524c <spi_lld_init+0x5c>)
 8005214:	631a      	str	r2, [r3, #48]	; 0x30
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
#endif

#if STM32_SPI_USE_SPI2
  spiObjectInit(&SPID2);
 8005216:	480e      	ldr	r0, [pc, #56]	; (8005250 <spi_lld_init+0x60>)
 8005218:	f7fd feba 	bl	8002f90 <spiObjectInit>
  SPID2.spi       = SPI2;
 800521c:	4b0c      	ldr	r3, [pc, #48]	; (8005250 <spi_lld_init+0x60>)
 800521e:	4a0d      	ldr	r2, [pc, #52]	; (8005254 <spi_lld_init+0x64>)
 8005220:	61da      	str	r2, [r3, #28]
  SPID2.dmarx     = NULL;
 8005222:	4b0b      	ldr	r3, [pc, #44]	; (8005250 <spi_lld_init+0x60>)
 8005224:	2200      	movs	r2, #0
 8005226:	625a      	str	r2, [r3, #36]	; 0x24
  SPID2.dmatx     = NULL;
 8005228:	4b09      	ldr	r3, [pc, #36]	; (8005250 <spi_lld_init+0x60>)
 800522a:	2200      	movs	r2, #0
 800522c:	629a      	str	r2, [r3, #40]	; 0x28
  SPID2.rxdmamode = STM32_DMA_CR_CHSEL(SPI2_RX_DMA_CHANNEL) |
 800522e:	4b08      	ldr	r3, [pc, #32]	; (8005250 <spi_lld_init+0x60>)
 8005230:	4a09      	ldr	r2, [pc, #36]	; (8005258 <spi_lld_init+0x68>)
 8005232:	62da      	str	r2, [r3, #44]	; 0x2c
                    STM32_DMA_CR_PL(STM32_SPI_SPI2_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID2.txdmamode = STM32_DMA_CR_CHSEL(SPI2_TX_DMA_CHANNEL) |
 8005234:	4b06      	ldr	r3, [pc, #24]	; (8005250 <spi_lld_init+0x60>)
 8005236:	4a09      	ldr	r2, [pc, #36]	; (800525c <spi_lld_init+0x6c>)
 8005238:	631a      	str	r2, [r3, #48]	; 0x30
                    STM32_DMA_CR_PL(STM32_SPI_SPI6_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_M2P |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
#endif
}
 800523a:	bf00      	nop
 800523c:	bd08      	pop	{r3, pc}
 800523e:	bf00      	nop
 8005240:	20000d24 	.word	0x20000d24
 8005244:	40013000 	.word	0x40013000
 8005248:	06010016 	.word	0x06010016
 800524c:	06010046 	.word	0x06010046
 8005250:	20000d60 	.word	0x20000d60
 8005254:	40003800 	.word	0x40003800
 8005258:	00010016 	.word	0x00010016
 800525c:	00010046 	.word	0x00010046

08005260 <spi_lld_start>:
 * @param[in] spip      pointer to the @p SPIDriver object
 * @return              The operation status.
 *
 * @notapi
 */
msg_t spi_lld_start(SPIDriver *spip) {
 8005260:	b500      	push	{lr}
 8005262:	b085      	sub	sp, #20
 8005264:	9001      	str	r0, [sp, #4]
  msg_t msg;

  /* Resetting TX pattern source.*/
  spip->txsource = (uint32_t)STM32_SPI_FILLER_PATTERN;
 8005266:	9b01      	ldr	r3, [sp, #4]
 8005268:	f04f 32ff 	mov.w	r2, #4294967295
 800526c:	639a      	str	r2, [r3, #56]	; 0x38

  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
 800526e:	9b01      	ldr	r3, [sp, #4]
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	2b01      	cmp	r3, #1
 8005274:	d168      	bne.n	8005348 <spi_lld_start+0xe8>
    if (false) {
    }

#if STM32_SPI_USE_SPI1
    else if (&SPID1 == spip) {
 8005276:	9b01      	ldr	r3, [sp, #4]
 8005278:	4a58      	ldr	r2, [pc, #352]	; (80053dc <spi_lld_start+0x17c>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d128      	bne.n	80052d0 <spi_lld_start+0x70>
      msg = spi_lld_get_dma(spip,
 800527e:	230a      	movs	r3, #10
 8005280:	220b      	movs	r2, #11
 8005282:	2108      	movs	r1, #8
 8005284:	9801      	ldr	r0, [sp, #4]
 8005286:	f7ff ff7b 	bl	8005180 <spi_lld_get_dma>
 800528a:	9003      	str	r0, [sp, #12]
                            STM32_SPI_SPI1_RX_DMA_STREAM,
                            STM32_SPI_SPI1_TX_DMA_STREAM,
                            STM32_SPI_SPI1_IRQ_PRIORITY);
      if (msg != HAL_RET_SUCCESS) {
 800528c:	9b03      	ldr	r3, [sp, #12]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d001      	beq.n	8005296 <spi_lld_start+0x36>
        return msg;
 8005292:	9b03      	ldr	r3, [sp, #12]
 8005294:	e09e      	b.n	80053d4 <spi_lld_start+0x174>
      }
      rccEnableSPI1(true);
 8005296:	4b52      	ldr	r3, [pc, #328]	; (80053e0 <spi_lld_start+0x180>)
 8005298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800529a:	4a51      	ldr	r2, [pc, #324]	; (80053e0 <spi_lld_start+0x180>)
 800529c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80052a0:	6453      	str	r3, [r2, #68]	; 0x44
 80052a2:	4b4f      	ldr	r3, [pc, #316]	; (80053e0 <spi_lld_start+0x180>)
 80052a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052a6:	4a4e      	ldr	r2, [pc, #312]	; (80053e0 <spi_lld_start+0x180>)
 80052a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80052ac:	6653      	str	r3, [r2, #100]	; 0x64
 80052ae:	4b4c      	ldr	r3, [pc, #304]	; (80053e0 <spi_lld_start+0x180>)
 80052b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
      rccResetSPI1();
 80052b2:	4b4b      	ldr	r3, [pc, #300]	; (80053e0 <spi_lld_start+0x180>)
 80052b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b6:	4a4a      	ldr	r2, [pc, #296]	; (80053e0 <spi_lld_start+0x180>)
 80052b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80052bc:	6253      	str	r3, [r2, #36]	; 0x24
 80052be:	4b48      	ldr	r3, [pc, #288]	; (80053e0 <spi_lld_start+0x180>)
 80052c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c2:	4a47      	ldr	r2, [pc, #284]	; (80053e0 <spi_lld_start+0x180>)
 80052c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052c8:	6253      	str	r3, [r2, #36]	; 0x24
 80052ca:	4b45      	ldr	r3, [pc, #276]	; (80053e0 <spi_lld_start+0x180>)
 80052cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ce:	e02b      	b.n	8005328 <spi_lld_start+0xc8>
#endif
    }
#endif

#if STM32_SPI_USE_SPI2
    else if (&SPID2 == spip) {
 80052d0:	9b01      	ldr	r3, [sp, #4]
 80052d2:	4a44      	ldr	r2, [pc, #272]	; (80053e4 <spi_lld_start+0x184>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d127      	bne.n	8005328 <spi_lld_start+0xc8>
      msg = spi_lld_get_dma(spip,
 80052d8:	230a      	movs	r3, #10
 80052da:	2204      	movs	r2, #4
 80052dc:	2103      	movs	r1, #3
 80052de:	9801      	ldr	r0, [sp, #4]
 80052e0:	f7ff ff4e 	bl	8005180 <spi_lld_get_dma>
 80052e4:	9003      	str	r0, [sp, #12]
                            STM32_SPI_SPI2_RX_DMA_STREAM,
                            STM32_SPI_SPI2_TX_DMA_STREAM,
                            STM32_SPI_SPI2_IRQ_PRIORITY);
      if (msg != HAL_RET_SUCCESS) {
 80052e6:	9b03      	ldr	r3, [sp, #12]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d001      	beq.n	80052f0 <spi_lld_start+0x90>
        return msg;
 80052ec:	9b03      	ldr	r3, [sp, #12]
 80052ee:	e071      	b.n	80053d4 <spi_lld_start+0x174>
      }
      rccEnableSPI2(true);
 80052f0:	4b3b      	ldr	r3, [pc, #236]	; (80053e0 <spi_lld_start+0x180>)
 80052f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f4:	4a3a      	ldr	r2, [pc, #232]	; (80053e0 <spi_lld_start+0x180>)
 80052f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052fa:	6413      	str	r3, [r2, #64]	; 0x40
 80052fc:	4b38      	ldr	r3, [pc, #224]	; (80053e0 <spi_lld_start+0x180>)
 80052fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005300:	4a37      	ldr	r2, [pc, #220]	; (80053e0 <spi_lld_start+0x180>)
 8005302:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005306:	6613      	str	r3, [r2, #96]	; 0x60
 8005308:	4b35      	ldr	r3, [pc, #212]	; (80053e0 <spi_lld_start+0x180>)
 800530a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
      rccResetSPI2();
 800530c:	4b34      	ldr	r3, [pc, #208]	; (80053e0 <spi_lld_start+0x180>)
 800530e:	6a1b      	ldr	r3, [r3, #32]
 8005310:	4a33      	ldr	r2, [pc, #204]	; (80053e0 <spi_lld_start+0x180>)
 8005312:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005316:	6213      	str	r3, [r2, #32]
 8005318:	4b31      	ldr	r3, [pc, #196]	; (80053e0 <spi_lld_start+0x180>)
 800531a:	6a1b      	ldr	r3, [r3, #32]
 800531c:	4a30      	ldr	r2, [pc, #192]	; (80053e0 <spi_lld_start+0x180>)
 800531e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005322:	6213      	str	r3, [r2, #32]
 8005324:	4b2e      	ldr	r3, [pc, #184]	; (80053e0 <spi_lld_start+0x180>)
 8005326:	6a1b      	ldr	r3, [r3, #32]
    else {
      osalDbgAssert(false, "invalid SPI instance");
    }

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8005328:	9b01      	ldr	r3, [sp, #4]
 800532a:	69db      	ldr	r3, [r3, #28]
 800532c:	f103 020c 	add.w	r2, r3, #12
 8005330:	9b01      	ldr	r3, [sp, #4]
 8005332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	609a      	str	r2, [r3, #8]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8005338:	9b01      	ldr	r3, [sp, #4]
 800533a:	69db      	ldr	r3, [r3, #28]
 800533c:	f103 020c 	add.w	r2, r3, #12
 8005340:	9b01      	ldr	r3, [sp, #4]
 8005342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	609a      	str	r2, [r3, #8]
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8005348:	9b01      	ldr	r3, [sp, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	8a9b      	ldrh	r3, [r3, #20]
 800534e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10c      	bne.n	8005370 <spi_lld_start+0x110>
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8005356:	9b01      	ldr	r3, [sp, #4]
 8005358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 800535a:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 800535e:	9b01      	ldr	r3, [sp, #4]
 8005360:	62da      	str	r2, [r3, #44]	; 0x2c
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8005362:	9b01      	ldr	r3, [sp, #4]
 8005364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8005366:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 800536a:	9b01      	ldr	r3, [sp, #4]
 800536c:	631a      	str	r2, [r3, #48]	; 0x30
 800536e:	e00f      	b.n	8005390 <spi_lld_start+0x130>
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8005370:	9b01      	ldr	r3, [sp, #4]
 8005372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005374:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8005378:	f443 5220 	orr.w	r2, r3, #10240	; 0x2800
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 800537c:	9b01      	ldr	r3, [sp, #4]
 800537e:	62da      	str	r2, [r3, #44]	; 0x2c
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8005380:	9b01      	ldr	r3, [sp, #4]
 8005382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005384:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8005388:	f443 5220 	orr.w	r2, r3, #10240	; 0x2800
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 800538c:	9b01      	ldr	r3, [sp, #4]
 800538e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  if (spip->config->circular) {
 8005390:	9b01      	ldr	r3, [sp, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00c      	beq.n	80053b4 <spi_lld_start+0x154>
    spip->rxdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 800539a:	9b01      	ldr	r3, [sp, #4]
 800539c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539e:	f443 7284 	orr.w	r2, r3, #264	; 0x108
 80053a2:	9b01      	ldr	r3, [sp, #4]
 80053a4:	62da      	str	r2, [r3, #44]	; 0x2c
    spip->txdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 80053a6:	9b01      	ldr	r3, [sp, #4]
 80053a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053aa:	f443 7284 	orr.w	r2, r3, #264	; 0x108
 80053ae:	9b01      	ldr	r3, [sp, #4]
 80053b0:	631a      	str	r2, [r3, #48]	; 0x30
 80053b2:	e00b      	b.n	80053cc <spi_lld_start+0x16c>
  }
  else {
    spip->rxdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 80053b4:	9b01      	ldr	r3, [sp, #4]
 80053b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b8:	f423 7284 	bic.w	r2, r3, #264	; 0x108
 80053bc:	9b01      	ldr	r3, [sp, #4]
 80053be:	62da      	str	r2, [r3, #44]	; 0x2c
    spip->txdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 80053c0:	9b01      	ldr	r3, [sp, #4]
 80053c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c4:	f423 7284 	bic.w	r2, r3, #264	; 0x108
 80053c8:	9b01      	ldr	r3, [sp, #4]
 80053ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* SPI setup.*/
  spi_lld_configure(spip);
 80053cc:	9801      	ldr	r0, [sp, #4]
 80053ce:	f7ff fd2f 	bl	8004e30 <spi_lld_configure>

  return HAL_RET_SUCCESS;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	b005      	add	sp, #20
 80053d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80053dc:	20000d24 	.word	0x20000d24
 80053e0:	40023800 	.word	0x40023800
 80053e4:	20000d60 	.word	0x20000d60
	...

080053f0 <spi_lld_stop>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @notapi
 */
void spi_lld_stop(SPIDriver *spip) {
 80053f0:	b500      	push	{lr}
 80053f2:	b083      	sub	sp, #12
 80053f4:	9001      	str	r0, [sp, #4]

  /* If in ready state then disables the SPI clock.*/
  if (spip->state == SPI_READY) {
 80053f6:	9b01      	ldr	r3, [sp, #4]
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d13f      	bne.n	800547e <spi_lld_stop+0x8e>

    /* Just in case this has been called uncleanly.*/
    (void) spi_lld_stop_abort(spip);
 80053fe:	9801      	ldr	r0, [sp, #4]
 8005400:	f7ff fd4e 	bl	8004ea0 <spi_lld_stop_abort>

    /* SPI cleanup.*/
    spip->spi->CR1  = 0;
 8005404:	9b01      	ldr	r3, [sp, #4]
 8005406:	69db      	ldr	r3, [r3, #28]
 8005408:	2200      	movs	r2, #0
 800540a:	601a      	str	r2, [r3, #0]
    spip->spi->CR2  = 0;
 800540c:	9b01      	ldr	r3, [sp, #4]
 800540e:	69db      	ldr	r3, [r3, #28]
 8005410:	2200      	movs	r2, #0
 8005412:	605a      	str	r2, [r3, #4]

    /* DMA channels release.*/
    dmaStreamFreeI(spip->dmatx);
 8005414:	9b01      	ldr	r3, [sp, #4]
 8005416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005418:	4618      	mov	r0, r3
 800541a:	f7fe fd99 	bl	8003f50 <dmaStreamFreeI>
    dmaStreamFreeI(spip->dmarx);
 800541e:	9b01      	ldr	r3, [sp, #4]
 8005420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005422:	4618      	mov	r0, r3
 8005424:	f7fe fd94 	bl	8003f50 <dmaStreamFreeI>
    spip->dmarx = NULL;
 8005428:	9b01      	ldr	r3, [sp, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	625a      	str	r2, [r3, #36]	; 0x24
    spip->dmatx = NULL;
 800542e:	9b01      	ldr	r3, [sp, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	629a      	str	r2, [r3, #40]	; 0x28
    /* Clock shutdown.*/
    if (false) {
    }

#if STM32_SPI_USE_SPI1
    else if (&SPID1 == spip) {
 8005434:	9b01      	ldr	r3, [sp, #4]
 8005436:	4a14      	ldr	r2, [pc, #80]	; (8005488 <spi_lld_stop+0x98>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d10e      	bne.n	800545a <spi_lld_stop+0x6a>
      rccDisableSPI1();
 800543c:	4b13      	ldr	r3, [pc, #76]	; (800548c <spi_lld_stop+0x9c>)
 800543e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005440:	4a12      	ldr	r2, [pc, #72]	; (800548c <spi_lld_stop+0x9c>)
 8005442:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005446:	6453      	str	r3, [r2, #68]	; 0x44
 8005448:	4b10      	ldr	r3, [pc, #64]	; (800548c <spi_lld_stop+0x9c>)
 800544a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800544c:	4a0f      	ldr	r2, [pc, #60]	; (800548c <spi_lld_stop+0x9c>)
 800544e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005452:	6653      	str	r3, [r2, #100]	; 0x64
 8005454:	4b0d      	ldr	r3, [pc, #52]	; (800548c <spi_lld_stop+0x9c>)
 8005456:	6e5b      	ldr	r3, [r3, #100]	; 0x64

    else {
      osalDbgAssert(false, "invalid SPI instance");
    }
  }
}
 8005458:	e011      	b.n	800547e <spi_lld_stop+0x8e>
    else if (&SPID2 == spip) {
 800545a:	9b01      	ldr	r3, [sp, #4]
 800545c:	4a0c      	ldr	r2, [pc, #48]	; (8005490 <spi_lld_stop+0xa0>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d10d      	bne.n	800547e <spi_lld_stop+0x8e>
      rccDisableSPI2();
 8005462:	4b0a      	ldr	r3, [pc, #40]	; (800548c <spi_lld_stop+0x9c>)
 8005464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005466:	4a09      	ldr	r2, [pc, #36]	; (800548c <spi_lld_stop+0x9c>)
 8005468:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800546c:	6413      	str	r3, [r2, #64]	; 0x40
 800546e:	4b07      	ldr	r3, [pc, #28]	; (800548c <spi_lld_stop+0x9c>)
 8005470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005472:	4a06      	ldr	r2, [pc, #24]	; (800548c <spi_lld_stop+0x9c>)
 8005474:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005478:	6613      	str	r3, [r2, #96]	; 0x60
 800547a:	4b04      	ldr	r3, [pc, #16]	; (800548c <spi_lld_stop+0x9c>)
 800547c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
 800547e:	bf00      	nop
 8005480:	b003      	add	sp, #12
 8005482:	f85d fb04 	ldr.w	pc, [sp], #4
 8005486:	bf00      	nop
 8005488:	20000d24 	.word	0x20000d24
 800548c:	40023800 	.word	0x40023800
 8005490:	20000d60 	.word	0x20000d60
	...

080054a0 <spi_lld_ignore>:
 * @param[in] n         number of words to be ignored
 * @return              The operation status.
 *
 * @notapi
 */
msg_t spi_lld_ignore(SPIDriver *spip, size_t n) {
 80054a0:	b082      	sub	sp, #8
 80054a2:	9001      	str	r0, [sp, #4]
 80054a4:	9100      	str	r1, [sp, #0]

  osalDbgAssert(n < 65536, "unsupported DMA transfer size");

  dmaStreamSetMemory0(spip->dmarx, &spip->rxsink);
 80054a6:	9b01      	ldr	r3, [sp, #4]
 80054a8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80054ac:	9b01      	ldr	r3, [sp, #4]
 80054ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
 80054b4:	9b01      	ldr	r3, [sp, #4]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	9a00      	ldr	r2, [sp, #0]
 80054bc:	605a      	str	r2, [r3, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 80054be:	9b01      	ldr	r3, [sp, #4]
 80054c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	9a01      	ldr	r2, [sp, #4]
 80054c6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80054c8:	601a      	str	r2, [r3, #0]

  dmaStreamSetMemory0(spip->dmatx, &spip->txsource);
 80054ca:	9b01      	ldr	r3, [sp, #4]
 80054cc:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80054d0:	9b01      	ldr	r3, [sp, #4]
 80054d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 80054d8:	9b01      	ldr	r3, [sp, #4]
 80054da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	9a00      	ldr	r2, [sp, #0]
 80054e0:	605a      	str	r2, [r3, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode);
 80054e2:	9b01      	ldr	r3, [sp, #4]
 80054e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	9a01      	ldr	r2, [sp, #4]
 80054ea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80054ec:	601a      	str	r2, [r3, #0]

  dmaStreamEnable(spip->dmarx);
 80054ee:	9b01      	ldr	r3, [sp, #4]
 80054f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	9b01      	ldr	r3, [sp, #4]
 80054f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f042 0201 	orr.w	r2, r2, #1
 8005500:	601a      	str	r2, [r3, #0]
  dmaStreamEnable(spip->dmatx);
 8005502:	9b01      	ldr	r3, [sp, #4]
 8005504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	9b01      	ldr	r3, [sp, #4]
 800550c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f042 0201 	orr.w	r2, r2, #1
 8005514:	601a      	str	r2, [r3, #0]

  spip->spi->CR1 |= SPI_CR1_SPE;
 8005516:	9b01      	ldr	r3, [sp, #4]
 8005518:	69db      	ldr	r3, [r3, #28]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	9b01      	ldr	r3, [sp, #4]
 800551e:	69db      	ldr	r3, [r3, #28]
 8005520:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005524:	601a      	str	r2, [r3, #0]

  return HAL_RET_SUCCESS;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	b002      	add	sp, #8
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop

08005530 <spi_lld_send>:
 * @param[in] txbuf     the pointer to the transmit buffer
 * @return              The operation status.
 *
 * @notapi
 */
msg_t spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {
 8005530:	b084      	sub	sp, #16
 8005532:	9003      	str	r0, [sp, #12]
 8005534:	9102      	str	r1, [sp, #8]
 8005536:	9201      	str	r2, [sp, #4]

  osalDbgAssert(n < 65536, "unsupported DMA transfer size");

  dmaStreamSetMemory0(spip->dmarx, &spip->rxsink);
 8005538:	9b03      	ldr	r3, [sp, #12]
 800553a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800553e:	9b03      	ldr	r3, [sp, #12]
 8005540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8005546:	9b03      	ldr	r3, [sp, #12]
 8005548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	9a02      	ldr	r2, [sp, #8]
 800554e:	605a      	str	r2, [r3, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 8005550:	9b03      	ldr	r3, [sp, #12]
 8005552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	9a03      	ldr	r2, [sp, #12]
 8005558:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800555a:	601a      	str	r2, [r3, #0]

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 800555c:	9b03      	ldr	r3, [sp, #12]
 800555e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	9a01      	ldr	r2, [sp, #4]
 8005564:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 8005566:	9b03      	ldr	r3, [sp, #12]
 8005568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	9a02      	ldr	r2, [sp, #8]
 800556e:	605a      	str	r2, [r3, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8005570:	9b03      	ldr	r3, [sp, #12]
 8005572:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005574:	9b03      	ldr	r3, [sp, #12]
 8005576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800557e:	601a      	str	r2, [r3, #0]

  dmaStreamEnable(spip->dmarx);
 8005580:	9b03      	ldr	r3, [sp, #12]
 8005582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	9b03      	ldr	r3, [sp, #12]
 800558a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f042 0201 	orr.w	r2, r2, #1
 8005592:	601a      	str	r2, [r3, #0]
  dmaStreamEnable(spip->dmatx);
 8005594:	9b03      	ldr	r3, [sp, #12]
 8005596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	9b03      	ldr	r3, [sp, #12]
 800559e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f042 0201 	orr.w	r2, r2, #1
 80055a6:	601a      	str	r2, [r3, #0]

  spip->spi->CR1 |= SPI_CR1_SPE;
 80055a8:	9b03      	ldr	r3, [sp, #12]
 80055aa:	69db      	ldr	r3, [r3, #28]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	9b03      	ldr	r3, [sp, #12]
 80055b0:	69db      	ldr	r3, [r3, #28]
 80055b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055b6:	601a      	str	r2, [r3, #0]

  return HAL_RET_SUCCESS;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	b004      	add	sp, #16
 80055be:	4770      	bx	lr

080055c0 <spi_lld_receive>:
 * @param[out] rxbuf    the pointer to the receive buffer
 * @return              The operation status.
 *
 * @notapi
 */
msg_t spi_lld_receive(SPIDriver *spip, size_t n, void *rxbuf) {
 80055c0:	b084      	sub	sp, #16
 80055c2:	9003      	str	r0, [sp, #12]
 80055c4:	9102      	str	r1, [sp, #8]
 80055c6:	9201      	str	r2, [sp, #4]

  osalDbgAssert(n < 65536, "unsupported DMA transfer size");

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 80055c8:	9b03      	ldr	r3, [sp, #12]
 80055ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	9a01      	ldr	r2, [sp, #4]
 80055d0:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
 80055d2:	9b03      	ldr	r3, [sp, #12]
 80055d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	9a02      	ldr	r2, [sp, #8]
 80055da:	605a      	str	r2, [r3, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 80055dc:	9b03      	ldr	r3, [sp, #12]
 80055de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055e0:	9b03      	ldr	r3, [sp, #12]
 80055e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055ea:	601a      	str	r2, [r3, #0]

  dmaStreamSetMemory0(spip->dmatx, &spip->txsource);
 80055ec:	9b03      	ldr	r3, [sp, #12]
 80055ee:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80055f2:	9b03      	ldr	r3, [sp, #12]
 80055f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 80055fa:	9b03      	ldr	r3, [sp, #12]
 80055fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	9a02      	ldr	r2, [sp, #8]
 8005602:	605a      	str	r2, [r3, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode);
 8005604:	9b03      	ldr	r3, [sp, #12]
 8005606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	9a03      	ldr	r2, [sp, #12]
 800560c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800560e:	601a      	str	r2, [r3, #0]

  dmaStreamEnable(spip->dmarx);
 8005610:	9b03      	ldr	r3, [sp, #12]
 8005612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	9b03      	ldr	r3, [sp, #12]
 800561a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f042 0201 	orr.w	r2, r2, #1
 8005622:	601a      	str	r2, [r3, #0]
  dmaStreamEnable(spip->dmatx);
 8005624:	9b03      	ldr	r3, [sp, #12]
 8005626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	9b03      	ldr	r3, [sp, #12]
 800562e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f042 0201 	orr.w	r2, r2, #1
 8005636:	601a      	str	r2, [r3, #0]

  spip->spi->CR1 |= SPI_CR1_SPE;
 8005638:	9b03      	ldr	r3, [sp, #12]
 800563a:	69db      	ldr	r3, [r3, #28]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	9b03      	ldr	r3, [sp, #12]
 8005640:	69db      	ldr	r3, [r3, #28]
 8005642:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005646:	601a      	str	r2, [r3, #0]

  return HAL_RET_SUCCESS;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	b004      	add	sp, #16
 800564e:	4770      	bx	lr

08005650 <chSysLockFromISR.lto_priv.2>:
static inline void chSysLockFromISR(void) {
 8005650:	b082      	sub	sp, #8
 8005652:	2330      	movs	r3, #48	; 0x30
 8005654:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8005656:	9b01      	ldr	r3, [sp, #4]
 8005658:	f383 8811 	msr	BASEPRI, r3
}
 800565c:	bf00      	nop
}
 800565e:	bf00      	nop
}
 8005660:	bf00      	nop
}
 8005662:	bf00      	nop
 8005664:	b002      	add	sp, #8
 8005666:	4770      	bx	lr
	...

08005670 <chSysUnlockFromISR.lto_priv.2>:
static inline void chSysUnlockFromISR(void) {
 8005670:	b082      	sub	sp, #8
 8005672:	2300      	movs	r3, #0
 8005674:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8005676:	9b01      	ldr	r3, [sp, #4]
 8005678:	f383 8811 	msr	BASEPRI, r3
}
 800567c:	bf00      	nop
}
 800567e:	bf00      	nop
}
 8005680:	bf00      	nop
}
 8005682:	bf00      	nop
 8005684:	b002      	add	sp, #8
 8005686:	4770      	bx	lr
	...

08005690 <osalSysLockFromISR.lto_priv.2>:
static inline void osalSysLockFromISR(void) {
 8005690:	b508      	push	{r3, lr}
  chSysLockFromISR();
 8005692:	f7ff ffdd 	bl	8005650 <chSysLockFromISR.lto_priv.2>
}
 8005696:	bf00      	nop
 8005698:	bd08      	pop	{r3, pc}
 800569a:	bf00      	nop
 800569c:	0000      	movs	r0, r0
	...

080056a0 <osalSysUnlockFromISR.lto_priv.2>:
static inline void osalSysUnlockFromISR(void) {
 80056a0:	b508      	push	{r3, lr}
  chSysUnlockFromISR();
 80056a2:	f7ff ffe5 	bl	8005670 <chSysUnlockFromISR.lto_priv.2>
}
 80056a6:	bf00      	nop
 80056a8:	bd08      	pop	{r3, pc}
 80056aa:	bf00      	nop
 80056ac:	0000      	movs	r0, r0
	...

080056b0 <osalOsTimerHandlerI>:
static inline void osalOsTimerHandlerI(void) {
 80056b0:	b508      	push	{r3, lr}
  chSysTimerHandlerI();
 80056b2:	f000 fe85 	bl	80063c0 <chSysTimerHandlerI>
}
 80056b6:	bf00      	nop
 80056b8:	bd08      	pop	{r3, pc}
 80056ba:	bf00      	nop
 80056bc:	0000      	movs	r0, r0
	...

080056c0 <st_lld_init>:
                "clock rounding error");
  osalDbgAssert(((ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1U) < 0x10000,
                "clock prescaler overflow");

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 80056c0:	4b1b      	ldr	r3, [pc, #108]	; (8005730 <st_lld_init+0x70>)
 80056c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c4:	4a1a      	ldr	r2, [pc, #104]	; (8005730 <st_lld_init+0x70>)
 80056c6:	f043 0301 	orr.w	r3, r3, #1
 80056ca:	6413      	str	r3, [r2, #64]	; 0x40
 80056cc:	4b18      	ldr	r3, [pc, #96]	; (8005730 <st_lld_init+0x70>)
 80056ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056d0:	4a17      	ldr	r2, [pc, #92]	; (8005730 <st_lld_init+0x70>)
 80056d2:	f043 0301 	orr.w	r3, r3, #1
 80056d6:	6613      	str	r3, [r2, #96]	; 0x60
 80056d8:	4b15      	ldr	r3, [pc, #84]	; (8005730 <st_lld_init+0x70>)
 80056da:	6e1b      	ldr	r3, [r3, #96]	; 0x60

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80056dc:	4b15      	ldr	r3, [pc, #84]	; (8005734 <st_lld_init+0x74>)
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	4a14      	ldr	r2, [pc, #80]	; (8005734 <st_lld_init+0x74>)
 80056e2:	f043 0301 	orr.w	r3, r3, #1
 80056e6:	6093      	str	r3, [r2, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80056e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80056ec:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80056f0:	629a      	str	r2, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 80056f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80056f6:	f04f 32ff 	mov.w	r2, #4294967295
 80056fa:	62da      	str	r2, [r3, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 80056fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005700:	2200      	movs	r2, #0
 8005702:	619a      	str	r2, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8005704:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005708:	2200      	movs	r2, #0
 800570a:	635a      	str	r2, [r3, #52]	; 0x34
  STM32_ST_TIM->CCR[2] = 0;
#endif
#if ST_LLD_NUM_ALARMS > 3
  STM32_ST_TIM->CCR[3] = 0;
#endif
  STM32_ST_TIM->DIER   = 0;
 800570c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005710:	2200      	movs	r2, #0
 8005712:	60da      	str	r2, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 8005714:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005718:	2200      	movs	r2, #0
 800571a:	605a      	str	r2, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 800571c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005720:	2201      	movs	r2, #1
 8005722:	615a      	str	r2, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8005724:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005728:	2201      	movs	r2, #1
 800572a:	601a      	str	r2, [r3, #0]
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC */
}
 800572c:	bf00      	nop
 800572e:	4770      	bx	lr
 8005730:	40023800 	.word	0x40023800
 8005734:	e0042000 	.word	0xe0042000
	...

08005740 <st_lld_serve_interrupt>:

/**
 * @brief   IRQ handling code.
 */
void st_lld_serve_interrupt(void) {
 8005740:	b500      	push	{lr}
 8005742:	b083      	sub	sp, #12
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;
 8005744:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005748:	9301      	str	r3, [sp, #4]

  sr  = timp->SR;
 800574a:	9b01      	ldr	r3, [sp, #4]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	9300      	str	r3, [sp, #0]
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 8005750:	9b01      	ldr	r3, [sp, #4]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	b2db      	uxtb	r3, r3
 8005756:	9a00      	ldr	r2, [sp, #0]
 8005758:	4013      	ands	r3, r2
 800575a:	9300      	str	r3, [sp, #0]
  timp->SR = ~sr;
 800575c:	9b00      	ldr	r3, [sp, #0]
 800575e:	43da      	mvns	r2, r3
 8005760:	9b01      	ldr	r3, [sp, #4]
 8005762:	611a      	str	r2, [r3, #16]

  if ((sr & TIM_SR_CC1IF) != 0U)
 8005764:	9b00      	ldr	r3, [sp, #0]
 8005766:	f003 0302 	and.w	r3, r3, #2
 800576a:	2b00      	cmp	r3, #0
 800576c:	d005      	beq.n	800577a <st_lld_serve_interrupt+0x3a>
#endif
  {
    osalSysLockFromISR();
 800576e:	f7ff ff8f 	bl	8005690 <osalSysLockFromISR.lto_priv.2>
    osalOsTimerHandlerI();
 8005772:	f7ff ff9d 	bl	80056b0 <osalOsTimerHandlerI>
    osalSysUnlockFromISR();
 8005776:	f7ff ff93 	bl	80056a0 <osalSysUnlockFromISR.lto_priv.2>
      st_callbacks[2](3U);
    }
  }
#endif
#endif
}
 800577a:	bf00      	nop
 800577c:	b003      	add	sp, #12
 800577e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005782:	bf00      	nop
	...

08005790 <chSysLockFromISR.lto_priv.3>:
static inline void chSysLockFromISR(void) {
 8005790:	b082      	sub	sp, #8
 8005792:	2330      	movs	r3, #48	; 0x30
 8005794:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8005796:	9b01      	ldr	r3, [sp, #4]
 8005798:	f383 8811 	msr	BASEPRI, r3
}
 800579c:	bf00      	nop
}
 800579e:	bf00      	nop
}
 80057a0:	bf00      	nop
}
 80057a2:	bf00      	nop
 80057a4:	b002      	add	sp, #8
 80057a6:	4770      	bx	lr
	...

080057b0 <chSysUnlockFromISR.lto_priv.3>:
static inline void chSysUnlockFromISR(void) {
 80057b0:	b082      	sub	sp, #8
 80057b2:	2300      	movs	r3, #0
 80057b4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80057b6:	9b01      	ldr	r3, [sp, #4]
 80057b8:	f383 8811 	msr	BASEPRI, r3
}
 80057bc:	bf00      	nop
}
 80057be:	bf00      	nop
}
 80057c0:	bf00      	nop
}
 80057c2:	bf00      	nop
 80057c4:	b002      	add	sp, #8
 80057c6:	4770      	bx	lr
	...

080057d0 <osalSysLockFromISR.lto_priv.3>:
static inline void osalSysLockFromISR(void) {
 80057d0:	b508      	push	{r3, lr}
  chSysLockFromISR();
 80057d2:	f7ff ffdd 	bl	8005790 <chSysLockFromISR.lto_priv.3>
}
 80057d6:	bf00      	nop
 80057d8:	bd08      	pop	{r3, pc}
 80057da:	bf00      	nop
 80057dc:	0000      	movs	r0, r0
	...

080057e0 <osalSysUnlockFromISR.lto_priv.3>:
static inline void osalSysUnlockFromISR(void) {
 80057e0:	b508      	push	{r3, lr}
  chSysUnlockFromISR();
 80057e2:	f7ff ffe5 	bl	80057b0 <chSysUnlockFromISR.lto_priv.3>
}
 80057e6:	bf00      	nop
 80057e8:	bd08      	pop	{r3, pc}
 80057ea:	bf00      	nop
 80057ec:	0000      	movs	r0, r0
	...

080057f0 <osalEventBroadcastFlagsI.lto_priv.1>:
                                            eventflags_t flags) {
 80057f0:	b500      	push	{lr}
 80057f2:	b083      	sub	sp, #12
 80057f4:	9001      	str	r0, [sp, #4]
 80057f6:	9100      	str	r1, [sp, #0]
  chEvtBroadcastFlagsI(esp, flags);
 80057f8:	9900      	ldr	r1, [sp, #0]
 80057fa:	9801      	ldr	r0, [sp, #4]
 80057fc:	f002 f888 	bl	8007910 <chEvtBroadcastFlagsI>
}
 8005800:	bf00      	nop
 8005802:	b003      	add	sp, #12
 8005804:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005810 <usart_init>:
 * @details This function must be invoked with interrupts disabled.
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] config    the architecture-dependent serial driver configuration
 */
static void usart_init(SerialDriver *sdp, const SerialConfig *config) {
 8005810:	b084      	sub	sp, #16
 8005812:	9001      	str	r0, [sp, #4]
 8005814:	9100      	str	r1, [sp, #0]
  uint32_t brr;
  USART_TypeDef *u = sdp->usart;
 8005816:	9b01      	ldr	r3, [sp, #4]
 8005818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800581a:	9302      	str	r3, [sp, #8]

  brr = (uint32_t)((sdp->clock + config->speed/2) / config->speed);
 800581c:	9b01      	ldr	r3, [sp, #4]
 800581e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005820:	9b00      	ldr	r3, [sp, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	085b      	lsrs	r3, r3, #1
 8005826:	441a      	add	r2, r3
 8005828:	9b00      	ldr	r3, [sp, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005830:	9303      	str	r3, [sp, #12]

#if defined(USART_CR1_OVER8)
  /* Correcting BRR value when oversampling by 8 instead of 16.
     Fraction is still 4 bits wide, but only lower 3 bits used.
     Mantissa is doubled, but Fraction is left the same.*/
  if (config->cr1 & USART_CR1_OVER8)
 8005832:	9b00      	ldr	r3, [sp, #0]
 8005834:	889b      	ldrh	r3, [r3, #4]
 8005836:	b21b      	sxth	r3, r3
 8005838:	2b00      	cmp	r3, #0
 800583a:	da08      	bge.n	800584e <usart_init+0x3e>
    brr = ((brr & ~7) * 2) | (brr & 7);
 800583c:	9b03      	ldr	r3, [sp, #12]
 800583e:	f023 0307 	bic.w	r3, r3, #7
 8005842:	005a      	lsls	r2, r3, #1
 8005844:	9b03      	ldr	r3, [sp, #12]
 8005846:	f003 0307 	and.w	r3, r3, #7
 800584a:	4313      	orrs	r3, r2
 800584c:	9303      	str	r3, [sp, #12]
#endif

  osalDbgAssert(brr < 0x10000, "invalid BRR value");

  u->BRR = brr;
 800584e:	9b02      	ldr	r3, [sp, #8]
 8005850:	9a03      	ldr	r2, [sp, #12]
 8005852:	609a      	str	r2, [r3, #8]

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8005854:	9b00      	ldr	r3, [sp, #0]
 8005856:	88db      	ldrh	r3, [r3, #6]
 8005858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800585c:	b29b      	uxth	r3, r3
 800585e:	461a      	mov	r2, r3
 8005860:	9b02      	ldr	r3, [sp, #8]
 8005862:	611a      	str	r2, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8005864:	9b00      	ldr	r3, [sp, #0]
 8005866:	891b      	ldrh	r3, [r3, #8]
 8005868:	f043 0301 	orr.w	r3, r3, #1
 800586c:	b29b      	uxth	r3, r3
 800586e:	461a      	mov	r2, r3
 8005870:	9b02      	ldr	r3, [sp, #8]
 8005872:	615a      	str	r2, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8005874:	9b00      	ldr	r3, [sp, #0]
 8005876:	889b      	ldrh	r3, [r3, #4]
                         USART_CR1_RXNEIE | USART_CR1_TE |
 8005878:	f443 5304 	orr.w	r3, r3, #8448	; 0x2100
 800587c:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 8005880:	b29b      	uxth	r3, r3
 8005882:	461a      	mov	r2, r3
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8005884:	9b02      	ldr	r3, [sp, #8]
 8005886:	60da      	str	r2, [r3, #12]
                         USART_CR1_RE;
  u->SR = 0;
 8005888:	9b02      	ldr	r3, [sp, #8]
 800588a:	2200      	movs	r2, #0
 800588c:	601a      	str	r2, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 800588e:	9b02      	ldr	r3, [sp, #8]
 8005890:	681b      	ldr	r3, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8005892:	9b02      	ldr	r3, [sp, #8]
 8005894:	685b      	ldr	r3, [r3, #4]

  /* Deciding mask to be applied on the data register on receive, this is
     required in order to mask out the parity bit.*/
  if ((config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_PCE) {
 8005896:	9b00      	ldr	r3, [sp, #0]
 8005898:	889b      	ldrh	r3, [r3, #4]
 800589a:	f403 53a0 	and.w	r3, r3, #5120	; 0x1400
 800589e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058a2:	d104      	bne.n	80058ae <usart_init+0x9e>
    sdp->rxmask = 0x7F;
 80058a4:	9b01      	ldr	r3, [sp, #4]
 80058a6:	227f      	movs	r2, #127	; 0x7f
 80058a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  }
  else {
    sdp->rxmask = 0xFF;
  }
}
 80058ac:	e003      	b.n	80058b6 <usart_init+0xa6>
    sdp->rxmask = 0xFF;
 80058ae:	9b01      	ldr	r3, [sp, #4]
 80058b0:	22ff      	movs	r2, #255	; 0xff
 80058b2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
}
 80058b6:	bf00      	nop
 80058b8:	b004      	add	sp, #16
 80058ba:	4770      	bx	lr
 80058bc:	0000      	movs	r0, r0
	...

080058c0 <set_error>:
 * @brief   Error handling routine.
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] sr        USART SR register value
 */
static void set_error(SerialDriver *sdp, uint16_t sr) {
 80058c0:	b500      	push	{lr}
 80058c2:	b085      	sub	sp, #20
 80058c4:	9001      	str	r0, [sp, #4]
 80058c6:	460b      	mov	r3, r1
 80058c8:	f8ad 3002 	strh.w	r3, [sp, #2]
  eventflags_t sts = 0;
 80058cc:	2300      	movs	r3, #0
 80058ce:	9303      	str	r3, [sp, #12]

  if (sr & USART_SR_ORE)
 80058d0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80058d4:	f003 0308 	and.w	r3, r3, #8
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d003      	beq.n	80058e4 <set_error+0x24>
    sts |= SD_OVERRUN_ERROR;
 80058dc:	9b03      	ldr	r3, [sp, #12]
 80058de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058e2:	9303      	str	r3, [sp, #12]
  if (sr & USART_SR_PE)
 80058e4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80058e8:	f003 0301 	and.w	r3, r3, #1
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d003      	beq.n	80058f8 <set_error+0x38>
    sts |= SD_PARITY_ERROR;
 80058f0:	9b03      	ldr	r3, [sp, #12]
 80058f2:	f043 0320 	orr.w	r3, r3, #32
 80058f6:	9303      	str	r3, [sp, #12]
  if (sr & USART_SR_FE)
 80058f8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80058fc:	f003 0302 	and.w	r3, r3, #2
 8005900:	2b00      	cmp	r3, #0
 8005902:	d003      	beq.n	800590c <set_error+0x4c>
    sts |= SD_FRAMING_ERROR;
 8005904:	9b03      	ldr	r3, [sp, #12]
 8005906:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800590a:	9303      	str	r3, [sp, #12]
  if (sr & USART_SR_NE)
 800590c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8005910:	f003 0304 	and.w	r3, r3, #4
 8005914:	2b00      	cmp	r3, #0
 8005916:	d003      	beq.n	8005920 <set_error+0x60>
    sts |= SD_NOISE_ERROR;
 8005918:	9b03      	ldr	r3, [sp, #12]
 800591a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800591e:	9303      	str	r3, [sp, #12]
  chnAddFlagsI(sdp, sts);
 8005920:	9b01      	ldr	r3, [sp, #4]
 8005922:	3304      	adds	r3, #4
 8005924:	9903      	ldr	r1, [sp, #12]
 8005926:	4618      	mov	r0, r3
 8005928:	f7ff ff62 	bl	80057f0 <osalEventBroadcastFlagsI.lto_priv.1>
}
 800592c:	bf00      	nop
 800592e:	b005      	add	sp, #20
 8005930:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005940 <notify2>:
  USART1->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
}
#endif

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {
 8005940:	b082      	sub	sp, #8
 8005942:	9001      	str	r0, [sp, #4]

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8005944:	4b04      	ldr	r3, [pc, #16]	; (8005958 <notify2+0x18>)
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	4a03      	ldr	r2, [pc, #12]	; (8005958 <notify2+0x18>)
 800594a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800594e:	60d3      	str	r3, [r2, #12]
}
 8005950:	bf00      	nop
 8005952:	b002      	add	sp, #8
 8005954:	4770      	bx	lr
 8005956:	bf00      	nop
 8005958:	40004400 	.word	0x40004400
 800595c:	00000000 	.word	0x00000000

08005960 <sd_lld_init>:
/**
 * @brief   Low level serial driver initialization.
 *
 * @notapi
 */
void sd_lld_init(void) {
 8005960:	b508      	push	{r3, lr}
  nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
#endif
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
 8005962:	4a06      	ldr	r2, [pc, #24]	; (800597c <sd_lld_init+0x1c>)
 8005964:	2100      	movs	r1, #0
 8005966:	4806      	ldr	r0, [pc, #24]	; (8005980 <sd_lld_init+0x20>)
 8005968:	f7fd fa42 	bl	8002df0 <sdObjectInit>
  SD2.usart = USART2;
 800596c:	4b04      	ldr	r3, [pc, #16]	; (8005980 <sd_lld_init+0x20>)
 800596e:	4a05      	ldr	r2, [pc, #20]	; (8005984 <sd_lld_init+0x24>)
 8005970:	675a      	str	r2, [r3, #116]	; 0x74
  SD2.clock = STM32_PCLK1;
 8005972:	4b03      	ldr	r3, [pc, #12]	; (8005980 <sd_lld_init+0x20>)
 8005974:	4a04      	ldr	r2, [pc, #16]	; (8005988 <sd_lld_init+0x28>)
 8005976:	679a      	str	r2, [r3, #120]	; 0x78
  SD10.clock = STM32_PCLK2;
#if !defined(STM32_UART10_SUPPRESS_ISR) && defined(STM32_UART10_NUMBER)
  nvicEnableVector(STM32_UART10_NUMBER, STM32_SERIAL_UART10_PRIORITY);
#endif
#endif
}
 8005978:	bf00      	nop
 800597a:	bd08      	pop	{r3, pc}
 800597c:	08005941 	.word	0x08005941
 8005980:	20000d9c 	.word	0x20000d9c
 8005984:	40004400 	.word	0x40004400
 8005988:	0280de80 	.word	0x0280de80
 800598c:	00000000 	.word	0x00000000

08005990 <sd_lld_start>:
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {
 8005990:	b500      	push	{lr}
 8005992:	b083      	sub	sp, #12
 8005994:	9001      	str	r0, [sp, #4]
 8005996:	9100      	str	r1, [sp, #0]

  if (config == NULL)
 8005998:	9b00      	ldr	r3, [sp, #0]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d101      	bne.n	80059a2 <sd_lld_start+0x12>
    config = &default_config;
 800599e:	4b10      	ldr	r3, [pc, #64]	; (80059e0 <sd_lld_start+0x50>)
 80059a0:	9300      	str	r3, [sp, #0]

  if (sdp->state == SD_STOP) {
 80059a2:	9b01      	ldr	r3, [sp, #4]
 80059a4:	7a1b      	ldrb	r3, [r3, #8]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d111      	bne.n	80059ce <sd_lld_start+0x3e>
    if (&SD1 == sdp) {
      rccEnableUSART1(true);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
 80059aa:	9b01      	ldr	r3, [sp, #4]
 80059ac:	4a0d      	ldr	r2, [pc, #52]	; (80059e4 <sd_lld_start+0x54>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d10d      	bne.n	80059ce <sd_lld_start+0x3e>
      rccEnableUSART2(true);
 80059b2:	4b0d      	ldr	r3, [pc, #52]	; (80059e8 <sd_lld_start+0x58>)
 80059b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b6:	4a0c      	ldr	r2, [pc, #48]	; (80059e8 <sd_lld_start+0x58>)
 80059b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059bc:	6413      	str	r3, [r2, #64]	; 0x40
 80059be:	4b0a      	ldr	r3, [pc, #40]	; (80059e8 <sd_lld_start+0x58>)
 80059c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059c2:	4a09      	ldr	r2, [pc, #36]	; (80059e8 <sd_lld_start+0x58>)
 80059c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059c8:	6613      	str	r3, [r2, #96]	; 0x60
 80059ca:	4b07      	ldr	r3, [pc, #28]	; (80059e8 <sd_lld_start+0x58>)
 80059cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    if (&SD10 == sdp) {
      rccEnableUART10(true);
    }
#endif
  }
  usart_init(sdp, config);
 80059ce:	9900      	ldr	r1, [sp, #0]
 80059d0:	9801      	ldr	r0, [sp, #4]
 80059d2:	f7ff ff1d 	bl	8005810 <usart_init>
}
 80059d6:	bf00      	nop
 80059d8:	b003      	add	sp, #12
 80059da:	f85d fb04 	ldr.w	pc, [sp], #4
 80059de:	bf00      	nop
 80059e0:	0800ed30 	.word	0x0800ed30
 80059e4:	20000d9c 	.word	0x20000d9c
 80059e8:	40023800 	.word	0x40023800
 80059ec:	00000000 	.word	0x00000000

080059f0 <sd_lld_serve_interrupt>:
/**
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
void sd_lld_serve_interrupt(SerialDriver *sdp) {
 80059f0:	b500      	push	{lr}
 80059f2:	b089      	sub	sp, #36	; 0x24
 80059f4:	9001      	str	r0, [sp, #4]
  USART_TypeDef *u = sdp->usart;
 80059f6:	9b01      	ldr	r3, [sp, #4]
 80059f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059fa:	9306      	str	r3, [sp, #24]
  uint16_t cr1 = u->CR1;
 80059fc:	9b06      	ldr	r3, [sp, #24]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	f8ad 3016 	strh.w	r3, [sp, #22]
  uint16_t sr = u->SR;
 8005a04:	9b06      	ldr	r3, [sp, #24]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f8ad 301e 	strh.w	r3, [sp, #30]

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 8005a0c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8005a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00e      	beq.n	8005a36 <sd_lld_serve_interrupt+0x46>
    osalSysLockFromISR();
 8005a18:	f7ff feda 	bl	80057d0 <osalSysLockFromISR.lto_priv.3>
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
 8005a1c:	9b01      	ldr	r3, [sp, #4]
 8005a1e:	3304      	adds	r3, #4
 8005a20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005a24:	4618      	mov	r0, r3
 8005a26:	f7ff fee3 	bl	80057f0 <osalEventBroadcastFlagsI.lto_priv.1>
    u->SR = ~USART_SR_LBD;
 8005a2a:	9b06      	ldr	r3, [sp, #24]
 8005a2c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005a30:	601a      	str	r2, [r3, #0]
    osalSysUnlockFromISR();
 8005a32:	f7ff fed5 	bl	80057e0 <osalSysUnlockFromISR.lto_priv.3>
  }

  /* Data available.*/
  osalSysLockFromISR();
 8005a36:	f7ff fecb 	bl	80057d0 <osalSysLockFromISR.lto_priv.3>
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8005a3a:	e024      	b.n	8005a86 <sd_lld_serve_interrupt+0x96>
               USART_SR_PE)) {
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8005a3c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8005a40:	f003 030f 	and.w	r3, r3, #15
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d005      	beq.n	8005a54 <sd_lld_serve_interrupt+0x64>
      set_error(sdp, sr);
 8005a48:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	9801      	ldr	r0, [sp, #4]
 8005a50:	f7ff ff36 	bl	80058c0 <set_error>
    b = (uint8_t)u->DR & sdp->rxmask;
 8005a54:	9b06      	ldr	r3, [sp, #24]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	b2da      	uxtb	r2, r3
 8005a5a:	9b01      	ldr	r3, [sp, #4]
 8005a5c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005a60:	4013      	ands	r3, r2
 8005a62:	f88d 300f 	strb.w	r3, [sp, #15]
    if (sr & USART_SR_RXNE)
 8005a66:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8005a6a:	f003 0320 	and.w	r3, r3, #32
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d005      	beq.n	8005a7e <sd_lld_serve_interrupt+0x8e>
      sdIncomingDataI(sdp, b);
 8005a72:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8005a76:	4619      	mov	r1, r3
 8005a78:	9801      	ldr	r0, [sp, #4]
 8005a7a:	f7fd fa09 	bl	8002e90 <sdIncomingDataI>
    sr = u->SR;
 8005a7e:	9b06      	ldr	r3, [sp, #24]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f8ad 301e 	strh.w	r3, [sp, #30]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8005a86:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8005a8a:	f003 032f 	and.w	r3, r3, #47	; 0x2f
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1d4      	bne.n	8005a3c <sd_lld_serve_interrupt+0x4c>
  }
  osalSysUnlockFromISR();
 8005a92:	f7ff fea5 	bl	80057e0 <osalSysUnlockFromISR.lto_priv.3>

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8005a96:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8005a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d022      	beq.n	8005ae8 <sd_lld_serve_interrupt+0xf8>
 8005aa2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8005aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d01c      	beq.n	8005ae8 <sd_lld_serve_interrupt+0xf8>
    msg_t b;
    osalSysLockFromISR();
 8005aae:	f7ff fe8f 	bl	80057d0 <osalSysLockFromISR.lto_priv.3>
    b = oqGetI(&sdp->oqueue);
 8005ab2:	9b01      	ldr	r3, [sp, #4]
 8005ab4:	3330      	adds	r3, #48	; 0x30
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7fc f98a 	bl	8001dd0 <oqGetI>
 8005abc:	9004      	str	r0, [sp, #16]
    if (b < MSG_OK) {
 8005abe:	9b04      	ldr	r3, [sp, #16]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	da0c      	bge.n	8005ade <sd_lld_serve_interrupt+0xee>
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
 8005ac4:	9b01      	ldr	r3, [sp, #4]
 8005ac6:	3304      	adds	r3, #4
 8005ac8:	2108      	movs	r1, #8
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7ff fe90 	bl	80057f0 <osalEventBroadcastFlagsI.lto_priv.1>
      u->CR1 = cr1 & ~USART_CR1_TXEIE;
 8005ad0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8005ad4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ad8:	9b06      	ldr	r3, [sp, #24]
 8005ada:	60da      	str	r2, [r3, #12]
 8005adc:	e002      	b.n	8005ae4 <sd_lld_serve_interrupt+0xf4>
    }
    else
      u->DR = b;
 8005ade:	9a04      	ldr	r2, [sp, #16]
 8005ae0:	9b06      	ldr	r3, [sp, #24]
 8005ae2:	605a      	str	r2, [r3, #4]
    osalSysUnlockFromISR();
 8005ae4:	f7ff fe7c 	bl	80057e0 <osalSysUnlockFromISR.lto_priv.3>
  }

  /* Physical transmission end.*/
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 8005ae8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8005aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d027      	beq.n	8005b44 <sd_lld_serve_interrupt+0x154>
 8005af4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8005af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d021      	beq.n	8005b44 <sd_lld_serve_interrupt+0x154>
    osalSysLockFromISR();
 8005b00:	f7ff fe66 	bl	80057d0 <osalSysLockFromISR.lto_priv.3>
    if (oqIsEmptyI(&sdp->oqueue)) {
 8005b04:	9b01      	ldr	r3, [sp, #4]
 8005b06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b08:	9b01      	ldr	r3, [sp, #4]
 8005b0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d105      	bne.n	8005b1c <sd_lld_serve_interrupt+0x12c>
 8005b10:	9b01      	ldr	r3, [sp, #4]
 8005b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d001      	beq.n	8005b1c <sd_lld_serve_interrupt+0x12c>
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e000      	b.n	8005b1e <sd_lld_serve_interrupt+0x12e>
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00b      	beq.n	8005b40 <sd_lld_serve_interrupt+0x150>
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
 8005b28:	9b01      	ldr	r3, [sp, #4]
 8005b2a:	3304      	adds	r3, #4
 8005b2c:	2110      	movs	r1, #16
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f7ff fe5e 	bl	80057f0 <osalEventBroadcastFlagsI.lto_priv.1>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 8005b34:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8005b38:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005b3c:	9b06      	ldr	r3, [sp, #24]
 8005b3e:	60da      	str	r2, [r3, #12]
    }
    osalSysUnlockFromISR();
 8005b40:	f7ff fe4e 	bl	80057e0 <osalSysUnlockFromISR.lto_priv.3>
  }
}
 8005b44:	bf00      	nop
 8005b46:	b009      	add	sp, #36	; 0x24
 8005b48:	f85d fb04 	ldr.w	pc, [sp], #4
 8005b4c:	0000      	movs	r0, r0
	...

08005b50 <osalSysHalt.lto_priv.2>:
static inline void osalSysHalt(const char *reason) {
 8005b50:	b500      	push	{lr}
 8005b52:	b083      	sub	sp, #12
 8005b54:	9001      	str	r0, [sp, #4]
  chSysHalt(reason);
 8005b56:	9801      	ldr	r0, [sp, #4]
 8005b58:	f000 fc1a 	bl	8006390 <chSysHalt>
}
 8005b5c:	bf00      	nop
 8005b5e:	b003      	add	sp, #12
 8005b60:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005b70 <translate_errors>:
 *
 * @param[in] sr        USART SR register value
 *
 * @return  The error flags.
 */
static uartflags_t translate_errors(uint16_t sr) {
 8005b70:	b084      	sub	sp, #16
 8005b72:	4603      	mov	r3, r0
 8005b74:	f8ad 3006 	strh.w	r3, [sp, #6]
  uartflags_t sts = 0;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	9303      	str	r3, [sp, #12]

  if (sr & USART_SR_ORE)
 8005b7c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005b80:	f003 0308 	and.w	r3, r3, #8
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d003      	beq.n	8005b90 <translate_errors+0x20>
    sts |= UART_OVERRUN_ERROR;
 8005b88:	9b03      	ldr	r3, [sp, #12]
 8005b8a:	f043 0310 	orr.w	r3, r3, #16
 8005b8e:	9303      	str	r3, [sp, #12]
  if (sr & USART_SR_PE)
 8005b90:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005b94:	f003 0301 	and.w	r3, r3, #1
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d003      	beq.n	8005ba4 <translate_errors+0x34>
    sts |= UART_PARITY_ERROR;
 8005b9c:	9b03      	ldr	r3, [sp, #12]
 8005b9e:	f043 0304 	orr.w	r3, r3, #4
 8005ba2:	9303      	str	r3, [sp, #12]
  if (sr & USART_SR_FE)
 8005ba4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005ba8:	f003 0302 	and.w	r3, r3, #2
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d003      	beq.n	8005bb8 <translate_errors+0x48>
    sts |= UART_FRAMING_ERROR;
 8005bb0:	9b03      	ldr	r3, [sp, #12]
 8005bb2:	f043 0308 	orr.w	r3, r3, #8
 8005bb6:	9303      	str	r3, [sp, #12]
  if (sr & USART_SR_NE)
 8005bb8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005bbc:	f003 0304 	and.w	r3, r3, #4
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d003      	beq.n	8005bcc <translate_errors+0x5c>
    sts |= UART_NOISE_ERROR;
 8005bc4:	9b03      	ldr	r3, [sp, #12]
 8005bc6:	f043 0320 	orr.w	r3, r3, #32
 8005bca:	9303      	str	r3, [sp, #12]
  if (sr & USART_SR_LBD)
 8005bcc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d003      	beq.n	8005be0 <translate_errors+0x70>
    sts |= UART_BREAK_DETECTED;
 8005bd8:	9b03      	ldr	r3, [sp, #12]
 8005bda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bde:	9303      	str	r3, [sp, #12]
  return sts;
 8005be0:	9b03      	ldr	r3, [sp, #12]
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	b004      	add	sp, #16
 8005be6:	4770      	bx	lr
	...

08005bf0 <uart_enter_rx_idle_loop>:
/**
 * @brief   Puts the receiver in the UART_RX_IDLE state.
 *
 * @param[in] uartp     pointer to the @p UARTDriver object
 */
static void uart_enter_rx_idle_loop(UARTDriver *uartp) {
 8005bf0:	b084      	sub	sp, #16
 8005bf2:	9001      	str	r0, [sp, #4]
  uint32_t mode;

  /* RX DMA channel preparation, if the char callback is defined then the
     TCIE interrupt is enabled too.*/
  if (uartp->config->rxchar_cb == NULL)
 8005bf4:	9b01      	ldr	r3, [sp, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d103      	bne.n	8005c06 <uart_enter_rx_idle_loop+0x16>
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC;
 8005bfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c02:	9303      	str	r3, [sp, #12]
 8005c04:	e002      	b.n	8005c0c <uart_enter_rx_idle_loop+0x1c>
  else
    mode = STM32_DMA_CR_DIR_P2M | STM32_DMA_CR_CIRC | STM32_DMA_CR_TCIE;
 8005c06:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005c0a:	9303      	str	r3, [sp, #12]
  dmaStreamSetMemory0(uartp->dmarx, &uartp->rxbuf);
 8005c0c:	9b01      	ldr	r3, [sp, #4]
 8005c0e:	f103 0220 	add.w	r2, r3, #32
 8005c12:	9b01      	ldr	r3, [sp, #4]
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(uartp->dmarx, 1);
 8005c1a:	9b01      	ldr	r3, [sp, #4]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2201      	movs	r2, #1
 8005c22:	605a      	str	r2, [r3, #4]
  dmaStreamSetMode(uartp->dmarx, uartp->dmarxmode | mode);
 8005c24:	9b01      	ldr	r3, [sp, #4]
 8005c26:	6919      	ldr	r1, [r3, #16]
 8005c28:	9b01      	ldr	r3, [sp, #4]
 8005c2a:	699b      	ldr	r3, [r3, #24]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	9a03      	ldr	r2, [sp, #12]
 8005c30:	430a      	orrs	r2, r1
 8005c32:	601a      	str	r2, [r3, #0]
  dmaStreamEnable(uartp->dmarx);
 8005c34:	9b01      	ldr	r3, [sp, #4]
 8005c36:	699b      	ldr	r3, [r3, #24]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	9b01      	ldr	r3, [sp, #4]
 8005c3e:	699b      	ldr	r3, [r3, #24]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f042 0201 	orr.w	r2, r2, #1
 8005c46:	601a      	str	r2, [r3, #0]
}
 8005c48:	bf00      	nop
 8005c4a:	b004      	add	sp, #16
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop

08005c50 <usart_stop>:
 * @brief   USART de-initialization.
 * @details This function must be invoked with interrupts disabled.
 *
 * @param[in] uartp     pointer to the @p UARTDriver object
 */
static void usart_stop(UARTDriver *uartp) {
 8005c50:	b082      	sub	sp, #8
 8005c52:	9001      	str	r0, [sp, #4]

  /* Stops RX and TX DMA channels.*/
  dmaStreamDisable(uartp->dmarx);
 8005c54:	9b01      	ldr	r3, [sp, #4]
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	9b01      	ldr	r3, [sp, #4]
 8005c5e:	699b      	ldr	r3, [r3, #24]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f022 021f 	bic.w	r2, r2, #31
 8005c66:	601a      	str	r2, [r3, #0]
 8005c68:	9b01      	ldr	r3, [sp, #4]
 8005c6a:	699b      	ldr	r3, [r3, #24]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0301 	and.w	r3, r3, #1
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1f7      	bne.n	8005c68 <usart_stop+0x18>
 8005c78:	9b01      	ldr	r3, [sp, #4]
 8005c7a:	699b      	ldr	r3, [r3, #24]
 8005c7c:	7a5b      	ldrb	r3, [r3, #9]
 8005c7e:	4619      	mov	r1, r3
 8005c80:	9b01      	ldr	r3, [sp, #4]
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	223d      	movs	r2, #61	; 0x3d
 8005c88:	408a      	lsls	r2, r1
 8005c8a:	601a      	str	r2, [r3, #0]
  dmaStreamDisable(uartp->dmatx);
 8005c8c:	9b01      	ldr	r3, [sp, #4]
 8005c8e:	69db      	ldr	r3, [r3, #28]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	9b01      	ldr	r3, [sp, #4]
 8005c96:	69db      	ldr	r3, [r3, #28]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f022 021f 	bic.w	r2, r2, #31
 8005c9e:	601a      	str	r2, [r3, #0]
 8005ca0:	9b01      	ldr	r3, [sp, #4]
 8005ca2:	69db      	ldr	r3, [r3, #28]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0301 	and.w	r3, r3, #1
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1f7      	bne.n	8005ca0 <usart_stop+0x50>
 8005cb0:	9b01      	ldr	r3, [sp, #4]
 8005cb2:	69db      	ldr	r3, [r3, #28]
 8005cb4:	7a5b      	ldrb	r3, [r3, #9]
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	9b01      	ldr	r3, [sp, #4]
 8005cba:	69db      	ldr	r3, [r3, #28]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	223d      	movs	r2, #61	; 0x3d
 8005cc0:	408a      	lsls	r2, r1
 8005cc2:	601a      	str	r2, [r3, #0]

  /* Stops USART operations.*/
  uartp->usart->CR1 = 0;
 8005cc4:	9b01      	ldr	r3, [sp, #4]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	60da      	str	r2, [r3, #12]
  uartp->usart->CR2 = 0;
 8005ccc:	9b01      	ldr	r3, [sp, #4]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	611a      	str	r2, [r3, #16]
  uartp->usart->CR3 = 0;
 8005cd4:	9b01      	ldr	r3, [sp, #4]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	615a      	str	r2, [r3, #20]
}
 8005cdc:	bf00      	nop
 8005cde:	b002      	add	sp, #8
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
	...

08005cf0 <usart_start>:
 * @brief   USART initialization.
 * @details This function must be invoked with interrupts disabled.
 *
 * @param[in] uartp     pointer to the @p UARTDriver object
 */
static void usart_start(UARTDriver *uartp) {
 8005cf0:	b500      	push	{lr}
 8005cf2:	b087      	sub	sp, #28
 8005cf4:	9001      	str	r0, [sp, #4]
  uint32_t fck;
  uint16_t cr1;
  USART_TypeDef *u = uartp->usart;
 8005cf6:	9b01      	ldr	r3, [sp, #4]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	9304      	str	r3, [sp, #16]

  /* Defensive programming, starting from a clean state.*/
  usart_stop(uartp);
 8005cfc:	9801      	ldr	r0, [sp, #4]
 8005cfe:	f7ff ffa7 	bl	8005c50 <usart_stop>

  /* Baud rate setting.*/
  fck = (uint32_t)((uartp->clock + uartp->config->speed/2) / uartp->config->speed);
 8005d02:	9b01      	ldr	r3, [sp, #4]
 8005d04:	68da      	ldr	r2, [r3, #12]
 8005d06:	9b01      	ldr	r3, [sp, #4]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	085b      	lsrs	r3, r3, #1
 8005d0e:	441a      	add	r2, r3
 8005d10:	9b01      	ldr	r3, [sp, #4]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	699b      	ldr	r3, [r3, #24]
 8005d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d1a:	9305      	str	r3, [sp, #20]

  /* Correcting USARTDIV when oversampling by 8 instead of 16.
     Fraction is still 4 bits wide, but only lower 3 bits used.
     Mantissa is doubled, but Fraction is left the same.*/
#if defined(USART_CR1_OVER8)
  if (uartp->config->cr1 & USART_CR1_OVER8)
 8005d1c:	9b01      	ldr	r3, [sp, #4]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	8b9b      	ldrh	r3, [r3, #28]
 8005d22:	b21b      	sxth	r3, r3
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	da08      	bge.n	8005d3a <usart_start+0x4a>
    fck = ((fck & ~7) * 2) | (fck & 7);
 8005d28:	9b05      	ldr	r3, [sp, #20]
 8005d2a:	f023 0307 	bic.w	r3, r3, #7
 8005d2e:	005a      	lsls	r2, r3, #1
 8005d30:	9b05      	ldr	r3, [sp, #20]
 8005d32:	f003 0307 	and.w	r3, r3, #7
 8005d36:	4313      	orrs	r3, r2
 8005d38:	9305      	str	r3, [sp, #20]
#endif
  u->BRR = fck;
 8005d3a:	9b04      	ldr	r3, [sp, #16]
 8005d3c:	9a05      	ldr	r2, [sp, #20]
 8005d3e:	609a      	str	r2, [r3, #8]

  /* Resetting eventual pending status flags.*/
  (void)u->SR;  /* SR reset step 1.*/
 8005d40:	9b04      	ldr	r3, [sp, #16]
 8005d42:	681b      	ldr	r3, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8005d44:	9b04      	ldr	r3, [sp, #16]
 8005d46:	685b      	ldr	r3, [r3, #4]
  u->SR = 0;
 8005d48:	9b04      	ldr	r3, [sp, #16]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	601a      	str	r2, [r3, #0]

  /* Note that some bits are enforced because required for correct driver
     operations.*/
  u->CR2 = uartp->config->cr2 | USART_CR2_LBDIE;
 8005d4e:	9b01      	ldr	r3, [sp, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	8bdb      	ldrh	r3, [r3, #30]
 8005d54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	9b04      	ldr	r3, [sp, #16]
 8005d5e:	611a      	str	r2, [r3, #16]
  u->CR3 = uartp->config->cr3 | USART_CR3_DMAT | USART_CR3_DMAR |
 8005d60:	9b01      	ldr	r3, [sp, #4]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	8c1b      	ldrh	r3, [r3, #32]
 8005d66:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	9b04      	ldr	r3, [sp, #16]
 8005d70:	615a      	str	r2, [r3, #20]
                                USART_CR3_EIE;

  /* Mustn't ever set TCIE here - if done, it causes an immediate
     interrupt.*/
  cr1 = USART_CR1_UE | USART_CR1_PEIE | USART_CR1_TE | USART_CR1_RE;
 8005d72:	f242 130c 	movw	r3, #8460	; 0x210c
 8005d76:	f8ad 300e 	strh.w	r3, [sp, #14]
  u->CR1 = uartp->config->cr1 | cr1;
 8005d7a:	9b01      	ldr	r3, [sp, #4]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	8b9a      	ldrh	r2, [r3, #28]
 8005d80:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	461a      	mov	r2, r3
 8005d8a:	9b04      	ldr	r3, [sp, #16]
 8005d8c:	60da      	str	r2, [r3, #12]

  /* Starting the receiver idle loop.*/
  uart_enter_rx_idle_loop(uartp);
 8005d8e:	9801      	ldr	r0, [sp, #4]
 8005d90:	f7ff ff2e 	bl	8005bf0 <uart_enter_rx_idle_loop>
}
 8005d94:	bf00      	nop
 8005d96:	b007      	add	sp, #28
 8005d98:	f85d fb04 	ldr.w	pc, [sp], #4
 8005d9c:	0000      	movs	r0, r0
	...

08005da0 <uart_lld_serve_rx_end_irq>:
 * @brief   RX DMA common service routine.
 *
 * @param[in] uartp     pointer to the @p UARTDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void uart_lld_serve_rx_end_irq(UARTDriver *uartp, uint32_t flags) {
 8005da0:	b500      	push	{lr}
 8005da2:	b083      	sub	sp, #12
 8005da4:	9001      	str	r0, [sp, #4]
 8005da6:	9100      	str	r1, [sp, #0]

  /* DMA errors handling.*/
#if defined(STM32_UART_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8005da8:	9b00      	ldr	r3, [sp, #0]
 8005daa:	f003 030c 	and.w	r3, r3, #12
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d002      	beq.n	8005db8 <uart_lld_serve_rx_end_irq+0x18>
    STM32_UART_DMA_ERROR_HOOK(uartp);
 8005db2:	4827      	ldr	r0, [pc, #156]	; (8005e50 <uart_lld_serve_rx_end_irq+0xb0>)
 8005db4:	f7ff fecc 	bl	8005b50 <osalSysHalt.lto_priv.2>
  }
#else
  (void)flags;
#endif

  if (uartp->rxstate == UART_RX_IDLE) {
 8005db8:	9b01      	ldr	r3, [sp, #4]
 8005dba:	789b      	ldrb	r3, [r3, #2]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d10e      	bne.n	8005dde <uart_lld_serve_rx_end_irq+0x3e>
    /* Receiver in idle state, a callback is generated, if enabled, for each
       received character and then the driver stays in the same state.*/
    _uart_rx_idle_code(uartp);
 8005dc0:	9b01      	ldr	r3, [sp, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d03d      	beq.n	8005e46 <uart_lld_serve_rx_end_irq+0xa6>
 8005dca:	9b01      	ldr	r3, [sp, #4]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	9a01      	ldr	r2, [sp, #4]
 8005dd2:	8c12      	ldrh	r2, [r2, #32]
 8005dd4:	b292      	uxth	r2, r2
 8005dd6:	4611      	mov	r1, r2
 8005dd8:	9801      	ldr	r0, [sp, #4]
 8005dda:	4798      	blx	r3
    /* Receiver in active state, a callback is generated, if enabled, after
       a completed transfer.*/
    dmaStreamDisable(uartp->dmarx);
    _uart_rx_complete_isr_code(uartp);
  }
}
 8005ddc:	e033      	b.n	8005e46 <uart_lld_serve_rx_end_irq+0xa6>
    dmaStreamDisable(uartp->dmarx);
 8005dde:	9b01      	ldr	r3, [sp, #4]
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	9b01      	ldr	r3, [sp, #4]
 8005de8:	699b      	ldr	r3, [r3, #24]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f022 021f 	bic.w	r2, r2, #31
 8005df0:	601a      	str	r2, [r3, #0]
 8005df2:	bf00      	nop
 8005df4:	9b01      	ldr	r3, [sp, #4]
 8005df6:	699b      	ldr	r3, [r3, #24]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0301 	and.w	r3, r3, #1
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d1f7      	bne.n	8005df4 <uart_lld_serve_rx_end_irq+0x54>
 8005e04:	9b01      	ldr	r3, [sp, #4]
 8005e06:	699b      	ldr	r3, [r3, #24]
 8005e08:	7a5b      	ldrb	r3, [r3, #9]
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	9b01      	ldr	r3, [sp, #4]
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	223d      	movs	r2, #61	; 0x3d
 8005e14:	408a      	lsls	r2, r1
 8005e16:	601a      	str	r2, [r3, #0]
    _uart_rx_complete_isr_code(uartp);
 8005e18:	9b01      	ldr	r3, [sp, #4]
 8005e1a:	2202      	movs	r2, #2
 8005e1c:	709a      	strb	r2, [r3, #2]
 8005e1e:	9b01      	ldr	r3, [sp, #4]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d004      	beq.n	8005e32 <uart_lld_serve_rx_end_irq+0x92>
 8005e28:	9b01      	ldr	r3, [sp, #4]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	9801      	ldr	r0, [sp, #4]
 8005e30:	4798      	blx	r3
 8005e32:	9b01      	ldr	r3, [sp, #4]
 8005e34:	789b      	ldrb	r3, [r3, #2]
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d105      	bne.n	8005e46 <uart_lld_serve_rx_end_irq+0xa6>
 8005e3a:	9b01      	ldr	r3, [sp, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	709a      	strb	r2, [r3, #2]
 8005e40:	9801      	ldr	r0, [sp, #4]
 8005e42:	f7ff fed5 	bl	8005bf0 <uart_enter_rx_idle_loop>
}
 8005e46:	bf00      	nop
 8005e48:	b003      	add	sp, #12
 8005e4a:	f85d fb04 	ldr.w	pc, [sp], #4
 8005e4e:	bf00      	nop
 8005e50:	0800ed24 	.word	0x0800ed24
	...

08005e60 <uart_lld_serve_tx_end_irq>:
 * @brief   TX DMA common service routine.
 *
 * @param[in] uartp     pointer to the @p UARTDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void uart_lld_serve_tx_end_irq(UARTDriver *uartp, uint32_t flags) {
 8005e60:	b500      	push	{lr}
 8005e62:	b083      	sub	sp, #12
 8005e64:	9001      	str	r0, [sp, #4]
 8005e66:	9100      	str	r1, [sp, #0]

  /* DMA errors handling.*/
#if defined(STM32_UART_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8005e68:	9b00      	ldr	r3, [sp, #0]
 8005e6a:	f003 030c 	and.w	r3, r3, #12
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d002      	beq.n	8005e78 <uart_lld_serve_tx_end_irq+0x18>
    STM32_UART_DMA_ERROR_HOOK(uartp);
 8005e72:	481c      	ldr	r0, [pc, #112]	; (8005ee4 <uart_lld_serve_tx_end_irq+0x84>)
 8005e74:	f7ff fe6c 	bl	8005b50 <osalSysHalt.lto_priv.2>
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(uartp->dmatx);
 8005e78:	9b01      	ldr	r3, [sp, #4]
 8005e7a:	69db      	ldr	r3, [r3, #28]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	9b01      	ldr	r3, [sp, #4]
 8005e82:	69db      	ldr	r3, [r3, #28]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f022 021f 	bic.w	r2, r2, #31
 8005e8a:	601a      	str	r2, [r3, #0]
 8005e8c:	bf00      	nop
 8005e8e:	9b01      	ldr	r3, [sp, #4]
 8005e90:	69db      	ldr	r3, [r3, #28]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0301 	and.w	r3, r3, #1
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d1f7      	bne.n	8005e8e <uart_lld_serve_tx_end_irq+0x2e>
 8005e9e:	9b01      	ldr	r3, [sp, #4]
 8005ea0:	69db      	ldr	r3, [r3, #28]
 8005ea2:	7a5b      	ldrb	r3, [r3, #9]
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	9b01      	ldr	r3, [sp, #4]
 8005ea8:	69db      	ldr	r3, [r3, #28]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	223d      	movs	r2, #61	; 0x3d
 8005eae:	408a      	lsls	r2, r1
 8005eb0:	601a      	str	r2, [r3, #0]

  /* A callback is generated, if enabled, after a completed transfer.*/
  _uart_tx1_isr_code(uartp);
 8005eb2:	9b01      	ldr	r3, [sp, #4]
 8005eb4:	2202      	movs	r2, #2
 8005eb6:	705a      	strb	r2, [r3, #1]
 8005eb8:	9b01      	ldr	r3, [sp, #4]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d004      	beq.n	8005ecc <uart_lld_serve_tx_end_irq+0x6c>
 8005ec2:	9b01      	ldr	r3, [sp, #4]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	9801      	ldr	r0, [sp, #4]
 8005eca:	4798      	blx	r3
 8005ecc:	9b01      	ldr	r3, [sp, #4]
 8005ece:	785b      	ldrb	r3, [r3, #1]
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d102      	bne.n	8005eda <uart_lld_serve_tx_end_irq+0x7a>
 8005ed4:	9b01      	ldr	r3, [sp, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	705a      	strb	r2, [r3, #1]
}
 8005eda:	bf00      	nop
 8005edc:	b003      	add	sp, #12
 8005ede:	f85d fb04 	ldr.w	pc, [sp], #4
 8005ee2:	bf00      	nop
 8005ee4:	0800ed24 	.word	0x0800ed24
	...

08005ef0 <uart_lld_init>:
/**
 * @brief   Low level UART driver initialization.
 *
 * @notapi
 */
void uart_lld_init(void) {
 8005ef0:	b508      	push	{r3, lr}

#if STM32_UART_USE_USART1
  uartObjectInit(&UARTD1);
 8005ef2:	480b      	ldr	r0, [pc, #44]	; (8005f20 <uart_lld_init+0x30>)
 8005ef4:	f7fd f9c4 	bl	8003280 <uartObjectInit>
  UARTD1.usart   = USART1;
 8005ef8:	4b09      	ldr	r3, [pc, #36]	; (8005f20 <uart_lld_init+0x30>)
 8005efa:	4a0a      	ldr	r2, [pc, #40]	; (8005f24 <uart_lld_init+0x34>)
 8005efc:	609a      	str	r2, [r3, #8]
  UARTD1.clock   = STM32_PCLK2;
 8005efe:	4b08      	ldr	r3, [pc, #32]	; (8005f20 <uart_lld_init+0x30>)
 8005f00:	4a09      	ldr	r2, [pc, #36]	; (8005f28 <uart_lld_init+0x38>)
 8005f02:	60da      	str	r2, [r3, #12]
  UARTD1.dmarxmode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
 8005f04:	4b06      	ldr	r3, [pc, #24]	; (8005f20 <uart_lld_init+0x30>)
 8005f06:	2206      	movs	r2, #6
 8005f08:	611a      	str	r2, [r3, #16]
  UARTD1.dmatxmode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
 8005f0a:	4b05      	ldr	r3, [pc, #20]	; (8005f20 <uart_lld_init+0x30>)
 8005f0c:	2206      	movs	r2, #6
 8005f0e:	615a      	str	r2, [r3, #20]
  UARTD1.dmarx   = NULL;
 8005f10:	4b03      	ldr	r3, [pc, #12]	; (8005f20 <uart_lld_init+0x30>)
 8005f12:	2200      	movs	r2, #0
 8005f14:	619a      	str	r2, [r3, #24]
  UARTD1.dmatx   = NULL;
 8005f16:	4b02      	ldr	r3, [pc, #8]	; (8005f20 <uart_lld_init+0x30>)
 8005f18:	2200      	movs	r2, #0
 8005f1a:	61da      	str	r2, [r3, #28]
  UARTD10.dmarxmode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
  UARTD10.dmatxmode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
  UARTD10.dmarx   = NULL;
  UARTD10.dmatx   = NULL;
#endif
}
 8005f1c:	bf00      	nop
 8005f1e:	bd08      	pop	{r3, pc}
 8005f20:	20000e1c 	.word	0x20000e1c
 8005f24:	40011000 	.word	0x40011000
 8005f28:	0501bd00 	.word	0x0501bd00
 8005f2c:	00000000 	.word	0x00000000

08005f30 <uart_lld_start>:
 *
 * @param[in] uartp     pointer to the @p UARTDriver object
 *
 * @notapi
 */
void uart_lld_start(UARTDriver *uartp) {
 8005f30:	b500      	push	{lr}
 8005f32:	b083      	sub	sp, #12
 8005f34:	9001      	str	r0, [sp, #4]

  if (uartp->state == UART_STOP) {
 8005f36:	9b01      	ldr	r3, [sp, #4]
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d158      	bne.n	8005ff0 <uart_lld_start+0xc0>
#if STM32_UART_USE_USART1
    if (&UARTD1 == uartp) {
 8005f3e:	9b01      	ldr	r3, [sp, #4]
 8005f40:	4a32      	ldr	r2, [pc, #200]	; (800600c <uart_lld_start+0xdc>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d12f      	bne.n	8005fa6 <uart_lld_start+0x76>
      uartp->dmarx = dmaStreamAllocI(STM32_UART_USART1_RX_DMA_STREAM,
 8005f46:	9b01      	ldr	r3, [sp, #4]
 8005f48:	4a31      	ldr	r2, [pc, #196]	; (8006010 <uart_lld_start+0xe0>)
 8005f4a:	210c      	movs	r1, #12
 8005f4c:	200d      	movs	r0, #13
 8005f4e:	f7fd ff67 	bl	8003e20 <dmaStreamAllocI>
 8005f52:	4602      	mov	r2, r0
 8005f54:	9b01      	ldr	r3, [sp, #4]
 8005f56:	619a      	str	r2, [r3, #24]
                                     STM32_UART_USART1_IRQ_PRIORITY,
                                     (stm32_dmaisr_t)uart_lld_serve_rx_end_irq,
                                     (void *)uartp);
      osalDbgAssert(uartp->dmarx != NULL, "unable to allocate stream");
      uartp->dmatx = dmaStreamAllocI(STM32_UART_USART1_TX_DMA_STREAM,
 8005f58:	9b01      	ldr	r3, [sp, #4]
 8005f5a:	4a2e      	ldr	r2, [pc, #184]	; (8006014 <uart_lld_start+0xe4>)
 8005f5c:	210c      	movs	r1, #12
 8005f5e:	200f      	movs	r0, #15
 8005f60:	f7fd ff5e 	bl	8003e20 <dmaStreamAllocI>
 8005f64:	4602      	mov	r2, r0
 8005f66:	9b01      	ldr	r3, [sp, #4]
 8005f68:	61da      	str	r2, [r3, #28]
                                     STM32_UART_USART1_IRQ_PRIORITY,
                                     (stm32_dmaisr_t)uart_lld_serve_tx_end_irq,
                                     (void *)uartp);
      osalDbgAssert(uartp->dmatx != NULL, "unable to allocate stream");

      rccEnableUSART1(true);
 8005f6a:	4b2b      	ldr	r3, [pc, #172]	; (8006018 <uart_lld_start+0xe8>)
 8005f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f6e:	4a2a      	ldr	r2, [pc, #168]	; (8006018 <uart_lld_start+0xe8>)
 8005f70:	f043 0310 	orr.w	r3, r3, #16
 8005f74:	6453      	str	r3, [r2, #68]	; 0x44
 8005f76:	4b28      	ldr	r3, [pc, #160]	; (8006018 <uart_lld_start+0xe8>)
 8005f78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f7a:	4a27      	ldr	r2, [pc, #156]	; (8006018 <uart_lld_start+0xe8>)
 8005f7c:	f043 0310 	orr.w	r3, r3, #16
 8005f80:	6653      	str	r3, [r2, #100]	; 0x64
 8005f82:	4b25      	ldr	r3, [pc, #148]	; (8006018 <uart_lld_start+0xe8>)
 8005f84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
      nvicEnableVector(STM32_USART1_NUMBER, STM32_UART_USART1_IRQ_PRIORITY);
 8005f86:	210c      	movs	r1, #12
 8005f88:	2025      	movs	r0, #37	; 0x25
 8005f8a:	f7fd f9d1 	bl	8003330 <nvicEnableVector>
      uartp->dmarxmode |= STM32_DMA_CR_CHSEL(USART1_RX_DMA_CHANNEL) |
 8005f8e:	9b01      	ldr	r3, [sp, #4]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005f96:	9b01      	ldr	r3, [sp, #4]
 8005f98:	611a      	str	r2, [r3, #16]
                          STM32_DMA_CR_PL(STM32_UART_USART1_DMA_PRIORITY);
      uartp->dmatxmode |= STM32_DMA_CR_CHSEL(USART1_TX_DMA_CHANNEL) |
 8005f9a:	9b01      	ldr	r3, [sp, #4]
 8005f9c:	695b      	ldr	r3, [r3, #20]
 8005f9e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005fa2:	9b01      	ldr	r3, [sp, #4]
 8005fa4:	615a      	str	r2, [r3, #20]
    }
#endif

    /* Static DMA setup, the transfer size depends on the USART settings,
       it is 16 bits if M=1 and PCE=0 else it is 8 bits.*/
    if ((uartp->config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_M) {
 8005fa6:	9b01      	ldr	r3, [sp, #4]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	8b9b      	ldrh	r3, [r3, #28]
 8005fac:	f403 53a0 	and.w	r3, r3, #5120	; 0x1400
 8005fb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fb4:	d10b      	bne.n	8005fce <uart_lld_start+0x9e>
      uartp->dmarxmode |= STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8005fb6:	9b01      	ldr	r3, [sp, #4]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	f443 5220 	orr.w	r2, r3, #10240	; 0x2800
 8005fbe:	9b01      	ldr	r3, [sp, #4]
 8005fc0:	611a      	str	r2, [r3, #16]
      uartp->dmatxmode |= STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8005fc2:	9b01      	ldr	r3, [sp, #4]
 8005fc4:	695b      	ldr	r3, [r3, #20]
 8005fc6:	f443 5220 	orr.w	r2, r3, #10240	; 0x2800
 8005fca:	9b01      	ldr	r3, [sp, #4]
 8005fcc:	615a      	str	r2, [r3, #20]
    }
    dmaStreamSetPeripheral(uartp->dmarx, &uartp->usart->DR);
 8005fce:	9b01      	ldr	r3, [sp, #4]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	1d1a      	adds	r2, r3, #4
 8005fd4:	9b01      	ldr	r3, [sp, #4]
 8005fd6:	699b      	ldr	r3, [r3, #24]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	609a      	str	r2, [r3, #8]
    dmaStreamSetPeripheral(uartp->dmatx, &uartp->usart->DR);
 8005fdc:	9b01      	ldr	r3, [sp, #4]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	1d1a      	adds	r2, r3, #4
 8005fe2:	9b01      	ldr	r3, [sp, #4]
 8005fe4:	69db      	ldr	r3, [r3, #28]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	609a      	str	r2, [r3, #8]
    uartp->rxbuf = 0;
 8005fea:	9b01      	ldr	r3, [sp, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	841a      	strh	r2, [r3, #32]
  }

  uartp->rxstate = UART_RX_IDLE;
 8005ff0:	9b01      	ldr	r3, [sp, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	709a      	strb	r2, [r3, #2]
  uartp->txstate = UART_TX_IDLE;
 8005ff6:	9b01      	ldr	r3, [sp, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	705a      	strb	r2, [r3, #1]
  usart_start(uartp);
 8005ffc:	9801      	ldr	r0, [sp, #4]
 8005ffe:	f7ff fe77 	bl	8005cf0 <usart_start>
}
 8006002:	bf00      	nop
 8006004:	b003      	add	sp, #12
 8006006:	f85d fb04 	ldr.w	pc, [sp], #4
 800600a:	bf00      	nop
 800600c:	20000e1c 	.word	0x20000e1c
 8006010:	08005da1 	.word	0x08005da1
 8006014:	08005e61 	.word	0x08005e61
 8006018:	40023800 	.word	0x40023800
 800601c:	00000000 	.word	0x00000000

08006020 <uart_lld_stop>:
 *
 * @param[in] uartp     pointer to the @p UARTDriver object
 *
 * @notapi
 */
void uart_lld_stop(UARTDriver *uartp) {
 8006020:	b500      	push	{lr}
 8006022:	b083      	sub	sp, #12
 8006024:	9001      	str	r0, [sp, #4]

  if (uartp->state == UART_READY) {
 8006026:	9b01      	ldr	r3, [sp, #4]
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	2b02      	cmp	r3, #2
 800602c:	d128      	bne.n	8006080 <uart_lld_stop+0x60>
    usart_stop(uartp);
 800602e:	9801      	ldr	r0, [sp, #4]
 8006030:	f7ff fe0e 	bl	8005c50 <usart_stop>
    dmaStreamFreeI(uartp->dmarx);
 8006034:	9b01      	ldr	r3, [sp, #4]
 8006036:	699b      	ldr	r3, [r3, #24]
 8006038:	4618      	mov	r0, r3
 800603a:	f7fd ff89 	bl	8003f50 <dmaStreamFreeI>
    dmaStreamFreeI(uartp->dmatx);
 800603e:	9b01      	ldr	r3, [sp, #4]
 8006040:	69db      	ldr	r3, [r3, #28]
 8006042:	4618      	mov	r0, r3
 8006044:	f7fd ff84 	bl	8003f50 <dmaStreamFreeI>
    uartp->dmarx = NULL;
 8006048:	9b01      	ldr	r3, [sp, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	619a      	str	r2, [r3, #24]
    uartp->dmatx = NULL;
 800604e:	9b01      	ldr	r3, [sp, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	61da      	str	r2, [r3, #28]

#if STM32_UART_USE_USART1
    if (&UARTD1 == uartp) {
 8006054:	9b01      	ldr	r3, [sp, #4]
 8006056:	4a0c      	ldr	r2, [pc, #48]	; (8006088 <uart_lld_stop+0x68>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d111      	bne.n	8006080 <uart_lld_stop+0x60>
      nvicDisableVector(STM32_USART1_NUMBER);
 800605c:	2025      	movs	r0, #37	; 0x25
 800605e:	f7fd f997 	bl	8003390 <nvicDisableVector>
      rccDisableUSART1();
 8006062:	4b0a      	ldr	r3, [pc, #40]	; (800608c <uart_lld_stop+0x6c>)
 8006064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006066:	4a09      	ldr	r2, [pc, #36]	; (800608c <uart_lld_stop+0x6c>)
 8006068:	f023 0310 	bic.w	r3, r3, #16
 800606c:	6453      	str	r3, [r2, #68]	; 0x44
 800606e:	4b07      	ldr	r3, [pc, #28]	; (800608c <uart_lld_stop+0x6c>)
 8006070:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006072:	4a06      	ldr	r2, [pc, #24]	; (800608c <uart_lld_stop+0x6c>)
 8006074:	f023 0310 	bic.w	r3, r3, #16
 8006078:	6653      	str	r3, [r2, #100]	; 0x64
 800607a:	4b04      	ldr	r3, [pc, #16]	; (800608c <uart_lld_stop+0x6c>)
 800607c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
      return;
 800607e:	bf00      	nop
      rccDisableUART10();
      return;
    }
#endif
  }
}
 8006080:	b003      	add	sp, #12
 8006082:	f85d fb04 	ldr.w	pc, [sp], #4
 8006086:	bf00      	nop
 8006088:	20000e1c 	.word	0x20000e1c
 800608c:	40023800 	.word	0x40023800

08006090 <uart_lld_serve_interrupt>:
/**
 * @brief   USART common service routine.
 *
 * @param[in] uartp     pointer to the @p UARTDriver object
 */
void uart_lld_serve_interrupt(UARTDriver *uartp) {
 8006090:	b510      	push	{r4, lr}
 8006092:	b086      	sub	sp, #24
 8006094:	9001      	str	r0, [sp, #4]
  uint16_t sr;
  USART_TypeDef *u = uartp->usart;
 8006096:	9b01      	ldr	r3, [sp, #4]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	9305      	str	r3, [sp, #20]
  uint32_t cr1 = u->CR1;
 800609c:	9b05      	ldr	r3, [sp, #20]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	9304      	str	r3, [sp, #16]

  sr = u->SR;   /* SR reset step 1.*/
 80060a2:	9b05      	ldr	r3, [sp, #20]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f8ad 300e 	strh.w	r3, [sp, #14]
  (void)u->DR;  /* SR reset step 2.*/
 80060aa:	9b05      	ldr	r3, [sp, #20]
 80060ac:	685b      	ldr	r3, [r3, #4]

  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
 80060ae:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80060b2:	f240 130f 	movw	r3, #271	; 0x10f
 80060b6:	4013      	ands	r3, r2
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d014      	beq.n	80060e6 <uart_lld_serve_interrupt+0x56>
            USART_SR_FE  | USART_SR_PE)) {
    u->SR = ~USART_SR_LBD;
 80060bc:	9b05      	ldr	r3, [sp, #20]
 80060be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80060c2:	601a      	str	r2, [r3, #0]
    _uart_rx_error_isr_code(uartp, translate_errors(sr));
 80060c4:	9b01      	ldr	r3, [sp, #4]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00b      	beq.n	80060e6 <uart_lld_serve_interrupt+0x56>
 80060ce:	9b01      	ldr	r3, [sp, #4]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	691c      	ldr	r4, [r3, #16]
 80060d4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80060d8:	4618      	mov	r0, r3
 80060da:	f7ff fd49 	bl	8005b70 <translate_errors>
 80060de:	4603      	mov	r3, r0
 80060e0:	4619      	mov	r1, r3
 80060e2:	9801      	ldr	r0, [sp, #4]
 80060e4:	47a0      	blx	r4
  }

  if ((sr & USART_SR_TC) && (cr1 & USART_CR1_TCIE)) {
 80060e6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80060ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d017      	beq.n	8006122 <uart_lld_serve_interrupt+0x92>
 80060f2:	9b04      	ldr	r3, [sp, #16]
 80060f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d012      	beq.n	8006122 <uart_lld_serve_interrupt+0x92>
    /* TC interrupt cleared and disabled.*/
    u->SR = ~USART_SR_TC;
 80060fc:	9b05      	ldr	r3, [sp, #20]
 80060fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006102:	601a      	str	r2, [r3, #0]
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8006104:	9b04      	ldr	r3, [sp, #16]
 8006106:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800610a:	9b05      	ldr	r3, [sp, #20]
 800610c:	60da      	str	r2, [r3, #12]

    /* End of transmission, a callback is generated.*/
    _uart_tx2_isr_code(uartp);
 800610e:	9b01      	ldr	r3, [sp, #4]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d004      	beq.n	8006122 <uart_lld_serve_interrupt+0x92>
 8006118:	9b01      	ldr	r3, [sp, #4]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	9801      	ldr	r0, [sp, #4]
 8006120:	4798      	blx	r3
  }

  /* Timeout interrupt sources are only checked if enabled in CR1.*/
  if ((cr1 & USART_CR1_IDLEIE) && (sr & USART_SR_IDLE)) {
 8006122:	9b04      	ldr	r3, [sp, #16]
 8006124:	f003 0310 	and.w	r3, r3, #16
 8006128:	2b00      	cmp	r3, #0
 800612a:	d00f      	beq.n	800614c <uart_lld_serve_interrupt+0xbc>
 800612c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8006130:	f003 0310 	and.w	r3, r3, #16
 8006134:	2b00      	cmp	r3, #0
 8006136:	d009      	beq.n	800614c <uart_lld_serve_interrupt+0xbc>
    _uart_timeout_isr_code(uartp);
 8006138:	9b01      	ldr	r3, [sp, #4]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	695b      	ldr	r3, [r3, #20]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d004      	beq.n	800614c <uart_lld_serve_interrupt+0xbc>
 8006142:	9b01      	ldr	r3, [sp, #4]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	695b      	ldr	r3, [r3, #20]
 8006148:	9801      	ldr	r0, [sp, #4]
 800614a:	4798      	blx	r3
  }
}
 800614c:	bf00      	nop
 800614e:	b006      	add	sp, #24
 8006150:	bd10      	pop	{r4, pc}
 8006152:	bf00      	nop
	...

08006160 <gpio_init>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {
 8006160:	b082      	sub	sp, #8
 8006162:	9001      	str	r0, [sp, #4]
 8006164:	9100      	str	r1, [sp, #0]

  gpiop->OTYPER  = config->otyper;
 8006166:	9b00      	ldr	r3, [sp, #0]
 8006168:	685a      	ldr	r2, [r3, #4]
 800616a:	9b01      	ldr	r3, [sp, #4]
 800616c:	605a      	str	r2, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800616e:	9b00      	ldr	r3, [sp, #0]
 8006170:	689a      	ldr	r2, [r3, #8]
 8006172:	9b01      	ldr	r3, [sp, #4]
 8006174:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 8006176:	9b00      	ldr	r3, [sp, #0]
 8006178:	68da      	ldr	r2, [r3, #12]
 800617a:	9b01      	ldr	r3, [sp, #4]
 800617c:	60da      	str	r2, [r3, #12]
  gpiop->ODR     = config->odr;
 800617e:	9b00      	ldr	r3, [sp, #0]
 8006180:	691a      	ldr	r2, [r3, #16]
 8006182:	9b01      	ldr	r3, [sp, #4]
 8006184:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
 8006186:	9b00      	ldr	r3, [sp, #0]
 8006188:	695a      	ldr	r2, [r3, #20]
 800618a:	9b01      	ldr	r3, [sp, #4]
 800618c:	621a      	str	r2, [r3, #32]
  gpiop->AFRH    = config->afrh;
 800618e:	9b00      	ldr	r3, [sp, #0]
 8006190:	699a      	ldr	r2, [r3, #24]
 8006192:	9b01      	ldr	r3, [sp, #4]
 8006194:	625a      	str	r2, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8006196:	9b00      	ldr	r3, [sp, #0]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	9b01      	ldr	r3, [sp, #4]
 800619c:	601a      	str	r2, [r3, #0]
}
 800619e:	bf00      	nop
 80061a0:	b002      	add	sp, #8
 80061a2:	4770      	bx	lr
	...

080061b0 <stm32_gpio_init>:

static void stm32_gpio_init(void) {
 80061b0:	b508      	push	{r3, lr}

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80061b2:	4b1b      	ldr	r3, [pc, #108]	; (8006220 <stm32_gpio_init+0x70>)
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	4a1a      	ldr	r2, [pc, #104]	; (8006220 <stm32_gpio_init+0x70>)
 80061b8:	f043 031f 	orr.w	r3, r3, #31
 80061bc:	6113      	str	r3, [r2, #16]
 80061be:	4b18      	ldr	r3, [pc, #96]	; (8006220 <stm32_gpio_init+0x70>)
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	4a17      	ldr	r2, [pc, #92]	; (8006220 <stm32_gpio_init+0x70>)
 80061c4:	f023 031f 	bic.w	r3, r3, #31
 80061c8:	6113      	str	r3, [r2, #16]
 80061ca:	4b15      	ldr	r3, [pc, #84]	; (8006220 <stm32_gpio_init+0x70>)
 80061cc:	691b      	ldr	r3, [r3, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 80061ce:	4b14      	ldr	r3, [pc, #80]	; (8006220 <stm32_gpio_init+0x70>)
 80061d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d2:	4a13      	ldr	r2, [pc, #76]	; (8006220 <stm32_gpio_init+0x70>)
 80061d4:	f043 031f 	orr.w	r3, r3, #31
 80061d8:	6313      	str	r3, [r2, #48]	; 0x30
 80061da:	4b11      	ldr	r3, [pc, #68]	; (8006220 <stm32_gpio_init+0x70>)
 80061dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061de:	4a10      	ldr	r2, [pc, #64]	; (8006220 <stm32_gpio_init+0x70>)
 80061e0:	f043 031f 	orr.w	r3, r3, #31
 80061e4:	6513      	str	r3, [r2, #80]	; 0x50
 80061e6:	4b0e      	ldr	r3, [pc, #56]	; (8006220 <stm32_gpio_init+0x70>)
 80061e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50

  /* Initializing all the defined GPIO ports.*/
#if STM32_HAS_GPIOA
  gpio_init(GPIOA, &gpio_default_config.PAData);
 80061ea:	490e      	ldr	r1, [pc, #56]	; (8006224 <stm32_gpio_init+0x74>)
 80061ec:	480e      	ldr	r0, [pc, #56]	; (8006228 <stm32_gpio_init+0x78>)
 80061ee:	f7ff ffb7 	bl	8006160 <gpio_init>
#endif
#if STM32_HAS_GPIOB
  gpio_init(GPIOB, &gpio_default_config.PBData);
 80061f2:	490e      	ldr	r1, [pc, #56]	; (800622c <stm32_gpio_init+0x7c>)
 80061f4:	480e      	ldr	r0, [pc, #56]	; (8006230 <stm32_gpio_init+0x80>)
 80061f6:	f7ff ffb3 	bl	8006160 <gpio_init>
#endif
#if STM32_HAS_GPIOC
  gpio_init(GPIOC, &gpio_default_config.PCData);
 80061fa:	490e      	ldr	r1, [pc, #56]	; (8006234 <stm32_gpio_init+0x84>)
 80061fc:	480e      	ldr	r0, [pc, #56]	; (8006238 <stm32_gpio_init+0x88>)
 80061fe:	f7ff ffaf 	bl	8006160 <gpio_init>
#endif
#if STM32_HAS_GPIOD
  gpio_init(GPIOD, &gpio_default_config.PDData);
 8006202:	490e      	ldr	r1, [pc, #56]	; (800623c <stm32_gpio_init+0x8c>)
 8006204:	480e      	ldr	r0, [pc, #56]	; (8006240 <stm32_gpio_init+0x90>)
 8006206:	f7ff ffab 	bl	8006160 <gpio_init>
#endif
#if STM32_HAS_GPIOE
  gpio_init(GPIOE, &gpio_default_config.PEData);
 800620a:	490e      	ldr	r1, [pc, #56]	; (8006244 <stm32_gpio_init+0x94>)
 800620c:	480e      	ldr	r0, [pc, #56]	; (8006248 <stm32_gpio_init+0x98>)
 800620e:	f7ff ffa7 	bl	8006160 <gpio_init>
#endif
#if STM32_HAS_GPIOG
  gpio_init(GPIOG, &gpio_default_config.PGData);
#endif
#if STM32_HAS_GPIOH
  gpio_init(GPIOH, &gpio_default_config.PHData);
 8006212:	490e      	ldr	r1, [pc, #56]	; (800624c <stm32_gpio_init+0x9c>)
 8006214:	480e      	ldr	r0, [pc, #56]	; (8006250 <stm32_gpio_init+0xa0>)
 8006216:	f7ff ffa3 	bl	8006160 <gpio_init>
  gpio_init(GPIOJ, &gpio_default_config.PJData);
#endif
#if STM32_HAS_GPIOK
  gpio_init(GPIOK, &gpio_default_config.PKData);
#endif
}
 800621a:	bf00      	nop
 800621c:	bd08      	pop	{r3, pc}
 800621e:	bf00      	nop
 8006220:	40023800 	.word	0x40023800
 8006224:	0800ed3c 	.word	0x0800ed3c
 8006228:	40020000 	.word	0x40020000
 800622c:	0800ed58 	.word	0x0800ed58
 8006230:	40020400 	.word	0x40020400
 8006234:	0800ed74 	.word	0x0800ed74
 8006238:	40020800 	.word	0x40020800
 800623c:	0800ed90 	.word	0x0800ed90
 8006240:	40020c00 	.word	0x40020c00
 8006244:	0800edac 	.word	0x0800edac
 8006248:	40021000 	.word	0x40021000
 800624c:	0800edc8 	.word	0x0800edc8
 8006250:	40021c00 	.word	0x40021c00
	...

08006260 <__early_init>:
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 8006260:	b508      	push	{r3, lr}

  stm32_gpio_init();
 8006262:	f7ff ffa5 	bl	80061b0 <stm32_gpio_init>
  stm32_clock_init();
 8006266:	f7fd fa9b 	bl	80037a0 <stm32_clock_init>
}
 800626a:	bf00      	nop
 800626c:	bd08      	pop	{r3, pc}
 800626e:	bf00      	nop

08006270 <mmc_lld_is_card_inserted>:

#if HAL_USE_MMC_SPI || defined(__DOXYGEN__)
/**
 * @brief   MMC_SPI card detection.
 */
bool mmc_lld_is_card_inserted(MMCDriver *mmcp) {
 8006270:	b082      	sub	sp, #8
 8006272:	9001      	str	r0, [sp, #4]

  (void)mmcp;
  /* CHTODO: Fill the implementation.*/
  return true;
 8006274:	2301      	movs	r3, #1
}
 8006276:	4618      	mov	r0, r3
 8006278:	b002      	add	sp, #8
 800627a:	4770      	bx	lr
 800627c:	0000      	movs	r0, r0
	...

08006280 <mmc_lld_is_write_protected>:

/**
 * @brief   MMC_SPI card write protection detection.
 */
bool mmc_lld_is_write_protected(MMCDriver *mmcp) {
 8006280:	b082      	sub	sp, #8
 8006282:	9001      	str	r0, [sp, #4]

  (void)mmcp;
  /* CHTODO: Fill the implementation.*/
  return false;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	b002      	add	sp, #8
 800628a:	4770      	bx	lr
 800628c:	0000      	movs	r0, r0
	...

08006290 <boardInit>:
 * @brief   Board-specific initialization code.
 * @note    You can add your board-specific code here.
 */
void boardInit(void) {

}
 8006290:	bf00      	nop
 8006292:	4770      	bx	lr
	...

080062a0 <__tm_calibration_object_init>:
 *
 * @param[out] tcp      pointer to the @p tm_calibration_t structure
 *
 * @notapi
 */
static inline void __tm_calibration_object_init(tm_calibration_t *tcp) {
 80062a0:	b500      	push	{lr}
 80062a2:	b08b      	sub	sp, #44	; 0x2c
 80062a4:	9001      	str	r0, [sp, #4]
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  tcp->offset = (rtcnt_t)0;
 80062a6:	9b01      	ldr	r3, [sp, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	601a      	str	r2, [r3, #0]
  chTMObjectInit(&tm);
 80062ac:	ab02      	add	r3, sp, #8
 80062ae:	4618      	mov	r0, r3
 80062b0:	f001 f9e6 	bl	8007680 <chTMObjectInit>
  i = TM_CALIBRATION_LOOP;
 80062b4:	2304      	movs	r3, #4
 80062b6:	9309      	str	r3, [sp, #36]	; 0x24
  do {
    chTMStartMeasurementX(&tm);
 80062b8:	ab02      	add	r3, sp, #8
 80062ba:	4618      	mov	r0, r3
 80062bc:	f001 fa00 	bl	80076c0 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
 80062c0:	ab02      	add	r3, sp, #8
 80062c2:	4618      	mov	r0, r3
 80062c4:	f001 fa0c 	bl	80076e0 <chTMStopMeasurementX>
    i--;
 80062c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062ca:	3b01      	subs	r3, #1
 80062cc:	9309      	str	r3, [sp, #36]	; 0x24
  } while (i > 0U);
 80062ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1f1      	bne.n	80062b8 <__tm_calibration_object_init+0x18>
  tcp->offset = tm.best;
 80062d4:	9a02      	ldr	r2, [sp, #8]
 80062d6:	9b01      	ldr	r3, [sp, #4]
 80062d8:	601a      	str	r2, [r3, #0]
}
 80062da:	bf00      	nop
 80062dc:	b00b      	add	sp, #44	; 0x2c
 80062de:	f85d fb04 	ldr.w	pc, [sp], #4
 80062e2:	bf00      	nop
	...

080062f0 <chSysUnlock.lto_priv.9>:
static inline void chSysUnlock(void) {
 80062f0:	b082      	sub	sp, #8
 80062f2:	2300      	movs	r3, #0
 80062f4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80062f6:	9b01      	ldr	r3, [sp, #4]
 80062f8:	f383 8811 	msr	BASEPRI, r3
}
 80062fc:	bf00      	nop
}
 80062fe:	bf00      	nop
}
 8006300:	bf00      	nop
 8006302:	b002      	add	sp, #8
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
	...

08006310 <__oslib_init>:
/**
 * @brief   Initialization of all library modules.
 *
 * @notapi
 */
static inline void __oslib_init(void) {
 8006310:	b508      	push	{r3, lr}

#if CH_CFG_USE_MEMCORE == TRUE
  __core_init();
 8006312:	f001 fc9d 	bl	8007c50 <__core_init>
#endif
#if CH_CFG_USE_HEAP == TRUE
  __heap_init();
 8006316:	f001 fceb 	bl	8007cf0 <__heap_init>
#endif
#if CH_CFG_USE_FACTORY == TRUE
  __factory_init();
 800631a:	f001 fe49 	bl	8007fb0 <__factory_init>
#endif
}
 800631e:	bf00      	nop
 8006320:	bd08      	pop	{r3, pc}
 8006322:	bf00      	nop
	...

08006330 <chSysInit>:
 *          interrupts are enabled.
 * @post    the system is in @p ch_sys_running state.
 *
 * @special
 */
void chSysInit(void) {
 8006330:	b500      	push	{lr}
 8006332:	b083      	sub	sp, #12
  unsigned i;

  /* System object initialization.*/
  ch_system.state = ch_sys_initializing;
 8006334:	4b11      	ldr	r3, [pc, #68]	; (800637c <chSysInit+0x4c>)
 8006336:	2201      	movs	r2, #1
 8006338:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < (unsigned)PORT_CORES_NUMBER; i++) {
 800633a:	2300      	movs	r3, #0
 800633c:	9301      	str	r3, [sp, #4]
 800633e:	e008      	b.n	8006352 <chSysInit+0x22>
    ch_system.instances[i] = NULL;
 8006340:	4a0e      	ldr	r2, [pc, #56]	; (800637c <chSysInit+0x4c>)
 8006342:	9b01      	ldr	r3, [sp, #4]
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	4413      	add	r3, r2
 8006348:	2200      	movs	r2, #0
 800634a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < (unsigned)PORT_CORES_NUMBER; i++) {
 800634c:	9b01      	ldr	r3, [sp, #4]
 800634e:	3301      	adds	r3, #1
 8006350:	9301      	str	r3, [sp, #4]
 8006352:	9b01      	ldr	r3, [sp, #4]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d0f3      	beq.n	8006340 <chSysInit+0x10>
  }

#if CH_CFG_USE_TM == TRUE
  /* Time Measurement calibration.*/
  __tm_calibration_object_init(&ch_system.tmc);
 8006358:	4809      	ldr	r0, [pc, #36]	; (8006380 <chSysInit+0x50>)
 800635a:	f7ff ffa1 	bl	80062a0 <__tm_calibration_object_init>

  /* User system initialization hook.*/
  CH_CFG_SYSTEM_INIT_HOOK();

  /* OS library modules.*/
  __oslib_init();
 800635e:	f7ff ffd7 	bl	8006310 <__oslib_init>

  /* Initializing default OS instance.*/
  chInstanceObjectInit(&ch0, &ch_core0_cfg);
 8006362:	4908      	ldr	r1, [pc, #32]	; (8006384 <chSysInit+0x54>)
 8006364:	4808      	ldr	r0, [pc, #32]	; (8006388 <chSysInit+0x58>)
 8006366:	f000 fe6b 	bl	8007040 <chInstanceObjectInit>

  /* It is alive now.*/
  ch_system.state = ch_sys_running;
 800636a:	4b04      	ldr	r3, [pc, #16]	; (800637c <chSysInit+0x4c>)
 800636c:	2202      	movs	r2, #2
 800636e:	701a      	strb	r2, [r3, #0]
  chSysUnlock();
 8006370:	f7ff ffbe 	bl	80062f0 <chSysUnlock.lto_priv.9>
}
 8006374:	bf00      	nop
 8006376:	b003      	add	sp, #12
 8006378:	f85d fb04 	ldr.w	pc, [sp], #4
 800637c:	20000e40 	.word	0x20000e40
 8006380:	20000e48 	.word	0x20000e48
 8006384:	0800eeac 	.word	0x0800eeac
 8006388:	20000e50 	.word	0x20000e50
 800638c:	00000000 	.word	0x00000000

08006390 <chSysHalt>:
 *
 * @param[in] reason        pointer to an error string
 *
 * @special
 */
void chSysHalt(const char *reason) {
 8006390:	b082      	sub	sp, #8
 8006392:	9001      	str	r0, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8006394:	b672      	cpsid	i
}
 8006396:	bf00      	nop
 *          the priority mask to level 0.
 */
__STATIC_FORCEINLINE void port_disable(void) {

  __disable_irq();
}
 8006398:	bf00      	nop

  /* Logging the event.*/
  __trace_halt(reason);

  /* Pointing to the passed message.*/
  currcore->dbg.panic_msg = reason;
 800639a:	4a04      	ldr	r2, [pc, #16]	; (80063ac <chSysHalt+0x1c>)
 800639c:	9b01      	ldr	r3, [sp, #4]
 800639e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
     via some inter-core messaging or other means.*/
  PORT_SYSTEM_HALT_HOOK();
#endif

  /* Entering the halted state.*/
  ch_system.state = ch_sys_halted;
 80063a2:	4b03      	ldr	r3, [pc, #12]	; (80063b0 <chSysHalt+0x20>)
 80063a4:	2203      	movs	r2, #3
 80063a6:	701a      	strb	r2, [r3, #0]

  /* Harmless infinite loop.*/
  while (true) {
 80063a8:	e7fe      	b.n	80063a8 <chSysHalt+0x18>
 80063aa:	bf00      	nop
 80063ac:	20000e50 	.word	0x20000e50
 80063b0:	20000e40 	.word	0x20000e40
	...

080063c0 <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
 80063c0:	b508      	push	{r3, lr}
  }
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  currtp->time++;
#endif
  chVTDoTickI();
 80063c2:	f000 fa8d 	bl	80068e0 <chVTDoTickI>
  CH_CFG_SYSTEM_TICK_HOOK();
}
 80063c6:	bf00      	nop
 80063c8:	bd08      	pop	{r3, pc}
 80063ca:	bf00      	nop
 80063cc:	0000      	movs	r0, r0
	...

080063d0 <chRFCUCollectFaultsI>:
/**
 * @brief   Adds fault flags to the current mask.
 *
 * @param[in] mask      fault flags to be added
 */
void chRFCUCollectFaultsI(rfcu_mask_t mask) {
 80063d0:	b082      	sub	sp, #8
 80063d2:	9001      	str	r0, [sp, #4]

#if CH_CFG_SMP_MODE == FALSE
  currcore->rfcu.mask |= mask;
 80063d4:	4b04      	ldr	r3, [pc, #16]	; (80063e8 <chRFCUCollectFaultsI+0x18>)
 80063d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063d8:	9b01      	ldr	r3, [sp, #4]
 80063da:	4313      	orrs	r3, r2
 80063dc:	4a02      	ldr	r2, [pc, #8]	; (80063e8 <chRFCUCollectFaultsI+0x18>)
 80063de:	6353      	str	r3, [r2, #52]	; 0x34
#else
  ch_system.rfcu.mask |= mask;
#endif

  CH_CFG_RUNTIME_FAULTS_HOOK(mask);
}
 80063e0:	bf00      	nop
 80063e2:	b002      	add	sp, #8
 80063e4:	4770      	bx	lr
 80063e6:	bf00      	nop
 80063e8:	20000e50 	.word	0x20000e50
 80063ec:	00000000 	.word	0x00000000

080063f0 <chTimeAddX.lto_priv.1>:
                                   sysinterval_t interval) {
 80063f0:	b082      	sub	sp, #8
 80063f2:	9001      	str	r0, [sp, #4]
 80063f4:	9100      	str	r1, [sp, #0]
  return systime + (systime_t)interval;
 80063f6:	9a01      	ldr	r2, [sp, #4]
 80063f8:	9b00      	ldr	r3, [sp, #0]
 80063fa:	4413      	add	r3, r2
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	b002      	add	sp, #8
 8006400:	4770      	bx	lr
 8006402:	bf00      	nop
	...

08006410 <chTimeDiffX.lto_priv.0>:
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {
 8006410:	b082      	sub	sp, #8
 8006412:	9001      	str	r0, [sp, #4]
 8006414:	9100      	str	r1, [sp, #0]
  return (sysinterval_t)((systime_t)(end - start));
 8006416:	9a00      	ldr	r2, [sp, #0]
 8006418:	9b01      	ldr	r3, [sp, #4]
 800641a:	1ad3      	subs	r3, r2, r3
}
 800641c:	4618      	mov	r0, r3
 800641e:	b002      	add	sp, #8
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
	...

08006430 <ch_dlist_isempty>:
 * @param[in] dlhp      pointer to the delta list header
 * @return              The status of the delta list.
 *
 * @notapi
 */
static inline bool ch_dlist_isempty(ch_delta_list_t *dlhp) {
 8006430:	b082      	sub	sp, #8
 8006432:	9001      	str	r0, [sp, #4]

  return (bool)(dlhp == dlhp->next);
 8006434:	9b01      	ldr	r3, [sp, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	9a01      	ldr	r2, [sp, #4]
 800643a:	429a      	cmp	r2, r3
 800643c:	bf0c      	ite	eq
 800643e:	2301      	moveq	r3, #1
 8006440:	2300      	movne	r3, #0
 8006442:	b2db      	uxtb	r3, r3
}
 8006444:	4618      	mov	r0, r3
 8006446:	b002      	add	sp, #8
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	0000      	movs	r0, r0
	...

08006450 <ch_dlist_isfirst>:
 * @param[in] dlp       pointer to the delta list element
 *
 * @notapi
 */
static inline bool ch_dlist_isfirst(ch_delta_list_t *dlhp,
                                    ch_delta_list_t *dlp) {
 8006450:	b082      	sub	sp, #8
 8006452:	9001      	str	r0, [sp, #4]
 8006454:	9100      	str	r1, [sp, #0]

  return (bool)(dlhp->next == dlp);
 8006456:	9b01      	ldr	r3, [sp, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	9a00      	ldr	r2, [sp, #0]
 800645c:	429a      	cmp	r2, r3
 800645e:	bf0c      	ite	eq
 8006460:	2301      	moveq	r3, #1
 8006462:	2300      	movne	r3, #0
 8006464:	b2db      	uxtb	r3, r3
}
 8006466:	4618      	mov	r0, r3
 8006468:	b002      	add	sp, #8
 800646a:	4770      	bx	lr
 800646c:	0000      	movs	r0, r0
	...

08006470 <ch_dlist_insert_after>:
 *
 * @notapi
 */
static inline void ch_dlist_insert_after(ch_delta_list_t *dlhp,
                                         ch_delta_list_t *dlp,
                                         sysinterval_t delta) {
 8006470:	b084      	sub	sp, #16
 8006472:	9003      	str	r0, [sp, #12]
 8006474:	9102      	str	r1, [sp, #8]
 8006476:	9201      	str	r2, [sp, #4]

  dlp->delta      = delta;
 8006478:	9b02      	ldr	r3, [sp, #8]
 800647a:	9a01      	ldr	r2, [sp, #4]
 800647c:	609a      	str	r2, [r3, #8]
  dlp->prev       = dlhp;
 800647e:	9b02      	ldr	r3, [sp, #8]
 8006480:	9a03      	ldr	r2, [sp, #12]
 8006482:	605a      	str	r2, [r3, #4]
  dlp->next       = dlp->prev->next;
 8006484:	9b02      	ldr	r3, [sp, #8]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	9b02      	ldr	r3, [sp, #8]
 800648c:	601a      	str	r2, [r3, #0]
  dlp->next->prev = dlp;
 800648e:	9b02      	ldr	r3, [sp, #8]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	9a02      	ldr	r2, [sp, #8]
 8006494:	605a      	str	r2, [r3, #4]
  dlhp->next      = dlp;
 8006496:	9b03      	ldr	r3, [sp, #12]
 8006498:	9a02      	ldr	r2, [sp, #8]
 800649a:	601a      	str	r2, [r3, #0]
}
 800649c:	bf00      	nop
 800649e:	b004      	add	sp, #16
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
	...

080064b0 <ch_dlist_insert_before>:
 *
 * @notapi
 */
static inline void ch_dlist_insert_before(ch_delta_list_t *dlhp,
                                          ch_delta_list_t *dlp,
                                          sysinterval_t delta) {
 80064b0:	b084      	sub	sp, #16
 80064b2:	9003      	str	r0, [sp, #12]
 80064b4:	9102      	str	r1, [sp, #8]
 80064b6:	9201      	str	r2, [sp, #4]

  dlp->delta      = delta;
 80064b8:	9b02      	ldr	r3, [sp, #8]
 80064ba:	9a01      	ldr	r2, [sp, #4]
 80064bc:	609a      	str	r2, [r3, #8]
  dlp->next       = dlhp;
 80064be:	9b02      	ldr	r3, [sp, #8]
 80064c0:	9a03      	ldr	r2, [sp, #12]
 80064c2:	601a      	str	r2, [r3, #0]
  dlp->prev       = dlp->next->prev;
 80064c4:	9b02      	ldr	r3, [sp, #8]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	685a      	ldr	r2, [r3, #4]
 80064ca:	9b02      	ldr	r3, [sp, #8]
 80064cc:	605a      	str	r2, [r3, #4]
  dlp->prev->next = dlp;
 80064ce:	9b02      	ldr	r3, [sp, #8]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	9a02      	ldr	r2, [sp, #8]
 80064d4:	601a      	str	r2, [r3, #0]
  dlhp->prev      = dlp;
 80064d6:	9b03      	ldr	r3, [sp, #12]
 80064d8:	9a02      	ldr	r2, [sp, #8]
 80064da:	605a      	str	r2, [r3, #4]
}
 80064dc:	bf00      	nop
 80064de:	b004      	add	sp, #16
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
	...

080064f0 <ch_dlist_insert>:
 *
 * @notapi
 */
static inline void ch_dlist_insert(ch_delta_list_t *dlhp,
                                   ch_delta_list_t *dlep,
                                   sysinterval_t delta) {
 80064f0:	b500      	push	{lr}
 80064f2:	b087      	sub	sp, #28
 80064f4:	9003      	str	r0, [sp, #12]
 80064f6:	9102      	str	r1, [sp, #8]
 80064f8:	9201      	str	r2, [sp, #4]
  ch_delta_list_t *dlp;

  /* The delta list is scanned in order to find the correct position for
     this element. */
  dlp = dlhp->next;
 80064fa:	9b03      	ldr	r3, [sp, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	9305      	str	r3, [sp, #20]
  while (likely(dlp->delta < delta)) {
 8006500:	e007      	b.n	8006512 <ch_dlist_insert+0x22>
    /* Debug assert if the element is already in the list.*/
    chDbgAssert(dlp != dlep, "element already in list");

    delta -= dlp->delta;
 8006502:	9b05      	ldr	r3, [sp, #20]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	9a01      	ldr	r2, [sp, #4]
 8006508:	1ad3      	subs	r3, r2, r3
 800650a:	9301      	str	r3, [sp, #4]
    dlp = dlp->next;
 800650c:	9b05      	ldr	r3, [sp, #20]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	9305      	str	r3, [sp, #20]
  while (likely(dlp->delta < delta)) {
 8006512:	9b05      	ldr	r3, [sp, #20]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	9a01      	ldr	r2, [sp, #4]
 8006518:	429a      	cmp	r2, r3
 800651a:	bf8c      	ite	hi
 800651c:	2301      	movhi	r3, #1
 800651e:	2300      	movls	r3, #0
 8006520:	b2db      	uxtb	r3, r3
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1ed      	bne.n	8006502 <ch_dlist_insert+0x12>
  }

  /* The timer is inserted in the delta list.*/
  ch_dlist_insert_before(dlp, dlep, delta);
 8006526:	9a01      	ldr	r2, [sp, #4]
 8006528:	9902      	ldr	r1, [sp, #8]
 800652a:	9805      	ldr	r0, [sp, #20]
 800652c:	f7ff ffc0 	bl	80064b0 <ch_dlist_insert_before>

  /* Adjusting delta for the following element.*/
  dlp->delta -= delta;
 8006530:	9b05      	ldr	r3, [sp, #20]
 8006532:	689a      	ldr	r2, [r3, #8]
 8006534:	9b01      	ldr	r3, [sp, #4]
 8006536:	1ad2      	subs	r2, r2, r3
 8006538:	9b05      	ldr	r3, [sp, #20]
 800653a:	609a      	str	r2, [r3, #8]

  /* Special case when the inserted element is in last position in the list,
     the value in the header must be restored, just doing it is faster than
     checking then doing.*/
  dlhp->delta = (sysinterval_t)-1;
 800653c:	9b03      	ldr	r3, [sp, #12]
 800653e:	f04f 32ff 	mov.w	r2, #4294967295
 8006542:	609a      	str	r2, [r3, #8]
}
 8006544:	bf00      	nop
 8006546:	b007      	add	sp, #28
 8006548:	f85d fb04 	ldr.w	pc, [sp], #4
 800654c:	0000      	movs	r0, r0
	...

08006550 <ch_dlist_remove_first>:
 *
 * @param[in] dlhp      pointer to the delta list header
 *
 * @notapi
 */
static inline ch_delta_list_t *ch_dlist_remove_first(ch_delta_list_t *dlhp) {
 8006550:	b084      	sub	sp, #16
 8006552:	9001      	str	r0, [sp, #4]
  ch_delta_list_t *dlp = dlhp->next;
 8006554:	9b01      	ldr	r3, [sp, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	9303      	str	r3, [sp, #12]

  dlhp->next       = dlp->next;
 800655a:	9b03      	ldr	r3, [sp, #12]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	9b01      	ldr	r3, [sp, #4]
 8006560:	601a      	str	r2, [r3, #0]
  dlhp->next->prev = dlhp;
 8006562:	9b01      	ldr	r3, [sp, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	9a01      	ldr	r2, [sp, #4]
 8006568:	605a      	str	r2, [r3, #4]

  return dlp;
 800656a:	9b03      	ldr	r3, [sp, #12]
}
 800656c:	4618      	mov	r0, r3
 800656e:	b004      	add	sp, #16
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
	...

08006580 <ch_dlist_dequeue>:
 *
 * @param[in] dlp       pointer to the delta list element
 *
 * @notapi
 */
static inline ch_delta_list_t *ch_dlist_dequeue(ch_delta_list_t *dlp) {
 8006580:	b082      	sub	sp, #8
 8006582:	9001      	str	r0, [sp, #4]

  dlp->prev->next = dlp->next;
 8006584:	9b01      	ldr	r3, [sp, #4]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	9a01      	ldr	r2, [sp, #4]
 800658a:	6812      	ldr	r2, [r2, #0]
 800658c:	601a      	str	r2, [r3, #0]
  dlp->next->prev = dlp->prev;
 800658e:	9b01      	ldr	r3, [sp, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	9a01      	ldr	r2, [sp, #4]
 8006594:	6852      	ldr	r2, [r2, #4]
 8006596:	605a      	str	r2, [r3, #4]

  return dlp;
 8006598:	9b01      	ldr	r3, [sp, #4]
}
 800659a:	4618      	mov	r0, r3
 800659c:	b002      	add	sp, #8
 800659e:	4770      	bx	lr

080065a0 <port_timer_start_alarm>:
static inline void port_timer_start_alarm(systime_t time) {
 80065a0:	b500      	push	{lr}
 80065a2:	b083      	sub	sp, #12
 80065a4:	9001      	str	r0, [sp, #4]
  stStartAlarm(time);
 80065a6:	9801      	ldr	r0, [sp, #4]
 80065a8:	f7fb f952 	bl	8001850 <stStartAlarm>
}
 80065ac:	bf00      	nop
 80065ae:	b003      	add	sp, #12
 80065b0:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080065c0 <port_timer_stop_alarm>:
static inline void port_timer_stop_alarm(void) {
 80065c0:	b508      	push	{r3, lr}
  stStopAlarm();
 80065c2:	f7fb f955 	bl	8001870 <stStopAlarm>
}
 80065c6:	bf00      	nop
 80065c8:	bd08      	pop	{r3, pc}
 80065ca:	bf00      	nop
 80065cc:	0000      	movs	r0, r0
	...

080065d0 <port_timer_set_alarm>:
static inline void port_timer_set_alarm(systime_t time) {
 80065d0:	b500      	push	{lr}
 80065d2:	b083      	sub	sp, #12
 80065d4:	9001      	str	r0, [sp, #4]
  stSetAlarm(time);
 80065d6:	9801      	ldr	r0, [sp, #4]
 80065d8:	f7fb f952 	bl	8001880 <stSetAlarm>
}
 80065dc:	bf00      	nop
 80065de:	b003      	add	sp, #12
 80065e0:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080065f0 <port_timer_get_time.lto_priv.1>:
static inline systime_t port_timer_get_time(void) {
 80065f0:	b508      	push	{r3, lr}
  return stGetCounter();
 80065f2:	f7fb f925 	bl	8001840 <stGetCounter>
 80065f6:	4603      	mov	r3, r0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	bd08      	pop	{r3, pc}
 80065fc:	0000      	movs	r0, r0
	...

08006600 <chSysLockFromISR.lto_priv.5>:
static inline void chSysLockFromISR(void) {
 8006600:	b082      	sub	sp, #8
 8006602:	2330      	movs	r3, #48	; 0x30
 8006604:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8006606:	9b01      	ldr	r3, [sp, #4]
 8006608:	f383 8811 	msr	BASEPRI, r3
}
 800660c:	bf00      	nop
}
 800660e:	bf00      	nop
}
 8006610:	bf00      	nop
}
 8006612:	bf00      	nop
 8006614:	b002      	add	sp, #8
 8006616:	4770      	bx	lr
	...

08006620 <chSysUnlockFromISR.lto_priv.5>:
static inline void chSysUnlockFromISR(void) {
 8006620:	b082      	sub	sp, #8
 8006622:	2300      	movs	r3, #0
 8006624:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8006626:	9b01      	ldr	r3, [sp, #4]
 8006628:	f383 8811 	msr	BASEPRI, r3
}
 800662c:	bf00      	nop
}
 800662e:	bf00      	nop
}
 8006630:	bf00      	nop
}
 8006632:	bf00      	nop
 8006634:	b002      	add	sp, #8
 8006636:	4770      	bx	lr
	...

08006640 <chVTGetSystemTimeX.lto_priv.1>:
static inline systime_t chVTGetSystemTimeX(void) {
 8006640:	b508      	push	{r3, lr}
  return port_timer_get_time();
 8006642:	f7ff ffd5 	bl	80065f0 <port_timer_get_time.lto_priv.1>
 8006646:	4603      	mov	r3, r0
}
 8006648:	4618      	mov	r0, r3
 800664a:	bd08      	pop	{r3, pc}
 800664c:	0000      	movs	r0, r0
	...

08006650 <vt_set_alarm>:
 *          in order to compensate for the event.
 *
 * @param[in] now       last known system time
 * @param[in] delay     delay over @p now
 */
static void vt_set_alarm(systime_t now, sysinterval_t delay) {
 8006650:	b500      	push	{lr}
 8006652:	b087      	sub	sp, #28
 8006654:	9001      	str	r0, [sp, #4]
 8006656:	9100      	str	r1, [sp, #0]
  sysinterval_t currdelta;

  /* Initial delta is what is configured statically.*/
  currdelta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8006658:	2302      	movs	r3, #2
 800665a:	9305      	str	r3, [sp, #20]

  if (delay < currdelta) {
 800665c:	9a00      	ldr	r2, [sp, #0]
 800665e:	9b05      	ldr	r3, [sp, #20]
 8006660:	429a      	cmp	r2, r3
 8006662:	d201      	bcs.n	8006668 <vt_set_alarm+0x18>
    /* We need to avoid that the system time goes past the alarm we are
       going to set before the alarm is actually set.*/
    delay = currdelta;
 8006664:	9b05      	ldr	r3, [sp, #20]
 8006666:	9300      	str	r3, [sp, #0]
  while (true) {
    sysinterval_t nowdelta;
    systime_t newnow;

    /* Setting up the alarm on the next deadline.*/
    port_timer_set_alarm(chTimeAddX(now, delay));
 8006668:	9900      	ldr	r1, [sp, #0]
 800666a:	9801      	ldr	r0, [sp, #4]
 800666c:	f7ff fec0 	bl	80063f0 <chTimeAddX.lto_priv.1>
 8006670:	4603      	mov	r3, r0
 8006672:	4618      	mov	r0, r3
 8006674:	f7ff ffac 	bl	80065d0 <port_timer_set_alarm>
       current time skipped past the calculated deadline.
       Note that the "<" condition is intentional, we want to make sure
       that the alarm is set before the deadline is reached because the
       comparison could happen on the transition depending on the timer
       architecture.*/
    newnow = chVTGetSystemTimeX();
 8006678:	f7ff ffe2 	bl	8006640 <chVTGetSystemTimeX.lto_priv.1>
 800667c:	9004      	str	r0, [sp, #16]
    nowdelta = chTimeDiffX(now, newnow);
 800667e:	9904      	ldr	r1, [sp, #16]
 8006680:	9801      	ldr	r0, [sp, #4]
 8006682:	f7ff fec5 	bl	8006410 <chTimeDiffX.lto_priv.0>
 8006686:	9003      	str	r0, [sp, #12]
    if (likely(nowdelta < delay)) {
 8006688:	9a03      	ldr	r2, [sp, #12]
 800668a:	9b00      	ldr	r3, [sp, #0]
 800668c:	429a      	cmp	r2, r3
 800668e:	bf34      	ite	cc
 8006690:	2301      	movcc	r3, #1
 8006692:	2300      	movcs	r3, #0
 8006694:	b2db      	uxtb	r3, r3
 8006696:	2b00      	cmp	r3, #0
 8006698:	d107      	bne.n	80066aa <vt_set_alarm+0x5a>
      break;
    }

    /* Trying again with a more relaxed minimum delta.*/
    currdelta += (sysinterval_t)1;
 800669a:	9b05      	ldr	r3, [sp, #20]
 800669c:	3301      	adds	r3, #1
 800669e:	9305      	str	r3, [sp, #20]

    /* Current time becomes the new "base" time.*/
    now = newnow;
 80066a0:	9b04      	ldr	r3, [sp, #16]
 80066a2:	9301      	str	r3, [sp, #4]
    delay = currdelta;
 80066a4:	9b05      	ldr	r3, [sp, #20]
 80066a6:	9300      	str	r3, [sp, #0]
  while (true) {
 80066a8:	e7de      	b.n	8006668 <vt_set_alarm+0x18>
      break;
 80066aa:	bf00      	nop
  }

#if !defined(CH_VT_RFCU_DISABLED)
  /* Checking if a skip occurred.*/
  if (currdelta > CH_CFG_ST_TIMEDELTA) {
 80066ac:	9b05      	ldr	r3, [sp, #20]
 80066ae:	2b02      	cmp	r3, #2
 80066b0:	d902      	bls.n	80066b8 <vt_set_alarm+0x68>
    chRFCUCollectFaultsI(CH_RFCU_VT_INSUFFICIENT_DELTA);
 80066b2:	2001      	movs	r0, #1
 80066b4:	f7ff fe8c 	bl	80063d0 <chRFCUCollectFaultsI>
  }
#else
  /* Assertions as fallback.*/
  chDbgAssert(currdelta <= CH_CFG_ST_TIMEDELTA, "insufficient delta");
#endif
}
 80066b8:	bf00      	nop
 80066ba:	b007      	add	sp, #28
 80066bc:	f85d fb04 	ldr.w	pc, [sp], #4

080066c0 <vt_insert_first>:
 * @note    This is the special case when the delta list is initially empty.
 */
static void vt_insert_first(virtual_timers_list_t *vtlp,
                            virtual_timer_t *vtp,
                            systime_t now,
                            sysinterval_t delay) {
 80066c0:	b500      	push	{lr}
 80066c2:	b087      	sub	sp, #28
 80066c4:	9003      	str	r0, [sp, #12]
 80066c6:	9102      	str	r1, [sp, #8]
 80066c8:	9201      	str	r2, [sp, #4]
 80066ca:	9300      	str	r3, [sp, #0]
  sysinterval_t currdelta;

  /* The delta list is empty, the current time becomes the new
     delta list base time, the timer is inserted.*/
  vtlp->lasttime = now;
 80066cc:	9b03      	ldr	r3, [sp, #12]
 80066ce:	9a01      	ldr	r2, [sp, #4]
 80066d0:	60da      	str	r2, [r3, #12]
  ch_dlist_insert_after(&vtlp->dlist, &vtp->dlist, delay);
 80066d2:	9b03      	ldr	r3, [sp, #12]
 80066d4:	9902      	ldr	r1, [sp, #8]
 80066d6:	9a00      	ldr	r2, [sp, #0]
 80066d8:	4618      	mov	r0, r3
 80066da:	f7ff fec9 	bl	8006470 <ch_dlist_insert_after>

  /* Initial delta is what is configured statically.*/
  currdelta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 80066de:	2302      	movs	r3, #2
 80066e0:	9305      	str	r3, [sp, #20]

  /* If the requested delay is lower than the minimum safe delta then it
     is raised to the minimum safe value.*/
  if (delay < currdelta) {
 80066e2:	9a00      	ldr	r2, [sp, #0]
 80066e4:	9b05      	ldr	r3, [sp, #20]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d201      	bcs.n	80066ee <vt_insert_first+0x2e>
    /* We need to avoid that the system time goes past the alarm we are
       going to set before the alarm is actually set.*/
    delay = currdelta;
 80066ea:	9b05      	ldr	r3, [sp, #20]
 80066ec:	9300      	str	r3, [sp, #0]
  }
#endif

  /* Being the first element inserted in the list the alarm timer
     is started.*/
  port_timer_start_alarm(chTimeAddX(vtlp->lasttime, delay));
 80066ee:	9b03      	ldr	r3, [sp, #12]
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	9900      	ldr	r1, [sp, #0]
 80066f4:	4618      	mov	r0, r3
 80066f6:	f7ff fe7b 	bl	80063f0 <chTimeAddX.lto_priv.1>
 80066fa:	4603      	mov	r3, r0
 80066fc:	4618      	mov	r0, r3
 80066fe:	f7ff ff4f 	bl	80065a0 <port_timer_start_alarm>
       current time skipped past the calculated deadline.
       Note that the "<" condition is intentional, we want to make sure
       that the alarm is set before the deadline is reached because the
       comparison could happen on the transition depending on the timer
       architecture.*/
    newnow = chVTGetSystemTimeX();
 8006702:	f7ff ff9d 	bl	8006640 <chVTGetSystemTimeX.lto_priv.1>
 8006706:	9004      	str	r0, [sp, #16]
    if (likely(chTimeDiffX(now, newnow) < delay)) {
 8006708:	9904      	ldr	r1, [sp, #16]
 800670a:	9801      	ldr	r0, [sp, #4]
 800670c:	f7ff fe80 	bl	8006410 <chTimeDiffX.lto_priv.0>
 8006710:	4602      	mov	r2, r0
 8006712:	9b00      	ldr	r3, [sp, #0]
 8006714:	4293      	cmp	r3, r2
 8006716:	bf8c      	ite	hi
 8006718:	2301      	movhi	r3, #1
 800671a:	2300      	movls	r3, #0
 800671c:	b2db      	uxtb	r3, r3
 800671e:	2b00      	cmp	r3, #0
 8006720:	d10b      	bne.n	800673a <vt_insert_first+0x7a>
      break;
    }

    /* Trying again with a more relaxed minimum delta.*/
    currdelta += (sysinterval_t)1;
 8006722:	9b05      	ldr	r3, [sp, #20]
 8006724:	3301      	adds	r3, #1
 8006726:	9305      	str	r3, [sp, #20]

    /* Setting up the alarm on the next deadline.*/
    port_timer_set_alarm(chTimeAddX(now, currdelta));
 8006728:	9905      	ldr	r1, [sp, #20]
 800672a:	9801      	ldr	r0, [sp, #4]
 800672c:	f7ff fe60 	bl	80063f0 <chTimeAddX.lto_priv.1>
 8006730:	4603      	mov	r3, r0
 8006732:	4618      	mov	r0, r3
 8006734:	f7ff ff4c 	bl	80065d0 <port_timer_set_alarm>
  while (true) {
 8006738:	e7e3      	b.n	8006702 <vt_insert_first+0x42>
      break;
 800673a:	bf00      	nop
  }

#if !defined(CH_VT_RFCU_DISABLED)
  /* Checking if a skip occurred.*/
  if (currdelta > CH_CFG_ST_TIMEDELTA) {
 800673c:	9b05      	ldr	r3, [sp, #20]
 800673e:	2b02      	cmp	r3, #2
 8006740:	d902      	bls.n	8006748 <vt_insert_first+0x88>
    chRFCUCollectFaultsI(CH_RFCU_VT_INSUFFICIENT_DELTA);
 8006742:	2001      	movs	r0, #1
 8006744:	f7ff fe44 	bl	80063d0 <chRFCUCollectFaultsI>
  }
#else
  /* Assertions as fallback.*/
  chDbgAssert(currdelta <= CH_CFG_ST_TIMEDELTA, "insufficient delta");
#endif
}
 8006748:	bf00      	nop
 800674a:	b007      	add	sp, #28
 800674c:	f85d fb04 	ldr.w	pc, [sp], #4

08006750 <vt_enqueue>:
/**
 * @brief   Enqueues a virtual timer in a virtual timers list.
 */
static void vt_enqueue(virtual_timers_list_t *vtlp,
                       virtual_timer_t *vtp,
                       sysinterval_t delay) {
 8006750:	b500      	push	{lr}
 8006752:	b089      	sub	sp, #36	; 0x24
 8006754:	9003      	str	r0, [sp, #12]
 8006756:	9102      	str	r1, [sp, #8]
 8006758:	9201      	str	r2, [sp, #4]
  sysinterval_t delta;

#if CH_CFG_ST_TIMEDELTA > 0
  {
    sysinterval_t nowdelta;
    systime_t now = chVTGetSystemTimeX();
 800675a:	f7ff ff71 	bl	8006640 <chVTGetSystemTimeX.lto_priv.1>
 800675e:	9006      	str	r0, [sp, #24]

    /* Special case where the timers list is empty.*/
    if (ch_dlist_isempty(&vtlp->dlist)) {
 8006760:	9b03      	ldr	r3, [sp, #12]
 8006762:	4618      	mov	r0, r3
 8006764:	f7ff fe64 	bl	8006430 <ch_dlist_isempty>
 8006768:	4603      	mov	r3, r0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d006      	beq.n	800677c <vt_enqueue+0x2c>

      vt_insert_first(vtlp, vtp, now, delay);
 800676e:	9b01      	ldr	r3, [sp, #4]
 8006770:	9a06      	ldr	r2, [sp, #24]
 8006772:	9902      	ldr	r1, [sp, #8]
 8006774:	9803      	ldr	r0, [sp, #12]
 8006776:	f7ff ffa3 	bl	80066c0 <vt_insert_first>

      return;
 800677a:	e020      	b.n	80067be <vt_enqueue+0x6e>
    }

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'deltanow'.*/
    nowdelta = chTimeDiffX(vtlp->lasttime, now);
 800677c:	9b03      	ldr	r3, [sp, #12]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	9906      	ldr	r1, [sp, #24]
 8006782:	4618      	mov	r0, r3
 8006784:	f7ff fe44 	bl	8006410 <chTimeDiffX.lto_priv.0>
 8006788:	9005      	str	r0, [sp, #20]
    delta    = nowdelta + delay;
 800678a:	9a05      	ldr	r2, [sp, #20]
 800678c:	9b01      	ldr	r3, [sp, #4]
 800678e:	4413      	add	r3, r2
 8006790:	9307      	str	r3, [sp, #28]

    /* Scenario where a very large delay exceeded the numeric range, the
       delta is shortened to make it fit the numeric range, the timer
       will be triggered "deltanow" cycles earlier.*/
    if (delta < nowdelta) {
 8006792:	9a07      	ldr	r2, [sp, #28]
 8006794:	9b05      	ldr	r3, [sp, #20]
 8006796:	429a      	cmp	r2, r3
 8006798:	d201      	bcs.n	800679e <vt_enqueue+0x4e>
      delta = delay;
 800679a:	9b01      	ldr	r3, [sp, #4]
 800679c:	9307      	str	r3, [sp, #28]
    }

    /* Checking if this timer would become the first in the delta list, this
       requires changing the current alarm setting.*/
    if (delta < vtlp->dlist.next->delta) {
 800679e:	9b03      	ldr	r3, [sp, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	9a07      	ldr	r2, [sp, #28]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d203      	bcs.n	80067b2 <vt_enqueue+0x62>

      vt_set_alarm(now, delay);
 80067aa:	9901      	ldr	r1, [sp, #4]
 80067ac:	9806      	ldr	r0, [sp, #24]
 80067ae:	f7ff ff4f 	bl	8006650 <vt_set_alarm>

  /* Delta is initially equal to the specified delay.*/
  delta = delay;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  ch_dlist_insert(&vtlp->dlist, &vtp->dlist, delta);
 80067b2:	9b03      	ldr	r3, [sp, #12]
 80067b4:	9902      	ldr	r1, [sp, #8]
 80067b6:	9a07      	ldr	r2, [sp, #28]
 80067b8:	4618      	mov	r0, r3
 80067ba:	f7ff fe99 	bl	80064f0 <ch_dlist_insert>
}
 80067be:	b009      	add	sp, #36	; 0x24
 80067c0:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080067d0 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
                vtfunc_t vtfunc, void *par) {
 80067d0:	b500      	push	{lr}
 80067d2:	b087      	sub	sp, #28
 80067d4:	9003      	str	r0, [sp, #12]
 80067d6:	9102      	str	r1, [sp, #8]
 80067d8:	9201      	str	r2, [sp, #4]
 80067da:	9300      	str	r3, [sp, #0]
  virtual_timers_list_t *vtlp = &currcore->vtlist;
 80067dc:	4b09      	ldr	r3, [pc, #36]	; (8006804 <chVTDoSetI+0x34>)
 80067de:	9305      	str	r3, [sp, #20]

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  /* Timer initialization.*/
  vtp->par     = par;
 80067e0:	9b03      	ldr	r3, [sp, #12]
 80067e2:	9a00      	ldr	r2, [sp, #0]
 80067e4:	611a      	str	r2, [r3, #16]
  vtp->func    = vtfunc;
 80067e6:	9b03      	ldr	r3, [sp, #12]
 80067e8:	9a01      	ldr	r2, [sp, #4]
 80067ea:	60da      	str	r2, [r3, #12]
  vtp->reload  = (sysinterval_t)0;
 80067ec:	9b03      	ldr	r3, [sp, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	615a      	str	r2, [r3, #20]

  /* Inserting the timer in the delta list.*/
  vt_enqueue(vtlp, vtp, delay);
 80067f2:	9a02      	ldr	r2, [sp, #8]
 80067f4:	9903      	ldr	r1, [sp, #12]
 80067f6:	9805      	ldr	r0, [sp, #20]
 80067f8:	f7ff ffaa 	bl	8006750 <vt_enqueue>
}
 80067fc:	bf00      	nop
 80067fe:	b007      	add	sp, #28
 8006800:	f85d fb04 	ldr.w	pc, [sp], #4
 8006804:	20000e60 	.word	0x20000e60
	...

08006810 <chVTDoResetI>:
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 8006810:	b500      	push	{lr}
 8006812:	b087      	sub	sp, #28
 8006814:	9001      	str	r0, [sp, #4]
  virtual_timers_list_t *vtlp = &currcore->vtlist;
 8006816:	4b2e      	ldr	r3, [pc, #184]	; (80068d0 <chVTDoResetI+0xc0>)
 8006818:	9305      	str	r3, [sp, #20]
  systime_t now;
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (!ch_dlist_isfirst(&vtlp->dlist, &vtp->dlist)) {
 800681a:	9b05      	ldr	r3, [sp, #20]
 800681c:	9a01      	ldr	r2, [sp, #4]
 800681e:	4611      	mov	r1, r2
 8006820:	4618      	mov	r0, r3
 8006822:	f7ff fe15 	bl	8006450 <ch_dlist_isfirst>
 8006826:	4603      	mov	r3, r0
 8006828:	f083 0301 	eor.w	r3, r3, #1
 800682c:	b2db      	uxtb	r3, r3
 800682e:	2b00      	cmp	r3, #0
 8006830:	d014      	beq.n	800685c <chVTDoResetI+0x4c>

    /* Removing the element from the delta list.*/
    (void) ch_dlist_dequeue(&vtp->dlist);
 8006832:	9b01      	ldr	r3, [sp, #4]
 8006834:	4618      	mov	r0, r3
 8006836:	f7ff fea3 	bl	8006580 <ch_dlist_dequeue>

    /* Adding delta to the next element, if it is not the last one.*/
    vtp->dlist.next->delta += vtp->dlist.delta;
 800683a:	9b01      	ldr	r3, [sp, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	6899      	ldr	r1, [r3, #8]
 8006840:	9b01      	ldr	r3, [sp, #4]
 8006842:	689a      	ldr	r2, [r3, #8]
 8006844:	9b01      	ldr	r3, [sp, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	440a      	add	r2, r1
 800684a:	609a      	str	r2, [r3, #8]

    /* Marking timer as not armed.*/
    vtp->dlist.next = NULL;
 800684c:	9b01      	ldr	r3, [sp, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	601a      	str	r2, [r3, #0]

    /* Special case when the removed element from the last position in the list,
       the value in the header must be restored, just doing it is faster than
       checking then doing.*/
    vtlp->dlist.delta = (sysinterval_t)-1;
 8006852:	9b05      	ldr	r3, [sp, #20]
 8006854:	f04f 32ff 	mov.w	r2, #4294967295
 8006858:	609a      	str	r2, [r3, #8]

    return;
 800685a:	e035      	b.n	80068c8 <chVTDoResetI+0xb8>
  }

  /* Removing the first timer from the list, marking it as not armed.*/
  ch_dlist_remove_first(&vtlp->dlist);
 800685c:	9b05      	ldr	r3, [sp, #20]
 800685e:	4618      	mov	r0, r3
 8006860:	f7ff fe76 	bl	8006550 <ch_dlist_remove_first>
  vtp->dlist.next = NULL;
 8006864:	9b01      	ldr	r3, [sp, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	601a      	str	r2, [r3, #0]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (ch_dlist_isempty(&vtlp->dlist)) {
 800686a:	9b05      	ldr	r3, [sp, #20]
 800686c:	4618      	mov	r0, r3
 800686e:	f7ff fddf 	bl	8006430 <ch_dlist_isempty>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d002      	beq.n	800687e <chVTDoResetI+0x6e>

    port_timer_stop_alarm();
 8006878:	f7ff fea2 	bl	80065c0 <port_timer_stop_alarm>

    return;
 800687c:	e024      	b.n	80068c8 <chVTDoResetI+0xb8>
  }

  /* The delta of the removed timer is added to the new first timer.*/
  vtlp->dlist.next->delta += vtp->dlist.delta;
 800687e:	9b05      	ldr	r3, [sp, #20]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	6899      	ldr	r1, [r3, #8]
 8006884:	9b01      	ldr	r3, [sp, #4]
 8006886:	689a      	ldr	r2, [r3, #8]
 8006888:	9b05      	ldr	r3, [sp, #20]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	440a      	add	r2, r1
 800688e:	609a      	str	r2, [r3, #8]

  /* Distance in ticks between the last alarm event and current time.*/
  now = chVTGetSystemTimeX();
 8006890:	f7ff fed6 	bl	8006640 <chVTGetSystemTimeX.lto_priv.1>
 8006894:	9004      	str	r0, [sp, #16]
  nowdelta = chTimeDiffX(vtlp->lasttime, now);
 8006896:	9b05      	ldr	r3, [sp, #20]
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	9904      	ldr	r1, [sp, #16]
 800689c:	4618      	mov	r0, r3
 800689e:	f7ff fdb7 	bl	8006410 <chTimeDiffX.lto_priv.0>
 80068a2:	9003      	str	r0, [sp, #12]

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= vtlp->dlist.next->delta) {
 80068a4:	9b05      	ldr	r3, [sp, #20]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	9a03      	ldr	r2, [sp, #12]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d20a      	bcs.n	80068c6 <chVTDoResetI+0xb6>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = vtlp->dlist.next->delta - nowdelta;
 80068b0:	9b05      	ldr	r3, [sp, #20]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	689a      	ldr	r2, [r3, #8]
 80068b6:	9b03      	ldr	r3, [sp, #12]
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	9302      	str	r3, [sp, #8]

  /* Setting up the alarm.*/
  vt_set_alarm(now, delta);
 80068bc:	9902      	ldr	r1, [sp, #8]
 80068be:	9804      	ldr	r0, [sp, #16]
 80068c0:	f7ff fec6 	bl	8006650 <vt_set_alarm>
 80068c4:	e000      	b.n	80068c8 <chVTDoResetI+0xb8>
    return;
 80068c6:	bf00      	nop
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 80068c8:	b007      	add	sp, #28
 80068ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80068ce:	bf00      	nop
 80068d0:	20000e60 	.word	0x20000e60
	...

080068e0 <chVTDoTickI>:
 *          to acquire the lock if needed. This is done in order to reduce
 *          interrupts jitter when many timers are in use.
 *
 * @iclass
 */
void chVTDoTickI(void) {
 80068e0:	b500      	push	{lr}
 80068e2:	b089      	sub	sp, #36	; 0x24
  virtual_timers_list_t *vtlp = &currcore->vtlist;
 80068e4:	4b48      	ldr	r3, [pc, #288]	; (8006a08 <chVTDoTickI+0x128>)
 80068e6:	9305      	str	r3, [sp, #20]
     than the interval between "now" and "lasttime".*/
  while (true) {
    systime_t lasttime;

    /* First timer in the delta list.*/
    vtp = (virtual_timer_t *)vtlp->dlist.next;
 80068e8:	9b05      	ldr	r3, [sp, #20]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	9304      	str	r3, [sp, #16]

    /* Delta between current time and last execution time.*/
    now = chVTGetSystemTimeX();
 80068ee:	f7ff fea7 	bl	8006640 <chVTGetSystemTimeX.lto_priv.1>
 80068f2:	9003      	str	r0, [sp, #12]
    nowdelta = chTimeDiffX(vtlp->lasttime, now);
 80068f4:	9b05      	ldr	r3, [sp, #20]
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	9903      	ldr	r1, [sp, #12]
 80068fa:	4618      	mov	r0, r3
 80068fc:	f7ff fd88 	bl	8006410 <chTimeDiffX.lto_priv.0>
 8006900:	9002      	str	r0, [sp, #8]

    /* Loop break condition.
       Note that the list scan is limited by the delta list header having
       "vtlp->dlist.delta == (sysinterval_t)-1" which is greater than all
       deltas*/
    if (nowdelta < vtp->dlist.delta) {
 8006902:	9b04      	ldr	r3, [sp, #16]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	9a02      	ldr	r2, [sp, #8]
 8006908:	429a      	cmp	r2, r3
 800690a:	d366      	bcc.n	80069da <chVTDoTickI+0xfa>
      break;
    }

    /* Last time deadline is updated to the next timer's time.*/
    lasttime = chTimeAddX(vtlp->lasttime, vtp->dlist.delta);
 800690c:	9b05      	ldr	r3, [sp, #20]
 800690e:	68da      	ldr	r2, [r3, #12]
 8006910:	9b04      	ldr	r3, [sp, #16]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	4619      	mov	r1, r3
 8006916:	4610      	mov	r0, r2
 8006918:	f7ff fd6a 	bl	80063f0 <chTimeAddX.lto_priv.1>
 800691c:	9001      	str	r0, [sp, #4]
    vtlp->lasttime = lasttime;
 800691e:	9b05      	ldr	r3, [sp, #20]
 8006920:	9a01      	ldr	r2, [sp, #4]
 8006922:	60da      	str	r2, [r3, #12]

    /* Removing the timer from the list, marking it as not armed.*/
    (void) ch_dlist_dequeue(&vtp->dlist);
 8006924:	9b04      	ldr	r3, [sp, #16]
 8006926:	4618      	mov	r0, r3
 8006928:	f7ff fe2a 	bl	8006580 <ch_dlist_dequeue>
    vtp->dlist.next = NULL;
 800692c:	9b04      	ldr	r3, [sp, #16]
 800692e:	2200      	movs	r2, #0
 8006930:	601a      	str	r2, [r3, #0]

    /* If the list becomes empty then the alarm is disabled.*/
    if (ch_dlist_isempty(&vtlp->dlist)) {
 8006932:	9b05      	ldr	r3, [sp, #20]
 8006934:	4618      	mov	r0, r3
 8006936:	f7ff fd7b 	bl	8006430 <ch_dlist_isempty>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d001      	beq.n	8006944 <chVTDoTickI+0x64>
      port_timer_stop_alarm();
 8006940:	f7ff fe3e 	bl	80065c0 <port_timer_stop_alarm>
    }

    /* The callback is invoked outside the kernel critical section, it
       is re-entered on the callback return. Note that "lasttime" can be
       modified within the callback if some timer function is called.*/
    chSysUnlockFromISR();
 8006944:	f7ff fe6c 	bl	8006620 <chSysUnlockFromISR.lto_priv.5>

    vtp->func(vtp, vtp->par);
 8006948:	9b04      	ldr	r3, [sp, #16]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	9a04      	ldr	r2, [sp, #16]
 800694e:	6912      	ldr	r2, [r2, #16]
 8006950:	4611      	mov	r1, r2
 8006952:	9804      	ldr	r0, [sp, #16]
 8006954:	4798      	blx	r3

    chSysLockFromISR();
 8006956:	f7ff fe53 	bl	8006600 <chSysLockFromISR.lto_priv.5>

    /* If a reload is defined the timer needs to be restarted.*/
    if (unlikely(vtp->reload > (sysinterval_t)0)) {
 800695a:	9b04      	ldr	r3, [sp, #16]
 800695c:	695b      	ldr	r3, [r3, #20]
 800695e:	2b00      	cmp	r3, #0
 8006960:	bf14      	ite	ne
 8006962:	2301      	movne	r3, #1
 8006964:	2300      	moveq	r3, #0
 8006966:	b2db      	uxtb	r3, r3
 8006968:	2b00      	cmp	r3, #0
 800696a:	d0bd      	beq.n	80068e8 <chVTDoTickI+0x8>
      sysinterval_t delay;

      /* Refreshing the now delta after spending time in the callback for
         a more accurate detection of too fast reloads.*/
      now = chVTGetSystemTimeX();
 800696c:	f7ff fe68 	bl	8006640 <chVTGetSystemTimeX.lto_priv.1>
 8006970:	9003      	str	r0, [sp, #12]
      nowdelta = chTimeDiffX(lasttime, now);
 8006972:	9903      	ldr	r1, [sp, #12]
 8006974:	9801      	ldr	r0, [sp, #4]
 8006976:	f7ff fd4b 	bl	8006410 <chTimeDiffX.lto_priv.0>
 800697a:	9002      	str	r0, [sp, #8]

#if !defined(CH_VT_RFCU_DISABLED)
      /* Checking if the required reload is feasible.*/
      if (nowdelta > vtp->reload) {
 800697c:	9b04      	ldr	r3, [sp, #16]
 800697e:	695b      	ldr	r3, [r3, #20]
 8006980:	9a02      	ldr	r2, [sp, #8]
 8006982:	429a      	cmp	r2, r3
 8006984:	d905      	bls.n	8006992 <chVTDoTickI+0xb2>
        /* System time is already past the deadline, logging the fault and
           proceeding with a minimum delay.*/

        chDbgAssert(false, "skipped deadline");
        chRFCUCollectFaultsI(CH_RFCU_VT_SKIPPED_DEADLINE);
 8006986:	2002      	movs	r0, #2
 8006988:	f7ff fd22 	bl	80063d0 <chRFCUCollectFaultsI>

        delay = (sysinterval_t)0;
 800698c:	2300      	movs	r3, #0
 800698e:	9306      	str	r3, [sp, #24]
 8006990:	e004      	b.n	800699c <chVTDoTickI+0xbc>
      }
      else {
        /* Enqueuing the timer again using the calculated delta.*/
        delay = vtp->reload - nowdelta;
 8006992:	9b04      	ldr	r3, [sp, #16]
 8006994:	695a      	ldr	r2, [r3, #20]
 8006996:	9b02      	ldr	r3, [sp, #8]
 8006998:	1ad3      	subs	r3, r2, r3
 800699a:	9306      	str	r3, [sp, #24]
      /* Enqueuing the timer again using the calculated delta.*/
      delay = vtp->reload - nowdelta;
#endif

      /* Special case where the timers list is empty.*/
      if (ch_dlist_isempty(&vtlp->dlist)) {
 800699c:	9b05      	ldr	r3, [sp, #20]
 800699e:	4618      	mov	r0, r3
 80069a0:	f7ff fd46 	bl	8006430 <ch_dlist_isempty>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d006      	beq.n	80069b8 <chVTDoTickI+0xd8>

        vt_insert_first(vtlp, vtp, now, delay);
 80069aa:	9b06      	ldr	r3, [sp, #24]
 80069ac:	9a03      	ldr	r2, [sp, #12]
 80069ae:	9904      	ldr	r1, [sp, #16]
 80069b0:	9805      	ldr	r0, [sp, #20]
 80069b2:	f7ff fe85 	bl	80066c0 <vt_insert_first>

        return;
 80069b6:	e023      	b.n	8006a00 <chVTDoTickI+0x120>

      /* Delay as delta from 'lasttime'. Note, it can overflow and the value
         becomes lower than 'nowdelta'. In that case the delta is shortened
         to make it fit the numeric range and the timer will be triggered
         "nowdelta" cycles earlier.*/
      delta = nowdelta + delay;
 80069b8:	9a02      	ldr	r2, [sp, #8]
 80069ba:	9b06      	ldr	r3, [sp, #24]
 80069bc:	4413      	add	r3, r2
 80069be:	9307      	str	r3, [sp, #28]
      if (delta < nowdelta) {
 80069c0:	9a07      	ldr	r2, [sp, #28]
 80069c2:	9b02      	ldr	r3, [sp, #8]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d201      	bcs.n	80069cc <chVTDoTickI+0xec>
        delta = delay;
 80069c8:	9b06      	ldr	r3, [sp, #24]
 80069ca:	9307      	str	r3, [sp, #28]
      }

      /* Insert into delta list. */
      ch_dlist_insert(&vtlp->dlist, &vtp->dlist, delta);
 80069cc:	9b05      	ldr	r3, [sp, #20]
 80069ce:	9904      	ldr	r1, [sp, #16]
 80069d0:	9a07      	ldr	r2, [sp, #28]
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7ff fd8c 	bl	80064f0 <ch_dlist_insert>
  while (true) {
 80069d8:	e786      	b.n	80068e8 <chVTDoTickI+0x8>
      break;
 80069da:	bf00      	nop
    }
  }

  /* If the list is empty, nothing else to do.*/
  if (ch_dlist_isempty(&vtlp->dlist)) {
 80069dc:	9b05      	ldr	r3, [sp, #20]
 80069de:	4618      	mov	r0, r3
 80069e0:	f7ff fd26 	bl	8006430 <ch_dlist_isempty>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d109      	bne.n	80069fe <chVTDoTickI+0x11e>
    return;
  }

  /* Calculating the delta to the next alarm time.*/
  delta = vtp->dlist.delta - nowdelta;
 80069ea:	9b04      	ldr	r3, [sp, #16]
 80069ec:	689a      	ldr	r2, [r3, #8]
 80069ee:	9b02      	ldr	r3, [sp, #8]
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	9307      	str	r3, [sp, #28]

  /* Update alarm time to next timer.*/
  vt_set_alarm(now, delta);
 80069f4:	9907      	ldr	r1, [sp, #28]
 80069f6:	9803      	ldr	r0, [sp, #12]
 80069f8:	f7ff fe2a 	bl	8006650 <vt_set_alarm>
 80069fc:	e000      	b.n	8006a00 <chVTDoTickI+0x120>
    return;
 80069fe:	bf00      	nop
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8006a00:	b009      	add	sp, #36	; 0x24
 8006a02:	f85d fb04 	ldr.w	pc, [sp], #4
 8006a06:	bf00      	nop
 8006a08:	20000e60 	.word	0x20000e60
 8006a0c:	00000000 	.word	0x00000000

08006a10 <chVTGetTimeStampI>:
 *
 * @return              The time stamp.
 *
 * @iclass
 */
systimestamp_t chVTGetTimeStampI(void) {
 8006a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a12:	b087      	sub	sp, #28
  os_instance_t * oip = currcore;
 8006a14:	4b12      	ldr	r3, [pc, #72]	; (8006a60 <chVTGetTimeStampI+0x50>)
 8006a16:	9305      	str	r3, [sp, #20]
  systime_t now;

  chDbgCheckClassI();

  /* Current system time.*/
  now = chVTGetSystemTimeX();
 8006a18:	f7ff fe12 	bl	8006640 <chVTGetSystemTimeX.lto_priv.1>
 8006a1c:	9004      	str	r0, [sp, #16]

  /* Last time stamp generated.*/
  last = oip->vtlist.laststamp;
 8006a1e:	9b05      	ldr	r3, [sp, #20]
 8006a20:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006a24:	e9cd 2302 	strd	r2, r3, [sp, #8]

  /* Interval between the last time stamp and current time used for a new
     time stamp. Note that this fails if the interval is larger than a
     systime_t type.*/
  stamp = last + (systimestamp_t)chTimeDiffX((systime_t)last, now);
 8006a28:	9b02      	ldr	r3, [sp, #8]
 8006a2a:	9904      	ldr	r1, [sp, #16]
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f7ff fcef 	bl	8006410 <chTimeDiffX.lto_priv.0>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2200      	movs	r2, #0
 8006a36:	461c      	mov	r4, r3
 8006a38:	4615      	mov	r5, r2
 8006a3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a3e:	1916      	adds	r6, r2, r4
 8006a40:	eb43 0705 	adc.w	r7, r3, r5
 8006a44:	e9cd 6700 	strd	r6, r7, [sp]

  chDbgAssert(oip->vtlist.laststamp <= stamp, "wrapped");

  /* Storing the new stamp.*/
  oip->vtlist.laststamp = stamp;
 8006a48:	9905      	ldr	r1, [sp, #20]
 8006a4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006a4e:	e9c1 2308 	strd	r2, r3, [r1, #32]

  return stamp;
 8006a52:	e9dd 2300 	ldrd	r2, r3, [sp]
}
 8006a56:	4610      	mov	r0, r2
 8006a58:	4619      	mov	r1, r3
 8006a5a:	b007      	add	sp, #28
 8006a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a5e:	bf00      	nop
 8006a60:	20000e50 	.word	0x20000e50
	...

08006a70 <ch_queue_dequeue.lto_priv.0>:
static inline ch_queue_t *ch_queue_dequeue(ch_queue_t *p) {
 8006a70:	b082      	sub	sp, #8
 8006a72:	9001      	str	r0, [sp, #4]
  p->prev->next = p->next;
 8006a74:	9b01      	ldr	r3, [sp, #4]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	9a01      	ldr	r2, [sp, #4]
 8006a7a:	6812      	ldr	r2, [r2, #0]
 8006a7c:	601a      	str	r2, [r3, #0]
  p->next->prev = p->prev;
 8006a7e:	9b01      	ldr	r3, [sp, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	9a01      	ldr	r2, [sp, #4]
 8006a84:	6852      	ldr	r2, [r2, #4]
 8006a86:	605a      	str	r2, [r3, #4]
  return p;
 8006a88:	9b01      	ldr	r3, [sp, #4]
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	b002      	add	sp, #8
 8006a8e:	4770      	bx	lr

08006a90 <ch_pqueue_remove_highest>:
static inline ch_priority_queue_t *ch_pqueue_remove_highest(ch_priority_queue_t *pqp) {
 8006a90:	b084      	sub	sp, #16
 8006a92:	9001      	str	r0, [sp, #4]
  ch_priority_queue_t *p = pqp->next;
 8006a94:	9b01      	ldr	r3, [sp, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	9303      	str	r3, [sp, #12]
  pqp->next       = p->next;
 8006a9a:	9b03      	ldr	r3, [sp, #12]
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	9b01      	ldr	r3, [sp, #4]
 8006aa0:	601a      	str	r2, [r3, #0]
  pqp->next->prev = pqp;
 8006aa2:	9b01      	ldr	r3, [sp, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	9a01      	ldr	r2, [sp, #4]
 8006aa8:	605a      	str	r2, [r3, #4]
  return p;
 8006aaa:	9b03      	ldr	r3, [sp, #12]
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	b004      	add	sp, #16
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop
	...

08006ac0 <ch_pqueue_insert_behind>:
                                                           ch_priority_queue_t *p) {
 8006ac0:	b082      	sub	sp, #8
 8006ac2:	9001      	str	r0, [sp, #4]
 8006ac4:	9100      	str	r1, [sp, #0]
    pqp = pqp->next;
 8006ac6:	9b01      	ldr	r3, [sp, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	9301      	str	r3, [sp, #4]
  } while (unlikely(pqp->prio >= p->prio));
 8006acc:	9b01      	ldr	r3, [sp, #4]
 8006ace:	689a      	ldr	r2, [r3, #8]
 8006ad0:	9b00      	ldr	r3, [sp, #0]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	bf2c      	ite	cs
 8006ad8:	2301      	movcs	r3, #1
 8006ada:	2300      	movcc	r3, #0
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d1f1      	bne.n	8006ac6 <ch_pqueue_insert_behind+0x6>
  p->next       = pqp;
 8006ae2:	9b00      	ldr	r3, [sp, #0]
 8006ae4:	9a01      	ldr	r2, [sp, #4]
 8006ae6:	601a      	str	r2, [r3, #0]
  p->prev       = pqp->prev;
 8006ae8:	9b01      	ldr	r3, [sp, #4]
 8006aea:	685a      	ldr	r2, [r3, #4]
 8006aec:	9b00      	ldr	r3, [sp, #0]
 8006aee:	605a      	str	r2, [r3, #4]
  p->prev->next = p;
 8006af0:	9b00      	ldr	r3, [sp, #0]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	9a00      	ldr	r2, [sp, #0]
 8006af6:	601a      	str	r2, [r3, #0]
  pqp->prev     = p;
 8006af8:	9b01      	ldr	r3, [sp, #4]
 8006afa:	9a00      	ldr	r2, [sp, #0]
 8006afc:	605a      	str	r2, [r3, #4]
  return p;
 8006afe:	9b00      	ldr	r3, [sp, #0]
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	b002      	add	sp, #8
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
	...

08006b10 <ch_pqueue_insert_ahead>:
                                                          ch_priority_queue_t *p) {
 8006b10:	b082      	sub	sp, #8
 8006b12:	9001      	str	r0, [sp, #4]
 8006b14:	9100      	str	r1, [sp, #0]
    pqp = pqp->next;
 8006b16:	9b01      	ldr	r3, [sp, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	9301      	str	r3, [sp, #4]
  } while (unlikely(pqp->prio > p->prio));
 8006b1c:	9b01      	ldr	r3, [sp, #4]
 8006b1e:	689a      	ldr	r2, [r3, #8]
 8006b20:	9b00      	ldr	r3, [sp, #0]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	bf8c      	ite	hi
 8006b28:	2301      	movhi	r3, #1
 8006b2a:	2300      	movls	r3, #0
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d1f1      	bne.n	8006b16 <ch_pqueue_insert_ahead+0x6>
  p->next       = pqp;
 8006b32:	9b00      	ldr	r3, [sp, #0]
 8006b34:	9a01      	ldr	r2, [sp, #4]
 8006b36:	601a      	str	r2, [r3, #0]
  p->prev       = pqp->prev;
 8006b38:	9b01      	ldr	r3, [sp, #4]
 8006b3a:	685a      	ldr	r2, [r3, #4]
 8006b3c:	9b00      	ldr	r3, [sp, #0]
 8006b3e:	605a      	str	r2, [r3, #4]
  p->prev->next = p;
 8006b40:	9b00      	ldr	r3, [sp, #0]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	9a00      	ldr	r2, [sp, #0]
 8006b46:	601a      	str	r2, [r3, #0]
  pqp->prev     = p;
 8006b48:	9b01      	ldr	r3, [sp, #4]
 8006b4a:	9a00      	ldr	r2, [sp, #0]
 8006b4c:	605a      	str	r2, [r3, #4]
  return p;
 8006b4e:	9b00      	ldr	r3, [sp, #0]
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	b002      	add	sp, #8
 8006b54:	4770      	bx	lr
 8006b56:	bf00      	nop
	...

08006b60 <chSysLockFromISR.lto_priv.6>:
static inline void chSysLockFromISR(void) {
 8006b60:	b082      	sub	sp, #8
 8006b62:	2330      	movs	r3, #48	; 0x30
 8006b64:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8006b66:	9b01      	ldr	r3, [sp, #4]
 8006b68:	f383 8811 	msr	BASEPRI, r3
}
 8006b6c:	bf00      	nop
}
 8006b6e:	bf00      	nop
}
 8006b70:	bf00      	nop
}
 8006b72:	bf00      	nop
 8006b74:	b002      	add	sp, #8
 8006b76:	4770      	bx	lr
	...

08006b80 <chSysUnlockFromISR.lto_priv.6>:
static inline void chSysUnlockFromISR(void) {
 8006b80:	b082      	sub	sp, #8
 8006b82:	2300      	movs	r3, #0
 8006b84:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8006b86:	9b01      	ldr	r3, [sp, #4]
 8006b88:	f383 8811 	msr	BASEPRI, r3
}
 8006b8c:	bf00      	nop
}
 8006b8e:	bf00      	nop
}
 8006b90:	bf00      	nop
}
 8006b92:	bf00      	nop
 8006b94:	b002      	add	sp, #8
 8006b96:	4770      	bx	lr
	...

08006ba0 <chVTIsArmedI>:
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 * @return              true if the timer is armed.
 *
 * @iclass
 */
static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {
 8006ba0:	b082      	sub	sp, #8
 8006ba2:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();

  return (bool)(vtp->dlist.next != NULL);
 8006ba4:	9b01      	ldr	r3, [sp, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	bf14      	ite	ne
 8006bac:	2301      	movne	r3, #1
 8006bae:	2300      	moveq	r3, #0
 8006bb0:	b2db      	uxtb	r3, r3
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	b002      	add	sp, #8
 8006bb6:	4770      	bx	lr
	...

08006bc0 <chSemFastSignalI.lto_priv.0>:
 *
 * @param[in] sp        pointer to a @p semaphore_t structure
 *
 * @iclass
 */
static inline void chSemFastSignalI(semaphore_t *sp) {
 8006bc0:	b082      	sub	sp, #8
 8006bc2:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();

  sp->cnt++;
 8006bc4:	9b01      	ldr	r3, [sp, #4]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	1c5a      	adds	r2, r3, #1
 8006bca:	9b01      	ldr	r3, [sp, #4]
 8006bcc:	609a      	str	r2, [r3, #8]
}
 8006bce:	bf00      	nop
 8006bd0:	b002      	add	sp, #8
 8006bd2:	4770      	bx	lr
	...

08006be0 <__sch_ready_behind>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @notapi
 */
static thread_t *__sch_ready_behind(thread_t *tp) {
 8006be0:	b500      	push	{lr}
 8006be2:	b083      	sub	sp, #12
 8006be4:	9001      	str	r0, [sp, #4]

  /* Tracing the event.*/
  __trace_ready(tp, tp->u.rdymsg);

  /* The thread is marked ready.*/
  tp->state = CH_STATE_READY;
 8006be6:	9b01      	ldr	r3, [sp, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Insertion in the priority queue.*/
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
 8006bee:	9b01      	ldr	r3, [sp, #4]
 8006bf0:	699b      	ldr	r3, [r3, #24]
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	9b01      	ldr	r3, [sp, #4]
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	4610      	mov	r0, r2
 8006bfa:	f7ff ff61 	bl	8006ac0 <ch_pqueue_insert_behind>
 8006bfe:	4603      	mov	r3, r0
                                           &tp->hdr.pqueue));
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	b003      	add	sp, #12
 8006c04:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08006c10 <__sch_ready_ahead>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @notapi
 */
static thread_t *__sch_ready_ahead(thread_t *tp) {
 8006c10:	b500      	push	{lr}
 8006c12:	b083      	sub	sp, #12
 8006c14:	9001      	str	r0, [sp, #4]

  /* Tracing the event.*/
  __trace_ready(tp, tp->u.rdymsg);

  /* The thread is marked ready.*/
  tp->state = CH_STATE_READY;
 8006c16:	9b01      	ldr	r3, [sp, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Insertion in the priority queue.*/
  return threadref(ch_pqueue_insert_ahead(&tp->owner->rlist.pqueue,
 8006c1e:	9b01      	ldr	r3, [sp, #4]
 8006c20:	699b      	ldr	r3, [r3, #24]
 8006c22:	461a      	mov	r2, r3
 8006c24:	9b01      	ldr	r3, [sp, #4]
 8006c26:	4619      	mov	r1, r3
 8006c28:	4610      	mov	r0, r2
 8006c2a:	f7ff ff71 	bl	8006b10 <ch_pqueue_insert_ahead>
 8006c2e:	4603      	mov	r3, r0
                                          &tp->hdr.pqueue));
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	b003      	add	sp, #12
 8006c34:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08006c40 <__sch_reschedule_ahead>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself.
 *
 * @notapi
 */
static void __sch_reschedule_ahead(void) {
 8006c40:	b500      	push	{lr}
 8006c42:	b085      	sub	sp, #20
  os_instance_t *oip = currcore;
 8006c44:	4b0e      	ldr	r3, [pc, #56]	; (8006c80 <__sch_reschedule_ahead+0x40>)
 8006c46:	9303      	str	r3, [sp, #12]
  thread_t *otp = __instance_get_currthread(oip);
 8006c48:	9b03      	ldr	r3, [sp, #12]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	9302      	str	r3, [sp, #8]
  thread_t *ntp;

  /* Picks the first thread from the ready queue and makes it current.*/
  ntp = threadref(ch_pqueue_remove_highest(&oip->rlist.pqueue));
 8006c4e:	9b03      	ldr	r3, [sp, #12]
 8006c50:	4618      	mov	r0, r3
 8006c52:	f7ff ff1d 	bl	8006a90 <ch_pqueue_remove_highest>
 8006c56:	9001      	str	r0, [sp, #4]
  ntp->state = CH_STATE_CURRENT;
 8006c58:	9b01      	ldr	r3, [sp, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 8006c60:	9b03      	ldr	r3, [sp, #12]
 8006c62:	9a01      	ldr	r2, [sp, #4]
 8006c64:	60da      	str	r2, [r3, #12]
  if (otp->hdr.pqueue.prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }

  /* Placing in ready list ahead of peers.*/
  otp = __sch_ready_ahead(otp);
 8006c66:	9802      	ldr	r0, [sp, #8]
 8006c68:	f7ff ffd2 	bl	8006c10 <__sch_ready_ahead>
 8006c6c:	9002      	str	r0, [sp, #8]

  /* Swap operation as tail call.*/
  chSysSwitch(ntp, otp);
 8006c6e:	9902      	ldr	r1, [sp, #8]
 8006c70:	9801      	ldr	r0, [sp, #4]
 8006c72:	f7f9 fb35 	bl	80002e0 <__port_switch>
}
 8006c76:	bf00      	nop
 8006c78:	b005      	add	sp, #20
 8006c7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8006c7e:	bf00      	nop
 8006c80:	20000e50 	.word	0x20000e50
	...

08006c90 <__sch_wakeup>:

/*
 * Timeout wakeup callback.
 */
static void __sch_wakeup(virtual_timer_t *vtp, void *p) {
 8006c90:	b500      	push	{lr}
 8006c92:	b085      	sub	sp, #20
 8006c94:	9001      	str	r0, [sp, #4]
 8006c96:	9100      	str	r1, [sp, #0]
  thread_t *tp = threadref(p);
 8006c98:	9b00      	ldr	r3, [sp, #0]
 8006c9a:	9303      	str	r3, [sp, #12]

  (void)vtp;

  chSysLockFromISR();
 8006c9c:	f7ff ff60 	bl	8006b60 <chSysLockFromISR.lto_priv.6>
  switch (tp->state) {
 8006ca0:	9b03      	ldr	r3, [sp, #12]
 8006ca2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006ca6:	2b0c      	cmp	r3, #12
 8006ca8:	d82e      	bhi.n	8006d08 <__sch_wakeup+0x78>
 8006caa:	a201      	add	r2, pc, #4	; (adr r2, 8006cb0 <__sch_wakeup+0x20>)
 8006cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb0:	08006ce5 	.word	0x08006ce5
 8006cb4:	08006d09 	.word	0x08006d09
 8006cb8:	08006d09 	.word	0x08006d09
 8006cbc:	08006ceb 	.word	0x08006ceb
 8006cc0:	08006cff 	.word	0x08006cff
 8006cc4:	08006cf5 	.word	0x08006cf5
 8006cc8:	08006d09 	.word	0x08006d09
 8006ccc:	08006cff 	.word	0x08006cff
 8006cd0:	08006d09 	.word	0x08006d09
 8006cd4:	08006d09 	.word	0x08006d09
 8006cd8:	08006d09 	.word	0x08006d09
 8006cdc:	08006d09 	.word	0x08006d09
 8006ce0:	08006cff 	.word	0x08006cff
  case CH_STATE_READY:
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
 8006ce4:	f7ff ff4c 	bl	8006b80 <chSysUnlockFromISR.lto_priv.6>
    return;
 8006ce8:	e019      	b.n	8006d1e <__sch_wakeup+0x8e>
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
 8006cea:	9b03      	ldr	r3, [sp, #12]
 8006cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cee:	2200      	movs	r2, #0
 8006cf0:	601a      	str	r2, [r3, #0]
    break;
 8006cf2:	e00a      	b.n	8006d0a <__sch_wakeup+0x7a>
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
 8006cf4:	9b03      	ldr	r3, [sp, #12]
 8006cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7ff ff61 	bl	8006bc0 <chSemFastSignalI.lto_priv.0>
#endif
#if (CH_CFG_USE_CONDVARS == TRUE) && (CH_CFG_USE_CONDVARS_TIMEOUT == TRUE)
  case CH_STATE_WTCOND:
#endif
    /* States requiring dequeuing.*/
    (void) ch_queue_dequeue(&tp->hdr.queue);
 8006cfe:	9b03      	ldr	r3, [sp, #12]
 8006d00:	4618      	mov	r0, r3
 8006d02:	f7ff feb5 	bl	8006a70 <ch_queue_dequeue.lto_priv.0>
    break;
 8006d06:	e000      	b.n	8006d0a <__sch_wakeup+0x7a>
  default:
    /* Any other state, nothing to do.*/
    break;
 8006d08:	bf00      	nop
  }

  /* Standard message for timeout conditions.*/
  tp->u.rdymsg = MSG_TIMEOUT;
 8006d0a:	9b03      	ldr	r3, [sp, #12]
 8006d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d10:	629a      	str	r2, [r3, #40]	; 0x28

  /* Goes behind peers because it went to sleep voluntarily.*/
  (void) __sch_ready_behind(tp);
 8006d12:	9803      	ldr	r0, [sp, #12]
 8006d14:	f7ff ff64 	bl	8006be0 <__sch_ready_behind>
  chSysUnlockFromISR();
 8006d18:	f7ff ff32 	bl	8006b80 <chSysUnlockFromISR.lto_priv.6>

  return;
 8006d1c:	bf00      	nop
}
 8006d1e:	b005      	add	sp, #20
 8006d20:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08006d30 <chSchReadyI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 8006d30:	b500      	push	{lr}
 8006d32:	b083      	sub	sp, #12
 8006d34:	9001      	str	r0, [sp, #4]
       the other core.*/
    chSysNotifyInstance(tp->owner);
  }
#endif

  return __sch_ready_behind(tp);
 8006d36:	9801      	ldr	r0, [sp, #4]
 8006d38:	f7ff ff52 	bl	8006be0 <__sch_ready_behind>
 8006d3c:	4603      	mov	r3, r0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	b003      	add	sp, #12
 8006d42:	f85d fb04 	ldr.w	pc, [sp], #4
 8006d46:	bf00      	nop
	...

08006d50 <chSchGoSleepS>:
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8006d50:	b500      	push	{lr}
 8006d52:	b087      	sub	sp, #28
 8006d54:	4603      	mov	r3, r0
 8006d56:	f88d 3007 	strb.w	r3, [sp, #7]
  os_instance_t *oip = currcore;
 8006d5a:	4b0f      	ldr	r3, [pc, #60]	; (8006d98 <chSchGoSleepS+0x48>)
 8006d5c:	9304      	str	r3, [sp, #16]
  thread_t *otp = __instance_get_currthread(oip);
 8006d5e:	9b04      	ldr	r3, [sp, #16]
 8006d60:	68db      	ldr	r3, [r3, #12]
 8006d62:	9303      	str	r3, [sp, #12]

  chDbgAssert(otp != chSysGetIdleThreadX(), "sleeping in idle thread");
  chDbgAssert(otp->owner == oip, "invalid core");

  /* New state.*/
  otp->state = newstate;
 8006d64:	9b03      	ldr	r3, [sp, #12]
 8006d66:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8006d6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
     time quantum when it will wakeup.*/
  otp->ticks = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  ntp = threadref(ch_pqueue_remove_highest(&oip->rlist.pqueue));
 8006d6e:	9b04      	ldr	r3, [sp, #16]
 8006d70:	4618      	mov	r0, r3
 8006d72:	f7ff fe8d 	bl	8006a90 <ch_pqueue_remove_highest>
 8006d76:	9005      	str	r0, [sp, #20]
  ntp->state = CH_STATE_CURRENT;
 8006d78:	9b05      	ldr	r3, [sp, #20]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 8006d80:	9b04      	ldr	r3, [sp, #16]
 8006d82:	9a05      	ldr	r2, [sp, #20]
 8006d84:	60da      	str	r2, [r3, #12]
  if (ntp->hdr.pqueue.prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }

  /* Swap operation as tail call.*/
  chSysSwitch(ntp, otp);
 8006d86:	9903      	ldr	r1, [sp, #12]
 8006d88:	9805      	ldr	r0, [sp, #20]
 8006d8a:	f7f9 faa9 	bl	80002e0 <__port_switch>
}
 8006d8e:	bf00      	nop
 8006d90:	b007      	add	sp, #28
 8006d92:	f85d fb04 	ldr.w	pc, [sp], #4
 8006d96:	bf00      	nop
 8006d98:	20000e50 	.word	0x20000e50
 8006d9c:	00000000 	.word	0x00000000

08006da0 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8006da0:	b500      	push	{lr}
 8006da2:	b08b      	sub	sp, #44	; 0x2c
 8006da4:	4603      	mov	r3, r0
 8006da6:	9100      	str	r1, [sp, #0]
 8006da8:	f88d 3007 	strb.w	r3, [sp, #7]
  thread_t *tp = __instance_get_currthread(currcore);
 8006dac:	4b15      	ldr	r3, [pc, #84]	; (8006e04 <chSchGoSleepTimeoutS+0x64>)
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	9309      	str	r3, [sp, #36]	; 0x24

  chDbgCheckClassS();

  if (TIME_INFINITE != timeout) {
 8006db2:	9b00      	ldr	r3, [sp, #0]
 8006db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db8:	d016      	beq.n	8006de8 <chSchGoSleepTimeoutS+0x48>
    virtual_timer_t vt;

    chVTDoSetI(&vt, timeout, __sch_wakeup, (void *)tp);
 8006dba:	a803      	add	r0, sp, #12
 8006dbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dbe:	4a12      	ldr	r2, [pc, #72]	; (8006e08 <chSchGoSleepTimeoutS+0x68>)
 8006dc0:	9900      	ldr	r1, [sp, #0]
 8006dc2:	f7ff fd05 	bl	80067d0 <chVTDoSetI>
    chSchGoSleepS(newstate);
 8006dc6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7ff ffc0 	bl	8006d50 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8006dd0:	ab03      	add	r3, sp, #12
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f7ff fee4 	bl	8006ba0 <chVTIsArmedI>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d009      	beq.n	8006df2 <chSchGoSleepTimeoutS+0x52>
      chVTDoResetI(&vt);
 8006dde:	ab03      	add	r3, sp, #12
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7ff fd15 	bl	8006810 <chVTDoResetI>
 8006de6:	e004      	b.n	8006df2 <chSchGoSleepTimeoutS+0x52>
    }
  }
  else {
    chSchGoSleepS(newstate);
 8006de8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006dec:	4618      	mov	r0, r3
 8006dee:	f7ff ffaf 	bl	8006d50 <chSchGoSleepS>
  }

  return tp->u.rdymsg;
 8006df2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df6:	bf00      	nop
 8006df8:	bf00      	nop
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	b00b      	add	sp, #44	; 0x2c
 8006dfe:	f85d fb04 	ldr.w	pc, [sp], #4
 8006e02:	bf00      	nop
 8006e04:	20000e50 	.word	0x20000e50
 8006e08:	08006c91 	.word	0x08006c91
 8006e0c:	00000000 	.word	0x00000000

08006e10 <chSchWakeupS>:
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8006e10:	b500      	push	{lr}
 8006e12:	b085      	sub	sp, #20
 8006e14:	9001      	str	r0, [sp, #4]
 8006e16:	9100      	str	r1, [sp, #0]
  os_instance_t *oip = currcore;
 8006e18:	4b14      	ldr	r3, [pc, #80]	; (8006e6c <chSchWakeupS+0x5c>)
 8006e1a:	9302      	str	r3, [sp, #8]
  thread_t *otp = __instance_get_currthread(oip);
 8006e1c:	9b02      	ldr	r3, [sp, #8]
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	9303      	str	r3, [sp, #12]
              (oip->rlist.current->hdr.pqueue.prio >= oip->rlist.pqueue.next->prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->u.rdymsg = msg;
 8006e22:	9b01      	ldr	r3, [sp, #4]
 8006e24:	9a00      	ldr	r2, [sp, #0]
 8006e26:	629a      	str	r2, [r3, #40]	; 0x28
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.
     Note, we are favoring the path where the woken thread has higher
     priority.*/
  if (unlikely(ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio)) {
 8006e28:	9b01      	ldr	r3, [sp, #4]
 8006e2a:	689a      	ldr	r2, [r3, #8]
 8006e2c:	9b03      	ldr	r3, [sp, #12]
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	bf94      	ite	ls
 8006e34:	2301      	movls	r3, #1
 8006e36:	2300      	movhi	r3, #0
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d003      	beq.n	8006e46 <chSchWakeupS+0x36>
    (void) __sch_ready_behind(ntp);
 8006e3e:	9801      	ldr	r0, [sp, #4]
 8006e40:	f7ff fece 	bl	8006be0 <__sch_ready_behind>
    __instance_set_currthread(oip, ntp);

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
  }
}
 8006e44:	e00e      	b.n	8006e64 <chSchWakeupS+0x54>
    otp = __sch_ready_ahead(otp);
 8006e46:	9803      	ldr	r0, [sp, #12]
 8006e48:	f7ff fee2 	bl	8006c10 <__sch_ready_ahead>
 8006e4c:	9003      	str	r0, [sp, #12]
    ntp->state = CH_STATE_CURRENT;
 8006e4e:	9b01      	ldr	r3, [sp, #4]
 8006e50:	2201      	movs	r2, #1
 8006e52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    __instance_set_currthread(oip, ntp);
 8006e56:	9b02      	ldr	r3, [sp, #8]
 8006e58:	9a01      	ldr	r2, [sp, #4]
 8006e5a:	60da      	str	r2, [r3, #12]
    chSysSwitch(ntp, otp);
 8006e5c:	9903      	ldr	r1, [sp, #12]
 8006e5e:	9801      	ldr	r0, [sp, #4]
 8006e60:	f7f9 fa3e 	bl	80002e0 <__port_switch>
}
 8006e64:	bf00      	nop
 8006e66:	b005      	add	sp, #20
 8006e68:	f85d fb04 	ldr.w	pc, [sp], #4
 8006e6c:	20000e50 	.word	0x20000e50

08006e70 <chSchRescheduleS>:
 * @note    Only local threads are considered, other cores are signaled
 *          and perform a reschedule locally.
 *
 * @sclass
 */
void chSchRescheduleS(void) {
 8006e70:	b500      	push	{lr}
 8006e72:	b083      	sub	sp, #12
  os_instance_t *oip = currcore;
 8006e74:	4b0b      	ldr	r3, [pc, #44]	; (8006ea4 <chSchRescheduleS+0x34>)
 8006e76:	9301      	str	r3, [sp, #4]
  thread_t *tp = __instance_get_currthread(oip);
 8006e78:	9b01      	ldr	r3, [sp, #4]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	9300      	str	r3, [sp, #0]

  chDbgCheckClassS();

  /* Note, we are favoring the path where the reschedule is necessary
     because higher priority threads are ready.*/
  if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 8006e7e:	9b01      	ldr	r3, [sp, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	689a      	ldr	r2, [r3, #8]
 8006e84:	9b00      	ldr	r3, [sp, #0]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	bf8c      	ite	hi
 8006e8c:	2301      	movhi	r3, #1
 8006e8e:	2300      	movls	r3, #0
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d001      	beq.n	8006e9a <chSchRescheduleS+0x2a>
    __sch_reschedule_ahead();
 8006e96:	f7ff fed3 	bl	8006c40 <__sch_reschedule_ahead>
  }
}
 8006e9a:	bf00      	nop
 8006e9c:	b003      	add	sp, #12
 8006e9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006ea2:	bf00      	nop
 8006ea4:	20000e50 	.word	0x20000e50
	...

08006eb0 <chSchIsPreemptionRequired>:
 *                      immediately.
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
 8006eb0:	b084      	sub	sp, #16
  os_instance_t *oip = currcore;
 8006eb2:	4b0b      	ldr	r3, [pc, #44]	; (8006ee0 <chSchIsPreemptionRequired+0x30>)
 8006eb4:	9303      	str	r3, [sp, #12]
  thread_t *tp = __instance_get_currthread(oip);
 8006eb6:	9b03      	ldr	r3, [sp, #12]
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	9302      	str	r3, [sp, #8]

  tprio_t p1 = firstprio(&oip->rlist.pqueue);
 8006ebc:	9b03      	ldr	r3, [sp, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	9301      	str	r3, [sp, #4]
  tprio_t p2 = tp->hdr.pqueue.prio;
 8006ec4:	9b02      	ldr	r3, [sp, #8]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	9300      	str	r3, [sp, #0]
     if the first thread on the ready queue has equal or higher priority.*/
  return (tp->ticks > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
#else
  /* If the round robin preemption feature is not enabled then performs a
     simpler comparison.*/
  return p1 > p2;
 8006eca:	9a01      	ldr	r2, [sp, #4]
 8006ecc:	9b00      	ldr	r3, [sp, #0]
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	bf8c      	ite	hi
 8006ed2:	2301      	movhi	r3, #1
 8006ed4:	2300      	movls	r3, #0
 8006ed6:	b2db      	uxtb	r3, r3
#endif
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	b004      	add	sp, #16
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop
 8006ee0:	20000e50 	.word	0x20000e50
	...

08006ef0 <chSchDoPreemption>:
 * @note    Not a user function, it is meant to be invoked from within
 *          the port layer in the IRQ-related preemption code.
 *
 * @special
 */
void chSchDoPreemption(void) {
 8006ef0:	b500      	push	{lr}
 8006ef2:	b085      	sub	sp, #20
  os_instance_t *oip = currcore;
 8006ef4:	4b0e      	ldr	r3, [pc, #56]	; (8006f30 <chSchDoPreemption+0x40>)
 8006ef6:	9303      	str	r3, [sp, #12]
  thread_t *otp = __instance_get_currthread(oip);
 8006ef8:	9b03      	ldr	r3, [sp, #12]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	9302      	str	r3, [sp, #8]
  thread_t *ntp;

  /* Picks the first thread from the ready queue and makes it current.*/
  ntp = threadref(ch_pqueue_remove_highest(&oip->rlist.pqueue));
 8006efe:	9b03      	ldr	r3, [sp, #12]
 8006f00:	4618      	mov	r0, r3
 8006f02:	f7ff fdc5 	bl	8006a90 <ch_pqueue_remove_highest>
 8006f06:	9001      	str	r0, [sp, #4]
  ntp->state = CH_STATE_CURRENT;
 8006f08:	9b01      	ldr	r3, [sp, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  __instance_set_currthread(oip, ntp);
 8006f10:	9b03      	ldr	r3, [sp, #12]
 8006f12:	9a01      	ldr	r2, [sp, #4]
 8006f14:	60da      	str	r2, [r3, #12]
    otp = __sch_ready_ahead(otp);
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  otp = __sch_ready_ahead(otp);
 8006f16:	9802      	ldr	r0, [sp, #8]
 8006f18:	f7ff fe7a 	bl	8006c10 <__sch_ready_ahead>
 8006f1c:	9002      	str	r0, [sp, #8]
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(ntp, otp);
 8006f1e:	9902      	ldr	r1, [sp, #8]
 8006f20:	9801      	ldr	r0, [sp, #4]
 8006f22:	f7f9 f9dd 	bl	80002e0 <__port_switch>
}
 8006f26:	bf00      	nop
 8006f28:	b005      	add	sp, #20
 8006f2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8006f2e:	bf00      	nop
 8006f30:	20000e50 	.word	0x20000e50
	...

08006f40 <__rfcu_object_init>:
 *
 * @param[out] rfcup    pointer to the @p rfcu_t structure
 *
 * @notapi
 */
static inline void __rfcu_object_init(rfcu_t *rfcup) {
 8006f40:	b082      	sub	sp, #8
 8006f42:	9001      	str	r0, [sp, #4]

  rfcup->mask = (rfcu_mask_t)0;
 8006f44:	9b01      	ldr	r3, [sp, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	601a      	str	r2, [r3, #0]
}
 8006f4a:	bf00      	nop
 8006f4c:	b002      	add	sp, #8
 8006f4e:	4770      	bx	lr

08006f50 <__dbg_object_init>:
 *
 * @param[out] sdp      pointer to the @p system_debug_t structure
 *
 * @notapi
 */
static inline void __dbg_object_init(system_debug_t *sdp) {
 8006f50:	b082      	sub	sp, #8
 8006f52:	9001      	str	r0, [sp, #4]

  sdp->panic_msg = NULL;
 8006f54:	9b01      	ldr	r3, [sp, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	601a      	str	r2, [r3, #0]
#if CH_DBG_SYSTEM_STATE_CHECK == TRUE
  /* The initial state is assumed to be within a critical zone.*/
  sdp->isr_cnt  = (cnt_t)0;
  sdp->lock_cnt = (cnt_t)1;
#endif
}
 8006f5a:	bf00      	nop
 8006f5c:	b002      	add	sp, #8
 8006f5e:	4770      	bx	lr

08006f60 <ch_queue_init.lto_priv.2>:
static inline void ch_queue_init(ch_queue_t *qp) {
 8006f60:	b082      	sub	sp, #8
 8006f62:	9001      	str	r0, [sp, #4]
  qp->next = qp;
 8006f64:	9b01      	ldr	r3, [sp, #4]
 8006f66:	9a01      	ldr	r2, [sp, #4]
 8006f68:	601a      	str	r2, [r3, #0]
  qp->prev = qp;
 8006f6a:	9b01      	ldr	r3, [sp, #4]
 8006f6c:	9a01      	ldr	r2, [sp, #4]
 8006f6e:	605a      	str	r2, [r3, #4]
}
 8006f70:	bf00      	nop
 8006f72:	b002      	add	sp, #8
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop
	...

08006f80 <ch_pqueue_init>:
static inline void ch_pqueue_init(ch_priority_queue_t *pqp) {
 8006f80:	b082      	sub	sp, #8
 8006f82:	9001      	str	r0, [sp, #4]
  pqp->next = pqp;
 8006f84:	9b01      	ldr	r3, [sp, #4]
 8006f86:	9a01      	ldr	r2, [sp, #4]
 8006f88:	601a      	str	r2, [r3, #0]
  pqp->prev = pqp;
 8006f8a:	9b01      	ldr	r3, [sp, #4]
 8006f8c:	9a01      	ldr	r2, [sp, #4]
 8006f8e:	605a      	str	r2, [r3, #4]
  pqp->prio = (tprio_t)0;
 8006f90:	9b01      	ldr	r3, [sp, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	609a      	str	r2, [r3, #8]
}
 8006f96:	bf00      	nop
 8006f98:	b002      	add	sp, #8
 8006f9a:	4770      	bx	lr
 8006f9c:	0000      	movs	r0, r0
	...

08006fa0 <ch_dlist_init>:
static inline void ch_dlist_init(ch_delta_list_t *dlhp) {
 8006fa0:	b082      	sub	sp, #8
 8006fa2:	9001      	str	r0, [sp, #4]
  dlhp->next  = dlhp;
 8006fa4:	9b01      	ldr	r3, [sp, #4]
 8006fa6:	9a01      	ldr	r2, [sp, #4]
 8006fa8:	601a      	str	r2, [r3, #0]
  dlhp->prev  = dlhp;
 8006faa:	9b01      	ldr	r3, [sp, #4]
 8006fac:	9a01      	ldr	r2, [sp, #4]
 8006fae:	605a      	str	r2, [r3, #4]
  dlhp->delta = (sysinterval_t)-1;
 8006fb0:	9b01      	ldr	r3, [sp, #4]
 8006fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8006fb6:	609a      	str	r2, [r3, #8]
}
 8006fb8:	bf00      	nop
 8006fba:	b002      	add	sp, #8
 8006fbc:	4770      	bx	lr
 8006fbe:	bf00      	nop

08006fc0 <port_timer_get_time.lto_priv.2>:
static inline systime_t port_timer_get_time(void) {
 8006fc0:	b508      	push	{r3, lr}
  return stGetCounter();
 8006fc2:	f7fa fc3d 	bl	8001840 <stGetCounter>
 8006fc6:	4603      	mov	r3, r0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	bd08      	pop	{r3, pc}
 8006fcc:	0000      	movs	r0, r0
	...

08006fd0 <chVTGetSystemTimeX.lto_priv.2>:
static inline systime_t chVTGetSystemTimeX(void) {
 8006fd0:	b508      	push	{r3, lr}
  return port_timer_get_time();
 8006fd2:	f7ff fff5 	bl	8006fc0 <port_timer_get_time.lto_priv.2>
 8006fd6:	4603      	mov	r3, r0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	bd08      	pop	{r3, pc}
 8006fdc:	0000      	movs	r0, r0
	...

08006fe0 <__vt_object_init>:
 *
 * @param[out] vtlp     pointer to the @p virtual_timers_list_t structure
 *
 * @notapi
 */
static inline void __vt_object_init(virtual_timers_list_t *vtlp) {
 8006fe0:	b530      	push	{r4, r5, lr}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	9001      	str	r0, [sp, #4]

  ch_dlist_init(&vtlp->dlist);
 8006fe6:	9b01      	ldr	r3, [sp, #4]
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f7ff ffd9 	bl	8006fa0 <ch_dlist_init>
#if CH_CFG_ST_TIMEDELTA == 0
  vtlp->systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  vtlp->lasttime = (systime_t)0;
 8006fee:	9b01      	ldr	r3, [sp, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	60da      	str	r2, [r3, #12]
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
#if CH_CFG_USE_TIMESTAMP == TRUE
  vtlp->laststamp = (systimestamp_t)chVTGetSystemTimeX();
 8006ff4:	f7ff ffec 	bl	8006fd0 <chVTGetSystemTimeX.lto_priv.2>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	461c      	mov	r4, r3
 8006ffe:	4615      	mov	r5, r2
 8007000:	9b01      	ldr	r3, [sp, #4]
 8007002:	e9c3 4504 	strd	r4, r5, [r3, #16]
#endif
}
 8007006:	bf00      	nop
 8007008:	b003      	add	sp, #12
 800700a:	bd30      	pop	{r4, r5, pc}
 800700c:	0000      	movs	r0, r0
	...

08007010 <__reg_object_init>:
 *
 * @param[out] rp       pointer to a @p registry_t structure
 *
 * @init
 */
static inline void __reg_object_init(registry_t *rp) {
 8007010:	b500      	push	{lr}
 8007012:	b083      	sub	sp, #12
 8007014:	9001      	str	r0, [sp, #4]

  ch_queue_init(&rp->queue);
 8007016:	9b01      	ldr	r3, [sp, #4]
 8007018:	4618      	mov	r0, r3
 800701a:	f7ff ffa1 	bl	8006f60 <ch_queue_init.lto_priv.2>
}
 800701e:	bf00      	nop
 8007020:	b003      	add	sp, #12
 8007022:	f85d fb04 	ldr.w	pc, [sp], #4
 8007026:	bf00      	nop
	...

08007030 <__idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void __idle_thread(void *p) {
 8007030:	b082      	sub	sp, #8
 8007032:	9001      	str	r0, [sp, #4]
__STATIC_FORCEINLINE void port_wait_for_interrupt(void) {

#if CORTEX_ENABLE_WFI_IDLE == TRUE
  __WFI();
#endif
  }
 8007034:	bf00      	nop
  (void)p;

  while (true) {
    /*lint -save -e522 [2.2] Apparently no side effects because it contains
      an asm instruction.*/
    port_wait_for_interrupt();
 8007036:	e7fd      	b.n	8007034 <__idle_thread+0x4>
	...

08007040 <chInstanceObjectInit>:
 * @param[in] oicp      pointer to the @p os_instance_config_t structure
 *
 * @special
 */
void chInstanceObjectInit(os_instance_t *oip,
                          const os_instance_config_t *oicp) {
 8007040:	b500      	push	{lr}
 8007042:	b08b      	sub	sp, #44	; 0x2c
 8007044:	9001      	str	r0, [sp, #4]
 8007046:	9100      	str	r1, [sp, #0]

  /* Registering into the global system structure.*/
#if CH_CFG_SMP_MODE == TRUE
  core_id = port_get_core_id();
#else
  core_id = 0U;
 8007048:	2300      	movs	r3, #0
 800704a:	9309      	str	r3, [sp, #36]	; 0x24
#endif
  chDbgAssert(ch_system.instances[core_id] == NULL, "instance already registered");
  ch_system.instances[core_id] = oip;
 800704c:	4a28      	ldr	r2, [pc, #160]	; (80070f0 <chInstanceObjectInit+0xb0>)
 800704e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	4413      	add	r3, r2
 8007054:	9a01      	ldr	r2, [sp, #4]
 8007056:	605a      	str	r2, [r3, #4]

  /* Core associated to this instance.*/
  oip->core_id = core_id;
 8007058:	9b01      	ldr	r3, [sp, #4]
 800705a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800705c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Keeping a reference to the configuration data.*/
  oip->config = oicp;
 800705e:	9b01      	ldr	r3, [sp, #4]
 8007060:	9a00      	ldr	r2, [sp, #0]
 8007062:	639a      	str	r2, [r3, #56]	; 0x38

  /* Port initialization for the current instance.*/
  port_init(oip);
 8007064:	9801      	ldr	r0, [sp, #4]
 8007066:	f001 f843 	bl	80080f0 <port_init>

  /* Ready list initialization.*/
  ch_pqueue_init(&oip->rlist.pqueue);
 800706a:	9b01      	ldr	r3, [sp, #4]
 800706c:	4618      	mov	r0, r3
 800706e:	f7ff ff87 	bl	8006f80 <ch_pqueue_init>

#if (CH_CFG_USE_REGISTRY == TRUE) && (CH_CFG_SMP_MODE == FALSE)
  /* Registry initialization when SMP mode is disabled.*/
  __reg_object_init(&oip->reglist);
 8007072:	9b01      	ldr	r3, [sp, #4]
 8007074:	3328      	adds	r3, #40	; 0x28
 8007076:	4618      	mov	r0, r3
 8007078:	f7ff ffca 	bl	8007010 <__reg_object_init>
#endif

#if CH_CFG_SMP_MODE == FALSE
  /* RFCU initialization when SMP mode is disabled.*/
  __rfcu_object_init(&oip->rfcu);
 800707c:	9b01      	ldr	r3, [sp, #4]
 800707e:	3334      	adds	r3, #52	; 0x34
 8007080:	4618      	mov	r0, r3
 8007082:	f7ff ff5d 	bl	8006f40 <__rfcu_object_init>
#endif

  /* Virtual timers list initialization.*/
  __vt_object_init(&oip->vtlist);
 8007086:	9b01      	ldr	r3, [sp, #4]
 8007088:	3310      	adds	r3, #16
 800708a:	4618      	mov	r0, r3
 800708c:	f7ff ffa8 	bl	8006fe0 <__vt_object_init>

  /* Debug support initialization.*/
  __dbg_object_init(&oip->dbg);
 8007090:	9b01      	ldr	r3, [sp, #4]
 8007092:	3384      	adds	r3, #132	; 0x84
 8007094:	4618      	mov	r0, r3
 8007096:	f7ff ff5b 	bl	8006f50 <__dbg_object_init>
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  oip->rlist.current = __thd_object_init(oip, &oip->mainthread,
 800709a:	9b01      	ldr	r3, [sp, #4]
 800709c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80070a0:	2380      	movs	r3, #128	; 0x80
 80070a2:	4a14      	ldr	r2, [pc, #80]	; (80070f4 <chInstanceObjectInit+0xb4>)
 80070a4:	9801      	ldr	r0, [sp, #4]
 80070a6:	f000 f903 	bl	80072b0 <__thd_object_init>
 80070aa:	4602      	mov	r2, r0
 80070ac:	9b01      	ldr	r3, [sp, #4]
 80070ae:	60da      	str	r2, [r3, #12]
  oip->rlist.current = __thd_object_init(oip, &oip->mainthread,
                                         "idle", IDLEPRIO);
#endif

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  oip->rlist.current->wabase = oicp->mainthread_base;
 80070b0:	9b01      	ldr	r3, [sp, #4]
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	9a00      	ldr	r2, [sp, #0]
 80070b6:	6852      	ldr	r2, [r2, #4]
 80070b8:	621a      	str	r2, [r3, #32]
#endif

  /* Setting up the caller as current thread.*/
  oip->rlist.current->state = CH_STATE_CURRENT;
 80070ba:	9b01      	ldr	r3, [sp, #4]
 80070bc:	68db      	ldr	r3, [r3, #12]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* User instance initialization hook.*/
  CH_CFG_OS_INSTANCE_INIT_HOOK(oip);

#if CH_CFG_NO_IDLE_THREAD == FALSE
  {
    thread_descriptor_t idle_descriptor = {
 80070c4:	4b0c      	ldr	r3, [pc, #48]	; (80070f8 <chInstanceObjectInit+0xb8>)
 80070c6:	9303      	str	r3, [sp, #12]
      .name     = "idle",
      .wbase    = oicp->idlethread_base,
 80070c8:	9b00      	ldr	r3, [sp, #0]
 80070ca:	68db      	ldr	r3, [r3, #12]
    thread_descriptor_t idle_descriptor = {
 80070cc:	9304      	str	r3, [sp, #16]
      .wend     = oicp->idlethread_end,
 80070ce:	9b00      	ldr	r3, [sp, #0]
 80070d0:	691b      	ldr	r3, [r3, #16]
    thread_descriptor_t idle_descriptor = {
 80070d2:	9305      	str	r3, [sp, #20]
 80070d4:	2301      	movs	r3, #1
 80070d6:	9306      	str	r3, [sp, #24]
 80070d8:	4b08      	ldr	r3, [pc, #32]	; (80070fc <chInstanceObjectInit+0xbc>)
 80070da:	9307      	str	r3, [sp, #28]
 80070dc:	2300      	movs	r3, #0
 80070de:	9308      	str	r3, [sp, #32]
#endif

    /* This thread has the lowest priority in the system, its role is just to
       serve interrupts in its context while keeping the lowest energy saving
       mode compatible with the system status.*/
    (void) chThdCreateI(&idle_descriptor);
 80070e0:	ab03      	add	r3, sp, #12
 80070e2:	4618      	mov	r0, r3
 80070e4:	f000 f954 	bl	8007390 <chThdCreateI>
  }
#endif
}
 80070e8:	bf00      	nop
 80070ea:	b00b      	add	sp, #44	; 0x2c
 80070ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80070f0:	20000e40 	.word	0x20000e40
 80070f4:	0800eed0 	.word	0x0800eed0
 80070f8:	0800eec0 	.word	0x0800eec0
 80070fc:	08007031 	.word	0x08007031

08007100 <ch_list_init>:
static inline void ch_list_init(ch_list_t *lp) {
 8007100:	b082      	sub	sp, #8
 8007102:	9001      	str	r0, [sp, #4]
  lp->next = lp;
 8007104:	9b01      	ldr	r3, [sp, #4]
 8007106:	9a01      	ldr	r2, [sp, #4]
 8007108:	601a      	str	r2, [r3, #0]
}
 800710a:	bf00      	nop
 800710c:	b002      	add	sp, #8
 800710e:	4770      	bx	lr

08007110 <ch_list_notempty>:
static inline bool ch_list_notempty(ch_list_t *lp) {
 8007110:	b082      	sub	sp, #8
 8007112:	9001      	str	r0, [sp, #4]
  return (bool)(lp->next != lp);
 8007114:	9b01      	ldr	r3, [sp, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	9a01      	ldr	r2, [sp, #4]
 800711a:	429a      	cmp	r2, r3
 800711c:	bf14      	ite	ne
 800711e:	2301      	movne	r3, #1
 8007120:	2300      	moveq	r3, #0
 8007122:	b2db      	uxtb	r3, r3
}
 8007124:	4618      	mov	r0, r3
 8007126:	b002      	add	sp, #8
 8007128:	4770      	bx	lr
 800712a:	bf00      	nop
 800712c:	0000      	movs	r0, r0
	...

08007130 <ch_list_unlink>:
static inline ch_list_t *ch_list_unlink(ch_list_t *lp) {
 8007130:	b084      	sub	sp, #16
 8007132:	9001      	str	r0, [sp, #4]
  ch_list_t *p = lp->next;
 8007134:	9b01      	ldr	r3, [sp, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	9303      	str	r3, [sp, #12]
  lp->next = p->next;
 800713a:	9b03      	ldr	r3, [sp, #12]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	9b01      	ldr	r3, [sp, #4]
 8007140:	601a      	str	r2, [r3, #0]
  return p;
 8007142:	9b03      	ldr	r3, [sp, #12]
}
 8007144:	4618      	mov	r0, r3
 8007146:	b004      	add	sp, #16
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop
 800714c:	0000      	movs	r0, r0
	...

08007150 <ch_queue_init.lto_priv.3>:
static inline void ch_queue_init(ch_queue_t *qp) {
 8007150:	b082      	sub	sp, #8
 8007152:	9001      	str	r0, [sp, #4]
  qp->next = qp;
 8007154:	9b01      	ldr	r3, [sp, #4]
 8007156:	9a01      	ldr	r2, [sp, #4]
 8007158:	601a      	str	r2, [r3, #0]
  qp->prev = qp;
 800715a:	9b01      	ldr	r3, [sp, #4]
 800715c:	9a01      	ldr	r2, [sp, #4]
 800715e:	605a      	str	r2, [r3, #4]
}
 8007160:	bf00      	nop
 8007162:	b002      	add	sp, #8
 8007164:	4770      	bx	lr
 8007166:	bf00      	nop
	...

08007170 <ch_queue_notempty.lto_priv.0>:
static inline bool ch_queue_notempty(const ch_queue_t *qp) {
 8007170:	b082      	sub	sp, #8
 8007172:	9001      	str	r0, [sp, #4]
  return (bool)(qp->next != qp);
 8007174:	9b01      	ldr	r3, [sp, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	9a01      	ldr	r2, [sp, #4]
 800717a:	429a      	cmp	r2, r3
 800717c:	bf14      	ite	ne
 800717e:	2301      	movne	r3, #1
 8007180:	2300      	moveq	r3, #0
 8007182:	b2db      	uxtb	r3, r3
}
 8007184:	4618      	mov	r0, r3
 8007186:	b002      	add	sp, #8
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	0000      	movs	r0, r0
	...

08007190 <ch_queue_insert.lto_priv.0>:
static inline void ch_queue_insert(ch_queue_t *qp, ch_queue_t *p) {
 8007190:	b082      	sub	sp, #8
 8007192:	9001      	str	r0, [sp, #4]
 8007194:	9100      	str	r1, [sp, #0]
  p->next       = qp;
 8007196:	9b00      	ldr	r3, [sp, #0]
 8007198:	9a01      	ldr	r2, [sp, #4]
 800719a:	601a      	str	r2, [r3, #0]
  p->prev       = qp->prev;
 800719c:	9b01      	ldr	r3, [sp, #4]
 800719e:	685a      	ldr	r2, [r3, #4]
 80071a0:	9b00      	ldr	r3, [sp, #0]
 80071a2:	605a      	str	r2, [r3, #4]
  p->prev->next = p;
 80071a4:	9b00      	ldr	r3, [sp, #0]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	9a00      	ldr	r2, [sp, #0]
 80071aa:	601a      	str	r2, [r3, #0]
  qp->prev      = p;
 80071ac:	9b01      	ldr	r3, [sp, #4]
 80071ae:	9a00      	ldr	r2, [sp, #0]
 80071b0:	605a      	str	r2, [r3, #4]
}
 80071b2:	bf00      	nop
 80071b4:	b002      	add	sp, #8
 80071b6:	4770      	bx	lr
	...

080071c0 <ch_queue_fifo_remove.lto_priv.0>:
static inline ch_queue_t *ch_queue_fifo_remove(ch_queue_t *qp) {
 80071c0:	b084      	sub	sp, #16
 80071c2:	9001      	str	r0, [sp, #4]
  ch_queue_t *p = qp->next;
 80071c4:	9b01      	ldr	r3, [sp, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	9303      	str	r3, [sp, #12]
  qp->next       = p->next;
 80071ca:	9b03      	ldr	r3, [sp, #12]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	9b01      	ldr	r3, [sp, #4]
 80071d0:	601a      	str	r2, [r3, #0]
  qp->next->prev = qp;
 80071d2:	9b01      	ldr	r3, [sp, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	9a01      	ldr	r2, [sp, #4]
 80071d8:	605a      	str	r2, [r3, #4]
  return p;
 80071da:	9b03      	ldr	r3, [sp, #12]
}
 80071dc:	4618      	mov	r0, r3
 80071de:	b004      	add	sp, #16
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop
	...

080071f0 <ch_queue_dequeue.lto_priv.1>:
static inline ch_queue_t *ch_queue_dequeue(ch_queue_t *p) {
 80071f0:	b082      	sub	sp, #8
 80071f2:	9001      	str	r0, [sp, #4]
  p->prev->next = p->next;
 80071f4:	9b01      	ldr	r3, [sp, #4]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	9a01      	ldr	r2, [sp, #4]
 80071fa:	6812      	ldr	r2, [r2, #0]
 80071fc:	601a      	str	r2, [r3, #0]
  p->next->prev = p->prev;
 80071fe:	9b01      	ldr	r3, [sp, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	9a01      	ldr	r2, [sp, #4]
 8007204:	6852      	ldr	r2, [r2, #4]
 8007206:	605a      	str	r2, [r3, #4]
  return p;
 8007208:	9b01      	ldr	r3, [sp, #4]
}
 800720a:	4618      	mov	r0, r3
 800720c:	b002      	add	sp, #8
 800720e:	4770      	bx	lr

08007210 <chSysLock.lto_priv.10>:
static inline void chSysLock(void) {
 8007210:	b082      	sub	sp, #8
 8007212:	2330      	movs	r3, #48	; 0x30
 8007214:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8007216:	9b01      	ldr	r3, [sp, #4]
 8007218:	f383 8811 	msr	BASEPRI, r3
}
 800721c:	bf00      	nop
}
 800721e:	bf00      	nop
}
 8007220:	bf00      	nop
 8007222:	b002      	add	sp, #8
 8007224:	4770      	bx	lr
 8007226:	bf00      	nop
	...

08007230 <chSysUnlock.lto_priv.10>:
static inline void chSysUnlock(void) {
 8007230:	b082      	sub	sp, #8
 8007232:	2300      	movs	r3, #0
 8007234:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8007236:	9b01      	ldr	r3, [sp, #4]
 8007238:	f383 8811 	msr	BASEPRI, r3
}
 800723c:	bf00      	nop
}
 800723e:	bf00      	nop
}
 8007240:	bf00      	nop
 8007242:	b002      	add	sp, #8
 8007244:	4770      	bx	lr
 8007246:	bf00      	nop
	...

08007250 <chThdGetSelfX.lto_priv.0>:
  return __sch_get_currthread();
 8007250:	4b01      	ldr	r3, [pc, #4]	; (8007258 <chThdGetSelfX.lto_priv.0+0x8>)
 8007252:	68db      	ldr	r3, [r3, #12]
}
 8007254:	4618      	mov	r0, r3
 8007256:	4770      	bx	lr
 8007258:	20000e50 	.word	0x20000e50
 800725c:	00000000 	.word	0x00000000

08007260 <chThdSleepS>:
static inline void chThdSleepS(sysinterval_t ticks) {
 8007260:	b500      	push	{lr}
 8007262:	b083      	sub	sp, #12
 8007264:	9001      	str	r0, [sp, #4]
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8007266:	9901      	ldr	r1, [sp, #4]
 8007268:	2008      	movs	r0, #8
 800726a:	f7ff fd99 	bl	8006da0 <chSchGoSleepTimeoutS>
}
 800726e:	bf00      	nop
 8007270:	b003      	add	sp, #12
 8007272:	f85d fb04 	ldr.w	pc, [sp], #4
 8007276:	bf00      	nop
	...

08007280 <chThdDoDequeueNextI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
static inline void chThdDoDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8007280:	b500      	push	{lr}
 8007282:	b085      	sub	sp, #20
 8007284:	9001      	str	r0, [sp, #4]
 8007286:	9100      	str	r1, [sp, #0]
  thread_t *tp;

  chDbgAssert(ch_queue_notempty(&tqp->queue), "empty queue");

  tp = threadref(ch_queue_fifo_remove(&tqp->queue));
 8007288:	9b01      	ldr	r3, [sp, #4]
 800728a:	4618      	mov	r0, r3
 800728c:	f7ff ff98 	bl	80071c0 <ch_queue_fifo_remove.lto_priv.0>
 8007290:	9003      	str	r0, [sp, #12]

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8007292:	9b03      	ldr	r3, [sp, #12]
 8007294:	9a00      	ldr	r2, [sp, #0]
 8007296:	629a      	str	r2, [r3, #40]	; 0x28
  (void) chSchReadyI(tp);
 8007298:	9803      	ldr	r0, [sp, #12]
 800729a:	f7ff fd49 	bl	8006d30 <chSchReadyI>
}
 800729e:	bf00      	nop
 80072a0:	b005      	add	sp, #20
 80072a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80072a6:	bf00      	nop
	...

080072b0 <__thd_object_init>:
 * @notapi
 */
thread_t *__thd_object_init(os_instance_t *oip,
                            thread_t *tp,
                            const char *name,
                            tprio_t prio) {
 80072b0:	b500      	push	{lr}
 80072b2:	b085      	sub	sp, #20
 80072b4:	9003      	str	r0, [sp, #12]
 80072b6:	9102      	str	r1, [sp, #8]
 80072b8:	9201      	str	r2, [sp, #4]
 80072ba:	9300      	str	r3, [sp, #0]

  tp->hdr.pqueue.prio   = prio;
 80072bc:	9b02      	ldr	r3, [sp, #8]
 80072be:	9a00      	ldr	r2, [sp, #0]
 80072c0:	609a      	str	r2, [r3, #8]
  tp->state             = CH_STATE_WTSTART;
 80072c2:	9b02      	ldr	r3, [sp, #8]
 80072c4:	2202      	movs	r2, #2
 80072c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  tp->flags             = CH_FLAG_MODE_STATIC;
 80072ca:	9b02      	ldr	r3, [sp, #8]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  tp->owner             = oip;
 80072d2:	9b02      	ldr	r3, [sp, #8]
 80072d4:	9a03      	ldr	r2, [sp, #12]
 80072d6:	619a      	str	r2, [r3, #24]
#if CH_CFG_TIME_QUANTUM > 0
  tp->ticks             = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio          = prio;
 80072d8:	9b02      	ldr	r3, [sp, #8]
 80072da:	9a00      	ldr	r2, [sp, #0]
 80072dc:	641a      	str	r2, [r3, #64]	; 0x40
  tp->mtxlist           = NULL;
 80072de:	9b02      	ldr	r3, [sp, #8]
 80072e0:	2200      	movs	r2, #0
 80072e2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->epending          = (eventmask_t)0;
 80072e4:	9b02      	ldr	r3, [sp, #8]
 80072e6:	2200      	movs	r2, #0
 80072e8:	639a      	str	r2, [r3, #56]	; 0x38
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time              = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs              = (trefs_t)1;
 80072ea:	9b02      	ldr	r3, [sp, #8]
 80072ec:	2201      	movs	r2, #1
 80072ee:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  tp->name              = name;
 80072f2:	9b02      	ldr	r3, [sp, #8]
 80072f4:	9a01      	ldr	r2, [sp, #4]
 80072f6:	61da      	str	r2, [r3, #28]
  REG_INSERT(oip, tp);
 80072f8:	9b03      	ldr	r3, [sp, #12]
 80072fa:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80072fe:	9b02      	ldr	r3, [sp, #8]
 8007300:	3310      	adds	r3, #16
 8007302:	4619      	mov	r1, r3
 8007304:	4610      	mov	r0, r2
 8007306:	f7ff ff43 	bl	8007190 <ch_queue_insert.lto_priv.0>
#else
  (void)name;
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  ch_list_init(&tp->waiting);
 800730a:	9b02      	ldr	r3, [sp, #8]
 800730c:	332c      	adds	r3, #44	; 0x2c
 800730e:	4618      	mov	r0, r3
 8007310:	f7ff fef6 	bl	8007100 <ch_list_init>
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  ch_queue_init(&tp->msgqueue);
 8007314:	9b02      	ldr	r3, [sp, #8]
 8007316:	3330      	adds	r3, #48	; 0x30
 8007318:	4618      	mov	r0, r3
 800731a:	f7ff ff19 	bl	8007150 <ch_queue_init.lto_priv.3>
#endif
#if CH_DBG_STATISTICS == TRUE
  chTMObjectInit(&tp->stats);
#endif
  CH_CFG_THREAD_INIT_HOOK(tp);
  return tp;
 800731e:	9b02      	ldr	r3, [sp, #8]
}
 8007320:	4618      	mov	r0, r3
 8007322:	b005      	add	sp, #20
 8007324:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08007330 <chThdCreateSuspendedI>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
 8007330:	b500      	push	{lr}
 8007332:	b085      	sub	sp, #20
 8007334:	9001      	str	r0, [sp, #4]
  chDbgCheck((tdp->prio <= HIGHPRIO) && (tdp->funcp != NULL));

  /* The thread structure is laid out in the upper part of the thread
     workspace. The thread position structure is aligned to the required
     stack alignment because it represents the stack top.*/
  tp = threadref(((uint8_t *)tdp->wend -
 8007336:	9b01      	ldr	r3, [sp, #4]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	3b48      	subs	r3, #72	; 0x48
 800733c:	9303      	str	r3, [sp, #12]
                 MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN)));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
 800733e:	9b01      	ldr	r3, [sp, #4]
 8007340:	685a      	ldr	r2, [r3, #4]
 8007342:	9b03      	ldr	r3, [sp, #12]
 8007344:	621a      	str	r2, [r3, #32]
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8007346:	9b03      	ldr	r3, [sp, #12]
 8007348:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
 800734c:	9b03      	ldr	r3, [sp, #12]
 800734e:	60da      	str	r2, [r3, #12]
 8007350:	9b01      	ldr	r3, [sp, #4]
 8007352:	691a      	ldr	r2, [r3, #16]
 8007354:	9b03      	ldr	r3, [sp, #12]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	601a      	str	r2, [r3, #0]
 800735a:	9b01      	ldr	r3, [sp, #4]
 800735c:	695a      	ldr	r2, [r3, #20]
 800735e:	9b03      	ldr	r3, [sp, #12]
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	605a      	str	r2, [r3, #4]
 8007364:	9b03      	ldr	r3, [sp, #12]
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	4a07      	ldr	r2, [pc, #28]	; (8007388 <chThdCreateSuspendedI+0x58>)
 800736a:	621a      	str	r2, [r3, #32]
  if (tdp->instance != NULL) {
    return __thd_object_init(tdp->instance, tp, tdp->name, tdp->prio);
  }
#endif

  return __thd_object_init(currcore, tp, tdp->name, tdp->prio);
 800736c:	9b01      	ldr	r3, [sp, #4]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	9b01      	ldr	r3, [sp, #4]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	9903      	ldr	r1, [sp, #12]
 8007376:	4805      	ldr	r0, [pc, #20]	; (800738c <chThdCreateSuspendedI+0x5c>)
 8007378:	f7ff ff9a 	bl	80072b0 <__thd_object_init>
 800737c:	4603      	mov	r3, r0
 800737e:	bf00      	nop
}
 8007380:	4618      	mov	r0, r3
 8007382:	b005      	add	sp, #20
 8007384:	f85d fb04 	ldr.w	pc, [sp], #4
 8007388:	080002f1 	.word	0x080002f1
 800738c:	20000e50 	.word	0x20000e50

08007390 <chThdCreateI>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateI(const thread_descriptor_t *tdp) {
 8007390:	b500      	push	{lr}
 8007392:	b083      	sub	sp, #12
 8007394:	9001      	str	r0, [sp, #4]

  return chSchReadyI(chThdCreateSuspendedI(tdp));
 8007396:	9801      	ldr	r0, [sp, #4]
 8007398:	f7ff ffca 	bl	8007330 <chThdCreateSuspendedI>
 800739c:	4603      	mov	r3, r0
 800739e:	4618      	mov	r0, r3
 80073a0:	f7ff fcc6 	bl	8006d30 <chSchReadyI>
 80073a4:	4603      	mov	r3, r0
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	b003      	add	sp, #12
 80073aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80073ae:	bf00      	nop

080073b0 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 80073b0:	b500      	push	{lr}
 80073b2:	b087      	sub	sp, #28
 80073b4:	9003      	str	r0, [sp, #12]
 80073b6:	9102      	str	r1, [sp, #8]
 80073b8:	9201      	str	r2, [sp, #4]
 80073ba:	9300      	str	r3, [sp, #0]

#if CH_DBG_FILL_THREADS == TRUE
  __thd_stackfill((uint8_t *)wsp, (uint8_t *)wsp + size);
#endif

  chSysLock();
 80073bc:	f7ff ff28 	bl	8007210 <chSysLock.lto_priv.10>

  /* The thread structure is laid out in the upper part of the thread
     workspace. The thread position structure is aligned to the required
     stack alignment because it represents the stack top.*/
  tp = threadref(((uint8_t *)wsp + size -
 80073c0:	9b02      	ldr	r3, [sp, #8]
 80073c2:	3b48      	subs	r3, #72	; 0x48
 80073c4:	9a03      	ldr	r2, [sp, #12]
 80073c6:	4413      	add	r3, r2
 80073c8:	9305      	str	r3, [sp, #20]
                 MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN)));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
 80073ca:	9b05      	ldr	r3, [sp, #20]
 80073cc:	9a03      	ldr	r2, [sp, #12]
 80073ce:	621a      	str	r2, [r3, #32]
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80073d0:	9b05      	ldr	r3, [sp, #20]
 80073d2:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
 80073d6:	9b05      	ldr	r3, [sp, #20]
 80073d8:	60da      	str	r2, [r3, #12]
 80073da:	9b05      	ldr	r3, [sp, #20]
 80073dc:	68db      	ldr	r3, [r3, #12]
 80073de:	9a00      	ldr	r2, [sp, #0]
 80073e0:	601a      	str	r2, [r3, #0]
 80073e2:	9b05      	ldr	r3, [sp, #20]
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	9a08      	ldr	r2, [sp, #32]
 80073e8:	605a      	str	r2, [r3, #4]
 80073ea:	9b05      	ldr	r3, [sp, #20]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	4a0b      	ldr	r2, [pc, #44]	; (800741c <chThdCreateStatic+0x6c>)
 80073f0:	621a      	str	r2, [r3, #32]

  tp = __thd_object_init(currcore, tp, "noname", prio);
 80073f2:	9b01      	ldr	r3, [sp, #4]
 80073f4:	4a0a      	ldr	r2, [pc, #40]	; (8007420 <chThdCreateStatic+0x70>)
 80073f6:	9905      	ldr	r1, [sp, #20]
 80073f8:	480a      	ldr	r0, [pc, #40]	; (8007424 <chThdCreateStatic+0x74>)
 80073fa:	f7ff ff59 	bl	80072b0 <__thd_object_init>
 80073fe:	9005      	str	r0, [sp, #20]

  /* Starting the thread immediately.*/
  chSchWakeupS(tp, MSG_OK);
 8007400:	2100      	movs	r1, #0
 8007402:	9805      	ldr	r0, [sp, #20]
 8007404:	f7ff fd04 	bl	8006e10 <chSchWakeupS>
  chSysUnlock();
 8007408:	f7ff ff12 	bl	8007230 <chSysUnlock.lto_priv.10>

  return tp;
 800740c:	9b05      	ldr	r3, [sp, #20]
 800740e:	bf00      	nop
 8007410:	bf00      	nop
}
 8007412:	4618      	mov	r0, r3
 8007414:	b007      	add	sp, #28
 8007416:	f85d fb04 	ldr.w	pc, [sp], #4
 800741a:	bf00      	nop
 800741c:	080002f1 	.word	0x080002f1
 8007420:	0800eec8 	.word	0x0800eec8
 8007424:	20000e50 	.word	0x20000e50
	...

08007430 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
 8007430:	b500      	push	{lr}
 8007432:	b083      	sub	sp, #12
 8007434:	9001      	str	r0, [sp, #4]

  chSysLock();
 8007436:	f7ff feeb 	bl	8007210 <chSysLock.lto_priv.10>
  chThdExitS(msg);
 800743a:	9801      	ldr	r0, [sp, #4]
 800743c:	f000 f808 	bl	8007450 <chThdExitS>
  /* The thread never returns here.*/
}
 8007440:	bf00      	nop
 8007442:	b003      	add	sp, #12
 8007444:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08007450 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 8007450:	b500      	push	{lr}
 8007452:	b085      	sub	sp, #20
 8007454:	9001      	str	r0, [sp, #4]
  thread_t *currtp = chThdGetSelfX();
 8007456:	f7ff fefb 	bl	8007250 <chThdGetSelfX.lto_priv.0>
 800745a:	9003      	str	r0, [sp, #12]

  /* Storing exit message.*/
  currtp->u.exitcode = msg;
 800745c:	9b03      	ldr	r3, [sp, #12]
 800745e:	9a01      	ldr	r2, [sp, #4]
 8007460:	629a      	str	r2, [r3, #40]	; 0x28
  /* Exit handler hook.*/
  CH_CFG_THREAD_EXIT_HOOK(tp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 8007462:	e008      	b.n	8007476 <chThdExitS+0x26>
    (void) chSchReadyI(threadref(ch_list_unlink(&currtp->waiting)));
 8007464:	9b03      	ldr	r3, [sp, #12]
 8007466:	332c      	adds	r3, #44	; 0x2c
 8007468:	4618      	mov	r0, r3
 800746a:	f7ff fe61 	bl	8007130 <ch_list_unlink>
 800746e:	4603      	mov	r3, r0
 8007470:	4618      	mov	r0, r3
 8007472:	f7ff fc5d 	bl	8006d30 <chSchReadyI>
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
 8007476:	9b03      	ldr	r3, [sp, #12]
 8007478:	332c      	adds	r3, #44	; 0x2c
 800747a:	4618      	mov	r0, r3
 800747c:	f7ff fe48 	bl	8007110 <ch_list_notempty>
 8007480:	4603      	mov	r3, r0
 8007482:	2b00      	cmp	r3, #0
 8007484:	d1ee      	bne.n	8007464 <chThdExitS+0x14>
  }
#endif

#if CH_CFG_USE_REGISTRY == TRUE
  if (unlikely(currtp->refs == (trefs_t)0)) {
 8007486:	9b03      	ldr	r3, [sp, #12]
 8007488:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800748c:	2b00      	cmp	r3, #0
 800748e:	bf0c      	ite	eq
 8007490:	2301      	moveq	r3, #1
 8007492:	2300      	movne	r3, #0
 8007494:	b2db      	uxtb	r3, r3
 8007496:	2b00      	cmp	r3, #0
 8007498:	d010      	beq.n	80074bc <chThdExitS+0x6c>
#if CH_CFG_USE_DYNAMIC == TRUE
    /* Static threads are immediately removed from the registry because there
       is no memory to recover.*/
    if (unlikely(((currtp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC))) {
 800749a:	9b03      	ldr	r3, [sp, #12]
 800749c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80074a0:	f003 0303 	and.w	r3, r3, #3
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	bf0c      	ite	eq
 80074a8:	2301      	moveq	r3, #1
 80074aa:	2300      	movne	r3, #0
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d004      	beq.n	80074bc <chThdExitS+0x6c>
      REG_REMOVE(currtp);
 80074b2:	9b03      	ldr	r3, [sp, #12]
 80074b4:	3310      	adds	r3, #16
 80074b6:	4618      	mov	r0, r3
 80074b8:	f7ff fe9a 	bl	80071f0 <ch_queue_dequeue.lto_priv.1>
#endif
  }
#endif

  /* Going into final state.*/
  chSchGoSleepS(CH_STATE_FINAL);
 80074bc:	200f      	movs	r0, #15
 80074be:	f7ff fc47 	bl	8006d50 <chSchGoSleepS>

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
}
 80074c2:	bf00      	nop
 80074c4:	b005      	add	sp, #20
 80074c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80074ca:	bf00      	nop
 80074cc:	0000      	movs	r0, r0
	...

080074d0 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(sysinterval_t time) {
 80074d0:	b500      	push	{lr}
 80074d2:	b083      	sub	sp, #12
 80074d4:	9001      	str	r0, [sp, #4]

  chSysLock();
 80074d6:	f7ff fe9b 	bl	8007210 <chSysLock.lto_priv.10>
  chThdSleepS(time);
 80074da:	9801      	ldr	r0, [sp, #4]
 80074dc:	f7ff fec0 	bl	8007260 <chThdSleepS>
  chSysUnlock();
 80074e0:	f7ff fea6 	bl	8007230 <chSysUnlock.lto_priv.10>
}
 80074e4:	bf00      	nop
 80074e6:	b003      	add	sp, #12
 80074e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80074ec:	0000      	movs	r0, r0
	...

080074f0 <chThdSuspendS>:
 * @param[in] trp       a pointer to a thread reference object
 * @return              The wake up message.
 *
 * @sclass
 */
msg_t chThdSuspendS(thread_reference_t *trp) {
 80074f0:	b500      	push	{lr}
 80074f2:	b085      	sub	sp, #20
 80074f4:	9001      	str	r0, [sp, #4]
  thread_t *tp = chThdGetSelfX();
 80074f6:	f7ff feab 	bl	8007250 <chThdGetSelfX.lto_priv.0>
 80074fa:	9003      	str	r0, [sp, #12]

  chDbgAssert(*trp == NULL, "not NULL");

  *trp = tp;
 80074fc:	9b01      	ldr	r3, [sp, #4]
 80074fe:	9a03      	ldr	r2, [sp, #12]
 8007500:	601a      	str	r2, [r3, #0]
  tp->u.wttrp = trp;
 8007502:	9b03      	ldr	r3, [sp, #12]
 8007504:	9a01      	ldr	r2, [sp, #4]
 8007506:	629a      	str	r2, [r3, #40]	; 0x28
  chSchGoSleepS(CH_STATE_SUSPENDED);
 8007508:	2003      	movs	r0, #3
 800750a:	f7ff fc21 	bl	8006d50 <chSchGoSleepS>

  return chThdGetSelfX()->u.rdymsg;
 800750e:	f7ff fe9f 	bl	8007250 <chThdGetSelfX.lto_priv.0>
 8007512:	4603      	mov	r3, r0
 8007514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8007516:	4618      	mov	r0, r3
 8007518:	b005      	add	sp, #20
 800751a:	f85d fb04 	ldr.w	pc, [sp], #4
 800751e:	bf00      	nop

08007520 <chThdSuspendTimeoutS>:
 * @return              The wake up message.
 * @retval MSG_TIMEOUT  if the operation timed out.
 *
 * @sclass
 */
msg_t chThdSuspendTimeoutS(thread_reference_t *trp, sysinterval_t timeout) {
 8007520:	b500      	push	{lr}
 8007522:	b085      	sub	sp, #20
 8007524:	9001      	str	r0, [sp, #4]
 8007526:	9100      	str	r1, [sp, #0]
  thread_t *tp = chThdGetSelfX();
 8007528:	f7ff fe92 	bl	8007250 <chThdGetSelfX.lto_priv.0>
 800752c:	9003      	str	r0, [sp, #12]

  chDbgAssert(*trp == NULL, "not NULL");

  if (unlikely(TIME_IMMEDIATE == timeout)) {
 800752e:	9b00      	ldr	r3, [sp, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	bf0c      	ite	eq
 8007534:	2301      	moveq	r3, #1
 8007536:	2300      	movne	r3, #0
 8007538:	b2db      	uxtb	r3, r3
 800753a:	2b00      	cmp	r3, #0
 800753c:	d002      	beq.n	8007544 <chThdSuspendTimeoutS+0x24>
    return MSG_TIMEOUT;
 800753e:	f04f 33ff 	mov.w	r3, #4294967295
 8007542:	e00a      	b.n	800755a <chThdSuspendTimeoutS+0x3a>
  }

  *trp = tp;
 8007544:	9b01      	ldr	r3, [sp, #4]
 8007546:	9a03      	ldr	r2, [sp, #12]
 8007548:	601a      	str	r2, [r3, #0]
  tp->u.wttrp = trp;
 800754a:	9b03      	ldr	r3, [sp, #12]
 800754c:	9a01      	ldr	r2, [sp, #4]
 800754e:	629a      	str	r2, [r3, #40]	; 0x28

  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 8007550:	9900      	ldr	r1, [sp, #0]
 8007552:	2003      	movs	r0, #3
 8007554:	f7ff fc24 	bl	8006da0 <chSchGoSleepTimeoutS>
 8007558:	4603      	mov	r3, r0
}
 800755a:	4618      	mov	r0, r3
 800755c:	b005      	add	sp, #20
 800755e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007562:	bf00      	nop
	...

08007570 <chThdResumeI>:
 * @param[in] trp       a pointer to a thread reference object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {
 8007570:	b500      	push	{lr}
 8007572:	b085      	sub	sp, #20
 8007574:	9001      	str	r0, [sp, #4]
 8007576:	9100      	str	r1, [sp, #0]

  if (*trp != NULL) {
 8007578:	9b01      	ldr	r3, [sp, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d00b      	beq.n	8007598 <chThdResumeI+0x28>
    thread_t *tp = *trp;
 8007580:	9b01      	ldr	r3, [sp, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	9303      	str	r3, [sp, #12]

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");

    *trp = NULL;
 8007586:	9b01      	ldr	r3, [sp, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	601a      	str	r2, [r3, #0]
    tp->u.rdymsg = msg;
 800758c:	9b03      	ldr	r3, [sp, #12]
 800758e:	9a00      	ldr	r2, [sp, #0]
 8007590:	629a      	str	r2, [r3, #40]	; 0x28
    (void) chSchReadyI(tp);
 8007592:	9803      	ldr	r0, [sp, #12]
 8007594:	f7ff fbcc 	bl	8006d30 <chSchReadyI>
  }
}
 8007598:	bf00      	nop
 800759a:	b005      	add	sp, #20
 800759c:	f85d fb04 	ldr.w	pc, [sp], #4

080075a0 <chThdEnqueueTimeoutS>:
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 80075a0:	b500      	push	{lr}
 80075a2:	b085      	sub	sp, #20
 80075a4:	9001      	str	r0, [sp, #4]
 80075a6:	9100      	str	r1, [sp, #0]
  thread_t *currtp = chThdGetSelfX();
 80075a8:	f7ff fe52 	bl	8007250 <chThdGetSelfX.lto_priv.0>
 80075ac:	9003      	str	r0, [sp, #12]

  if (unlikely(TIME_IMMEDIATE == timeout)) {
 80075ae:	9b00      	ldr	r3, [sp, #0]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	bf0c      	ite	eq
 80075b4:	2301      	moveq	r3, #1
 80075b6:	2300      	movne	r3, #0
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d002      	beq.n	80075c4 <chThdEnqueueTimeoutS+0x24>
    return MSG_TIMEOUT;
 80075be:	f04f 33ff 	mov.w	r3, #4294967295
 80075c2:	e009      	b.n	80075d8 <chThdEnqueueTimeoutS+0x38>
  }

  ch_queue_insert(&tqp->queue, (ch_queue_t *)currtp);
 80075c4:	9b01      	ldr	r3, [sp, #4]
 80075c6:	9903      	ldr	r1, [sp, #12]
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7ff fde1 	bl	8007190 <ch_queue_insert.lto_priv.0>

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80075ce:	9900      	ldr	r1, [sp, #0]
 80075d0:	2004      	movs	r0, #4
 80075d2:	f7ff fbe5 	bl	8006da0 <chSchGoSleepTimeoutS>
 80075d6:	4603      	mov	r3, r0
}
 80075d8:	4618      	mov	r0, r3
 80075da:	b005      	add	sp, #20
 80075dc:	f85d fb04 	ldr.w	pc, [sp], #4

080075e0 <chThdDequeueNextI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 80075e0:	b500      	push	{lr}
 80075e2:	b083      	sub	sp, #12
 80075e4:	9001      	str	r0, [sp, #4]
 80075e6:	9100      	str	r1, [sp, #0]

  if (ch_queue_notempty(&tqp->queue)) {
 80075e8:	9b01      	ldr	r3, [sp, #4]
 80075ea:	4618      	mov	r0, r3
 80075ec:	f7ff fdc0 	bl	8007170 <ch_queue_notempty.lto_priv.0>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d003      	beq.n	80075fe <chThdDequeueNextI+0x1e>
    chThdDoDequeueNextI(tqp, msg);
 80075f6:	9900      	ldr	r1, [sp, #0]
 80075f8:	9801      	ldr	r0, [sp, #4]
 80075fa:	f7ff fe41 	bl	8007280 <chThdDoDequeueNextI>
  }
}
 80075fe:	bf00      	nop
 8007600:	b003      	add	sp, #12
 8007602:	f85d fb04 	ldr.w	pc, [sp], #4
 8007606:	bf00      	nop
	...

08007610 <tm_stop>:
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {
 8007610:	b4f0      	push	{r4, r5, r6, r7}
 8007612:	b084      	sub	sp, #16
 8007614:	9003      	str	r0, [sp, #12]
 8007616:	9102      	str	r1, [sp, #8]
 8007618:	9201      	str	r2, [sp, #4]

  tmp->n++;
 800761a:	9b03      	ldr	r3, [sp, #12]
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	1c5a      	adds	r2, r3, #1
 8007620:	9b03      	ldr	r3, [sp, #12]
 8007622:	60da      	str	r2, [r3, #12]
  tmp->last = (now - tmp->last) - offset;
 8007624:	9b03      	ldr	r3, [sp, #12]
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	9a02      	ldr	r2, [sp, #8]
 800762a:	1ad2      	subs	r2, r2, r3
 800762c:	9b01      	ldr	r3, [sp, #4]
 800762e:	1ad2      	subs	r2, r2, r3
 8007630:	9b03      	ldr	r3, [sp, #12]
 8007632:	609a      	str	r2, [r3, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8007634:	9b03      	ldr	r3, [sp, #12]
 8007636:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800763a:	9903      	ldr	r1, [sp, #12]
 800763c:	6889      	ldr	r1, [r1, #8]
 800763e:	2000      	movs	r0, #0
 8007640:	460c      	mov	r4, r1
 8007642:	4605      	mov	r5, r0
 8007644:	1916      	adds	r6, r2, r4
 8007646:	eb43 0705 	adc.w	r7, r3, r5
 800764a:	9b03      	ldr	r3, [sp, #12]
 800764c:	e9c3 6704 	strd	r6, r7, [r3, #16]
  if (tmp->last > tmp->worst) {
 8007650:	9b03      	ldr	r3, [sp, #12]
 8007652:	689a      	ldr	r2, [r3, #8]
 8007654:	9b03      	ldr	r3, [sp, #12]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	429a      	cmp	r2, r3
 800765a:	d903      	bls.n	8007664 <tm_stop+0x54>
    tmp->worst = tmp->last;
 800765c:	9b03      	ldr	r3, [sp, #12]
 800765e:	689a      	ldr	r2, [r3, #8]
 8007660:	9b03      	ldr	r3, [sp, #12]
 8007662:	605a      	str	r2, [r3, #4]
  }
  if (tmp->last < tmp->best) {
 8007664:	9b03      	ldr	r3, [sp, #12]
 8007666:	689a      	ldr	r2, [r3, #8]
 8007668:	9b03      	ldr	r3, [sp, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	429a      	cmp	r2, r3
 800766e:	d203      	bcs.n	8007678 <tm_stop+0x68>
    tmp->best = tmp->last;
 8007670:	9b03      	ldr	r3, [sp, #12]
 8007672:	689a      	ldr	r2, [r3, #8]
 8007674:	9b03      	ldr	r3, [sp, #12]
 8007676:	601a      	str	r2, [r3, #0]
  }
}
 8007678:	bf00      	nop
 800767a:	b004      	add	sp, #16
 800767c:	bcf0      	pop	{r4, r5, r6, r7}
 800767e:	4770      	bx	lr

08007680 <chTMObjectInit>:
 *
 * @param[out] tmp      pointer to a @p TimeMeasurement structure
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {
 8007680:	b082      	sub	sp, #8
 8007682:	9001      	str	r0, [sp, #4]

  tmp->best       = (rtcnt_t)-1;
 8007684:	9b01      	ldr	r3, [sp, #4]
 8007686:	f04f 32ff 	mov.w	r2, #4294967295
 800768a:	601a      	str	r2, [r3, #0]
  tmp->worst      = (rtcnt_t)0;
 800768c:	9b01      	ldr	r3, [sp, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	605a      	str	r2, [r3, #4]
  tmp->last       = (rtcnt_t)0;
 8007692:	9b01      	ldr	r3, [sp, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	609a      	str	r2, [r3, #8]
  tmp->n          = (ucnt_t)0;
 8007698:	9b01      	ldr	r3, [sp, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	60da      	str	r2, [r3, #12]
  tmp->cumulative = (rttime_t)0;
 800769e:	9901      	ldr	r1, [sp, #4]
 80076a0:	f04f 0200 	mov.w	r2, #0
 80076a4:	f04f 0300 	mov.w	r3, #0
 80076a8:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 80076ac:	bf00      	nop
 80076ae:	b002      	add	sp, #8
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
	...

080076c0 <chTMStartMeasurementX>:
 *
 * @param[in,out] tmp   pointer to a @p TimeMeasurement structure
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {
 80076c0:	b082      	sub	sp, #8
 80076c2:	9001      	str	r0, [sp, #4]
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 80076c4:	4b03      	ldr	r3, [pc, #12]	; (80076d4 <chTMStartMeasurementX+0x14>)
 80076c6:	685a      	ldr	r2, [r3, #4]

  tmp->last = chSysGetRealtimeCounterX();
 80076c8:	9b01      	ldr	r3, [sp, #4]
 80076ca:	609a      	str	r2, [r3, #8]
}
 80076cc:	bf00      	nop
 80076ce:	b002      	add	sp, #8
 80076d0:	4770      	bx	lr
 80076d2:	bf00      	nop
 80076d4:	e0001000 	.word	0xe0001000
	...

080076e0 <chTMStopMeasurementX>:
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 80076e0:	b500      	push	{lr}
 80076e2:	b083      	sub	sp, #12
 80076e4:	9001      	str	r0, [sp, #4]
 80076e6:	4b06      	ldr	r3, [pc, #24]	; (8007700 <chTMStopMeasurementX+0x20>)
 80076e8:	685b      	ldr	r3, [r3, #4]

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch_system.tmc.offset);
 80076ea:	4a06      	ldr	r2, [pc, #24]	; (8007704 <chTMStopMeasurementX+0x24>)
 80076ec:	6892      	ldr	r2, [r2, #8]
 80076ee:	4619      	mov	r1, r3
 80076f0:	9801      	ldr	r0, [sp, #4]
 80076f2:	f7ff ff8d 	bl	8007610 <tm_stop>
}
 80076f6:	bf00      	nop
 80076f8:	b003      	add	sp, #12
 80076fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80076fe:	bf00      	nop
 8007700:	e0001000 	.word	0xe0001000
 8007704:	20000e40 	.word	0x20000e40
	...

08007710 <ch_queue_init.lto_priv.4>:
static inline void ch_queue_init(ch_queue_t *qp) {
 8007710:	b082      	sub	sp, #8
 8007712:	9001      	str	r0, [sp, #4]
  qp->next = qp;
 8007714:	9b01      	ldr	r3, [sp, #4]
 8007716:	9a01      	ldr	r2, [sp, #4]
 8007718:	601a      	str	r2, [r3, #0]
  qp->prev = qp;
 800771a:	9b01      	ldr	r3, [sp, #4]
 800771c:	9a01      	ldr	r2, [sp, #4]
 800771e:	605a      	str	r2, [r3, #4]
}
 8007720:	bf00      	nop
 8007722:	b002      	add	sp, #8
 8007724:	4770      	bx	lr
 8007726:	bf00      	nop
	...

08007730 <ch_queue_insert.lto_priv.1>:
static inline void ch_queue_insert(ch_queue_t *qp, ch_queue_t *p) {
 8007730:	b082      	sub	sp, #8
 8007732:	9001      	str	r0, [sp, #4]
 8007734:	9100      	str	r1, [sp, #0]
  p->next       = qp;
 8007736:	9b00      	ldr	r3, [sp, #0]
 8007738:	9a01      	ldr	r2, [sp, #4]
 800773a:	601a      	str	r2, [r3, #0]
  p->prev       = qp->prev;
 800773c:	9b01      	ldr	r3, [sp, #4]
 800773e:	685a      	ldr	r2, [r3, #4]
 8007740:	9b00      	ldr	r3, [sp, #0]
 8007742:	605a      	str	r2, [r3, #4]
  p->prev->next = p;
 8007744:	9b00      	ldr	r3, [sp, #0]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	9a00      	ldr	r2, [sp, #0]
 800774a:	601a      	str	r2, [r3, #0]
  qp->prev      = p;
 800774c:	9b01      	ldr	r3, [sp, #4]
 800774e:	9a00      	ldr	r2, [sp, #0]
 8007750:	605a      	str	r2, [r3, #4]
}
 8007752:	bf00      	nop
 8007754:	b002      	add	sp, #8
 8007756:	4770      	bx	lr
	...

08007760 <ch_queue_fifo_remove.lto_priv.1>:
static inline ch_queue_t *ch_queue_fifo_remove(ch_queue_t *qp) {
 8007760:	b084      	sub	sp, #16
 8007762:	9001      	str	r0, [sp, #4]
  ch_queue_t *p = qp->next;
 8007764:	9b01      	ldr	r3, [sp, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	9303      	str	r3, [sp, #12]
  qp->next       = p->next;
 800776a:	9b03      	ldr	r3, [sp, #12]
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	9b01      	ldr	r3, [sp, #4]
 8007770:	601a      	str	r2, [r3, #0]
  qp->next->prev = qp;
 8007772:	9b01      	ldr	r3, [sp, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	9a01      	ldr	r2, [sp, #4]
 8007778:	605a      	str	r2, [r3, #4]
  return p;
 800777a:	9b03      	ldr	r3, [sp, #12]
}
 800777c:	4618      	mov	r0, r3
 800777e:	b004      	add	sp, #16
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
	...

08007790 <chThdGetSelfX.lto_priv.1>:
  return __sch_get_currthread();
 8007790:	4b01      	ldr	r3, [pc, #4]	; (8007798 <chThdGetSelfX.lto_priv.1+0x8>)
 8007792:	68db      	ldr	r3, [r3, #12]
}
 8007794:	4618      	mov	r0, r3
 8007796:	4770      	bx	lr
 8007798:	20000e50 	.word	0x20000e50
 800779c:	00000000 	.word	0x00000000

080077a0 <chSemObjectInit>:
 * @param[in] n         initial value of the semaphore counter. Must be
 *                      non-negative.
 *
 * @init
 */
void chSemObjectInit(semaphore_t *sp, cnt_t n) {
 80077a0:	b500      	push	{lr}
 80077a2:	b083      	sub	sp, #12
 80077a4:	9001      	str	r0, [sp, #4]
 80077a6:	9100      	str	r1, [sp, #0]

  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));

  ch_queue_init(&sp->queue);
 80077a8:	9b01      	ldr	r3, [sp, #4]
 80077aa:	4618      	mov	r0, r3
 80077ac:	f7ff ffb0 	bl	8007710 <ch_queue_init.lto_priv.4>
  sp->cnt = n;
 80077b0:	9b01      	ldr	r3, [sp, #4]
 80077b2:	9a00      	ldr	r2, [sp, #0]
 80077b4:	609a      	str	r2, [r3, #8]
}
 80077b6:	bf00      	nop
 80077b8:	b003      	add	sp, #12
 80077ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80077be:	bf00      	nop

080077c0 <chSemWaitTimeoutS>:
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chSemWaitTimeoutS(semaphore_t *sp, sysinterval_t timeout) {
 80077c0:	b500      	push	{lr}
 80077c2:	b085      	sub	sp, #20
 80077c4:	9001      	str	r0, [sp, #4]
 80077c6:	9100      	str	r1, [sp, #0]
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->cnt >= (cnt_t)0) && ch_queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && ch_queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (--sp->cnt < (cnt_t)0) {
 80077c8:	9b01      	ldr	r3, [sp, #4]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	1e5a      	subs	r2, r3, #1
 80077ce:	9b01      	ldr	r3, [sp, #4]
 80077d0:	609a      	str	r2, [r3, #8]
 80077d2:	9b01      	ldr	r3, [sp, #4]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	da21      	bge.n	800781e <chSemWaitTimeoutS+0x5e>
    if (unlikely(TIME_IMMEDIATE == timeout)) {
 80077da:	9b00      	ldr	r3, [sp, #0]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	bf0c      	ite	eq
 80077e0:	2301      	moveq	r3, #1
 80077e2:	2300      	movne	r3, #0
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d007      	beq.n	80077fa <chSemWaitTimeoutS+0x3a>
      sp->cnt++;
 80077ea:	9b01      	ldr	r3, [sp, #4]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	1c5a      	adds	r2, r3, #1
 80077f0:	9b01      	ldr	r3, [sp, #4]
 80077f2:	609a      	str	r2, [r3, #8]

      return MSG_TIMEOUT;
 80077f4:	f04f 33ff 	mov.w	r3, #4294967295
 80077f8:	e012      	b.n	8007820 <chSemWaitTimeoutS+0x60>
    }
    thread_t *currtp = chThdGetSelfX();
 80077fa:	f7ff ffc9 	bl	8007790 <chThdGetSelfX.lto_priv.1>
 80077fe:	9003      	str	r0, [sp, #12]
    currtp->u.wtsemp = sp;
 8007800:	9b03      	ldr	r3, [sp, #12]
 8007802:	9a01      	ldr	r2, [sp, #4]
 8007804:	629a      	str	r2, [r3, #40]	; 0x28
    sem_insert(&sp->queue, currtp);
 8007806:	9b01      	ldr	r3, [sp, #4]
 8007808:	9a03      	ldr	r2, [sp, #12]
 800780a:	4611      	mov	r1, r2
 800780c:	4618      	mov	r0, r3
 800780e:	f7ff ff8f 	bl	8007730 <ch_queue_insert.lto_priv.1>

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 8007812:	9900      	ldr	r1, [sp, #0]
 8007814:	2005      	movs	r0, #5
 8007816:	f7ff fac3 	bl	8006da0 <chSchGoSleepTimeoutS>
 800781a:	4603      	mov	r3, r0
 800781c:	e000      	b.n	8007820 <chSemWaitTimeoutS+0x60>
  }

  return MSG_OK;
 800781e:	2300      	movs	r3, #0
}
 8007820:	4618      	mov	r0, r3
 8007822:	b005      	add	sp, #20
 8007824:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08007830 <chSemSignalI>:
 *
 * @param[in] sp    pointer to a @p semaphore_t structure
 *
 * @iclass
 */
void chSemSignalI(semaphore_t *sp) {
 8007830:	b500      	push	{lr}
 8007832:	b085      	sub	sp, #20
 8007834:	9001      	str	r0, [sp, #4]
  chDbgCheck(sp != NULL);
  chDbgAssert(((sp->cnt >= (cnt_t)0) && ch_queue_isempty(&sp->queue)) ||
              ((sp->cnt < (cnt_t)0) && ch_queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (++sp->cnt <= (cnt_t)0) {
 8007836:	9b01      	ldr	r3, [sp, #4]
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	1c5a      	adds	r2, r3, #1
 800783c:	9b01      	ldr	r3, [sp, #4]
 800783e:	609a      	str	r2, [r3, #8]
 8007840:	9b01      	ldr	r3, [sp, #4]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	2b00      	cmp	r3, #0
 8007846:	dc0a      	bgt.n	800785e <chSemSignalI+0x2e>
    /* Note, it is done this way in order to allow a tail call on
             chSchReadyI().*/
    thread_t *tp = threadref(ch_queue_fifo_remove(&sp->queue));
 8007848:	9b01      	ldr	r3, [sp, #4]
 800784a:	4618      	mov	r0, r3
 800784c:	f7ff ff88 	bl	8007760 <ch_queue_fifo_remove.lto_priv.1>
 8007850:	9003      	str	r0, [sp, #12]
    tp->u.rdymsg = MSG_OK;
 8007852:	9b03      	ldr	r3, [sp, #12]
 8007854:	2200      	movs	r2, #0
 8007856:	629a      	str	r2, [r3, #40]	; 0x28
    (void) chSchReadyI(tp);
 8007858:	9803      	ldr	r0, [sp, #12]
 800785a:	f7ff fa69 	bl	8006d30 <chSchReadyI>
  }
}
 800785e:	bf00      	nop
 8007860:	b005      	add	sp, #20
 8007862:	f85d fb04 	ldr.w	pc, [sp], #4
 8007866:	bf00      	nop
	...

08007870 <ch_queue_init.lto_priv.5>:
static inline void ch_queue_init(ch_queue_t *qp) {
 8007870:	b082      	sub	sp, #8
 8007872:	9001      	str	r0, [sp, #4]
  qp->next = qp;
 8007874:	9b01      	ldr	r3, [sp, #4]
 8007876:	9a01      	ldr	r2, [sp, #4]
 8007878:	601a      	str	r2, [r3, #0]
  qp->prev = qp;
 800787a:	9b01      	ldr	r3, [sp, #4]
 800787c:	9a01      	ldr	r2, [sp, #4]
 800787e:	605a      	str	r2, [r3, #4]
}
 8007880:	bf00      	nop
 8007882:	b002      	add	sp, #8
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop
	...

08007890 <chMtxObjectInit>:
 *
 * @param[out] mp       pointer to a @p mutex_t structure
 *
 * @init
 */
void chMtxObjectInit(mutex_t *mp) {
 8007890:	b500      	push	{lr}
 8007892:	b083      	sub	sp, #12
 8007894:	9001      	str	r0, [sp, #4]

  chDbgCheck(mp != NULL);

  ch_queue_init(&mp->queue);
 8007896:	9b01      	ldr	r3, [sp, #4]
 8007898:	4618      	mov	r0, r3
 800789a:	f7ff ffe9 	bl	8007870 <ch_queue_init.lto_priv.5>
  mp->owner = NULL;
 800789e:	9b01      	ldr	r3, [sp, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	609a      	str	r2, [r3, #8]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  mp->cnt = (cnt_t)0;
#endif
}
 80078a4:	bf00      	nop
 80078a6:	b003      	add	sp, #12
 80078a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80078ac:	0000      	movs	r0, r0
	...

080078b0 <chEvtSignalI>:
 * @param[in] tp        the thread to be signaled
 * @param[in] events    the events set to be ORed
 *
 * @iclass
 */
void chEvtSignalI(thread_t *tp, eventmask_t events) {
 80078b0:	b500      	push	{lr}
 80078b2:	b083      	sub	sp, #12
 80078b4:	9001      	str	r0, [sp, #4]
 80078b6:	9100      	str	r1, [sp, #0]

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
 80078b8:	9b01      	ldr	r3, [sp, #4]
 80078ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078bc:	9b00      	ldr	r3, [sp, #0]
 80078be:	431a      	orrs	r2, r3
 80078c0:	9b01      	ldr	r3, [sp, #4]
 80078c2:	639a      	str	r2, [r3, #56]	; 0x38
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 80078c4:	9b01      	ldr	r3, [sp, #4]
 80078c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80078ca:	2b0a      	cmp	r3, #10
 80078cc:	d106      	bne.n	80078dc <chEvtSignalI+0x2c>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 80078ce:	9b01      	ldr	r3, [sp, #4]
 80078d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078d2:	9b01      	ldr	r3, [sp, #4]
 80078d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078d6:	4013      	ands	r3, r2
  if (((tp->state == CH_STATE_WTOREVT) &&
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d10d      	bne.n	80078f8 <chEvtSignalI+0x48>
      ((tp->state == CH_STATE_WTANDEVT) &&
 80078dc:	9b01      	ldr	r3, [sp, #4]
 80078de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 80078e2:	2b0b      	cmp	r3, #11
 80078e4:	d10e      	bne.n	8007904 <chEvtSignalI+0x54>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 80078e6:	9b01      	ldr	r3, [sp, #4]
 80078e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078ea:	9b01      	ldr	r3, [sp, #4]
 80078ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ee:	401a      	ands	r2, r3
 80078f0:	9b01      	ldr	r3, [sp, #4]
 80078f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      ((tp->state == CH_STATE_WTANDEVT) &&
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d105      	bne.n	8007904 <chEvtSignalI+0x54>
    tp->u.rdymsg = MSG_OK;
 80078f8:	9b01      	ldr	r3, [sp, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	629a      	str	r2, [r3, #40]	; 0x28
    (void) chSchReadyI(tp);
 80078fe:	9801      	ldr	r0, [sp, #4]
 8007900:	f7ff fa16 	bl	8006d30 <chSchReadyI>
  }
}
 8007904:	bf00      	nop
 8007906:	b003      	add	sp, #12
 8007908:	f85d fb04 	ldr.w	pc, [sp], #4
 800790c:	0000      	movs	r0, r0
	...

08007910 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8007910:	b500      	push	{lr}
 8007912:	b085      	sub	sp, #20
 8007914:	9001      	str	r0, [sp, #4]
 8007916:	9100      	str	r1, [sp, #0]
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 8007918:	9b01      	ldr	r3, [sp, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	9303      	str	r3, [sp, #12]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 800791e:	e019      	b.n	8007954 <chEvtBroadcastFlagsI+0x44>
  /*lint -restore*/
    elp->flags |= flags;
 8007920:	9b03      	ldr	r3, [sp, #12]
 8007922:	68da      	ldr	r2, [r3, #12]
 8007924:	9b00      	ldr	r3, [sp, #0]
 8007926:	431a      	orrs	r2, r3
 8007928:	9b03      	ldr	r3, [sp, #12]
 800792a:	60da      	str	r2, [r3, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 800792c:	9b00      	ldr	r3, [sp, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d005      	beq.n	800793e <chEvtBroadcastFlagsI+0x2e>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 8007932:	9b03      	ldr	r3, [sp, #12]
 8007934:	691a      	ldr	r2, [r3, #16]
 8007936:	9b00      	ldr	r3, [sp, #0]
 8007938:	4013      	ands	r3, r2
    if ((flags == (eventflags_t)0) ||
 800793a:	2b00      	cmp	r3, #0
 800793c:	d007      	beq.n	800794e <chEvtBroadcastFlagsI+0x3e>
      chEvtSignalI(elp->listener, elp->events);
 800793e:	9b03      	ldr	r3, [sp, #12]
 8007940:	685a      	ldr	r2, [r3, #4]
 8007942:	9b03      	ldr	r3, [sp, #12]
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	4619      	mov	r1, r3
 8007948:	4610      	mov	r0, r2
 800794a:	f7ff ffb1 	bl	80078b0 <chEvtSignalI>
    }
    elp = elp->next;
 800794e:	9b03      	ldr	r3, [sp, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	9303      	str	r3, [sp, #12]
  while (elp != (event_listener_t *)esp) {
 8007954:	9a03      	ldr	r2, [sp, #12]
 8007956:	9b01      	ldr	r3, [sp, #4]
 8007958:	429a      	cmp	r2, r3
 800795a:	d1e1      	bne.n	8007920 <chEvtBroadcastFlagsI+0x10>
  }
}
 800795c:	bf00      	nop
 800795e:	bf00      	nop
 8007960:	b005      	add	sp, #20
 8007962:	f85d fb04 	ldr.w	pc, [sp], #4
 8007966:	bf00      	nop
	...

08007970 <ch_queue_init.lto_priv.7>:
static inline void ch_queue_init(ch_queue_t *qp) {
 8007970:	b082      	sub	sp, #8
 8007972:	9001      	str	r0, [sp, #4]
  qp->next = qp;
 8007974:	9b01      	ldr	r3, [sp, #4]
 8007976:	9a01      	ldr	r2, [sp, #4]
 8007978:	601a      	str	r2, [r3, #0]
  qp->prev = qp;
 800797a:	9b01      	ldr	r3, [sp, #4]
 800797c:	9a01      	ldr	r2, [sp, #4]
 800797e:	605a      	str	r2, [r3, #4]
}
 8007980:	bf00      	nop
 8007982:	b002      	add	sp, #8
 8007984:	4770      	bx	lr
 8007986:	bf00      	nop
	...

08007990 <chSysLock.lto_priv.18>:
static inline void chSysLock(void) {
 8007990:	b082      	sub	sp, #8
 8007992:	2330      	movs	r3, #48	; 0x30
 8007994:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8007996:	9b01      	ldr	r3, [sp, #4]
 8007998:	f383 8811 	msr	BASEPRI, r3
}
 800799c:	bf00      	nop
}
 800799e:	bf00      	nop
}
 80079a0:	bf00      	nop
 80079a2:	b002      	add	sp, #8
 80079a4:	4770      	bx	lr
 80079a6:	bf00      	nop
	...

080079b0 <chSysUnlock.lto_priv.18>:
static inline void chSysUnlock(void) {
 80079b0:	b082      	sub	sp, #8
 80079b2:	2300      	movs	r3, #0
 80079b4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80079b6:	9b01      	ldr	r3, [sp, #4]
 80079b8:	f383 8811 	msr	BASEPRI, r3
}
 80079bc:	bf00      	nop
}
 80079be:	bf00      	nop
}
 80079c0:	bf00      	nop
 80079c2:	b002      	add	sp, #8
 80079c4:	4770      	bx	lr
 80079c6:	bf00      	nop
	...

080079d0 <chThdQueueObjectInit.lto_priv.2>:
static inline void chThdQueueObjectInit(threads_queue_t *tqp) {
 80079d0:	b500      	push	{lr}
 80079d2:	b083      	sub	sp, #12
 80079d4:	9001      	str	r0, [sp, #4]
  ch_queue_init(&tqp->queue);
 80079d6:	9b01      	ldr	r3, [sp, #4]
 80079d8:	4618      	mov	r0, r3
 80079da:	f7ff ffc9 	bl	8007970 <ch_queue_init.lto_priv.7>
}
 80079de:	bf00      	nop
 80079e0:	b003      	add	sp, #12
 80079e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80079e6:	bf00      	nop
	...

080079f0 <chMBGetSizeI>:
 * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 * @return              The size of the mailbox.
 *
 * @iclass
 */
static inline size_t chMBGetSizeI(const mailbox_t *mbp) {
 80079f0:	b082      	sub	sp, #8
 80079f2:	9001      	str	r0, [sp, #4]

  /*lint -save -e9033 [10.8] Perfectly safe pointers
    arithmetic.*/
  return (size_t)(mbp->top - mbp->buffer);
 80079f4:	9b01      	ldr	r3, [sp, #4]
 80079f6:	685a      	ldr	r2, [r3, #4]
 80079f8:	9b01      	ldr	r3, [sp, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	1ad3      	subs	r3, r2, r3
 80079fe:	109b      	asrs	r3, r3, #2
  /*lint -restore*/
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	b002      	add	sp, #8
 8007a04:	4770      	bx	lr
 8007a06:	bf00      	nop
	...

08007a10 <chMBGetUsedCountI>:
 * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 * @return              The number of queued messages.
 *
 * @iclass
 */
static inline size_t chMBGetUsedCountI(const mailbox_t *mbp) {
 8007a10:	b082      	sub	sp, #8
 8007a12:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();

  return mbp->cnt;
 8007a14:	9b01      	ldr	r3, [sp, #4]
 8007a16:	691b      	ldr	r3, [r3, #16]
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	b002      	add	sp, #8
 8007a1c:	4770      	bx	lr
 8007a1e:	bf00      	nop

08007a20 <chMBGetFreeCountI>:
 * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 * @return              The number of empty message slots.
 *
 * @iclass
 */
static inline size_t chMBGetFreeCountI(const mailbox_t *mbp) {
 8007a20:	b510      	push	{r4, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();

  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8007a26:	9801      	ldr	r0, [sp, #4]
 8007a28:	f7ff ffe2 	bl	80079f0 <chMBGetSizeI>
 8007a2c:	4604      	mov	r4, r0
 8007a2e:	9801      	ldr	r0, [sp, #4]
 8007a30:	f7ff ffee 	bl	8007a10 <chMBGetUsedCountI>
 8007a34:	4603      	mov	r3, r0
 8007a36:	1ae3      	subs	r3, r4, r3
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	b002      	add	sp, #8
 8007a3c:	bd10      	pop	{r4, pc}
 8007a3e:	bf00      	nop

08007a40 <chMBObjectInit>:
 * @param[in] buf       pointer to the messages buffer as an array of @p msg_t
 * @param[in] n         number of elements in the buffer array
 *
 * @init
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, size_t n) {
 8007a40:	b500      	push	{lr}
 8007a42:	b085      	sub	sp, #20
 8007a44:	9003      	str	r0, [sp, #12]
 8007a46:	9102      	str	r1, [sp, #8]
 8007a48:	9201      	str	r2, [sp, #4]

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (size_t)0));

  mbp->buffer = buf;
 8007a4a:	9b03      	ldr	r3, [sp, #12]
 8007a4c:	9a02      	ldr	r2, [sp, #8]
 8007a4e:	601a      	str	r2, [r3, #0]
  mbp->rdptr  = buf;
 8007a50:	9b03      	ldr	r3, [sp, #12]
 8007a52:	9a02      	ldr	r2, [sp, #8]
 8007a54:	60da      	str	r2, [r3, #12]
  mbp->wrptr  = buf;
 8007a56:	9b03      	ldr	r3, [sp, #12]
 8007a58:	9a02      	ldr	r2, [sp, #8]
 8007a5a:	609a      	str	r2, [r3, #8]
  mbp->top    = &buf[n];
 8007a5c:	9b01      	ldr	r3, [sp, #4]
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	9a02      	ldr	r2, [sp, #8]
 8007a62:	441a      	add	r2, r3
 8007a64:	9b03      	ldr	r3, [sp, #12]
 8007a66:	605a      	str	r2, [r3, #4]
  mbp->cnt    = (size_t)0;
 8007a68:	9b03      	ldr	r3, [sp, #12]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	611a      	str	r2, [r3, #16]
  mbp->reset  = false;
 8007a6e:	9b03      	ldr	r3, [sp, #12]
 8007a70:	2200      	movs	r2, #0
 8007a72:	751a      	strb	r2, [r3, #20]
  chThdQueueObjectInit(&mbp->qw);
 8007a74:	9b03      	ldr	r3, [sp, #12]
 8007a76:	3318      	adds	r3, #24
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f7ff ffa9 	bl	80079d0 <chThdQueueObjectInit.lto_priv.2>
  chThdQueueObjectInit(&mbp->qr);
 8007a7e:	9b03      	ldr	r3, [sp, #12]
 8007a80:	3320      	adds	r3, #32
 8007a82:	4618      	mov	r0, r3
 8007a84:	f7ff ffa4 	bl	80079d0 <chThdQueueObjectInit.lto_priv.2>
}
 8007a88:	bf00      	nop
 8007a8a:	b005      	add	sp, #20
 8007a8c:	f85d fb04 	ldr.w	pc, [sp], #4

08007a90 <chMBPostTimeout>:
 * @retval MSG_RESET    if the mailbox has been reset.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBPostTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 8007a90:	b500      	push	{lr}
 8007a92:	b087      	sub	sp, #28
 8007a94:	9003      	str	r0, [sp, #12]
 8007a96:	9102      	str	r1, [sp, #8]
 8007a98:	9201      	str	r2, [sp, #4]
  msg_t rdymsg;

  chSysLock();
 8007a9a:	f7ff ff79 	bl	8007990 <chSysLock.lto_priv.18>
  rdymsg = chMBPostTimeoutS(mbp, msg, timeout);
 8007a9e:	9a01      	ldr	r2, [sp, #4]
 8007aa0:	9902      	ldr	r1, [sp, #8]
 8007aa2:	9803      	ldr	r0, [sp, #12]
 8007aa4:	f000 f80c 	bl	8007ac0 <chMBPostTimeoutS>
 8007aa8:	9005      	str	r0, [sp, #20]
  chSysUnlock();
 8007aaa:	f7ff ff81 	bl	80079b0 <chSysUnlock.lto_priv.18>

  return rdymsg;
 8007aae:	9b05      	ldr	r3, [sp, #20]
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	b007      	add	sp, #28
 8007ab4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08007ac0 <chMBPostTimeoutS>:
 * @retval MSG_RESET    if the mailbox has been reset.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @sclass
 */
msg_t chMBPostTimeoutS(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 8007ac0:	b500      	push	{lr}
 8007ac2:	b087      	sub	sp, #28
 8007ac4:	9003      	str	r0, [sp, #12]
 8007ac6:	9102      	str	r1, [sp, #8]
 8007ac8:	9201      	str	r2, [sp, #4]
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  do {
    /* If the mailbox is in reset state then returns immediately.*/
    if (mbp->reset) {
 8007aca:	9b03      	ldr	r3, [sp, #12]
 8007acc:	7d1b      	ldrb	r3, [r3, #20]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d002      	beq.n	8007ad8 <chMBPostTimeoutS+0x18>
      return MSG_RESET;
 8007ad2:	f06f 0301 	mvn.w	r3, #1
 8007ad6:	e030      	b.n	8007b3a <chMBPostTimeoutS+0x7a>
    }

    /* Is there a free message slot in queue? if so then post.*/
    if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8007ad8:	9803      	ldr	r0, [sp, #12]
 8007ada:	f7ff ffa1 	bl	8007a20 <chMBGetFreeCountI>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d01f      	beq.n	8007b24 <chMBPostTimeoutS+0x64>
      *mbp->wrptr++ = msg;
 8007ae4:	9b03      	ldr	r3, [sp, #12]
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	1d19      	adds	r1, r3, #4
 8007aea:	9a03      	ldr	r2, [sp, #12]
 8007aec:	6091      	str	r1, [r2, #8]
 8007aee:	9a02      	ldr	r2, [sp, #8]
 8007af0:	601a      	str	r2, [r3, #0]
      if (mbp->wrptr >= mbp->top) {
 8007af2:	9b03      	ldr	r3, [sp, #12]
 8007af4:	689a      	ldr	r2, [r3, #8]
 8007af6:	9b03      	ldr	r3, [sp, #12]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d303      	bcc.n	8007b06 <chMBPostTimeoutS+0x46>
        mbp->wrptr = mbp->buffer;
 8007afe:	9b03      	ldr	r3, [sp, #12]
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	9b03      	ldr	r3, [sp, #12]
 8007b04:	609a      	str	r2, [r3, #8]
      }
      mbp->cnt++;
 8007b06:	9b03      	ldr	r3, [sp, #12]
 8007b08:	691b      	ldr	r3, [r3, #16]
 8007b0a:	1c5a      	adds	r2, r3, #1
 8007b0c:	9b03      	ldr	r3, [sp, #12]
 8007b0e:	611a      	str	r2, [r3, #16]

      /* If there is a reader waiting then makes it ready.*/
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 8007b10:	9b03      	ldr	r3, [sp, #12]
 8007b12:	3320      	adds	r3, #32
 8007b14:	2100      	movs	r1, #0
 8007b16:	4618      	mov	r0, r3
 8007b18:	f7ff fd62 	bl	80075e0 <chThdDequeueNextI>
      chSchRescheduleS();
 8007b1c:	f7ff f9a8 	bl	8006e70 <chSchRescheduleS>

      return MSG_OK;
 8007b20:	2300      	movs	r3, #0
 8007b22:	e00a      	b.n	8007b3a <chMBPostTimeoutS+0x7a>
    }

    /* No space in the queue, waiting for a slot to become available.*/
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8007b24:	9b03      	ldr	r3, [sp, #12]
 8007b26:	3318      	adds	r3, #24
 8007b28:	9901      	ldr	r1, [sp, #4]
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f7ff fd38 	bl	80075a0 <chThdEnqueueTimeoutS>
 8007b30:	9005      	str	r0, [sp, #20]
  } while (rdymsg == MSG_OK);
 8007b32:	9b05      	ldr	r3, [sp, #20]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d0c8      	beq.n	8007aca <chMBPostTimeoutS+0xa>

  return rdymsg;
 8007b38:	9b05      	ldr	r3, [sp, #20]
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	b007      	add	sp, #28
 8007b3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007b42:	bf00      	nop
	...

08007b50 <chMBFetchTimeout>:
 * @retval MSG_RESET    if the mailbox has been reset.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBFetchTimeout(mailbox_t *mbp, msg_t *msgp, sysinterval_t timeout) {
 8007b50:	b500      	push	{lr}
 8007b52:	b087      	sub	sp, #28
 8007b54:	9003      	str	r0, [sp, #12]
 8007b56:	9102      	str	r1, [sp, #8]
 8007b58:	9201      	str	r2, [sp, #4]
  msg_t rdymsg;

  chSysLock();
 8007b5a:	f7ff ff19 	bl	8007990 <chSysLock.lto_priv.18>
  rdymsg = chMBFetchTimeoutS(mbp, msgp, timeout);
 8007b5e:	9a01      	ldr	r2, [sp, #4]
 8007b60:	9902      	ldr	r1, [sp, #8]
 8007b62:	9803      	ldr	r0, [sp, #12]
 8007b64:	f000 f80c 	bl	8007b80 <chMBFetchTimeoutS>
 8007b68:	9005      	str	r0, [sp, #20]
  chSysUnlock();
 8007b6a:	f7ff ff21 	bl	80079b0 <chSysUnlock.lto_priv.18>

  return rdymsg;
 8007b6e:	9b05      	ldr	r3, [sp, #20]
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	b007      	add	sp, #28
 8007b74:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08007b80 <chMBFetchTimeoutS>:
 * @retval MSG_RESET    if the mailbox has been reset.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @sclass
 */
msg_t chMBFetchTimeoutS(mailbox_t *mbp, msg_t *msgp, sysinterval_t timeout) {
 8007b80:	b500      	push	{lr}
 8007b82:	b087      	sub	sp, #28
 8007b84:	9003      	str	r0, [sp, #12]
 8007b86:	9102      	str	r1, [sp, #8]
 8007b88:	9201      	str	r2, [sp, #4]
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  do {
    /* If the mailbox is in reset state then returns immediately.*/
    if (mbp->reset) {
 8007b8a:	9b03      	ldr	r3, [sp, #12]
 8007b8c:	7d1b      	ldrb	r3, [r3, #20]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d002      	beq.n	8007b98 <chMBFetchTimeoutS+0x18>
      return MSG_RESET;
 8007b92:	f06f 0301 	mvn.w	r3, #1
 8007b96:	e031      	b.n	8007bfc <chMBFetchTimeoutS+0x7c>
    }

    /* Is there a message in queue? if so then fetch.*/
    if (chMBGetUsedCountI(mbp) > (size_t)0) {
 8007b98:	9803      	ldr	r0, [sp, #12]
 8007b9a:	f7ff ff39 	bl	8007a10 <chMBGetUsedCountI>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d020      	beq.n	8007be6 <chMBFetchTimeoutS+0x66>
      *msgp = *mbp->rdptr++;
 8007ba4:	9b03      	ldr	r3, [sp, #12]
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	1d19      	adds	r1, r3, #4
 8007baa:	9a03      	ldr	r2, [sp, #12]
 8007bac:	60d1      	str	r1, [r2, #12]
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	9b02      	ldr	r3, [sp, #8]
 8007bb2:	601a      	str	r2, [r3, #0]
      if (mbp->rdptr >= mbp->top) {
 8007bb4:	9b03      	ldr	r3, [sp, #12]
 8007bb6:	68da      	ldr	r2, [r3, #12]
 8007bb8:	9b03      	ldr	r3, [sp, #12]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d303      	bcc.n	8007bc8 <chMBFetchTimeoutS+0x48>
        mbp->rdptr = mbp->buffer;
 8007bc0:	9b03      	ldr	r3, [sp, #12]
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	9b03      	ldr	r3, [sp, #12]
 8007bc6:	60da      	str	r2, [r3, #12]
      }
      mbp->cnt--;
 8007bc8:	9b03      	ldr	r3, [sp, #12]
 8007bca:	691b      	ldr	r3, [r3, #16]
 8007bcc:	1e5a      	subs	r2, r3, #1
 8007bce:	9b03      	ldr	r3, [sp, #12]
 8007bd0:	611a      	str	r2, [r3, #16]

      /* If there is a writer waiting then makes it ready.*/
      chThdDequeueNextI(&mbp->qw, MSG_OK);
 8007bd2:	9b03      	ldr	r3, [sp, #12]
 8007bd4:	3318      	adds	r3, #24
 8007bd6:	2100      	movs	r1, #0
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f7ff fd01 	bl	80075e0 <chThdDequeueNextI>
      chSchRescheduleS();
 8007bde:	f7ff f947 	bl	8006e70 <chSchRescheduleS>

      return MSG_OK;
 8007be2:	2300      	movs	r3, #0
 8007be4:	e00a      	b.n	8007bfc <chMBFetchTimeoutS+0x7c>
    }

    /* No message in the queue, waiting for a message to become available.*/
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 8007be6:	9b03      	ldr	r3, [sp, #12]
 8007be8:	3320      	adds	r3, #32
 8007bea:	9901      	ldr	r1, [sp, #4]
 8007bec:	4618      	mov	r0, r3
 8007bee:	f7ff fcd7 	bl	80075a0 <chThdEnqueueTimeoutS>
 8007bf2:	9005      	str	r0, [sp, #20]
  } while (rdymsg == MSG_OK);
 8007bf4:	9b05      	ldr	r3, [sp, #20]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d0c7      	beq.n	8007b8a <chMBFetchTimeoutS+0xa>

  return rdymsg;
 8007bfa:	9b05      	ldr	r3, [sp, #20]
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	b007      	add	sp, #28
 8007c00:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08007c10 <chSysLock.lto_priv.19>:
static inline void chSysLock(void) {
 8007c10:	b082      	sub	sp, #8
 8007c12:	2330      	movs	r3, #48	; 0x30
 8007c14:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8007c16:	9b01      	ldr	r3, [sp, #4]
 8007c18:	f383 8811 	msr	BASEPRI, r3
}
 8007c1c:	bf00      	nop
}
 8007c1e:	bf00      	nop
}
 8007c20:	bf00      	nop
 8007c22:	b002      	add	sp, #8
 8007c24:	4770      	bx	lr
 8007c26:	bf00      	nop
	...

08007c30 <chSysUnlock.lto_priv.19>:
static inline void chSysUnlock(void) {
 8007c30:	b082      	sub	sp, #8
 8007c32:	2300      	movs	r3, #0
 8007c34:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8007c36:	9b01      	ldr	r3, [sp, #4]
 8007c38:	f383 8811 	msr	BASEPRI, r3
}
 8007c3c:	bf00      	nop
}
 8007c3e:	bf00      	nop
}
 8007c40:	bf00      	nop
 8007c42:	b002      	add	sp, #8
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop
	...

08007c50 <__core_init>:
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  ch_memcore.basemem = __heap_base__;
 8007c50:	4b03      	ldr	r3, [pc, #12]	; (8007c60 <__core_init+0x10>)
 8007c52:	4a04      	ldr	r2, [pc, #16]	; (8007c64 <__core_init+0x14>)
 8007c54:	601a      	str	r2, [r3, #0]
  ch_memcore.topmem  = __heap_end__;
 8007c56:	4b02      	ldr	r3, [pc, #8]	; (8007c60 <__core_init+0x10>)
 8007c58:	4a03      	ldr	r2, [pc, #12]	; (8007c68 <__core_init+0x18>)
 8007c5a:	605a      	str	r2, [r3, #4]
  static uint8_t static_heap[CH_CFG_MEMCORE_SIZE];

  ch_memcore.basemem = &static_heap[0];
  ch_memcore.topmem  = &static_heap[CH_CFG_MEMCORE_SIZE];
#endif
}
 8007c5c:	bf00      	nop
 8007c5e:	4770      	bx	lr
 8007c60:	20001008 	.word	0x20001008
 8007c64:	20002a00 	.word	0x20002a00
 8007c68:	20018000 	.word	0x20018000
 8007c6c:	00000000 	.word	0x00000000

08007c70 <chCoreAllocFromTopI>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
void *chCoreAllocFromTopI(size_t size, unsigned align, size_t offset) {
 8007c70:	b086      	sub	sp, #24
 8007c72:	9003      	str	r0, [sp, #12]
 8007c74:	9102      	str	r1, [sp, #8]
 8007c76:	9201      	str	r2, [sp, #4]
  uint8_t *p, *prev;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8007c78:	4b10      	ldr	r3, [pc, #64]	; (8007cbc <chCoreAllocFromTopI+0x4c>)
 8007c7a:	685a      	ldr	r2, [r3, #4]
 8007c7c:	9b03      	ldr	r3, [sp, #12]
 8007c7e:	425b      	negs	r3, r3
 8007c80:	4413      	add	r3, r2
 8007c82:	461a      	mov	r2, r3
 8007c84:	9b02      	ldr	r3, [sp, #8]
 8007c86:	425b      	negs	r3, r3
 8007c88:	4013      	ands	r3, r2
 8007c8a:	9305      	str	r3, [sp, #20]
  prev = p - offset;
 8007c8c:	9b01      	ldr	r3, [sp, #4]
 8007c8e:	425b      	negs	r3, r3
 8007c90:	9a05      	ldr	r2, [sp, #20]
 8007c92:	4413      	add	r3, r2
 8007c94:	9304      	str	r3, [sp, #16]

  /* Considering also the case where there is numeric overflow.*/
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8007c96:	4b09      	ldr	r3, [pc, #36]	; (8007cbc <chCoreAllocFromTopI+0x4c>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	9a04      	ldr	r2, [sp, #16]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d304      	bcc.n	8007caa <chCoreAllocFromTopI+0x3a>
 8007ca0:	4b06      	ldr	r3, [pc, #24]	; (8007cbc <chCoreAllocFromTopI+0x4c>)
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	9a04      	ldr	r2, [sp, #16]
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d901      	bls.n	8007cae <chCoreAllocFromTopI+0x3e>
    return NULL;
 8007caa:	2300      	movs	r3, #0
 8007cac:	e003      	b.n	8007cb6 <chCoreAllocFromTopI+0x46>
  }

  ch_memcore.topmem = prev;
 8007cae:	4a03      	ldr	r2, [pc, #12]	; (8007cbc <chCoreAllocFromTopI+0x4c>)
 8007cb0:	9b04      	ldr	r3, [sp, #16]
 8007cb2:	6053      	str	r3, [r2, #4]

  return p;
 8007cb4:	9b05      	ldr	r3, [sp, #20]
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	b006      	add	sp, #24
 8007cba:	4770      	bx	lr
 8007cbc:	20001008 	.word	0x20001008

08007cc0 <chCoreAllocFromTop>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 8007cc0:	b500      	push	{lr}
 8007cc2:	b087      	sub	sp, #28
 8007cc4:	9003      	str	r0, [sp, #12]
 8007cc6:	9102      	str	r1, [sp, #8]
 8007cc8:	9201      	str	r2, [sp, #4]
  void *p;

  chSysLock();
 8007cca:	f7ff ffa1 	bl	8007c10 <chSysLock.lto_priv.19>
  p = chCoreAllocFromTopI(size, align, offset);
 8007cce:	9a01      	ldr	r2, [sp, #4]
 8007cd0:	9902      	ldr	r1, [sp, #8]
 8007cd2:	9803      	ldr	r0, [sp, #12]
 8007cd4:	f7ff ffcc 	bl	8007c70 <chCoreAllocFromTopI>
 8007cd8:	9005      	str	r0, [sp, #20]
  chSysUnlock();
 8007cda:	f7ff ffa9 	bl	8007c30 <chSysUnlock.lto_priv.19>

  return p;
 8007cde:	9b05      	ldr	r3, [sp, #20]
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	b007      	add	sp, #28
 8007ce4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08007cf0 <__heap_init>:
/**
 * @brief   Initializes the default heap.
 *
 * @notapi
 */
void __heap_init(void) {
 8007cf0:	b508      	push	{r3, lr}

  default_heap.provider = chCoreAllocAlignedWithOffset;
 8007cf2:	4b07      	ldr	r3, [pc, #28]	; (8007d10 <__heap_init+0x20>)
 8007cf4:	4a07      	ldr	r2, [pc, #28]	; (8007d14 <__heap_init+0x24>)
 8007cf6:	601a      	str	r2, [r3, #0]
  H_NEXT(&default_heap.header) = NULL;
 8007cf8:	4b05      	ldr	r3, [pc, #20]	; (8007d10 <__heap_init+0x20>)
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	605a      	str	r2, [r3, #4]
  H_PAGES(&default_heap.header) = 0;
 8007cfe:	4b04      	ldr	r3, [pc, #16]	; (8007d10 <__heap_init+0x20>)
 8007d00:	2200      	movs	r2, #0
 8007d02:	609a      	str	r2, [r3, #8]
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.mtx);
 8007d04:	4804      	ldr	r0, [pc, #16]	; (8007d18 <__heap_init+0x28>)
 8007d06:	f7ff fdc3 	bl	8007890 <chMtxObjectInit>
#else
  chSemObjectInit(&default_heap.sem, (cnt_t)1);
#endif
}
 8007d0a:	bf00      	nop
 8007d0c:	bd08      	pop	{r3, pc}
 8007d0e:	bf00      	nop
 8007d10:	20001010 	.word	0x20001010
 8007d14:	08007cc1 	.word	0x08007cc1
 8007d18:	2000101c 	.word	0x2000101c
 8007d1c:	00000000 	.word	0x00000000

08007d20 <chSysLock.lto_priv.20>:
static inline void chSysLock(void) {
 8007d20:	b082      	sub	sp, #8
 8007d22:	2330      	movs	r3, #48	; 0x30
 8007d24:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8007d26:	9b01      	ldr	r3, [sp, #4]
 8007d28:	f383 8811 	msr	BASEPRI, r3
}
 8007d2c:	bf00      	nop
}
 8007d2e:	bf00      	nop
}
 8007d30:	bf00      	nop
 8007d32:	b002      	add	sp, #8
 8007d34:	4770      	bx	lr
 8007d36:	bf00      	nop
	...

08007d40 <chSysUnlock.lto_priv.20>:
static inline void chSysUnlock(void) {
 8007d40:	b082      	sub	sp, #8
 8007d42:	2300      	movs	r3, #0
 8007d44:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8007d46:	9b01      	ldr	r3, [sp, #4]
 8007d48:	f383 8811 	msr	BASEPRI, r3
}
 8007d4c:	bf00      	nop
}
 8007d4e:	bf00      	nop
}
 8007d50:	bf00      	nop
 8007d52:	b002      	add	sp, #8
 8007d54:	4770      	bx	lr
 8007d56:	bf00      	nop
	...

08007d60 <chGuardedPoolFreeI>:
 * @param[in] gmp       pointer to a @p guarded_memory_pool_t structure
 * @param[in] objp      the pointer to the object to be released
 *
 * @iclass
 */
static inline void chGuardedPoolFreeI(guarded_memory_pool_t *gmp, void *objp) {
 8007d60:	b500      	push	{lr}
 8007d62:	b083      	sub	sp, #12
 8007d64:	9001      	str	r0, [sp, #4]
 8007d66:	9100      	str	r1, [sp, #0]

  chPoolFreeI(&gmp->pool, objp);
 8007d68:	9b01      	ldr	r3, [sp, #4]
 8007d6a:	330c      	adds	r3, #12
 8007d6c:	9900      	ldr	r1, [sp, #0]
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f000 f85e 	bl	8007e30 <chPoolFreeI>
  chSemSignalI(&gmp->sem);
 8007d74:	9b01      	ldr	r3, [sp, #4]
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7ff fd5a 	bl	8007830 <chSemSignalI>
}
 8007d7c:	bf00      	nop
 8007d7e:	b003      	add	sp, #12
 8007d80:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08007d90 <chGuardedPoolAdd>:
 * @param[in] gmp       pointer to a @p guarded_memory_pool_t structure
 * @param[in] objp      the pointer to the object to be added
 *
 * @api
 */
static inline void chGuardedPoolAdd(guarded_memory_pool_t *gmp, void *objp) {
 8007d90:	b500      	push	{lr}
 8007d92:	b083      	sub	sp, #12
 8007d94:	9001      	str	r0, [sp, #4]
 8007d96:	9100      	str	r1, [sp, #0]

  chGuardedPoolFree(gmp, objp);
 8007d98:	9900      	ldr	r1, [sp, #0]
 8007d9a:	9801      	ldr	r0, [sp, #4]
 8007d9c:	f000 f8c8 	bl	8007f30 <chGuardedPoolFree>
}
 8007da0:	bf00      	nop
 8007da2:	b003      	add	sp, #12
 8007da4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08007db0 <chPoolObjectInitAligned>:
 *                      automatically
 *
 * @init
 */
void chPoolObjectInitAligned(memory_pool_t *mp, size_t size,
                             unsigned align, memgetfunc_t provider) {
 8007db0:	b084      	sub	sp, #16
 8007db2:	9003      	str	r0, [sp, #12]
 8007db4:	9102      	str	r1, [sp, #8]
 8007db6:	9201      	str	r2, [sp, #4]
 8007db8:	9300      	str	r3, [sp, #0]
  chDbgCheck((mp != NULL) &&
             (size >= sizeof(void *)) &&
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
 8007dba:	9b03      	ldr	r3, [sp, #12]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	601a      	str	r2, [r3, #0]
  mp->object_size = size;
 8007dc0:	9b03      	ldr	r3, [sp, #12]
 8007dc2:	9a02      	ldr	r2, [sp, #8]
 8007dc4:	605a      	str	r2, [r3, #4]
  mp->align = align;
 8007dc6:	9b03      	ldr	r3, [sp, #12]
 8007dc8:	9a01      	ldr	r2, [sp, #4]
 8007dca:	609a      	str	r2, [r3, #8]
  mp->provider = provider;
 8007dcc:	9b03      	ldr	r3, [sp, #12]
 8007dce:	9a00      	ldr	r2, [sp, #0]
 8007dd0:	60da      	str	r2, [r3, #12]
}
 8007dd2:	bf00      	nop
 8007dd4:	b004      	add	sp, #16
 8007dd6:	4770      	bx	lr
	...

08007de0 <chPoolAllocI>:
 * @return              The pointer to the allocated object.
 * @retval NULL         if pool is empty.
 *
 * @iclass
 */
void *chPoolAllocI(memory_pool_t *mp) {
 8007de0:	b500      	push	{lr}
 8007de2:	b085      	sub	sp, #20
 8007de4:	9001      	str	r0, [sp, #4]
  void *objp;

  chDbgCheckClassI();
  chDbgCheck(mp != NULL);

  objp = mp->next;
 8007de6:	9b01      	ldr	r3, [sp, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	9303      	str	r3, [sp, #12]
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (objp != NULL) {
 8007dec:	9b03      	ldr	r3, [sp, #12]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d005      	beq.n	8007dfe <chPoolAllocI+0x1e>
    mp->next = mp->next->next;
 8007df2:	9b01      	ldr	r3, [sp, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	9b01      	ldr	r3, [sp, #4]
 8007dfa:	601a      	str	r2, [r3, #0]
 8007dfc:	e00c      	b.n	8007e18 <chPoolAllocI+0x38>
  }
  else if (mp->provider != NULL) {
 8007dfe:	9b01      	ldr	r3, [sp, #4]
 8007e00:	68db      	ldr	r3, [r3, #12]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d008      	beq.n	8007e18 <chPoolAllocI+0x38>
    objp = mp->provider(mp->object_size, mp->align);
 8007e06:	9b01      	ldr	r3, [sp, #4]
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	9a01      	ldr	r2, [sp, #4]
 8007e0c:	6850      	ldr	r0, [r2, #4]
 8007e0e:	9a01      	ldr	r2, [sp, #4]
 8007e10:	6892      	ldr	r2, [r2, #8]
 8007e12:	4611      	mov	r1, r2
 8007e14:	4798      	blx	r3
 8007e16:	9003      	str	r0, [sp, #12]
    chDbgAssert(MEM_IS_ALIGNED(objp, mp->align),
                "returned object not aligned");
  }
  /*lint -restore*/

  return objp;
 8007e18:	9b03      	ldr	r3, [sp, #12]
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	b005      	add	sp, #20
 8007e1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007e22:	bf00      	nop
	...

08007e30 <chPoolFreeI>:
 * @param[in] mp        pointer to a @p memory_pool_t structure
 * @param[in] objp      the pointer to the object to be released
 *
 * @iclass
 */
void chPoolFreeI(memory_pool_t *mp, void *objp) {
 8007e30:	b084      	sub	sp, #16
 8007e32:	9001      	str	r0, [sp, #4]
 8007e34:	9100      	str	r1, [sp, #0]
  struct pool_header *php = objp;
 8007e36:	9b00      	ldr	r3, [sp, #0]
 8007e38:	9303      	str	r3, [sp, #12]
  chDbgCheckClassI();
  chDbgCheck((mp != NULL) &&
             (objp != NULL) &&
             MEM_IS_ALIGNED(objp, mp->align));

  php->next = mp->next;
 8007e3a:	9b01      	ldr	r3, [sp, #4]
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	9b03      	ldr	r3, [sp, #12]
 8007e40:	601a      	str	r2, [r3, #0]
  mp->next = php;
 8007e42:	9b01      	ldr	r3, [sp, #4]
 8007e44:	9a03      	ldr	r2, [sp, #12]
 8007e46:	601a      	str	r2, [r3, #0]
}
 8007e48:	bf00      	nop
 8007e4a:	b004      	add	sp, #16
 8007e4c:	4770      	bx	lr
 8007e4e:	bf00      	nop

08007e50 <chGuardedPoolObjectInitAligned>:
 *
 * @init
 */
void chGuardedPoolObjectInitAligned(guarded_memory_pool_t *gmp,
                                    size_t size,
                                    unsigned align) {
 8007e50:	b500      	push	{lr}
 8007e52:	b085      	sub	sp, #20
 8007e54:	9003      	str	r0, [sp, #12]
 8007e56:	9102      	str	r1, [sp, #8]
 8007e58:	9201      	str	r2, [sp, #4]

  chPoolObjectInitAligned(&gmp->pool, size, align, NULL);
 8007e5a:	9b03      	ldr	r3, [sp, #12]
 8007e5c:	f103 000c 	add.w	r0, r3, #12
 8007e60:	2300      	movs	r3, #0
 8007e62:	9a01      	ldr	r2, [sp, #4]
 8007e64:	9902      	ldr	r1, [sp, #8]
 8007e66:	f7ff ffa3 	bl	8007db0 <chPoolObjectInitAligned>
  chSemObjectInit(&gmp->sem, (cnt_t)0);
 8007e6a:	9b03      	ldr	r3, [sp, #12]
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f7ff fc96 	bl	80077a0 <chSemObjectInit>
}
 8007e74:	bf00      	nop
 8007e76:	b005      	add	sp, #20
 8007e78:	f85d fb04 	ldr.w	pc, [sp], #4
 8007e7c:	0000      	movs	r0, r0
	...

08007e80 <chGuardedPoolLoadArray>:
 * @param[in] p         pointer to the array first element
 * @param[in] n         number of elements in the array
 *
 * @api
 */
void chGuardedPoolLoadArray(guarded_memory_pool_t *gmp, void *p, size_t n) {
 8007e80:	b500      	push	{lr}
 8007e82:	b085      	sub	sp, #20
 8007e84:	9003      	str	r0, [sp, #12]
 8007e86:	9102      	str	r1, [sp, #8]
 8007e88:	9201      	str	r2, [sp, #4]

  chDbgCheck((gmp != NULL) && (n != 0U));

  while (n != 0U) {
 8007e8a:	e00b      	b.n	8007ea4 <chGuardedPoolLoadArray+0x24>
    chGuardedPoolAdd(gmp, p);
 8007e8c:	9902      	ldr	r1, [sp, #8]
 8007e8e:	9803      	ldr	r0, [sp, #12]
 8007e90:	f7ff ff7e 	bl	8007d90 <chGuardedPoolAdd>
    /*lint -save -e9087 [11.3] Safe cast.*/
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 8007e94:	9b03      	ldr	r3, [sp, #12]
 8007e96:	691b      	ldr	r3, [r3, #16]
 8007e98:	9a02      	ldr	r2, [sp, #8]
 8007e9a:	4413      	add	r3, r2
 8007e9c:	9302      	str	r3, [sp, #8]
    /*lint -restore*/
    n--;
 8007e9e:	9b01      	ldr	r3, [sp, #4]
 8007ea0:	3b01      	subs	r3, #1
 8007ea2:	9301      	str	r3, [sp, #4]
  while (n != 0U) {
 8007ea4:	9b01      	ldr	r3, [sp, #4]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d1f0      	bne.n	8007e8c <chGuardedPoolLoadArray+0xc>
  }
}
 8007eaa:	bf00      	nop
 8007eac:	bf00      	nop
 8007eae:	b005      	add	sp, #20
 8007eb0:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08007ec0 <chGuardedPoolAllocTimeoutS>:
 * @retval NULL         if the operation timed out.
 *
 * @sclass
 */
void *chGuardedPoolAllocTimeoutS(guarded_memory_pool_t *gmp,
                                 sysinterval_t timeout) {
 8007ec0:	b500      	push	{lr}
 8007ec2:	b085      	sub	sp, #20
 8007ec4:	9001      	str	r0, [sp, #4]
 8007ec6:	9100      	str	r1, [sp, #0]
  msg_t msg;

  msg = chSemWaitTimeoutS(&gmp->sem, timeout);
 8007ec8:	9b01      	ldr	r3, [sp, #4]
 8007eca:	9900      	ldr	r1, [sp, #0]
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f7ff fc77 	bl	80077c0 <chSemWaitTimeoutS>
 8007ed2:	9003      	str	r0, [sp, #12]
  if (msg != MSG_OK) {
 8007ed4:	9b03      	ldr	r3, [sp, #12]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d001      	beq.n	8007ede <chGuardedPoolAllocTimeoutS+0x1e>
    return NULL;
 8007eda:	2300      	movs	r3, #0
 8007edc:	e005      	b.n	8007eea <chGuardedPoolAllocTimeoutS+0x2a>
  }

  return chPoolAllocI(&gmp->pool);
 8007ede:	9b01      	ldr	r3, [sp, #4]
 8007ee0:	330c      	adds	r3, #12
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f7ff ff7c 	bl	8007de0 <chPoolAllocI>
 8007ee8:	4603      	mov	r3, r0
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	b005      	add	sp, #20
 8007eee:	f85d fb04 	ldr.w	pc, [sp], #4
 8007ef2:	bf00      	nop
	...

08007f00 <chGuardedPoolAllocTimeout>:
 * @retval NULL         if the operation timed out.
 *
 * @api
 */
void *chGuardedPoolAllocTimeout(guarded_memory_pool_t *gmp,
                                sysinterval_t timeout) {
 8007f00:	b500      	push	{lr}
 8007f02:	b085      	sub	sp, #20
 8007f04:	9001      	str	r0, [sp, #4]
 8007f06:	9100      	str	r1, [sp, #0]
  void *p;

  chSysLock();
 8007f08:	f7ff ff0a 	bl	8007d20 <chSysLock.lto_priv.20>
  p = chGuardedPoolAllocTimeoutS(gmp, timeout);
 8007f0c:	9900      	ldr	r1, [sp, #0]
 8007f0e:	9801      	ldr	r0, [sp, #4]
 8007f10:	f7ff ffd6 	bl	8007ec0 <chGuardedPoolAllocTimeoutS>
 8007f14:	9003      	str	r0, [sp, #12]
  chSysUnlock();
 8007f16:	f7ff ff13 	bl	8007d40 <chSysUnlock.lto_priv.20>

  return p;
 8007f1a:	9b03      	ldr	r3, [sp, #12]
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	b005      	add	sp, #20
 8007f20:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08007f30 <chGuardedPoolFree>:
 * @param[in] gmp       pointer to a @p guarded_memory_pool_t structure
 * @param[in] objp      the pointer to the object to be released
 *
 * @api
 */
void chGuardedPoolFree(guarded_memory_pool_t *gmp, void *objp) {
 8007f30:	b500      	push	{lr}
 8007f32:	b083      	sub	sp, #12
 8007f34:	9001      	str	r0, [sp, #4]
 8007f36:	9100      	str	r1, [sp, #0]

  chSysLock();
 8007f38:	f7ff fef2 	bl	8007d20 <chSysLock.lto_priv.20>
  chGuardedPoolFreeI(gmp, objp);
 8007f3c:	9900      	ldr	r1, [sp, #0]
 8007f3e:	9801      	ldr	r0, [sp, #4]
 8007f40:	f7ff ff0e 	bl	8007d60 <chGuardedPoolFreeI>
  chSchRescheduleS();
 8007f44:	f7fe ff94 	bl	8006e70 <chSchRescheduleS>
  chSysUnlock();
 8007f48:	f7ff fefa 	bl	8007d40 <chSysUnlock.lto_priv.20>
}
 8007f4c:	bf00      	nop
 8007f4e:	b003      	add	sp, #12
 8007f50:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08007f60 <chCoreAllocAlignedI>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 8007f60:	b500      	push	{lr}
 8007f62:	b083      	sub	sp, #12
 8007f64:	9001      	str	r0, [sp, #4]
 8007f66:	9100      	str	r1, [sp, #0]

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
 8007f68:	2200      	movs	r2, #0
 8007f6a:	9900      	ldr	r1, [sp, #0]
 8007f6c:	9801      	ldr	r0, [sp, #4]
 8007f6e:	f7ff fe7f 	bl	8007c70 <chCoreAllocFromTopI>
 8007f72:	4603      	mov	r3, r0
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	b003      	add	sp, #12
 8007f78:	f85d fb04 	ldr.w	pc, [sp], #4
 8007f7c:	0000      	movs	r0, r0
	...

08007f80 <chPoolObjectInit>:
                                    memgetfunc_t provider) {
 8007f80:	b500      	push	{lr}
 8007f82:	b085      	sub	sp, #20
 8007f84:	9003      	str	r0, [sp, #12]
 8007f86:	9102      	str	r1, [sp, #8]
 8007f88:	9201      	str	r2, [sp, #4]
  chPoolObjectInitAligned(mp, size, PORT_NATURAL_ALIGN, provider);
 8007f8a:	9b01      	ldr	r3, [sp, #4]
 8007f8c:	2204      	movs	r2, #4
 8007f8e:	9902      	ldr	r1, [sp, #8]
 8007f90:	9803      	ldr	r0, [sp, #12]
 8007f92:	f7ff ff0d 	bl	8007db0 <chPoolObjectInitAligned>
}
 8007f96:	bf00      	nop
 8007f98:	b005      	add	sp, #20
 8007f9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8007f9e:	bf00      	nop

08007fa0 <dyn_list_init>:
    *dp++ = c;
    i--;
  } while ((c != (char)0) && (i > 0U));
}

static inline void dyn_list_init(dyn_list_t *dlp) {
 8007fa0:	b082      	sub	sp, #8
 8007fa2:	9001      	str	r0, [sp, #4]

  dlp->next = (dyn_element_t *)dlp;
 8007fa4:	9b01      	ldr	r3, [sp, #4]
 8007fa6:	9a01      	ldr	r2, [sp, #4]
 8007fa8:	601a      	str	r2, [r3, #0]
}
 8007faa:	bf00      	nop
 8007fac:	b002      	add	sp, #8
 8007fae:	4770      	bx	lr

08007fb0 <__factory_init>:
/**
 * @brief   Initializes the objects factory.
 *
 * @init
 */
void __factory_init(void) {
 8007fb0:	b508      	push	{r3, lr}

#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&ch_factory.mtx);
 8007fb2:	4810      	ldr	r0, [pc, #64]	; (8007ff4 <__factory_init+0x44>)
 8007fb4:	f7ff fc6c 	bl	8007890 <chMtxObjectInit>
#else
  chSemObjectInit(&ch_factory.sem, (cnt_t)1);
#endif

#if CH_CFG_FACTORY_OBJECTS_REGISTRY == TRUE
  dyn_list_init(&ch_factory.obj_list);
 8007fb8:	480f      	ldr	r0, [pc, #60]	; (8007ff8 <__factory_init+0x48>)
 8007fba:	f7ff fff1 	bl	8007fa0 <dyn_list_init>
  chPoolObjectInit(&ch_factory.obj_pool,
 8007fbe:	4a0f      	ldr	r2, [pc, #60]	; (8007ffc <__factory_init+0x4c>)
 8007fc0:	2114      	movs	r1, #20
 8007fc2:	480f      	ldr	r0, [pc, #60]	; (8008000 <__factory_init+0x50>)
 8007fc4:	f7ff ffdc 	bl	8007f80 <chPoolObjectInit>
                   sizeof (registered_object_t),
                   chCoreAllocAlignedI);
#endif
#if CH_CFG_FACTORY_GENERIC_BUFFERS == TRUE
  dyn_list_init(&ch_factory.buf_list);
 8007fc8:	480e      	ldr	r0, [pc, #56]	; (8008004 <__factory_init+0x54>)
 8007fca:	f7ff ffe9 	bl	8007fa0 <dyn_list_init>
#endif
#if CH_CFG_FACTORY_SEMAPHORES == TRUE
  dyn_list_init(&ch_factory.sem_list);
 8007fce:	480e      	ldr	r0, [pc, #56]	; (8008008 <__factory_init+0x58>)
 8007fd0:	f7ff ffe6 	bl	8007fa0 <dyn_list_init>
  chPoolObjectInit(&ch_factory.sem_pool,
 8007fd4:	4a09      	ldr	r2, [pc, #36]	; (8007ffc <__factory_init+0x4c>)
 8007fd6:	211c      	movs	r1, #28
 8007fd8:	480c      	ldr	r0, [pc, #48]	; (800800c <__factory_init+0x5c>)
 8007fda:	f7ff ffd1 	bl	8007f80 <chPoolObjectInit>
                   sizeof (dyn_semaphore_t),
                   chCoreAllocAlignedI);
#endif
#if CH_CFG_FACTORY_MAILBOXES == TRUE
  dyn_list_init(&ch_factory.mbx_list);
 8007fde:	480c      	ldr	r0, [pc, #48]	; (8008010 <__factory_init+0x60>)
 8007fe0:	f7ff ffde 	bl	8007fa0 <dyn_list_init>
#endif
#if CH_CFG_FACTORY_OBJ_FIFOS == TRUE
  dyn_list_init(&ch_factory.fifo_list);
 8007fe4:	480b      	ldr	r0, [pc, #44]	; (8008014 <__factory_init+0x64>)
 8007fe6:	f7ff ffdb 	bl	8007fa0 <dyn_list_init>
#endif
#if CH_CFG_FACTORY_PIPES == TRUE
  dyn_list_init(&ch_factory.pipe_list);
 8007fea:	480b      	ldr	r0, [pc, #44]	; (8008018 <__factory_init+0x68>)
 8007fec:	f7ff ffd8 	bl	8007fa0 <dyn_list_init>
#endif
}
 8007ff0:	bf00      	nop
 8007ff2:	bd08      	pop	{r3, pc}
 8007ff4:	2000102c 	.word	0x2000102c
 8007ff8:	2000103c 	.word	0x2000103c
 8007ffc:	08007f61 	.word	0x08007f61
 8008000:	20001040 	.word	0x20001040
 8008004:	20001050 	.word	0x20001050
 8008008:	20001054 	.word	0x20001054
 800800c:	20001058 	.word	0x20001058
 8008010:	20001068 	.word	0x20001068
 8008014:	2000106c 	.word	0x2000106c
 8008018:	20001070 	.word	0x20001070
 800801c:	00000000 	.word	0x00000000

08008020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008020:	b084      	sub	sp, #16
 8008022:	9001      	str	r0, [sp, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008024:	9b01      	ldr	r3, [sp, #4]
 8008026:	f003 0307 	and.w	r3, r3, #7
 800802a:	9303      	str	r3, [sp, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800802c:	4b0b      	ldr	r3, [pc, #44]	; (800805c <__NVIC_SetPriorityGrouping+0x3c>)
 800802e:	68db      	ldr	r3, [r3, #12]
 8008030:	9302      	str	r3, [sp, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008032:	9a02      	ldr	r2, [sp, #8]
 8008034:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008038:	4013      	ands	r3, r2
 800803a:	9302      	str	r3, [sp, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800803c:	9b03      	ldr	r3, [sp, #12]
 800803e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008040:	9b02      	ldr	r3, [sp, #8]
 8008042:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008044:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800804c:	9302      	str	r3, [sp, #8]
  SCB->AIRCR =  reg_value;
 800804e:	4a03      	ldr	r2, [pc, #12]	; (800805c <__NVIC_SetPriorityGrouping+0x3c>)
 8008050:	9b02      	ldr	r3, [sp, #8]
 8008052:	60d3      	str	r3, [r2, #12]
}
 8008054:	bf00      	nop
 8008056:	b004      	add	sp, #16
 8008058:	4770      	bx	lr
 800805a:	bf00      	nop
 800805c:	e000ed00 	.word	0xe000ed00

08008060 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008060:	b082      	sub	sp, #8
 8008062:	4603      	mov	r3, r0
 8008064:	9100      	str	r1, [sp, #0]
 8008066:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
 800806a:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 800806e:	2b00      	cmp	r3, #0
 8008070:	db0a      	blt.n	8008088 <__NVIC_SetPriority+0x28>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008072:	9b00      	ldr	r3, [sp, #0]
 8008074:	b2da      	uxtb	r2, r3
 8008076:	490c      	ldr	r1, [pc, #48]	; (80080a8 <__NVIC_SetPriority+0x48>)
 8008078:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 800807c:	0112      	lsls	r2, r2, #4
 800807e:	b2d2      	uxtb	r2, r2
 8008080:	440b      	add	r3, r1
 8008082:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008086:	e00b      	b.n	80080a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008088:	9b00      	ldr	r3, [sp, #0]
 800808a:	b2da      	uxtb	r2, r3
 800808c:	4907      	ldr	r1, [pc, #28]	; (80080ac <__NVIC_SetPriority+0x4c>)
 800808e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008092:	f003 030f 	and.w	r3, r3, #15
 8008096:	3b04      	subs	r3, #4
 8008098:	0112      	lsls	r2, r2, #4
 800809a:	b2d2      	uxtb	r2, r2
 800809c:	440b      	add	r3, r1
 800809e:	761a      	strb	r2, [r3, #24]
}
 80080a0:	bf00      	nop
 80080a2:	b002      	add	sp, #8
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop
 80080a8:	e000e100 	.word	0xe000e100
 80080ac:	e000ed00 	.word	0xe000ed00

080080b0 <SVC_Handler>:
 * @details The SVC vector is used for exception mode re-entering after a
 *          context switch and, optionally, for system calls.
 * @note    The SVC vector is only used in advanced kernel mode.
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void SVC_Handler(void) {
 80080b0:	b084      	sub	sp, #16
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80080b2:	f3ef 8309 	mrs	r3, PSP
 80080b6:	9300      	str	r3, [sp, #0]
  return(result);
 80080b8:	9b00      	ldr	r3, [sp, #0]
/*lint -restore*/
  uint32_t psp = __get_PSP();
 80080ba:	9303      	str	r3, [sp, #12]
    /* From privileged mode, it is used for context discarding in the
       preemption code.*/

    /* Unstacking procedure, discarding the current exception context and
       positioning the stack to point to the real one.*/
    psp += sizeof (struct port_extctx);
 80080bc:	9b03      	ldr	r3, [sp, #12]
 80080be:	3320      	adds	r3, #32
 80080c0:	9303      	str	r3, [sp, #12]
 80080c2:	9b03      	ldr	r3, [sp, #12]
 80080c4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80080c6:	9b01      	ldr	r3, [sp, #4]
 80080c8:	f383 8809 	msr	PSP, r3
}
 80080cc:	bf00      	nop
 80080ce:	2300      	movs	r3, #0
 80080d0:	9302      	str	r3, [sp, #8]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80080d2:	9b02      	ldr	r3, [sp, #8]
 80080d4:	f383 8811 	msr	BASEPRI, r3
}
 80080d8:	bf00      	nop
 80080da:	bf00      	nop
}
 80080dc:	bf00      	nop
#endif

    /* Restoring the normal interrupts status.*/
    port_unlock_from_isr();
  }
}
 80080de:	bf00      	nop
 80080e0:	b004      	add	sp, #16
 80080e2:	4770      	bx	lr
	...

080080f0 <port_init>:
 *
 * @param[in, out] oip  pointer to the @p os_instance_t structure
 *
 * @notapi
 */
void port_init(os_instance_t *oip) {
 80080f0:	b500      	push	{lr}
 80080f2:	b085      	sub	sp, #20
 80080f4:	9001      	str	r0, [sp, #4]
 80080f6:	2330      	movs	r3, #48	; 0x30
 80080f8:	9303      	str	r3, [sp, #12]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80080fa:	9b03      	ldr	r3, [sp, #12]
 80080fc:	f383 8811 	msr	BASEPRI, r3
}
 8008100:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8008102:	b662      	cpsie	i
}
 8008104:	bf00      	nop
}
 8008106:	bf00      	nop

  /* Starting in a known IRQ configuration.*/
  port_suspend();

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);
 8008108:	2003      	movs	r0, #3
 800810a:	f7ff ff89 	bl	8008020 <__NVIC_SetPriorityGrouping>

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800810e:	4b0d      	ldr	r3, [pc, #52]	; (8008144 <port_init+0x54>)
 8008110:	68db      	ldr	r3, [r3, #12]
 8008112:	4a0c      	ldr	r2, [pc, #48]	; (8008144 <port_init+0x54>)
 8008114:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008118:	60d3      	str	r3, [r2, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800811a:	4b0b      	ldr	r3, [pc, #44]	; (8008148 <port_init+0x58>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a0a      	ldr	r2, [pc, #40]	; (8008148 <port_init+0x58>)
 8008120:	f043 0301 	orr.w	r3, r3, #1
 8008124:	6013      	str	r3, [r2, #0]

  /* Initialization of the system vectors used by the port.*/
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  NVIC_SetPriority(SVCall_IRQn, CORTEX_PRIORITY_SVCALL);
 8008126:	2102      	movs	r1, #2
 8008128:	f06f 0004 	mvn.w	r0, #4
 800812c:	f7ff ff98 	bl	8008060 <__NVIC_SetPriority>
#endif
  NVIC_SetPriority(PendSV_IRQn, CORTEX_PRIORITY_PENDSV);
 8008130:	2103      	movs	r1, #3
 8008132:	f06f 0001 	mvn.w	r0, #1
 8008136:	f7ff ff93 	bl	8008060 <__NVIC_SetPriority>

#if (PORT_ENABLE_GUARD_PAGES == TRUE) || (PORT_USE_SYSCALL == TRUE)
  /* MPU is enabled.*/
  mpuEnable(MPU_CTRL_PRIVDEFENA);
#endif
}
 800813a:	bf00      	nop
 800813c:	b005      	add	sp, #20
 800813e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008142:	bf00      	nop
 8008144:	e000edf0 	.word	0xe000edf0
 8008148:	e0001000 	.word	0xe0001000
 800814c:	00000000 	.word	0x00000000

08008150 <__port_irq_epilogue>:
#endif

/**
 * @brief   Exception exit redirection to @p __port_switch_from_isr().
 */
void __port_irq_epilogue(void) {
 8008150:	b500      	push	{lr}
 8008152:	b087      	sub	sp, #28
 8008154:	2330      	movs	r3, #48	; 0x30
 8008156:	9303      	str	r3, [sp, #12]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8008158:	9b03      	ldr	r3, [sp, #12]
 800815a:	f383 8811 	msr	BASEPRI, r3
}
 800815e:	bf00      	nop
}
 8008160:	bf00      	nop
}
 8008162:	bf00      	nop

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8008164:	4b18      	ldr	r3, [pc, #96]	; (80081c8 <__port_irq_epilogue+0x78>)
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800816c:	2b00      	cmp	r3, #0
 800816e:	d020      	beq.n	80081b2 <__port_irq_epilogue+0x62>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8008170:	f3ef 8309 	mrs	r3, PSP
 8008174:	9301      	str	r3, [sp, #4]
  return(result);
 8008176:	9b01      	ldr	r3, [sp, #4]
        lctxp->control = control;
        lctxp->ectxp   = (struct port_extctx *)psp;
      }
    }
#else
    s_psp = __get_PSP();
 8008178:	9305      	str	r3, [sp, #20]
#endif

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    s_psp -= sizeof (struct port_extctx);
 800817a:	9b05      	ldr	r3, [sp, #20]
 800817c:	3b20      	subs	r3, #32
 800817e:	9305      	str	r3, [sp, #20]

    /* The port_extctx structure is pointed by the S-PSP register.*/
    ectxp = (struct port_extctx *)s_psp;
 8008180:	9b05      	ldr	r3, [sp, #20]
 8008182:	9304      	str	r3, [sp, #16]

    /* Setting up a fake XPSR register value.*/
    ectxp->xpsr = 0x01000000U;
 8008184:	9b04      	ldr	r3, [sp, #16]
 8008186:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800818a:	61da      	str	r2, [r3, #28]
 800818c:	9b05      	ldr	r3, [sp, #20]
 800818e:	9302      	str	r3, [sp, #8]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8008190:	9b02      	ldr	r3, [sp, #8]
 8008192:	f383 8809 	msr	PSP, r3
}
 8008196:	bf00      	nop
    /* Writing back the modified S-PSP value.*/
    __set_PSP(s_psp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8008198:	f7fe fe8a 	bl	8006eb0 <chSchIsPreemptionRequired>
 800819c:	4603      	mov	r3, r0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d003      	beq.n	80081aa <__port_irq_epilogue+0x5a>
      /* Preemption is required we need to enforce a context switch.*/
      ectxp->pc = (uint32_t)__port_switch_from_isr;
 80081a2:	4a0a      	ldr	r2, [pc, #40]	; (80081cc <__port_irq_epilogue+0x7c>)
 80081a4:	9b04      	ldr	r3, [sp, #16]
 80081a6:	619a      	str	r2, [r3, #24]
      ectxp->pc = (uint32_t)__port_exit_from_isr;
    }

    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
 80081a8:	e00b      	b.n	80081c2 <__port_irq_epilogue+0x72>
      ectxp->pc = (uint32_t)__port_exit_from_isr;
 80081aa:	4a09      	ldr	r2, [pc, #36]	; (80081d0 <__port_irq_epilogue+0x80>)
 80081ac:	9b04      	ldr	r3, [sp, #16]
 80081ae:	619a      	str	r2, [r3, #24]
    return;
 80081b0:	e007      	b.n	80081c2 <__port_irq_epilogue+0x72>
 80081b2:	2300      	movs	r3, #0
 80081b4:	9300      	str	r3, [sp, #0]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80081b6:	9b00      	ldr	r3, [sp, #0]
 80081b8:	f383 8811 	msr	BASEPRI, r3
}
 80081bc:	bf00      	nop
}
 80081be:	bf00      	nop
}
 80081c0:	bf00      	nop
  }
  port_unlock_from_isr();
}
 80081c2:	b007      	add	sp, #28
 80081c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80081c8:	e000ed00 	.word	0xe000ed00
 80081cc:	08000303 	.word	0x08000303
 80081d0:	08000306 	.word	0x08000306
	...

080081e0 <long_to_string_with_divisor>:
#define FLOAT_PRECISION 9

static char *long_to_string_with_divisor(char *p,
                                         long num,
                                         unsigned radix,
                                         long divisor) {
 80081e0:	b088      	sub	sp, #32
 80081e2:	9003      	str	r0, [sp, #12]
 80081e4:	9102      	str	r1, [sp, #8]
 80081e6:	9201      	str	r2, [sp, #4]
 80081e8:	9300      	str	r3, [sp, #0]
  int i;
  char *q;
  long l, ll;

  l = num;
 80081ea:	9b02      	ldr	r3, [sp, #8]
 80081ec:	9305      	str	r3, [sp, #20]
  if (divisor == 0) {
 80081ee:	9b00      	ldr	r3, [sp, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d102      	bne.n	80081fa <long_to_string_with_divisor+0x1a>
    ll = num;
 80081f4:	9b02      	ldr	r3, [sp, #8]
 80081f6:	9304      	str	r3, [sp, #16]
 80081f8:	e001      	b.n	80081fe <long_to_string_with_divisor+0x1e>
  } else {
    ll = divisor;
 80081fa:	9b00      	ldr	r3, [sp, #0]
 80081fc:	9304      	str	r3, [sp, #16]
  }

  q = p + MAX_FILLER;
 80081fe:	9b03      	ldr	r3, [sp, #12]
 8008200:	330b      	adds	r3, #11
 8008202:	9306      	str	r3, [sp, #24]
  do {
    i = (int)(l % radix);
 8008204:	9b05      	ldr	r3, [sp, #20]
 8008206:	9a01      	ldr	r2, [sp, #4]
 8008208:	fbb3 f2f2 	udiv	r2, r3, r2
 800820c:	9901      	ldr	r1, [sp, #4]
 800820e:	fb01 f202 	mul.w	r2, r1, r2
 8008212:	1a9b      	subs	r3, r3, r2
 8008214:	9307      	str	r3, [sp, #28]
    i += '0';
 8008216:	9b07      	ldr	r3, [sp, #28]
 8008218:	3330      	adds	r3, #48	; 0x30
 800821a:	9307      	str	r3, [sp, #28]
    if (i > '9') {
 800821c:	9b07      	ldr	r3, [sp, #28]
 800821e:	2b39      	cmp	r3, #57	; 0x39
 8008220:	dd02      	ble.n	8008228 <long_to_string_with_divisor+0x48>
      i += 'A' - '0' - 10;
 8008222:	9b07      	ldr	r3, [sp, #28]
 8008224:	3307      	adds	r3, #7
 8008226:	9307      	str	r3, [sp, #28]
    }
    *--q = i;
 8008228:	9b06      	ldr	r3, [sp, #24]
 800822a:	3b01      	subs	r3, #1
 800822c:	9306      	str	r3, [sp, #24]
 800822e:	9b07      	ldr	r3, [sp, #28]
 8008230:	b2da      	uxtb	r2, r3
 8008232:	9b06      	ldr	r3, [sp, #24]
 8008234:	701a      	strb	r2, [r3, #0]
    l /= radix;
 8008236:	9a05      	ldr	r2, [sp, #20]
 8008238:	9b01      	ldr	r3, [sp, #4]
 800823a:	fbb2 f3f3 	udiv	r3, r2, r3
 800823e:	9305      	str	r3, [sp, #20]
  } while ((ll /= radix) != 0);
 8008240:	9a04      	ldr	r2, [sp, #16]
 8008242:	9b01      	ldr	r3, [sp, #4]
 8008244:	fbb2 f3f3 	udiv	r3, r2, r3
 8008248:	9304      	str	r3, [sp, #16]
 800824a:	9b04      	ldr	r3, [sp, #16]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d1d9      	bne.n	8008204 <long_to_string_with_divisor+0x24>

  i = (int)(p + MAX_FILLER - q);
 8008250:	9b03      	ldr	r3, [sp, #12]
 8008252:	f103 020b 	add.w	r2, r3, #11
 8008256:	9b06      	ldr	r3, [sp, #24]
 8008258:	1ad3      	subs	r3, r2, r3
 800825a:	9307      	str	r3, [sp, #28]
  do
    *p++ = *q++;
 800825c:	9a06      	ldr	r2, [sp, #24]
 800825e:	1c53      	adds	r3, r2, #1
 8008260:	9306      	str	r3, [sp, #24]
 8008262:	9b03      	ldr	r3, [sp, #12]
 8008264:	1c59      	adds	r1, r3, #1
 8008266:	9103      	str	r1, [sp, #12]
 8008268:	7812      	ldrb	r2, [r2, #0]
 800826a:	701a      	strb	r2, [r3, #0]
  while (--i);
 800826c:	9b07      	ldr	r3, [sp, #28]
 800826e:	3b01      	subs	r3, #1
 8008270:	9307      	str	r3, [sp, #28]
 8008272:	9b07      	ldr	r3, [sp, #28]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d1f1      	bne.n	800825c <long_to_string_with_divisor+0x7c>

  return p;
 8008278:	9b03      	ldr	r3, [sp, #12]
}
 800827a:	4618      	mov	r0, r3
 800827c:	b008      	add	sp, #32
 800827e:	4770      	bx	lr

08008280 <ch_ltoa>:

static char *ch_ltoa(char *p, long num, unsigned radix) {
 8008280:	b500      	push	{lr}
 8008282:	b085      	sub	sp, #20
 8008284:	9003      	str	r0, [sp, #12]
 8008286:	9102      	str	r1, [sp, #8]
 8008288:	9201      	str	r2, [sp, #4]

  return long_to_string_with_divisor(p, num, radix, 0);
 800828a:	2300      	movs	r3, #0
 800828c:	9a01      	ldr	r2, [sp, #4]
 800828e:	9902      	ldr	r1, [sp, #8]
 8008290:	9803      	ldr	r0, [sp, #12]
 8008292:	f7ff ffa5 	bl	80081e0 <long_to_string_with_divisor>
 8008296:	4603      	mov	r3, r0
}
 8008298:	4618      	mov	r0, r3
 800829a:	b005      	add	sp, #20
 800829c:	f85d fb04 	ldr.w	pc, [sp], #4

080082a0 <ftoa>:
#if CHPRINTF_USE_FLOAT
static const long pow10[FLOAT_PRECISION] = {
    10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000
};

static char *ftoa(char *p, double num, unsigned long precision) {
 80082a0:	b530      	push	{r4, r5, lr}
 80082a2:	b087      	sub	sp, #28
 80082a4:	9003      	str	r0, [sp, #12]
 80082a6:	e9cd 2300 	strd	r2, r3, [sp]
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION)) {
 80082aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d002      	beq.n	80082b6 <ftoa+0x16>
 80082b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082b2:	2b09      	cmp	r3, #9
 80082b4:	d901      	bls.n	80082ba <ftoa+0x1a>
    precision = FLOAT_PRECISION;
 80082b6:	2309      	movs	r3, #9
 80082b8:	930a      	str	r3, [sp, #40]	; 0x28
  }
  precision = pow10[precision - 1];
 80082ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082bc:	3b01      	subs	r3, #1
 80082be:	4a21      	ldr	r2, [pc, #132]	; (8008344 <ftoa+0xa4>)
 80082c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082c4:	930a      	str	r3, [sp, #40]	; 0x28

  l = (long)num;
 80082c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082ca:	f7f8 fefd 	bl	80010c8 <__aeabi_d2iz>
 80082ce:	4603      	mov	r3, r0
 80082d0:	9305      	str	r3, [sp, #20]
  p = long_to_string_with_divisor(p, l, 10, 0);
 80082d2:	2300      	movs	r3, #0
 80082d4:	220a      	movs	r2, #10
 80082d6:	9905      	ldr	r1, [sp, #20]
 80082d8:	9803      	ldr	r0, [sp, #12]
 80082da:	f7ff ff81 	bl	80081e0 <long_to_string_with_divisor>
 80082de:	9003      	str	r0, [sp, #12]
  *p++ = '.';
 80082e0:	9b03      	ldr	r3, [sp, #12]
 80082e2:	1c5a      	adds	r2, r3, #1
 80082e4:	9203      	str	r2, [sp, #12]
 80082e6:	222e      	movs	r2, #46	; 0x2e
 80082e8:	701a      	strb	r2, [r3, #0]
  l = (long)((num - l) * precision);
 80082ea:	9805      	ldr	r0, [sp, #20]
 80082ec:	f7f8 f960 	bl	80005b0 <__aeabi_i2d>
 80082f0:	4602      	mov	r2, r0
 80082f2:	460b      	mov	r3, r1
 80082f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082f8:	f7f8 f80c 	bl	8000314 <__aeabi_dsub>
 80082fc:	4602      	mov	r2, r0
 80082fe:	460b      	mov	r3, r1
 8008300:	4614      	mov	r4, r2
 8008302:	461d      	mov	r5, r3
 8008304:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008306:	f7f8 f943 	bl	8000590 <__aeabi_ui2d>
 800830a:	4602      	mov	r2, r0
 800830c:	460b      	mov	r3, r1
 800830e:	4620      	mov	r0, r4
 8008310:	4629      	mov	r1, r5
 8008312:	f7f8 f9b7 	bl	8000684 <__aeabi_dmul>
 8008316:	4602      	mov	r2, r0
 8008318:	460b      	mov	r3, r1
 800831a:	4610      	mov	r0, r2
 800831c:	4619      	mov	r1, r3
 800831e:	f7f8 fed3 	bl	80010c8 <__aeabi_d2iz>
 8008322:	4603      	mov	r3, r0
 8008324:	9305      	str	r3, [sp, #20]

  return long_to_string_with_divisor(p, l, 10, precision / 10);
 8008326:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008328:	4a07      	ldr	r2, [pc, #28]	; (8008348 <ftoa+0xa8>)
 800832a:	fba2 2303 	umull	r2, r3, r2, r3
 800832e:	08db      	lsrs	r3, r3, #3
 8008330:	220a      	movs	r2, #10
 8008332:	9905      	ldr	r1, [sp, #20]
 8008334:	9803      	ldr	r0, [sp, #12]
 8008336:	f7ff ff53 	bl	80081e0 <long_to_string_with_divisor>
 800833a:	4603      	mov	r3, r0
}
 800833c:	4618      	mov	r0, r3
 800833e:	b007      	add	sp, #28
 8008340:	bd30      	pop	{r4, r5, pc}
 8008342:	bf00      	nop
 8008344:	0800eefc 	.word	0x0800eefc
 8008348:	cccccccd 	.word	0xcccccccd
 800834c:	00000000 	.word	0x00000000

08008350 <chvprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 8008350:	b500      	push	{lr}
 8008352:	b097      	sub	sp, #92	; 0x5c
 8008354:	9005      	str	r0, [sp, #20]
 8008356:	9104      	str	r1, [sp, #16]
 8008358:	9203      	str	r2, [sp, #12]
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 800835a:	2300      	movs	r3, #0
 800835c:	930f      	str	r3, [sp, #60]	; 0x3c
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 800835e:	9b04      	ldr	r3, [sp, #16]
 8008360:	1c5a      	adds	r2, r3, #1
 8008362:	9204      	str	r2, [sp, #16]
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    if (c == 0) {
 800836a:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 800836e:	2b00      	cmp	r3, #0
 8008370:	d101      	bne.n	8008376 <chvprintf+0x26>
      return n;
 8008372:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008374:	e284      	b.n	8008880 <chvprintf+0x530>
    }
    
    if (c != '%') {
 8008376:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 800837a:	2b25      	cmp	r3, #37	; 0x25
 800837c:	d00b      	beq.n	8008396 <chvprintf+0x46>
      streamPut(chp, (uint8_t)c);
 800837e:	9b05      	ldr	r3, [sp, #20]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	f89d 204f 	ldrb.w	r2, [sp, #79]	; 0x4f
 8008388:	4611      	mov	r1, r2
 800838a:	9805      	ldr	r0, [sp, #20]
 800838c:	4798      	blx	r3
      n++;
 800838e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008390:	3301      	adds	r3, #1
 8008392:	930f      	str	r3, [sp, #60]	; 0x3c
      continue;
 8008394:	e273      	b.n	800887e <chvprintf+0x52e>
    }
    
    p = tmpbuf;
 8008396:	ab06      	add	r3, sp, #24
 8008398:	9315      	str	r3, [sp, #84]	; 0x54
    s = tmpbuf;
 800839a:	ab06      	add	r3, sp, #24
 800839c:	9314      	str	r3, [sp, #80]	; 0x50

    /* Alignment mode.*/
    left_align = false;
 800839e:	2300      	movs	r3, #0
 80083a0:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
    if (*fmt == '-') {
 80083a4:	9b04      	ldr	r3, [sp, #16]
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	2b2d      	cmp	r3, #45	; 0x2d
 80083aa:	d105      	bne.n	80083b8 <chvprintf+0x68>
      fmt++;
 80083ac:	9b04      	ldr	r3, [sp, #16]
 80083ae:	3301      	adds	r3, #1
 80083b0:	9304      	str	r3, [sp, #16]
      left_align = true;
 80083b2:	2301      	movs	r3, #1
 80083b4:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
    }

    /* Sign mode.*/
    do_sign = false;
 80083b8:	2300      	movs	r3, #0
 80083ba:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    if (*fmt == '+') {
 80083be:	9b04      	ldr	r3, [sp, #16]
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	2b2b      	cmp	r3, #43	; 0x2b
 80083c4:	d105      	bne.n	80083d2 <chvprintf+0x82>
      fmt++;
 80083c6:	9b04      	ldr	r3, [sp, #16]
 80083c8:	3301      	adds	r3, #1
 80083ca:	9304      	str	r3, [sp, #16]
      do_sign = true;
 80083cc:	2301      	movs	r3, #1
 80083ce:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    }

    /* Filler mode.*/
    filler = ' ';
 80083d2:	2320      	movs	r3, #32
 80083d4:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
    if (*fmt == '0') {
 80083d8:	9b04      	ldr	r3, [sp, #16]
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	2b30      	cmp	r3, #48	; 0x30
 80083de:	d105      	bne.n	80083ec <chvprintf+0x9c>
      fmt++;
 80083e0:	9b04      	ldr	r3, [sp, #16]
 80083e2:	3301      	adds	r3, #1
 80083e4:	9304      	str	r3, [sp, #16]
      filler = '0';
 80083e6:	2330      	movs	r3, #48	; 0x30
 80083e8:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
    }
    
    /* Width modifier.*/
    if ( *fmt == '*') {
 80083ec:	9b04      	ldr	r3, [sp, #16]
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	2b2a      	cmp	r3, #42	; 0x2a
 80083f2:	d10e      	bne.n	8008412 <chvprintf+0xc2>
      width = va_arg(ap, int);
 80083f4:	9b03      	ldr	r3, [sp, #12]
 80083f6:	1d1a      	adds	r2, r3, #4
 80083f8:	9203      	str	r2, [sp, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	9310      	str	r3, [sp, #64]	; 0x40
      ++fmt;
 80083fe:	9b04      	ldr	r3, [sp, #16]
 8008400:	3301      	adds	r3, #1
 8008402:	9304      	str	r3, [sp, #16]
      c = *fmt++;
 8008404:	9b04      	ldr	r3, [sp, #16]
 8008406:	1c5a      	adds	r2, r3, #1
 8008408:	9204      	str	r2, [sp, #16]
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
 8008410:	e025      	b.n	800845e <chvprintf+0x10e>
    }
    else {
      width = 0;
 8008412:	2300      	movs	r3, #0
 8008414:	9310      	str	r3, [sp, #64]	; 0x40
      while (true) {
        c = *fmt++;
 8008416:	9b04      	ldr	r3, [sp, #16]
 8008418:	1c5a      	adds	r2, r3, #1
 800841a:	9204      	str	r2, [sp, #16]
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
        if (c == 0) {
 8008422:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 8008426:	2b00      	cmp	r3, #0
 8008428:	d101      	bne.n	800842e <chvprintf+0xde>
          return n;
 800842a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800842c:	e228      	b.n	8008880 <chvprintf+0x530>
        }
        if (c >= '0' && c <= '9') {
 800842e:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 8008432:	2b2f      	cmp	r3, #47	; 0x2f
 8008434:	d913      	bls.n	800845e <chvprintf+0x10e>
 8008436:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 800843a:	2b39      	cmp	r3, #57	; 0x39
 800843c:	d80f      	bhi.n	800845e <chvprintf+0x10e>
          c -= '0';
 800843e:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 8008442:	3b30      	subs	r3, #48	; 0x30
 8008444:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
          width = width * 10 + c;
 8008448:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800844a:	4613      	mov	r3, r2
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	4413      	add	r3, r2
 8008450:	005b      	lsls	r3, r3, #1
 8008452:	461a      	mov	r2, r3
 8008454:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 8008458:	4413      	add	r3, r2
 800845a:	9310      	str	r3, [sp, #64]	; 0x40
        c = *fmt++;
 800845c:	e7db      	b.n	8008416 <chvprintf+0xc6>
        }
      }
    }
    
    /* Precision modifier.*/
    precision = 0;
 800845e:	2300      	movs	r3, #0
 8008460:	9311      	str	r3, [sp, #68]	; 0x44
    if (c == '.') {
 8008462:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 8008466:	2b2e      	cmp	r3, #46	; 0x2e
 8008468:	d13e      	bne.n	80084e8 <chvprintf+0x198>
      c = *fmt++;
 800846a:	9b04      	ldr	r3, [sp, #16]
 800846c:	1c5a      	adds	r2, r3, #1
 800846e:	9204      	str	r2, [sp, #16]
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
      if (c == 0) {
 8008476:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 800847a:	2b00      	cmp	r3, #0
 800847c:	d101      	bne.n	8008482 <chvprintf+0x132>
        return n;
 800847e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008480:	e1fe      	b.n	8008880 <chvprintf+0x530>
      }
      if (c == '*') {
 8008482:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 8008486:	2b2a      	cmp	r3, #42	; 0x2a
 8008488:	d126      	bne.n	80084d8 <chvprintf+0x188>
        precision = va_arg(ap, int);
 800848a:	9b03      	ldr	r3, [sp, #12]
 800848c:	1d1a      	adds	r2, r3, #4
 800848e:	9203      	str	r2, [sp, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	9311      	str	r3, [sp, #68]	; 0x44
        c = *fmt++;
 8008494:	9b04      	ldr	r3, [sp, #16]
 8008496:	1c5a      	adds	r2, r3, #1
 8008498:	9204      	str	r2, [sp, #16]
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
 80084a0:	e022      	b.n	80084e8 <chvprintf+0x198>
      }
      else {
        while (c >= '0' && c <= '9') {
          c -= '0';
 80084a2:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 80084a6:	3b30      	subs	r3, #48	; 0x30
 80084a8:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
          precision = precision * 10 + c;
 80084ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80084ae:	4613      	mov	r3, r2
 80084b0:	009b      	lsls	r3, r3, #2
 80084b2:	4413      	add	r3, r2
 80084b4:	005b      	lsls	r3, r3, #1
 80084b6:	461a      	mov	r2, r3
 80084b8:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 80084bc:	4413      	add	r3, r2
 80084be:	9311      	str	r3, [sp, #68]	; 0x44
          c = *fmt++;
 80084c0:	9b04      	ldr	r3, [sp, #16]
 80084c2:	1c5a      	adds	r2, r3, #1
 80084c4:	9204      	str	r2, [sp, #16]
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
          if (c == 0) {
 80084cc:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d101      	bne.n	80084d8 <chvprintf+0x188>
            return n;
 80084d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80084d6:	e1d3      	b.n	8008880 <chvprintf+0x530>
        while (c >= '0' && c <= '9') {
 80084d8:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 80084dc:	2b2f      	cmp	r3, #47	; 0x2f
 80084de:	d903      	bls.n	80084e8 <chvprintf+0x198>
 80084e0:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 80084e4:	2b39      	cmp	r3, #57	; 0x39
 80084e6:	d9dc      	bls.n	80084a2 <chvprintf+0x152>
        }
      }
    }
    
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 80084e8:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 80084ec:	2b6c      	cmp	r3, #108	; 0x6c
 80084ee:	d003      	beq.n	80084f8 <chvprintf+0x1a8>
 80084f0:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 80084f4:	2b4c      	cmp	r3, #76	; 0x4c
 80084f6:	d10e      	bne.n	8008516 <chvprintf+0x1c6>
      is_long = true;
 80084f8:	2301      	movs	r3, #1
 80084fa:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
      c = *fmt++;
 80084fe:	9b04      	ldr	r3, [sp, #16]
 8008500:	1c5a      	adds	r2, r3, #1
 8008502:	9204      	str	r2, [sp, #16]
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
      if (c == 0) {
 800850a:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 800850e:	2b00      	cmp	r3, #0
 8008510:	d115      	bne.n	800853e <chvprintf+0x1ee>
        return n;
 8008512:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008514:	e1b4      	b.n	8008880 <chvprintf+0x530>
      }
    }
    else {
      is_long = (c >= 'A') && (c <= 'Z');
 8008516:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 800851a:	2b40      	cmp	r3, #64	; 0x40
 800851c:	d905      	bls.n	800852a <chvprintf+0x1da>
 800851e:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 8008522:	2b5a      	cmp	r3, #90	; 0x5a
 8008524:	d801      	bhi.n	800852a <chvprintf+0x1da>
 8008526:	2301      	movs	r3, #1
 8008528:	e000      	b.n	800852c <chvprintf+0x1dc>
 800852a:	2300      	movs	r3, #0
 800852c:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 8008530:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
 8008534:	f003 0301 	and.w	r3, r3, #1
 8008538:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 800853c:	e000      	b.n	8008540 <chvprintf+0x1f0>
      if (c == 0) {
 800853e:	bf00      	nop
    }

    /* Command decoding.*/
    switch (c) {
 8008540:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 8008544:	3b44      	subs	r3, #68	; 0x44
 8008546:	2b34      	cmp	r3, #52	; 0x34
 8008548:	f200 8124 	bhi.w	8008794 <chvprintf+0x444>
 800854c:	a201      	add	r2, pc, #4	; (adr r2, 8008554 <chvprintf+0x204>)
 800854e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008552:	bf00      	nop
 8008554:	0800868d 	.word	0x0800868d
 8008558:	08008795 	.word	0x08008795
 800855c:	08008795 	.word	0x08008795
 8008560:	08008795 	.word	0x08008795
 8008564:	08008795 	.word	0x08008795
 8008568:	0800868d 	.word	0x0800868d
 800856c:	08008795 	.word	0x08008795
 8008570:	08008795 	.word	0x08008795
 8008574:	08008795 	.word	0x08008795
 8008578:	08008795 	.word	0x08008795
 800857c:	08008795 	.word	0x08008795
 8008580:	0800875f 	.word	0x0800875f
 8008584:	0800874f 	.word	0x0800874f
 8008588:	08008795 	.word	0x08008795
 800858c:	08008795 	.word	0x08008795
 8008590:	08008795 	.word	0x08008795
 8008594:	08008795 	.word	0x08008795
 8008598:	08008757 	.word	0x08008757
 800859c:	08008795 	.word	0x08008795
 80085a0:	08008795 	.word	0x08008795
 80085a4:	0800874f 	.word	0x0800874f
 80085a8:	08008795 	.word	0x08008795
 80085ac:	08008795 	.word	0x08008795
 80085b0:	08008795 	.word	0x08008795
 80085b4:	08008795 	.word	0x08008795
 80085b8:	08008795 	.word	0x08008795
 80085bc:	08008795 	.word	0x08008795
 80085c0:	08008795 	.word	0x08008795
 80085c4:	08008795 	.word	0x08008795
 80085c8:	08008795 	.word	0x08008795
 80085cc:	08008795 	.word	0x08008795
 80085d0:	08008629 	.word	0x08008629
 80085d4:	0800868d 	.word	0x0800868d
 80085d8:	08008795 	.word	0x08008795
 80085dc:	080086e3 	.word	0x080086e3
 80085e0:	08008795 	.word	0x08008795
 80085e4:	08008795 	.word	0x08008795
 80085e8:	0800868d 	.word	0x0800868d
 80085ec:	08008795 	.word	0x08008795
 80085f0:	08008795 	.word	0x08008795
 80085f4:	08008795 	.word	0x08008795
 80085f8:	08008795 	.word	0x08008795
 80085fc:	08008795 	.word	0x08008795
 8008600:	0800875f 	.word	0x0800875f
 8008604:	0800874f 	.word	0x0800874f
 8008608:	08008795 	.word	0x08008795
 800860c:	08008795 	.word	0x08008795
 8008610:	08008643 	.word	0x08008643
 8008614:	08008795 	.word	0x08008795
 8008618:	08008757 	.word	0x08008757
 800861c:	08008795 	.word	0x08008795
 8008620:	08008795 	.word	0x08008795
 8008624:	0800874f 	.word	0x0800874f
    case 'c':
      filler = ' ';
 8008628:	2320      	movs	r3, #32
 800862a:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
      *p++ = va_arg(ap, int);
 800862e:	9b03      	ldr	r3, [sp, #12]
 8008630:	1d1a      	adds	r2, r3, #4
 8008632:	9203      	str	r2, [sp, #12]
 8008634:	6819      	ldr	r1, [r3, #0]
 8008636:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008638:	1c5a      	adds	r2, r3, #1
 800863a:	9215      	str	r2, [sp, #84]	; 0x54
 800863c:	b2ca      	uxtb	r2, r1
 800863e:	701a      	strb	r2, [r3, #0]
      break;
 8008640:	e0b0      	b.n	80087a4 <chvprintf+0x454>
    case 's':
      filler = ' ';
 8008642:	2320      	movs	r3, #32
 8008644:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
      if ((s = va_arg(ap, char *)) == 0) {
 8008648:	9b03      	ldr	r3, [sp, #12]
 800864a:	1d1a      	adds	r2, r3, #4
 800864c:	9203      	str	r2, [sp, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	9314      	str	r3, [sp, #80]	; 0x50
 8008652:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008654:	2b00      	cmp	r3, #0
 8008656:	d101      	bne.n	800865c <chvprintf+0x30c>
        s = "(null)";
 8008658:	4b8b      	ldr	r3, [pc, #556]	; (8008888 <chvprintf+0x538>)
 800865a:	9314      	str	r3, [sp, #80]	; 0x50
      }
      if (precision == 0) {
 800865c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800865e:	2b00      	cmp	r3, #0
 8008660:	d102      	bne.n	8008668 <chvprintf+0x318>
        precision = 32767;
 8008662:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8008666:	9311      	str	r3, [sp, #68]	; 0x44
      }
      for (p = s; *p && (--precision >= 0); p++)
 8008668:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800866a:	9315      	str	r3, [sp, #84]	; 0x54
 800866c:	e002      	b.n	8008674 <chvprintf+0x324>
 800866e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008670:	3301      	adds	r3, #1
 8008672:	9315      	str	r3, [sp, #84]	; 0x54
 8008674:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	2b00      	cmp	r3, #0
 800867a:	f000 8092 	beq.w	80087a2 <chvprintf+0x452>
 800867e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008680:	3b01      	subs	r3, #1
 8008682:	9311      	str	r3, [sp, #68]	; 0x44
 8008684:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008686:	2b00      	cmp	r3, #0
 8008688:	daf1      	bge.n	800866e <chvprintf+0x31e>
        ;
      break;
 800868a:	e08a      	b.n	80087a2 <chvprintf+0x452>
    case 'D':
    case 'd':
    case 'I':
    case 'i':
      if (is_long) {
 800868c:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
 8008690:	2b00      	cmp	r3, #0
 8008692:	d005      	beq.n	80086a0 <chvprintf+0x350>
        l = va_arg(ap, long);
 8008694:	9b03      	ldr	r3, [sp, #12]
 8008696:	1d1a      	adds	r2, r3, #4
 8008698:	9203      	str	r2, [sp, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	930d      	str	r3, [sp, #52]	; 0x34
 800869e:	e004      	b.n	80086aa <chvprintf+0x35a>
      }
      else {
        l = va_arg(ap, int);
 80086a0:	9b03      	ldr	r3, [sp, #12]
 80086a2:	1d1a      	adds	r2, r3, #4
 80086a4:	9203      	str	r2, [sp, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	930d      	str	r3, [sp, #52]	; 0x34
      }
      if (l < 0) {
 80086aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	da08      	bge.n	80086c2 <chvprintf+0x372>
        *p++ = '-';
 80086b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80086b2:	1c5a      	adds	r2, r3, #1
 80086b4:	9215      	str	r2, [sp, #84]	; 0x54
 80086b6:	222d      	movs	r2, #45	; 0x2d
 80086b8:	701a      	strb	r2, [r3, #0]
        l = -l;
 80086ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086bc:	425b      	negs	r3, r3
 80086be:	930d      	str	r3, [sp, #52]	; 0x34
 80086c0:	e008      	b.n	80086d4 <chvprintf+0x384>
      }
      else
        if (do_sign) {
 80086c2:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d004      	beq.n	80086d4 <chvprintf+0x384>
          *p++ = '+';
 80086ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80086cc:	1c5a      	adds	r2, r3, #1
 80086ce:	9215      	str	r2, [sp, #84]	; 0x54
 80086d0:	222b      	movs	r2, #43	; 0x2b
 80086d2:	701a      	strb	r2, [r3, #0]
        }
      p = ch_ltoa(p, l, 10);
 80086d4:	220a      	movs	r2, #10
 80086d6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80086d8:	9815      	ldr	r0, [sp, #84]	; 0x54
 80086da:	f7ff fdd1 	bl	8008280 <ch_ltoa>
 80086de:	9015      	str	r0, [sp, #84]	; 0x54
      break;
 80086e0:	e060      	b.n	80087a4 <chvprintf+0x454>
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
 80086e2:	9b03      	ldr	r3, [sp, #12]
 80086e4:	3307      	adds	r3, #7
 80086e6:	f023 0307 	bic.w	r3, r3, #7
 80086ea:	f103 0208 	add.w	r2, r3, #8
 80086ee:	9203      	str	r2, [sp, #12]
 80086f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f4:	4610      	mov	r0, r2
 80086f6:	4619      	mov	r1, r3
 80086f8:	f7f8 fd0e 	bl	8001118 <__aeabi_d2f>
 80086fc:	4603      	mov	r3, r0
 80086fe:	930c      	str	r3, [sp, #48]	; 0x30
      if (f < 0) {
 8008700:	f04f 0100 	mov.w	r1, #0
 8008704:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008706:	f7f8 fc7b 	bl	8001000 <__aeabi_fcmplt>
 800870a:	4603      	mov	r3, r0
 800870c:	2b00      	cmp	r3, #0
 800870e:	d009      	beq.n	8008724 <chvprintf+0x3d4>
        *p++ = '-';
 8008710:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008712:	1c5a      	adds	r2, r3, #1
 8008714:	9215      	str	r2, [sp, #84]	; 0x54
 8008716:	222d      	movs	r2, #45	; 0x2d
 8008718:	701a      	strb	r2, [r3, #0]
        f = -f;
 800871a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800871c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008720:	930c      	str	r3, [sp, #48]	; 0x30
 8008722:	e008      	b.n	8008736 <chvprintf+0x3e6>
      }
      else {
        if (do_sign) {
 8008724:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8008728:	2b00      	cmp	r3, #0
 800872a:	d004      	beq.n	8008736 <chvprintf+0x3e6>
          *p++ = '+';
 800872c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800872e:	1c5a      	adds	r2, r3, #1
 8008730:	9215      	str	r2, [sp, #84]	; 0x54
 8008732:	222b      	movs	r2, #43	; 0x2b
 8008734:	701a      	strb	r2, [r3, #0]
        }
      }
      p = ftoa(p, f, precision);
 8008736:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008738:	f7f7 ff4c 	bl	80005d4 <__aeabi_f2d>
 800873c:	4602      	mov	r2, r0
 800873e:	460b      	mov	r3, r1
 8008740:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008742:	9100      	str	r1, [sp, #0]
 8008744:	9815      	ldr	r0, [sp, #84]	; 0x54
 8008746:	f7ff fdab 	bl	80082a0 <ftoa>
 800874a:	9015      	str	r0, [sp, #84]	; 0x54
      break;
 800874c:	e02a      	b.n	80087a4 <chvprintf+0x454>
#endif
    case 'X':
    case 'x':
    case 'P':
    case 'p':
      c = 16;
 800874e:	2310      	movs	r3, #16
 8008750:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
      goto unsigned_common;
 8008754:	e006      	b.n	8008764 <chvprintf+0x414>
    case 'U':
    case 'u':
      c = 10;
 8008756:	230a      	movs	r3, #10
 8008758:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
      goto unsigned_common;
 800875c:	e002      	b.n	8008764 <chvprintf+0x414>
    case 'O':
    case 'o':
      c = 8;
 800875e:	2308      	movs	r3, #8
 8008760:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
unsigned_common:
      if (is_long) {
 8008764:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
 8008768:	2b00      	cmp	r3, #0
 800876a:	d005      	beq.n	8008778 <chvprintf+0x428>
        l = va_arg(ap, unsigned long);
 800876c:	9b03      	ldr	r3, [sp, #12]
 800876e:	1d1a      	adds	r2, r3, #4
 8008770:	9203      	str	r2, [sp, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	930d      	str	r3, [sp, #52]	; 0x34
 8008776:	e004      	b.n	8008782 <chvprintf+0x432>
      }
      else {
        l = va_arg(ap, unsigned int);
 8008778:	9b03      	ldr	r3, [sp, #12]
 800877a:	1d1a      	adds	r2, r3, #4
 800877c:	9203      	str	r2, [sp, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	930d      	str	r3, [sp, #52]	; 0x34
      }
      p = ch_ltoa(p, l, c);
 8008782:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 8008786:	461a      	mov	r2, r3
 8008788:	990d      	ldr	r1, [sp, #52]	; 0x34
 800878a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800878c:	f7ff fd78 	bl	8008280 <ch_ltoa>
 8008790:	9015      	str	r0, [sp, #84]	; 0x54
      break;
 8008792:	e007      	b.n	80087a4 <chvprintf+0x454>
    default:
      *p++ = c;
 8008794:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008796:	1c5a      	adds	r2, r3, #1
 8008798:	9215      	str	r2, [sp, #84]	; 0x54
 800879a:	f89d 204f 	ldrb.w	r2, [sp, #79]	; 0x4f
 800879e:	701a      	strb	r2, [r3, #0]
      break;
 80087a0:	e000      	b.n	80087a4 <chvprintf+0x454>
      break;
 80087a2:	bf00      	nop
    }
    i = (int)(p - s);
 80087a4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80087a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80087a8:	1ad3      	subs	r3, r2, r3
 80087aa:	9312      	str	r3, [sp, #72]	; 0x48
    if ((width -= i) < 0) {
 80087ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80087ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80087b0:	1ad3      	subs	r3, r2, r3
 80087b2:	9310      	str	r3, [sp, #64]	; 0x40
 80087b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	da01      	bge.n	80087be <chvprintf+0x46e>
      width = 0;
 80087ba:	2300      	movs	r3, #0
 80087bc:	9310      	str	r3, [sp, #64]	; 0x40
    }
    if (left_align == false) {
 80087be:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 80087c2:	f083 0301 	eor.w	r3, r3, #1
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d002      	beq.n	80087d2 <chvprintf+0x482>
      width = -width;
 80087cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80087ce:	425b      	negs	r3, r3
 80087d0:	9310      	str	r3, [sp, #64]	; 0x40
    }
    if (width < 0) {
 80087d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	da3a      	bge.n	800884e <chvprintf+0x4fe>
      if ((*s == '-' || *s == '+') && filler == '0') {
 80087d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	2b2d      	cmp	r3, #45	; 0x2d
 80087de:	d003      	beq.n	80087e8 <chvprintf+0x498>
 80087e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	2b2b      	cmp	r3, #43	; 0x2b
 80087e6:	d113      	bne.n	8008810 <chvprintf+0x4c0>
 80087e8:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 80087ec:	2b30      	cmp	r3, #48	; 0x30
 80087ee:	d10f      	bne.n	8008810 <chvprintf+0x4c0>
        streamPut(chp, (uint8_t)*s++);
 80087f0:	9b05      	ldr	r3, [sp, #20]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	68da      	ldr	r2, [r3, #12]
 80087f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80087f8:	1c59      	adds	r1, r3, #1
 80087fa:	9114      	str	r1, [sp, #80]	; 0x50
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	4619      	mov	r1, r3
 8008800:	9805      	ldr	r0, [sp, #20]
 8008802:	4790      	blx	r2
        n++;
 8008804:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008806:	3301      	adds	r3, #1
 8008808:	930f      	str	r3, [sp, #60]	; 0x3c
        i--;
 800880a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800880c:	3b01      	subs	r3, #1
 800880e:	9312      	str	r3, [sp, #72]	; 0x48
      }
      do {
        streamPut(chp, (uint8_t)filler);
 8008810:	9b05      	ldr	r3, [sp, #20]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	68db      	ldr	r3, [r3, #12]
 8008816:	f89d 204e 	ldrb.w	r2, [sp, #78]	; 0x4e
 800881a:	4611      	mov	r1, r2
 800881c:	9805      	ldr	r0, [sp, #20]
 800881e:	4798      	blx	r3
        n++;
 8008820:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008822:	3301      	adds	r3, #1
 8008824:	930f      	str	r3, [sp, #60]	; 0x3c
      } while (++width != 0);
 8008826:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008828:	3301      	adds	r3, #1
 800882a:	9310      	str	r3, [sp, #64]	; 0x40
 800882c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800882e:	2b00      	cmp	r3, #0
 8008830:	d1ee      	bne.n	8008810 <chvprintf+0x4c0>
    }
    while (--i >= 0) {
 8008832:	e00c      	b.n	800884e <chvprintf+0x4fe>
      streamPut(chp, (uint8_t)*s++);
 8008834:	9b05      	ldr	r3, [sp, #20]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	68da      	ldr	r2, [r3, #12]
 800883a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800883c:	1c59      	adds	r1, r3, #1
 800883e:	9114      	str	r1, [sp, #80]	; 0x50
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	4619      	mov	r1, r3
 8008844:	9805      	ldr	r0, [sp, #20]
 8008846:	4790      	blx	r2
      n++;
 8008848:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800884a:	3301      	adds	r3, #1
 800884c:	930f      	str	r3, [sp, #60]	; 0x3c
    while (--i >= 0) {
 800884e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008850:	3b01      	subs	r3, #1
 8008852:	9312      	str	r3, [sp, #72]	; 0x48
 8008854:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008856:	2b00      	cmp	r3, #0
 8008858:	daec      	bge.n	8008834 <chvprintf+0x4e4>
    }

    while (width) {
 800885a:	e00d      	b.n	8008878 <chvprintf+0x528>
      streamPut(chp, (uint8_t)filler);
 800885c:	9b05      	ldr	r3, [sp, #20]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	68db      	ldr	r3, [r3, #12]
 8008862:	f89d 204e 	ldrb.w	r2, [sp, #78]	; 0x4e
 8008866:	4611      	mov	r1, r2
 8008868:	9805      	ldr	r0, [sp, #20]
 800886a:	4798      	blx	r3
      n++;
 800886c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800886e:	3301      	adds	r3, #1
 8008870:	930f      	str	r3, [sp, #60]	; 0x3c
      width--;
 8008872:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008874:	3b01      	subs	r3, #1
 8008876:	9310      	str	r3, [sp, #64]	; 0x40
    while (width) {
 8008878:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800887a:	2b00      	cmp	r3, #0
 800887c:	d1ee      	bne.n	800885c <chvprintf+0x50c>
    c = *fmt++;
 800887e:	e56e      	b.n	800835e <chvprintf+0xe>
    }
  }
}
 8008880:	4618      	mov	r0, r3
 8008882:	b017      	add	sp, #92	; 0x5c
 8008884:	f85d fb04 	ldr.w	pc, [sp], #4
 8008888:	0800ef20 	.word	0x0800ef20
 800888c:	00000000 	.word	0x00000000

08008890 <chprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8008890:	b40e      	push	{r1, r2, r3}
 8008892:	b500      	push	{lr}
 8008894:	b084      	sub	sp, #16
 8008896:	9001      	str	r0, [sp, #4]
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8008898:	ab06      	add	r3, sp, #24
 800889a:	9302      	str	r3, [sp, #8]
  formatted_bytes = chvprintf(chp, fmt, ap);
 800889c:	9a02      	ldr	r2, [sp, #8]
 800889e:	9905      	ldr	r1, [sp, #20]
 80088a0:	9801      	ldr	r0, [sp, #4]
 80088a2:	f7ff fd55 	bl	8008350 <chvprintf>
 80088a6:	9003      	str	r0, [sp, #12]
  va_end(ap);

  return formatted_bytes;
 80088a8:	9b03      	ldr	r3, [sp, #12]
 80088aa:	bf00      	nop
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	b004      	add	sp, #16
 80088b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80088b4:	b003      	add	sp, #12
 80088b6:	4770      	bx	lr
	...

080088c0 <hex2int>:
  secondi=(int)(((parametro/100)-gradi)*100000);
  return (gradi+(secondi/60)/1000);
}

static int hex2int(char c)
{
 80088c0:	b082      	sub	sp, #8
 80088c2:	4603      	mov	r3, r0
 80088c4:	f88d 3007 	strb.w	r3, [sp, #7]
    if (c >= '0' && c <= '9')
 80088c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80088cc:	2b2f      	cmp	r3, #47	; 0x2f
 80088ce:	d907      	bls.n	80088e0 <hex2int+0x20>
 80088d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80088d4:	2b39      	cmp	r3, #57	; 0x39
 80088d6:	d803      	bhi.n	80088e0 <hex2int+0x20>
        return c - '0';
 80088d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80088dc:	3b30      	subs	r3, #48	; 0x30
 80088de:	e019      	b.n	8008914 <hex2int+0x54>
    if (c >= 'A' && c <= 'F')
 80088e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80088e4:	2b40      	cmp	r3, #64	; 0x40
 80088e6:	d907      	bls.n	80088f8 <hex2int+0x38>
 80088e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80088ec:	2b46      	cmp	r3, #70	; 0x46
 80088ee:	d803      	bhi.n	80088f8 <hex2int+0x38>
        return c - 'A' + 10;
 80088f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80088f4:	3b37      	subs	r3, #55	; 0x37
 80088f6:	e00d      	b.n	8008914 <hex2int+0x54>
    if (c >= 'a' && c <= 'f')
 80088f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80088fc:	2b60      	cmp	r3, #96	; 0x60
 80088fe:	d907      	bls.n	8008910 <hex2int+0x50>
 8008900:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008904:	2b66      	cmp	r3, #102	; 0x66
 8008906:	d803      	bhi.n	8008910 <hex2int+0x50>
        return c - 'a' + 10;
 8008908:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800890c:	3b57      	subs	r3, #87	; 0x57
 800890e:	e001      	b.n	8008914 <hex2int+0x54>
    return -1;
 8008910:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008914:	4618      	mov	r0, r3
 8008916:	b002      	add	sp, #8
 8008918:	4770      	bx	lr
 800891a:	bf00      	nop
 800891c:	0000      	movs	r0, r0
	...

08008920 <minmea_check>:

    return checksum;
}

bool minmea_check(const char *sentence, bool strict)
{
 8008920:	b500      	push	{lr}
 8008922:	b087      	sub	sp, #28
 8008924:	9001      	str	r0, [sp, #4]
 8008926:	460b      	mov	r3, r1
 8008928:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8_t checksum = 0x00;
 800892c:	2300      	movs	r3, #0
 800892e:	f88d 3017 	strb.w	r3, [sp, #23]

    // Sequence length is limited.
    if (strlen(sentence) > MINMEA_MAX_LENGTH + 3)
 8008932:	9801      	ldr	r0, [sp, #4]
 8008934:	f7f8 fe64 	bl	8001600 <strlen>
 8008938:	4603      	mov	r3, r0
 800893a:	2b53      	cmp	r3, #83	; 0x53
 800893c:	d901      	bls.n	8008942 <minmea_check+0x22>
        return false;
 800893e:	2300      	movs	r3, #0
 8008940:	e06d      	b.n	8008a1e <minmea_check+0xfe>

    // A valid sentence starts with "$".
    if (*sentence++ != '$')
 8008942:	9b01      	ldr	r3, [sp, #4]
 8008944:	1c5a      	adds	r2, r3, #1
 8008946:	9201      	str	r2, [sp, #4]
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	2b24      	cmp	r3, #36	; 0x24
 800894c:	d00a      	beq.n	8008964 <minmea_check+0x44>
        return false;
 800894e:	2300      	movs	r3, #0
 8008950:	e065      	b.n	8008a1e <minmea_check+0xfe>

    // The optional checksum is an XOR of all bytes between "$" and "*".
    while (*sentence && *sentence != '*' && isprint((unsigned char) *sentence))
        checksum ^= *sentence++;
 8008952:	9b01      	ldr	r3, [sp, #4]
 8008954:	1c5a      	adds	r2, r3, #1
 8008956:	9201      	str	r2, [sp, #4]
 8008958:	781a      	ldrb	r2, [r3, #0]
 800895a:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800895e:	4053      	eors	r3, r2
 8008960:	f88d 3017 	strb.w	r3, [sp, #23]
    while (*sentence && *sentence != '*' && isprint((unsigned char) *sentence))
 8008964:	9b01      	ldr	r3, [sp, #4]
 8008966:	781b      	ldrb	r3, [r3, #0]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d00d      	beq.n	8008988 <minmea_check+0x68>
 800896c:	9b01      	ldr	r3, [sp, #4]
 800896e:	781b      	ldrb	r3, [r3, #0]
 8008970:	2b2a      	cmp	r3, #42	; 0x2a
 8008972:	d009      	beq.n	8008988 <minmea_check+0x68>
 8008974:	9b01      	ldr	r3, [sp, #4]
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	3301      	adds	r3, #1
 800897a:	4a2b      	ldr	r2, [pc, #172]	; (8008a28 <minmea_check+0x108>)
 800897c:	4413      	add	r3, r2
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	f003 0397 	and.w	r3, r3, #151	; 0x97
 8008984:	2b00      	cmp	r3, #0
 8008986:	d1e4      	bne.n	8008952 <minmea_check+0x32>

    // If checksum is present...
    if (*sentence == '*') {
 8008988:	9b01      	ldr	r3, [sp, #4]
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	2b2a      	cmp	r3, #42	; 0x2a
 800898e:	d12a      	bne.n	80089e6 <minmea_check+0xc6>
        // Extract checksum.
        sentence++;
 8008990:	9b01      	ldr	r3, [sp, #4]
 8008992:	3301      	adds	r3, #1
 8008994:	9301      	str	r3, [sp, #4]
        int upper = hex2int(*sentence++);
 8008996:	9b01      	ldr	r3, [sp, #4]
 8008998:	1c5a      	adds	r2, r3, #1
 800899a:	9201      	str	r2, [sp, #4]
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	4618      	mov	r0, r3
 80089a0:	f7ff ff8e 	bl	80088c0 <hex2int>
 80089a4:	9004      	str	r0, [sp, #16]
        if (upper == -1)
 80089a6:	9b04      	ldr	r3, [sp, #16]
 80089a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089ac:	d101      	bne.n	80089b2 <minmea_check+0x92>
            return false;
 80089ae:	2300      	movs	r3, #0
 80089b0:	e035      	b.n	8008a1e <minmea_check+0xfe>
        int lower = hex2int(*sentence++);
 80089b2:	9b01      	ldr	r3, [sp, #4]
 80089b4:	1c5a      	adds	r2, r3, #1
 80089b6:	9201      	str	r2, [sp, #4]
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	4618      	mov	r0, r3
 80089bc:	f7ff ff80 	bl	80088c0 <hex2int>
 80089c0:	9003      	str	r0, [sp, #12]
        if (lower == -1)
 80089c2:	9b03      	ldr	r3, [sp, #12]
 80089c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089c8:	d101      	bne.n	80089ce <minmea_check+0xae>
            return false;
 80089ca:	2300      	movs	r3, #0
 80089cc:	e027      	b.n	8008a1e <minmea_check+0xfe>
        int expected = upper << 4 | lower;
 80089ce:	9b04      	ldr	r3, [sp, #16]
 80089d0:	011b      	lsls	r3, r3, #4
 80089d2:	9a03      	ldr	r2, [sp, #12]
 80089d4:	4313      	orrs	r3, r2
 80089d6:	9302      	str	r3, [sp, #8]

        // Check for checksum mismatch.
        if (checksum != expected)
 80089d8:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80089dc:	9a02      	ldr	r2, [sp, #8]
 80089de:	429a      	cmp	r2, r3
 80089e0:	d007      	beq.n	80089f2 <minmea_check+0xd2>
            return false;
 80089e2:	2300      	movs	r3, #0
 80089e4:	e01b      	b.n	8008a1e <minmea_check+0xfe>
    } else if (strict) {
 80089e6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d001      	beq.n	80089f2 <minmea_check+0xd2>
        // Discard non-checksummed frames in strict mode.
        return false;
 80089ee:	2300      	movs	r3, #0
 80089f0:	e015      	b.n	8008a1e <minmea_check+0xfe>
    }

    // The only stuff allowed at this point is a newline.
    if (*sentence && strcmp(sentence, "\n") && strcmp(sentence, "\r\n"))
 80089f2:	9b01      	ldr	r3, [sp, #4]
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d00f      	beq.n	8008a1a <minmea_check+0xfa>
 80089fa:	490c      	ldr	r1, [pc, #48]	; (8008a2c <minmea_check+0x10c>)
 80089fc:	9801      	ldr	r0, [sp, #4]
 80089fe:	f7f8 fc83 	bl	8001308 <strcmp>
 8008a02:	4603      	mov	r3, r0
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d008      	beq.n	8008a1a <minmea_check+0xfa>
 8008a08:	4909      	ldr	r1, [pc, #36]	; (8008a30 <minmea_check+0x110>)
 8008a0a:	9801      	ldr	r0, [sp, #4]
 8008a0c:	f7f8 fc7c 	bl	8001308 <strcmp>
 8008a10:	4603      	mov	r3, r0
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d001      	beq.n	8008a1a <minmea_check+0xfa>
        return false;
 8008a16:	2300      	movs	r3, #0
 8008a18:	e001      	b.n	8008a1e <minmea_check+0xfe>

    return true;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	bf00      	nop
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	b007      	add	sp, #28
 8008a22:	f85d fb04 	ldr.w	pc, [sp], #4
 8008a26:	bf00      	nop
 8008a28:	0800f510 	.word	0x0800f510
 8008a2c:	0800ef9c 	.word	0x0800ef9c
 8008a30:	0800f0f0 	.word	0x0800f0f0
	...

08008a40 <minmea_isfield>:

static inline bool minmea_isfield(char c) {
 8008a40:	b082      	sub	sp, #8
 8008a42:	4603      	mov	r3, r0
 8008a44:	f88d 3007 	strb.w	r3, [sp, #7]
    return isprint((unsigned char) c) && c != ',' && c != '*';
 8008a48:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	4a0c      	ldr	r2, [pc, #48]	; (8008a80 <minmea_isfield+0x40>)
 8008a50:	4413      	add	r3, r2
 8008a52:	781b      	ldrb	r3, [r3, #0]
 8008a54:	f003 0397 	and.w	r3, r3, #151	; 0x97
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d009      	beq.n	8008a70 <minmea_isfield+0x30>
 8008a5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008a60:	2b2c      	cmp	r3, #44	; 0x2c
 8008a62:	d005      	beq.n	8008a70 <minmea_isfield+0x30>
 8008a64:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008a68:	2b2a      	cmp	r3, #42	; 0x2a
 8008a6a:	d001      	beq.n	8008a70 <minmea_isfield+0x30>
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	e000      	b.n	8008a72 <minmea_isfield+0x32>
 8008a70:	2300      	movs	r3, #0
 8008a72:	f003 0301 	and.w	r3, r3, #1
 8008a76:	b2db      	uxtb	r3, r3
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	b002      	add	sp, #8
 8008a7c:	4770      	bx	lr
 8008a7e:	bf00      	nop
 8008a80:	0800f510 	.word	0x0800f510
	...

08008a90 <minmea_scan>:

bool minmea_scan(const char *sentence, const char *format, ...)
{
 8008a90:	b40e      	push	{r1, r2, r3}
 8008a92:	b500      	push	{lr}
 8008a94:	b0a6      	sub	sp, #152	; 0x98
 8008a96:	9001      	str	r0, [sp, #4]
    bool result = false;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	f88d 3097 	strb.w	r3, [sp, #151]	; 0x97
    bool optional = false;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	f88d 3096 	strb.w	r3, [sp, #150]	; 0x96
    va_list ap;
    va_start(ap, format);
 8008aa4:	ab28      	add	r3, sp, #160	; 0xa0
 8008aa6:	930b      	str	r3, [sp, #44]	; 0x2c

    const char *field = sentence;
 8008aa8:	9b01      	ldr	r3, [sp, #4]
 8008aaa:	9324      	str	r3, [sp, #144]	; 0x90
        } else { \
            field = NULL; \
        } \
    } while (0)

    while (*format) {
 8008aac:	e341      	b.n	8009132 <minmea_scan+0x6a2>
        char type = *format++;
 8008aae:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8008ab0:	1c5a      	adds	r2, r3, #1
 8008ab2:	9227      	str	r2, [sp, #156]	; 0x9c
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43

        if (type == ';') {
 8008aba:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 8008abe:	2b3b      	cmp	r3, #59	; 0x3b
 8008ac0:	d103      	bne.n	8008aca <minmea_scan+0x3a>
            // All further fields are optional.
            optional = true;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	f88d 3096 	strb.w	r3, [sp, #150]	; 0x96
            continue;
 8008ac8:	e333      	b.n	8009132 <minmea_scan+0x6a2>
        }

        if (!field && !optional) {
 8008aca:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d107      	bne.n	8008ae0 <minmea_scan+0x50>
 8008ad0:	f89d 3096 	ldrb.w	r3, [sp, #150]	; 0x96
 8008ad4:	f083 0301 	eor.w	r3, r3, #1
 8008ad8:	b2db      	uxtb	r3, r3
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	f040 8332 	bne.w	8009144 <minmea_scan+0x6b4>
            // Field requested but we ran out if input. Bail out.
            goto parse_error;
        }

        switch (type) {
 8008ae0:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 8008ae4:	3b44      	subs	r3, #68	; 0x44
 8008ae6:	2b30      	cmp	r3, #48	; 0x30
 8008ae8:	f200 832e 	bhi.w	8009148 <minmea_scan+0x6b8>
 8008aec:	a201      	add	r2, pc, #4	; (adr r2, 8008af4 <minmea_scan+0x64>)
 8008aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af2:	bf00      	nop
 8008af4:	08008ebf 	.word	0x08008ebf
 8008af8:	08009149 	.word	0x08009149
 8008afc:	08009149 	.word	0x08009149
 8008b00:	08009149 	.word	0x08009149
 8008b04:	08009149 	.word	0x08009149
 8008b08:	08009149 	.word	0x08009149
 8008b0c:	08009149 	.word	0x08009149
 8008b10:	08009149 	.word	0x08009149
 8008b14:	08009149 	.word	0x08009149
 8008b18:	08009149 	.word	0x08009149
 8008b1c:	08009149 	.word	0x08009149
 8008b20:	08009149 	.word	0x08009149
 8008b24:	08009149 	.word	0x08009149
 8008b28:	08009149 	.word	0x08009149
 8008b2c:	08009149 	.word	0x08009149
 8008b30:	08009149 	.word	0x08009149
 8008b34:	08008fa7 	.word	0x08008fa7
 8008b38:	08009149 	.word	0x08009149
 8008b3c:	08009149 	.word	0x08009149
 8008b40:	08009149 	.word	0x08009149
 8008b44:	08009149 	.word	0x08009149
 8008b48:	08009149 	.word	0x08009149
 8008b4c:	08009149 	.word	0x08009149
 8008b50:	08009149 	.word	0x08009149
 8008b54:	08009149 	.word	0x08009149
 8008b58:	08009149 	.word	0x08009149
 8008b5c:	08009149 	.word	0x08009149
 8008b60:	08009101 	.word	0x08009101
 8008b64:	08009149 	.word	0x08009149
 8008b68:	08009149 	.word	0x08009149
 8008b6c:	08009149 	.word	0x08009149
 8008b70:	08008bb9 	.word	0x08008bb9
 8008b74:	08008bed 	.word	0x08008bed
 8008b78:	08009149 	.word	0x08009149
 8008b7c:	08008c83 	.word	0x08008c83
 8008b80:	08009149 	.word	0x08009149
 8008b84:	08009149 	.word	0x08009149
 8008b88:	08008de7 	.word	0x08008de7
 8008b8c:	08009149 	.word	0x08009149
 8008b90:	08009149 	.word	0x08009149
 8008b94:	08009149 	.word	0x08009149
 8008b98:	08009149 	.word	0x08009149
 8008b9c:	08009149 	.word	0x08009149
 8008ba0:	08009149 	.word	0x08009149
 8008ba4:	08009149 	.word	0x08009149
 8008ba8:	08009149 	.word	0x08009149
 8008bac:	08009149 	.word	0x08009149
 8008bb0:	08008e1f 	.word	0x08008e1f
 8008bb4:	08008e59 	.word	0x08008e59
            case 'c': { // Single character field (char).
                char value = '\0';
 8008bb8:	2300      	movs	r3, #0
 8008bba:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f

                if (field && minmea_isfield(*field))
 8008bbe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d00b      	beq.n	8008bdc <minmea_scan+0x14c>
 8008bc4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f7ff ff39 	bl	8008a40 <minmea_isfield>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d003      	beq.n	8008bdc <minmea_scan+0x14c>
                    value = *field;
 8008bd4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f

                *va_arg(ap, char *) = value;
 8008bdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bde:	1d1a      	adds	r2, r3, #4
 8008be0:	920b      	str	r2, [sp, #44]	; 0x2c
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f89d 208f 	ldrb.w	r2, [sp, #143]	; 0x8f
 8008be8:	701a      	strb	r2, [r3, #0]
            } break;
 8008bea:	e28a      	b.n	8009102 <minmea_scan+0x672>

            case 'd': { // Single character direction field (int).
                int value = 0;
 8008bec:	2300      	movs	r3, #0
 8008bee:	9322      	str	r3, [sp, #136]	; 0x88

                if (field && minmea_isfield(*field)) {
 8008bf0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d03d      	beq.n	8008c72 <minmea_scan+0x1e2>
 8008bf6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f7ff ff20 	bl	8008a40 <minmea_isfield>
 8008c00:	4603      	mov	r3, r0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d035      	beq.n	8008c72 <minmea_scan+0x1e2>
                    switch (*field) {
 8008c06:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	3b45      	subs	r3, #69	; 0x45
 8008c0c:	2b12      	cmp	r3, #18
 8008c0e:	f200 829d 	bhi.w	800914c <minmea_scan+0x6bc>
 8008c12:	a201      	add	r2, pc, #4	; (adr r2, 8008c18 <minmea_scan+0x188>)
 8008c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c18:	08008c65 	.word	0x08008c65
 8008c1c:	0800914d 	.word	0x0800914d
 8008c20:	0800914d 	.word	0x0800914d
 8008c24:	0800914d 	.word	0x0800914d
 8008c28:	0800914d 	.word	0x0800914d
 8008c2c:	0800914d 	.word	0x0800914d
 8008c30:	0800914d 	.word	0x0800914d
 8008c34:	0800914d 	.word	0x0800914d
 8008c38:	0800914d 	.word	0x0800914d
 8008c3c:	08008c65 	.word	0x08008c65
 8008c40:	0800914d 	.word	0x0800914d
 8008c44:	0800914d 	.word	0x0800914d
 8008c48:	0800914d 	.word	0x0800914d
 8008c4c:	0800914d 	.word	0x0800914d
 8008c50:	08008c6b 	.word	0x08008c6b
 8008c54:	0800914d 	.word	0x0800914d
 8008c58:	0800914d 	.word	0x0800914d
 8008c5c:	0800914d 	.word	0x0800914d
 8008c60:	08008c6b 	.word	0x08008c6b
                        case 'N':
                        case 'E':
                            value = 1;
 8008c64:	2301      	movs	r3, #1
 8008c66:	9322      	str	r3, [sp, #136]	; 0x88
                            break;
 8008c68:	e004      	b.n	8008c74 <minmea_scan+0x1e4>
                        case 'S':
                        case 'W':
                            value = -1;
 8008c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8008c6e:	9322      	str	r3, [sp, #136]	; 0x88
                            break;
 8008c70:	e000      	b.n	8008c74 <minmea_scan+0x1e4>
                        default:
                            goto parse_error;
                    }
                }
 8008c72:	bf00      	nop

                *va_arg(ap, int *) = value;
 8008c74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c76:	1d1a      	adds	r2, r3, #4
 8008c78:	920b      	str	r2, [sp, #44]	; 0x2c
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008c7e:	601a      	str	r2, [r3, #0]
            } break;
 8008c80:	e23f      	b.n	8009102 <minmea_scan+0x672>

            case 'f': { // Fractional value with scale (struct minmea_float).
                int sign = 0;
 8008c82:	2300      	movs	r3, #0
 8008c84:	9321      	str	r3, [sp, #132]	; 0x84
                int_least32_t value = -1;
 8008c86:	f04f 33ff 	mov.w	r3, #4294967295
 8008c8a:	9320      	str	r3, [sp, #128]	; 0x80
                int_least32_t scale = 0;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	931f      	str	r3, [sp, #124]	; 0x7c

                if (field) {
 8008c90:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d07d      	beq.n	8008d92 <minmea_scan+0x302>
                    while (minmea_isfield(*field)) {
 8008c96:	e074      	b.n	8008d82 <minmea_scan+0x2f2>
                        if (*field == '+' && !sign && value == -1) {
 8008c98:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	2b2b      	cmp	r3, #43	; 0x2b
 8008c9e:	d109      	bne.n	8008cb4 <minmea_scan+0x224>
 8008ca0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d106      	bne.n	8008cb4 <minmea_scan+0x224>
 8008ca6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cac:	d102      	bne.n	8008cb4 <minmea_scan+0x224>
                            sign = 1;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	9321      	str	r3, [sp, #132]	; 0x84
 8008cb2:	e063      	b.n	8008d7c <minmea_scan+0x2ec>
                        } else if (*field == '-' && !sign && value == -1) {
 8008cb4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	2b2d      	cmp	r3, #45	; 0x2d
 8008cba:	d10a      	bne.n	8008cd2 <minmea_scan+0x242>
 8008cbc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d107      	bne.n	8008cd2 <minmea_scan+0x242>
 8008cc2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cc8:	d103      	bne.n	8008cd2 <minmea_scan+0x242>
                            sign = -1;
 8008cca:	f04f 33ff 	mov.w	r3, #4294967295
 8008cce:	9321      	str	r3, [sp, #132]	; 0x84
 8008cd0:	e054      	b.n	8008d7c <minmea_scan+0x2ec>
                        } else if (isdigit((unsigned char) *field)) {
 8008cd2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	4a87      	ldr	r2, [pc, #540]	; (8008ef8 <minmea_scan+0x468>)
 8008cda:	4413      	add	r3, r2
 8008cdc:	781b      	ldrb	r3, [r3, #0]
 8008cde:	f003 0304 	and.w	r3, r3, #4
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d02e      	beq.n	8008d44 <minmea_scan+0x2b4>
                            int digit = *field - '0';
 8008ce6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008ce8:	781b      	ldrb	r3, [r3, #0]
 8008cea:	3b30      	subs	r3, #48	; 0x30
 8008cec:	930e      	str	r3, [sp, #56]	; 0x38
                            if (value == -1)
 8008cee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cf4:	d101      	bne.n	8008cfa <minmea_scan+0x26a>
                                value = 0;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	9320      	str	r3, [sp, #128]	; 0x80
                            if (value > (INT_LEAST32_MAX-digit) / 10) {
 8008cfa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008cfc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8008d00:	1a9b      	subs	r3, r3, r2
 8008d02:	4a7e      	ldr	r2, [pc, #504]	; (8008efc <minmea_scan+0x46c>)
 8008d04:	fb82 1203 	smull	r1, r2, r2, r3
 8008d08:	1092      	asrs	r2, r2, #2
 8008d0a:	17db      	asrs	r3, r3, #31
 8008d0c:	1ad3      	subs	r3, r2, r3
 8008d0e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008d10:	429a      	cmp	r2, r3
 8008d12:	dd04      	ble.n	8008d1e <minmea_scan+0x28e>
                                /* we ran out of bits, what do we do? */
                                if (scale) {
 8008d14:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	f000 821a 	beq.w	8009150 <minmea_scan+0x6c0>
                                    /* truncate extra precision */
                                    break;
 8008d1c:	e039      	b.n	8008d92 <minmea_scan+0x302>
                                } else {
                                    /* integer overflow. bail out. */
                                    goto parse_error;
                                }
                            }
                            value = (10 * value) + digit;
 8008d1e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008d20:	4613      	mov	r3, r2
 8008d22:	009b      	lsls	r3, r3, #2
 8008d24:	4413      	add	r3, r2
 8008d26:	005b      	lsls	r3, r3, #1
 8008d28:	461a      	mov	r2, r3
 8008d2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d2c:	4413      	add	r3, r2
 8008d2e:	9320      	str	r3, [sp, #128]	; 0x80
                            if (scale)
 8008d30:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d022      	beq.n	8008d7c <minmea_scan+0x2ec>
                                scale *= 10;
 8008d36:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008d38:	4613      	mov	r3, r2
 8008d3a:	009b      	lsls	r3, r3, #2
 8008d3c:	4413      	add	r3, r2
 8008d3e:	005b      	lsls	r3, r3, #1
 8008d40:	931f      	str	r3, [sp, #124]	; 0x7c
 8008d42:	e01b      	b.n	8008d7c <minmea_scan+0x2ec>
                        } else if (*field == '.' && scale == 0) {
 8008d44:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	2b2e      	cmp	r3, #46	; 0x2e
 8008d4a:	d105      	bne.n	8008d58 <minmea_scan+0x2c8>
 8008d4c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d102      	bne.n	8008d58 <minmea_scan+0x2c8>
                            scale = 1;
 8008d52:	2301      	movs	r3, #1
 8008d54:	931f      	str	r3, [sp, #124]	; 0x7c
 8008d56:	e011      	b.n	8008d7c <minmea_scan+0x2ec>
                        } else if (*field == ' ') {
 8008d58:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008d5a:	781b      	ldrb	r3, [r3, #0]
 8008d5c:	2b20      	cmp	r3, #32
 8008d5e:	f040 81f9 	bne.w	8009154 <minmea_scan+0x6c4>
                            /* Allow spaces at the start of the field. Not NMEA
                             * conformant, but some modules do this. */
                            if (sign != 0 || value != -1 || scale != 0)
 8008d62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	f040 81f7 	bne.w	8009158 <minmea_scan+0x6c8>
 8008d6a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d70:	f040 81f2 	bne.w	8009158 <minmea_scan+0x6c8>
 8008d74:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	f040 81ee 	bne.w	8009158 <minmea_scan+0x6c8>
                                goto parse_error;
                        } else {
                            goto parse_error;
                        }
                        field++;
 8008d7c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008d7e:	3301      	adds	r3, #1
 8008d80:	9324      	str	r3, [sp, #144]	; 0x90
                    while (minmea_isfield(*field)) {
 8008d82:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	4618      	mov	r0, r3
 8008d88:	f7ff fe5a 	bl	8008a40 <minmea_isfield>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d182      	bne.n	8008c98 <minmea_scan+0x208>
                    }
                }

                if ((sign || scale) && value == -1)
 8008d92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d102      	bne.n	8008d9e <minmea_scan+0x30e>
 8008d98:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d004      	beq.n	8008da8 <minmea_scan+0x318>
 8008d9e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da4:	f000 81da 	beq.w	800915c <minmea_scan+0x6cc>
                    goto parse_error;

                if (value == -1) {
 8008da8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dae:	d104      	bne.n	8008dba <minmea_scan+0x32a>
                    /* No digits were scanned. */
                    value = 0;
 8008db0:	2300      	movs	r3, #0
 8008db2:	9320      	str	r3, [sp, #128]	; 0x80
                    scale = 0;
 8008db4:	2300      	movs	r3, #0
 8008db6:	931f      	str	r3, [sp, #124]	; 0x7c
 8008db8:	e004      	b.n	8008dc4 <minmea_scan+0x334>
                } else if (scale == 0) {
 8008dba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d101      	bne.n	8008dc4 <minmea_scan+0x334>
                    /* No decimal point. */
                    scale = 1;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	931f      	str	r3, [sp, #124]	; 0x7c
                }
                if (sign)
 8008dc4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d004      	beq.n	8008dd4 <minmea_scan+0x344>
                    value *= sign;
 8008dca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008dcc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008dce:	fb02 f303 	mul.w	r3, r2, r3
 8008dd2:	9320      	str	r3, [sp, #128]	; 0x80

                *va_arg(ap, struct minmea_float *) = (struct minmea_float) {value, scale};
 8008dd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dd6:	1d1a      	adds	r2, r3, #4
 8008dd8:	920b      	str	r2, [sp, #44]	; 0x2c
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008dde:	601a      	str	r2, [r3, #0]
 8008de0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008de2:	605a      	str	r2, [r3, #4]
            } break;
 8008de4:	e18d      	b.n	8009102 <minmea_scan+0x672>

            case 'i': { // Integer value, default 0 (int).
                int value = 0;
 8008de6:	2300      	movs	r3, #0
 8008de8:	931e      	str	r3, [sp, #120]	; 0x78

                if (field) {
 8008dea:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d00f      	beq.n	8008e10 <minmea_scan+0x380>
                    char *endptr;
                    value = strtol(field, &endptr, 10);
 8008df0:	ab04      	add	r3, sp, #16
 8008df2:	220a      	movs	r2, #10
 8008df4:	4619      	mov	r1, r3
 8008df6:	9824      	ldr	r0, [sp, #144]	; 0x90
 8008df8:	f005 fde8 	bl	800e9cc <strtol>
 8008dfc:	901e      	str	r0, [sp, #120]	; 0x78
                    if (minmea_isfield(*endptr))
 8008dfe:	9b04      	ldr	r3, [sp, #16]
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	4618      	mov	r0, r3
 8008e04:	f7ff fe1c 	bl	8008a40 <minmea_isfield>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	f040 81a8 	bne.w	8009160 <minmea_scan+0x6d0>
                        goto parse_error;
                }

                *va_arg(ap, int *) = value;
 8008e10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e12:	1d1a      	adds	r2, r3, #4
 8008e14:	920b      	str	r2, [sp, #44]	; 0x2c
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008e1a:	601a      	str	r2, [r3, #0]
            } break;
 8008e1c:	e171      	b.n	8009102 <minmea_scan+0x672>

            case 's': { // String value (char *).
                char *buf = va_arg(ap, char *);
 8008e1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e20:	1d1a      	adds	r2, r3, #4
 8008e22:	920b      	str	r2, [sp, #44]	; 0x2c
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	931d      	str	r3, [sp, #116]	; 0x74

                if (field) {
 8008e28:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d010      	beq.n	8008e50 <minmea_scan+0x3c0>
                    while (minmea_isfield(*field))
 8008e2e:	e007      	b.n	8008e40 <minmea_scan+0x3b0>
                        *buf++ = *field++;
 8008e30:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008e32:	1c53      	adds	r3, r2, #1
 8008e34:	9324      	str	r3, [sp, #144]	; 0x90
 8008e36:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008e38:	1c59      	adds	r1, r3, #1
 8008e3a:	911d      	str	r1, [sp, #116]	; 0x74
 8008e3c:	7812      	ldrb	r2, [r2, #0]
 8008e3e:	701a      	strb	r2, [r3, #0]
                    while (minmea_isfield(*field))
 8008e40:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	4618      	mov	r0, r3
 8008e46:	f7ff fdfb 	bl	8008a40 <minmea_isfield>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d1ef      	bne.n	8008e30 <minmea_scan+0x3a0>
                }

                *buf = '\0';
 8008e50:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008e52:	2200      	movs	r2, #0
 8008e54:	701a      	strb	r2, [r3, #0]
            } break;
 8008e56:	e154      	b.n	8009102 <minmea_scan+0x672>

            case 't': { // NMEA talker+sentence identifier (char *).
                // This field is always mandatory.
                if (!field)
 8008e58:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	f000 8182 	beq.w	8009164 <minmea_scan+0x6d4>
                    goto parse_error;

                if (field[0] != '$')
 8008e60:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008e62:	781b      	ldrb	r3, [r3, #0]
 8008e64:	2b24      	cmp	r3, #36	; 0x24
 8008e66:	f040 817f 	bne.w	8009168 <minmea_scan+0x6d8>
                    goto parse_error;
                for (int f=0; f<5; f++)
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	931c      	str	r3, [sp, #112]	; 0x70
 8008e6e:	e012      	b.n	8008e96 <minmea_scan+0x406>
                    if (!minmea_isfield(field[1+f]))
 8008e70:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008e72:	3301      	adds	r3, #1
 8008e74:	461a      	mov	r2, r3
 8008e76:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008e78:	4413      	add	r3, r2
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f7ff fddf 	bl	8008a40 <minmea_isfield>
 8008e82:	4603      	mov	r3, r0
 8008e84:	f083 0301 	eor.w	r3, r3, #1
 8008e88:	b2db      	uxtb	r3, r3
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	f040 816e 	bne.w	800916c <minmea_scan+0x6dc>
                for (int f=0; f<5; f++)
 8008e90:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008e92:	3301      	adds	r3, #1
 8008e94:	931c      	str	r3, [sp, #112]	; 0x70
 8008e96:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008e98:	2b04      	cmp	r3, #4
 8008e9a:	dde9      	ble.n	8008e70 <minmea_scan+0x3e0>
                        goto parse_error;

                char *buf = va_arg(ap, char *);
 8008e9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e9e:	1d1a      	adds	r2, r3, #4
 8008ea0:	920b      	str	r2, [sp, #44]	; 0x2c
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	930f      	str	r3, [sp, #60]	; 0x3c
                memcpy(buf, field+1, 5);
 8008ea6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008ea8:	3301      	adds	r3, #1
 8008eaa:	2205      	movs	r2, #5
 8008eac:	4619      	mov	r1, r3
 8008eae:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008eb0:	f7f8 f982 	bl	80011b8 <memcpy>
                buf[5] = '\0';
 8008eb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008eb6:	3305      	adds	r3, #5
 8008eb8:	2200      	movs	r2, #0
 8008eba:	701a      	strb	r2, [r3, #0]
            } break;
 8008ebc:	e121      	b.n	8009102 <minmea_scan+0x672>

            case 'D': { // Date (int, int, int), -1 if empty.
                struct minmea_date *date = va_arg(ap, struct minmea_date *);
 8008ebe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ec0:	1d1a      	adds	r2, r3, #4
 8008ec2:	920b      	str	r2, [sp, #44]	; 0x2c
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	930c      	str	r3, [sp, #48]	; 0x30

                int d = -1, m = -1, y = -1;
 8008ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8008ecc:	931b      	str	r3, [sp, #108]	; 0x6c
 8008ece:	f04f 33ff 	mov.w	r3, #4294967295
 8008ed2:	931a      	str	r3, [sp, #104]	; 0x68
 8008ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ed8:	9319      	str	r3, [sp, #100]	; 0x64

                if (field && minmea_isfield(*field)) {
 8008eda:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d058      	beq.n	8008f92 <minmea_scan+0x502>
 8008ee0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f7ff fdab 	bl	8008a40 <minmea_isfield>
 8008eea:	4603      	mov	r3, r0
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d050      	beq.n	8008f92 <minmea_scan+0x502>
                    // Always six digits.
                    for (int f=0; f<6; f++)
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	9318      	str	r3, [sp, #96]	; 0x60
 8008ef4:	e014      	b.n	8008f20 <minmea_scan+0x490>
 8008ef6:	bf00      	nop
 8008ef8:	0800f510 	.word	0x0800f510
 8008efc:	66666667 	.word	0x66666667
                        if (!isdigit((unsigned char) field[f]))
 8008f00:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008f02:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008f04:	4413      	add	r3, r2
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	3301      	adds	r3, #1
 8008f0a:	4a9f      	ldr	r2, [pc, #636]	; (8009188 <minmea_scan+0x6f8>)
 8008f0c:	4413      	add	r3, r2
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	f003 0304 	and.w	r3, r3, #4
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	f000 812b 	beq.w	8009170 <minmea_scan+0x6e0>
                    for (int f=0; f<6; f++)
 8008f1a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008f1c:	3301      	adds	r3, #1
 8008f1e:	9318      	str	r3, [sp, #96]	; 0x60
 8008f20:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008f22:	2b05      	cmp	r3, #5
 8008f24:	ddec      	ble.n	8008f00 <minmea_scan+0x470>
                            goto parse_error;

                    char dArr[] = {field[0], field[1], '\0'};
 8008f26:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	f88d 301c 	strb.w	r3, [sp, #28]
 8008f2e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008f30:	785b      	ldrb	r3, [r3, #1]
 8008f32:	f88d 301d 	strb.w	r3, [sp, #29]
 8008f36:	2300      	movs	r3, #0
 8008f38:	f88d 301e 	strb.w	r3, [sp, #30]
                    char mArr[] = {field[2], field[3], '\0'};
 8008f3c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008f3e:	789b      	ldrb	r3, [r3, #2]
 8008f40:	f88d 3018 	strb.w	r3, [sp, #24]
 8008f44:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008f46:	78db      	ldrb	r3, [r3, #3]
 8008f48:	f88d 3019 	strb.w	r3, [sp, #25]
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	f88d 301a 	strb.w	r3, [sp, #26]
                    char yArr[] = {field[4], field[5], '\0'};
 8008f52:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008f54:	791b      	ldrb	r3, [r3, #4]
 8008f56:	f88d 3014 	strb.w	r3, [sp, #20]
 8008f5a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008f5c:	795b      	ldrb	r3, [r3, #5]
 8008f5e:	f88d 3015 	strb.w	r3, [sp, #21]
 8008f62:	2300      	movs	r3, #0
 8008f64:	f88d 3016 	strb.w	r3, [sp, #22]
                    d = strtol(dArr, NULL, 10);
 8008f68:	ab07      	add	r3, sp, #28
 8008f6a:	220a      	movs	r2, #10
 8008f6c:	2100      	movs	r1, #0
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f005 fd2c 	bl	800e9cc <strtol>
 8008f74:	901b      	str	r0, [sp, #108]	; 0x6c
                    m = strtol(mArr, NULL, 10);
 8008f76:	ab06      	add	r3, sp, #24
 8008f78:	220a      	movs	r2, #10
 8008f7a:	2100      	movs	r1, #0
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f005 fd25 	bl	800e9cc <strtol>
 8008f82:	901a      	str	r0, [sp, #104]	; 0x68
                    y = strtol(yArr, NULL, 10);
 8008f84:	ab05      	add	r3, sp, #20
 8008f86:	220a      	movs	r2, #10
 8008f88:	2100      	movs	r1, #0
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f005 fd1e 	bl	800e9cc <strtol>
 8008f90:	9019      	str	r0, [sp, #100]	; 0x64
                }

                date->day = d;
 8008f92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f94:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008f96:	601a      	str	r2, [r3, #0]
                date->month = m;
 8008f98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f9a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008f9c:	605a      	str	r2, [r3, #4]
                date->year = y;
 8008f9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008fa0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008fa2:	609a      	str	r2, [r3, #8]
            } break;
 8008fa4:	e0ad      	b.n	8009102 <minmea_scan+0x672>

            case 'T': { // Time (int, int, int, int), -1 if empty.
                struct minmea_time *time_ = va_arg(ap, struct minmea_time *);
 8008fa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fa8:	1d1a      	adds	r2, r3, #4
 8008faa:	920b      	str	r2, [sp, #44]	; 0x2c
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	930d      	str	r3, [sp, #52]	; 0x34

                int h = -1, i = -1, s = -1, u = -1;
 8008fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8008fb4:	9317      	str	r3, [sp, #92]	; 0x5c
 8008fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8008fba:	9316      	str	r3, [sp, #88]	; 0x58
 8008fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8008fc0:	9315      	str	r3, [sp, #84]	; 0x54
 8008fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8008fc6:	9314      	str	r3, [sp, #80]	; 0x50

                if (field && minmea_isfield(*field)) {
 8008fc8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	f000 808b 	beq.w	80090e6 <minmea_scan+0x656>
 8008fd0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f7ff fd33 	bl	8008a40 <minmea_isfield>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	f000 8082 	beq.w	80090e6 <minmea_scan+0x656>
                    // Minimum required: integer time.
                    for (int f=0; f<6; f++)
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	9313      	str	r3, [sp, #76]	; 0x4c
 8008fe6:	e00f      	b.n	8009008 <minmea_scan+0x578>
                        if (!isdigit((unsigned char) field[f]))
 8008fe8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008fea:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008fec:	4413      	add	r3, r2
 8008fee:	781b      	ldrb	r3, [r3, #0]
 8008ff0:	3301      	adds	r3, #1
 8008ff2:	4a65      	ldr	r2, [pc, #404]	; (8009188 <minmea_scan+0x6f8>)
 8008ff4:	4413      	add	r3, r2
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	f003 0304 	and.w	r3, r3, #4
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	f000 80b9 	beq.w	8009174 <minmea_scan+0x6e4>
                    for (int f=0; f<6; f++)
 8009002:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009004:	3301      	adds	r3, #1
 8009006:	9313      	str	r3, [sp, #76]	; 0x4c
 8009008:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800900a:	2b05      	cmp	r3, #5
 800900c:	ddec      	ble.n	8008fe8 <minmea_scan+0x558>
                            goto parse_error;

                    char hArr[] = {field[0], field[1], '\0'};
 800900e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009010:	781b      	ldrb	r3, [r3, #0]
 8009012:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8009016:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009018:	785b      	ldrb	r3, [r3, #1]
 800901a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800901e:	2300      	movs	r3, #0
 8009020:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
                    char iArr[] = {field[2], field[3], '\0'};
 8009024:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009026:	789b      	ldrb	r3, [r3, #2]
 8009028:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800902c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800902e:	78db      	ldrb	r3, [r3, #3]
 8009030:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8009034:	2300      	movs	r3, #0
 8009036:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
                    char sArr[] = {field[4], field[5], '\0'};
 800903a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800903c:	791b      	ldrb	r3, [r3, #4]
 800903e:	f88d 3020 	strb.w	r3, [sp, #32]
 8009042:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009044:	795b      	ldrb	r3, [r3, #5]
 8009046:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 800904a:	2300      	movs	r3, #0
 800904c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    h = strtol(hArr, NULL, 10);
 8009050:	ab0a      	add	r3, sp, #40	; 0x28
 8009052:	220a      	movs	r2, #10
 8009054:	2100      	movs	r1, #0
 8009056:	4618      	mov	r0, r3
 8009058:	f005 fcb8 	bl	800e9cc <strtol>
 800905c:	9017      	str	r0, [sp, #92]	; 0x5c
                    i = strtol(iArr, NULL, 10);
 800905e:	ab09      	add	r3, sp, #36	; 0x24
 8009060:	220a      	movs	r2, #10
 8009062:	2100      	movs	r1, #0
 8009064:	4618      	mov	r0, r3
 8009066:	f005 fcb1 	bl	800e9cc <strtol>
 800906a:	9016      	str	r0, [sp, #88]	; 0x58
                    s = strtol(sArr, NULL, 10);
 800906c:	ab08      	add	r3, sp, #32
 800906e:	220a      	movs	r2, #10
 8009070:	2100      	movs	r1, #0
 8009072:	4618      	mov	r0, r3
 8009074:	f005 fcaa 	bl	800e9cc <strtol>
 8009078:	9015      	str	r0, [sp, #84]	; 0x54
                    field += 6;
 800907a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800907c:	3306      	adds	r3, #6
 800907e:	9324      	str	r3, [sp, #144]	; 0x90

                    // Extra: fractional time. Saved as microseconds.
                    if (*field++ == '.') {
 8009080:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009082:	1c5a      	adds	r2, r3, #1
 8009084:	9224      	str	r2, [sp, #144]	; 0x90
 8009086:	781b      	ldrb	r3, [r3, #0]
 8009088:	2b2e      	cmp	r3, #46	; 0x2e
 800908a:	d12a      	bne.n	80090e2 <minmea_scan+0x652>
                        uint32_t value = 0;
 800908c:	2300      	movs	r3, #0
 800908e:	9312      	str	r3, [sp, #72]	; 0x48
                        uint32_t scale = 1000000LU;
 8009090:	4b3e      	ldr	r3, [pc, #248]	; (800918c <minmea_scan+0x6fc>)
 8009092:	9311      	str	r3, [sp, #68]	; 0x44
                        while (isdigit((unsigned char) *field) && scale > 1) {
 8009094:	e012      	b.n	80090bc <minmea_scan+0x62c>
                            value = (value * 10) + (*field++ - '0');
 8009096:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009098:	4613      	mov	r3, r2
 800909a:	009b      	lsls	r3, r3, #2
 800909c:	4413      	add	r3, r2
 800909e:	005b      	lsls	r3, r3, #1
 80090a0:	4619      	mov	r1, r3
 80090a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80090a4:	1c5a      	adds	r2, r3, #1
 80090a6:	9224      	str	r2, [sp, #144]	; 0x90
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	440b      	add	r3, r1
 80090ac:	3b30      	subs	r3, #48	; 0x30
 80090ae:	9312      	str	r3, [sp, #72]	; 0x48
                            scale /= 10;
 80090b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80090b2:	4a37      	ldr	r2, [pc, #220]	; (8009190 <minmea_scan+0x700>)
 80090b4:	fba2 2303 	umull	r2, r3, r2, r3
 80090b8:	08db      	lsrs	r3, r3, #3
 80090ba:	9311      	str	r3, [sp, #68]	; 0x44
                        while (isdigit((unsigned char) *field) && scale > 1) {
 80090bc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80090be:	781b      	ldrb	r3, [r3, #0]
 80090c0:	3301      	adds	r3, #1
 80090c2:	4a31      	ldr	r2, [pc, #196]	; (8009188 <minmea_scan+0x6f8>)
 80090c4:	4413      	add	r3, r2
 80090c6:	781b      	ldrb	r3, [r3, #0]
 80090c8:	f003 0304 	and.w	r3, r3, #4
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d002      	beq.n	80090d6 <minmea_scan+0x646>
 80090d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	d8df      	bhi.n	8009096 <minmea_scan+0x606>
                        }
                        u = value * scale;
 80090d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80090d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80090da:	fb02 f303 	mul.w	r3, r2, r3
 80090de:	9314      	str	r3, [sp, #80]	; 0x50
 80090e0:	e001      	b.n	80090e6 <minmea_scan+0x656>
                    } else {
                        u = 0;
 80090e2:	2300      	movs	r3, #0
 80090e4:	9314      	str	r3, [sp, #80]	; 0x50
                    }
                }

                time_->hours = h;
 80090e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090e8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80090ea:	601a      	str	r2, [r3, #0]
                time_->minutes = i;
 80090ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090ee:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80090f0:	605a      	str	r2, [r3, #4]
                time_->seconds = s;
 80090f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090f4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80090f6:	609a      	str	r2, [r3, #8]
                time_->microseconds = u;
 80090f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090fa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80090fc:	60da      	str	r2, [r3, #12]
            } break;
 80090fe:	e000      	b.n	8009102 <minmea_scan+0x672>

            case '_': { // Ignore the field.
            } break;
 8009100:	bf00      	nop
            default: { // Unknown.
                goto parse_error;
            }
        }

        next_field();
 8009102:	e002      	b.n	800910a <minmea_scan+0x67a>
 8009104:	9b01      	ldr	r3, [sp, #4]
 8009106:	3301      	adds	r3, #1
 8009108:	9301      	str	r3, [sp, #4]
 800910a:	9b01      	ldr	r3, [sp, #4]
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	4618      	mov	r0, r3
 8009110:	f7ff fc96 	bl	8008a40 <minmea_isfield>
 8009114:	4603      	mov	r3, r0
 8009116:	2b00      	cmp	r3, #0
 8009118:	d1f4      	bne.n	8009104 <minmea_scan+0x674>
 800911a:	9b01      	ldr	r3, [sp, #4]
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	2b2c      	cmp	r3, #44	; 0x2c
 8009120:	d105      	bne.n	800912e <minmea_scan+0x69e>
 8009122:	9b01      	ldr	r3, [sp, #4]
 8009124:	3301      	adds	r3, #1
 8009126:	9301      	str	r3, [sp, #4]
 8009128:	9b01      	ldr	r3, [sp, #4]
 800912a:	9324      	str	r3, [sp, #144]	; 0x90
 800912c:	e001      	b.n	8009132 <minmea_scan+0x6a2>
 800912e:	2300      	movs	r3, #0
 8009130:	9324      	str	r3, [sp, #144]	; 0x90
    while (*format) {
 8009132:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8009134:	781b      	ldrb	r3, [r3, #0]
 8009136:	2b00      	cmp	r3, #0
 8009138:	f47f acb9 	bne.w	8008aae <minmea_scan+0x1e>
    }

    result = true;
 800913c:	2301      	movs	r3, #1
 800913e:	f88d 3097 	strb.w	r3, [sp, #151]	; 0x97
 8009142:	e018      	b.n	8009176 <minmea_scan+0x6e6>
            goto parse_error;
 8009144:	bf00      	nop
 8009146:	e016      	b.n	8009176 <minmea_scan+0x6e6>
                goto parse_error;
 8009148:	bf00      	nop
 800914a:	e014      	b.n	8009176 <minmea_scan+0x6e6>
                            goto parse_error;
 800914c:	bf00      	nop
 800914e:	e012      	b.n	8009176 <minmea_scan+0x6e6>
                                    goto parse_error;
 8009150:	bf00      	nop
 8009152:	e010      	b.n	8009176 <minmea_scan+0x6e6>
                            goto parse_error;
 8009154:	bf00      	nop
 8009156:	e00e      	b.n	8009176 <minmea_scan+0x6e6>
                                goto parse_error;
 8009158:	bf00      	nop
 800915a:	e00c      	b.n	8009176 <minmea_scan+0x6e6>
                    goto parse_error;
 800915c:	bf00      	nop
 800915e:	e00a      	b.n	8009176 <minmea_scan+0x6e6>
                        goto parse_error;
 8009160:	bf00      	nop
 8009162:	e008      	b.n	8009176 <minmea_scan+0x6e6>
                    goto parse_error;
 8009164:	bf00      	nop
 8009166:	e006      	b.n	8009176 <minmea_scan+0x6e6>
                    goto parse_error;
 8009168:	bf00      	nop
 800916a:	e004      	b.n	8009176 <minmea_scan+0x6e6>
                        goto parse_error;
 800916c:	bf00      	nop
 800916e:	e002      	b.n	8009176 <minmea_scan+0x6e6>
                            goto parse_error;
 8009170:	bf00      	nop
 8009172:	e000      	b.n	8009176 <minmea_scan+0x6e6>
                            goto parse_error;
 8009174:	bf00      	nop

parse_error:
    va_end(ap);
    return result;
 8009176:	f89d 3097 	ldrb.w	r3, [sp, #151]	; 0x97
 800917a:	bf00      	nop
}
 800917c:	4618      	mov	r0, r3
 800917e:	b026      	add	sp, #152	; 0x98
 8009180:	f85d eb04 	ldr.w	lr, [sp], #4
 8009184:	b003      	add	sp, #12
 8009186:	4770      	bx	lr
 8009188:	0800f510 	.word	0x0800f510
 800918c:	000f4240 	.word	0x000f4240
 8009190:	cccccccd 	.word	0xcccccccd
	...

080091a0 <minmea_sentence_id>:

    return true;
}

enum minmea_sentence_id minmea_sentence_id(const char *sentence, bool strict)
{
 80091a0:	b500      	push	{lr}
 80091a2:	b09d      	sub	sp, #116	; 0x74
 80091a4:	9001      	str	r0, [sp, #4]
 80091a6:	460b      	mov	r3, r1
 80091a8:	f88d 3003 	strb.w	r3, [sp, #3]
   char buffer[100];

    if (!minmea_check(sentence, strict))
 80091ac:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80091b0:	4619      	mov	r1, r3
 80091b2:	9801      	ldr	r0, [sp, #4]
 80091b4:	f7ff fbb4 	bl	8008920 <minmea_check>
 80091b8:	4603      	mov	r3, r0
 80091ba:	f083 0301 	eor.w	r3, r3, #1
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d002      	beq.n	80091ca <minmea_sentence_id+0x2a>
        return MINMEA_INVALID;
 80091c4:	f04f 33ff 	mov.w	r3, #4294967295
 80091c8:	e069      	b.n	800929e <minmea_sentence_id+0xfe>

 //char type[6];
    if (!minmea_scan(sentence, "t", buffer))
 80091ca:	ab03      	add	r3, sp, #12
 80091cc:	461a      	mov	r2, r3
 80091ce:	4936      	ldr	r1, [pc, #216]	; (80092a8 <minmea_sentence_id+0x108>)
 80091d0:	9801      	ldr	r0, [sp, #4]
 80091d2:	f7ff fc5d 	bl	8008a90 <minmea_scan>
 80091d6:	4603      	mov	r3, r0
 80091d8:	f083 0301 	eor.w	r3, r3, #1
 80091dc:	b2db      	uxtb	r3, r3
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d002      	beq.n	80091e8 <minmea_sentence_id+0x48>
       return MINMEA_INVALID;
 80091e2:	f04f 33ff 	mov.w	r3, #4294967295
 80091e6:	e05a      	b.n	800929e <minmea_sentence_id+0xfe>


    if (!strcmp(buffer +2, "RMC"))
 80091e8:	ab03      	add	r3, sp, #12
 80091ea:	3302      	adds	r3, #2
 80091ec:	492f      	ldr	r1, [pc, #188]	; (80092ac <minmea_sentence_id+0x10c>)
 80091ee:	4618      	mov	r0, r3
 80091f0:	f7f8 f88a 	bl	8001308 <strcmp>
 80091f4:	4603      	mov	r3, r0
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d101      	bne.n	80091fe <minmea_sentence_id+0x5e>
        return MINMEA_SENTENCE_RMC;
 80091fa:	2301      	movs	r3, #1
 80091fc:	e04f      	b.n	800929e <minmea_sentence_id+0xfe>
    if (!strcmp(buffer +2, "GGA"))
 80091fe:	ab03      	add	r3, sp, #12
 8009200:	3302      	adds	r3, #2
 8009202:	492b      	ldr	r1, [pc, #172]	; (80092b0 <minmea_sentence_id+0x110>)
 8009204:	4618      	mov	r0, r3
 8009206:	f7f8 f87f 	bl	8001308 <strcmp>
 800920a:	4603      	mov	r3, r0
 800920c:	2b00      	cmp	r3, #0
 800920e:	d101      	bne.n	8009214 <minmea_sentence_id+0x74>
        return MINMEA_SENTENCE_GGA;
 8009210:	2302      	movs	r3, #2
 8009212:	e044      	b.n	800929e <minmea_sentence_id+0xfe>
    if (!strcmp(buffer +2, "GSA"))
 8009214:	ab03      	add	r3, sp, #12
 8009216:	3302      	adds	r3, #2
 8009218:	4926      	ldr	r1, [pc, #152]	; (80092b4 <minmea_sentence_id+0x114>)
 800921a:	4618      	mov	r0, r3
 800921c:	f7f8 f874 	bl	8001308 <strcmp>
 8009220:	4603      	mov	r3, r0
 8009222:	2b00      	cmp	r3, #0
 8009224:	d101      	bne.n	800922a <minmea_sentence_id+0x8a>
        return MINMEA_SENTENCE_GSA;
 8009226:	2303      	movs	r3, #3
 8009228:	e039      	b.n	800929e <minmea_sentence_id+0xfe>
    if (!strcmp(buffer +2, "GLL"))
 800922a:	ab03      	add	r3, sp, #12
 800922c:	3302      	adds	r3, #2
 800922e:	4922      	ldr	r1, [pc, #136]	; (80092b8 <minmea_sentence_id+0x118>)
 8009230:	4618      	mov	r0, r3
 8009232:	f7f8 f869 	bl	8001308 <strcmp>
 8009236:	4603      	mov	r3, r0
 8009238:	2b00      	cmp	r3, #0
 800923a:	d101      	bne.n	8009240 <minmea_sentence_id+0xa0>
        return MINMEA_SENTENCE_GLL;
 800923c:	2304      	movs	r3, #4
 800923e:	e02e      	b.n	800929e <minmea_sentence_id+0xfe>
    if (!strcmp(buffer +2, "GST"))
 8009240:	ab03      	add	r3, sp, #12
 8009242:	3302      	adds	r3, #2
 8009244:	491d      	ldr	r1, [pc, #116]	; (80092bc <minmea_sentence_id+0x11c>)
 8009246:	4618      	mov	r0, r3
 8009248:	f7f8 f85e 	bl	8001308 <strcmp>
 800924c:	4603      	mov	r3, r0
 800924e:	2b00      	cmp	r3, #0
 8009250:	d101      	bne.n	8009256 <minmea_sentence_id+0xb6>
        return MINMEA_SENTENCE_GST;
 8009252:	2305      	movs	r3, #5
 8009254:	e023      	b.n	800929e <minmea_sentence_id+0xfe>
    if (!strcmp(buffer +2, "GSV"))
 8009256:	ab03      	add	r3, sp, #12
 8009258:	3302      	adds	r3, #2
 800925a:	4919      	ldr	r1, [pc, #100]	; (80092c0 <minmea_sentence_id+0x120>)
 800925c:	4618      	mov	r0, r3
 800925e:	f7f8 f853 	bl	8001308 <strcmp>
 8009262:	4603      	mov	r3, r0
 8009264:	2b00      	cmp	r3, #0
 8009266:	d101      	bne.n	800926c <minmea_sentence_id+0xcc>
        return MINMEA_SENTENCE_GSV;
 8009268:	2306      	movs	r3, #6
 800926a:	e018      	b.n	800929e <minmea_sentence_id+0xfe>
    if (!strcmp(buffer +2, "VTG"))
 800926c:	ab03      	add	r3, sp, #12
 800926e:	3302      	adds	r3, #2
 8009270:	4914      	ldr	r1, [pc, #80]	; (80092c4 <minmea_sentence_id+0x124>)
 8009272:	4618      	mov	r0, r3
 8009274:	f7f8 f848 	bl	8001308 <strcmp>
 8009278:	4603      	mov	r3, r0
 800927a:	2b00      	cmp	r3, #0
 800927c:	d101      	bne.n	8009282 <minmea_sentence_id+0xe2>
        return MINMEA_SENTENCE_VTG;
 800927e:	2307      	movs	r3, #7
 8009280:	e00d      	b.n	800929e <minmea_sentence_id+0xfe>
    if (!strcmp(buffer +2, "ZDA"))
 8009282:	ab03      	add	r3, sp, #12
 8009284:	3302      	adds	r3, #2
 8009286:	4910      	ldr	r1, [pc, #64]	; (80092c8 <minmea_sentence_id+0x128>)
 8009288:	4618      	mov	r0, r3
 800928a:	f7f8 f83d 	bl	8001308 <strcmp>
 800928e:	4603      	mov	r3, r0
 8009290:	2b00      	cmp	r3, #0
 8009292:	d101      	bne.n	8009298 <minmea_sentence_id+0xf8>
        return MINMEA_SENTENCE_ZDA;
 8009294:	2308      	movs	r3, #8
 8009296:	e002      	b.n	800929e <minmea_sentence_id+0xfe>

    return MINMEA_INVALID;
 8009298:	f04f 33ff 	mov.w	r3, #4294967295
 800929c:	bf00      	nop
}
 800929e:	4618      	mov	r0, r3
 80092a0:	b01d      	add	sp, #116	; 0x74
 80092a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80092a6:	bf00      	nop
 80092a8:	0800efa0 	.word	0x0800efa0
 80092ac:	0800efa4 	.word	0x0800efa4
 80092b0:	0800efa8 	.word	0x0800efa8
 80092b4:	0800efac 	.word	0x0800efac
 80092b8:	0800efb0 	.word	0x0800efb0
 80092bc:	0800efb4 	.word	0x0800efb4
 80092c0:	0800efb8 	.word	0x0800efb8
 80092c4:	0800efbc 	.word	0x0800efbc
 80092c8:	0800efc0 	.word	0x0800efc0
 80092cc:	00000000 	.word	0x00000000

080092d0 <minmea_parse_rmc>:

bool minmea_parse_rmc(struct minmea_sentence_rmc *frame, const char *sentence)
{
 80092d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092d2:	b095      	sub	sp, #84	; 0x54
 80092d4:	900d      	str	r0, [sp, #52]	; 0x34
 80092d6:	910c      	str	r1, [sp, #48]	; 0x30
    char type[6];
    char validity;
    int latitude_direction;
    int longitude_direction;
    int variation_direction;
    if (!minmea_scan(sentence, "tTcfdfdffDfd",
 80092d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092da:	930b      	str	r3, [sp, #44]	; 0x2c
 80092dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092de:	3314      	adds	r3, #20
 80092e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80092e2:	321c      	adds	r2, #28
 80092e4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80092e6:	3124      	adds	r1, #36	; 0x24
 80092e8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80092ea:	302c      	adds	r0, #44	; 0x2c
 80092ec:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80092ee:	3434      	adds	r4, #52	; 0x34
 80092f0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80092f2:	3540      	adds	r5, #64	; 0x40
 80092f4:	af12      	add	r7, sp, #72	; 0x48
 80092f6:	ae0e      	add	r6, sp, #56	; 0x38
 80092f8:	9609      	str	r6, [sp, #36]	; 0x24
 80092fa:	9508      	str	r5, [sp, #32]
 80092fc:	9407      	str	r4, [sp, #28]
 80092fe:	9006      	str	r0, [sp, #24]
 8009300:	9105      	str	r1, [sp, #20]
 8009302:	a90f      	add	r1, sp, #60	; 0x3c
 8009304:	9104      	str	r1, [sp, #16]
 8009306:	9203      	str	r2, [sp, #12]
 8009308:	aa10      	add	r2, sp, #64	; 0x40
 800930a:	9202      	str	r2, [sp, #8]
 800930c:	9301      	str	r3, [sp, #4]
 800930e:	f10d 0347 	add.w	r3, sp, #71	; 0x47
 8009312:	9300      	str	r3, [sp, #0]
 8009314:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009316:	463a      	mov	r2, r7
 8009318:	491d      	ldr	r1, [pc, #116]	; (8009390 <minmea_parse_rmc+0xc0>)
 800931a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800931c:	f7ff fbb8 	bl	8008a90 <minmea_scan>
 8009320:	4603      	mov	r3, r0
 8009322:	f083 0301 	eor.w	r3, r3, #1
 8009326:	b2db      	uxtb	r3, r3
 8009328:	2b00      	cmp	r3, #0
 800932a:	d001      	beq.n	8009330 <minmea_parse_rmc+0x60>
            &frame->longitude, &longitude_direction,
            &frame->speed,
            &frame->course,
            &frame->date,
            &frame->variation, &variation_direction))
        return false;
 800932c:	2300      	movs	r3, #0
 800932e:	e02b      	b.n	8009388 <minmea_parse_rmc+0xb8>
    if (strncmp(sentence +3, "RMC",3))
 8009330:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009332:	3303      	adds	r3, #3
 8009334:	2203      	movs	r2, #3
 8009336:	4917      	ldr	r1, [pc, #92]	; (8009394 <minmea_parse_rmc+0xc4>)
 8009338:	4618      	mov	r0, r3
 800933a:	f005 fb5d 	bl	800e9f8 <strncmp>
 800933e:	4603      	mov	r3, r0
 8009340:	2b00      	cmp	r3, #0
 8009342:	d001      	beq.n	8009348 <minmea_parse_rmc+0x78>
        return false;
 8009344:	2300      	movs	r3, #0
 8009346:	e01f      	b.n	8009388 <minmea_parse_rmc+0xb8>

    frame->valid = (validity == 'A');
 8009348:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
 800934c:	2b41      	cmp	r3, #65	; 0x41
 800934e:	bf0c      	ite	eq
 8009350:	2301      	moveq	r3, #1
 8009352:	2300      	movne	r3, #0
 8009354:	b2da      	uxtb	r2, r3
 8009356:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009358:	741a      	strb	r2, [r3, #16]
    frame->latitude.value *= latitude_direction;
 800935a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800935c:	695b      	ldr	r3, [r3, #20]
 800935e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009360:	fb03 f202 	mul.w	r2, r3, r2
 8009364:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009366:	615a      	str	r2, [r3, #20]
    frame->longitude.value *= longitude_direction;
 8009368:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800936a:	69db      	ldr	r3, [r3, #28]
 800936c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800936e:	fb03 f202 	mul.w	r2, r3, r2
 8009372:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009374:	61da      	str	r2, [r3, #28]
    frame->variation.value *= variation_direction;
 8009376:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800937a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800937c:	fb03 f202 	mul.w	r2, r3, r2
 8009380:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009382:	641a      	str	r2, [r3, #64]	; 0x40

    return true;
 8009384:	2301      	movs	r3, #1
 8009386:	bf00      	nop
}
 8009388:	4618      	mov	r0, r3
 800938a:	b015      	add	sp, #84	; 0x54
 800938c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800938e:	bf00      	nop
 8009390:	0800efc4 	.word	0x0800efc4
 8009394:	0800efa4 	.word	0x0800efa4
	...

080093a0 <FusionDegreesToRadians>:
/**
 * @brief Converts degrees to radians.
 * @param degrees Degrees.
 * @return Radians.
 */
static inline float FusionDegreesToRadians(const float degrees) {
 80093a0:	b500      	push	{lr}
 80093a2:	b083      	sub	sp, #12
 80093a4:	9001      	str	r0, [sp, #4]
    return degrees * ((float) M_PI / 180.0f);
 80093a6:	4904      	ldr	r1, [pc, #16]	; (80093b8 <FusionDegreesToRadians+0x18>)
 80093a8:	9801      	ldr	r0, [sp, #4]
 80093aa:	f7f7 fc8b 	bl	8000cc4 <__aeabi_fmul>
 80093ae:	4603      	mov	r3, r0
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	b003      	add	sp, #12
 80093b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80093b8:	3c8efa35 	.word	0x3c8efa35
 80093bc:	00000000 	.word	0x00000000

080093c0 <FusionFastInverseSqrt.lto_priv.0>:
 * @brief Calculates the reciprocal of the square root.
 * See https://pizer.wordpress.com/2008/10/12/fast-inverse-square-root/
 * @param x Operand.
 * @return Reciprocal of the square root of x.
 */
static inline float FusionFastInverseSqrt(const float x) {
 80093c0:	b510      	push	{r4, lr}
 80093c2:	b084      	sub	sp, #16
 80093c4:	9001      	str	r0, [sp, #4]
    typedef union {
        float f;
        int32_t i;
    } Union32;

    Union32 union32 = {.f = x};
 80093c6:	9b01      	ldr	r3, [sp, #4]
 80093c8:	9303      	str	r3, [sp, #12]
    union32.i = 0x5F1F1412 - (union32.i >> 1);
 80093ca:	9b03      	ldr	r3, [sp, #12]
 80093cc:	105a      	asrs	r2, r3, #1
 80093ce:	4b12      	ldr	r3, [pc, #72]	; (8009418 <FusionFastInverseSqrt.lto_priv.0+0x58>)
 80093d0:	1a9b      	subs	r3, r3, r2
 80093d2:	9303      	str	r3, [sp, #12]
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 80093d4:	9c03      	ldr	r4, [sp, #12]
 80093d6:	4911      	ldr	r1, [pc, #68]	; (800941c <FusionFastInverseSqrt.lto_priv.0+0x5c>)
 80093d8:	9801      	ldr	r0, [sp, #4]
 80093da:	f7f7 fc73 	bl	8000cc4 <__aeabi_fmul>
 80093de:	4603      	mov	r3, r0
 80093e0:	461a      	mov	r2, r3
 80093e2:	9b03      	ldr	r3, [sp, #12]
 80093e4:	4619      	mov	r1, r3
 80093e6:	4610      	mov	r0, r2
 80093e8:	f7f7 fc6c 	bl	8000cc4 <__aeabi_fmul>
 80093ec:	4603      	mov	r3, r0
 80093ee:	461a      	mov	r2, r3
 80093f0:	9b03      	ldr	r3, [sp, #12]
 80093f2:	4619      	mov	r1, r3
 80093f4:	4610      	mov	r0, r2
 80093f6:	f7f7 fc65 	bl	8000cc4 <__aeabi_fmul>
 80093fa:	4603      	mov	r3, r0
 80093fc:	4619      	mov	r1, r3
 80093fe:	4808      	ldr	r0, [pc, #32]	; (8009420 <FusionFastInverseSqrt.lto_priv.0+0x60>)
 8009400:	f7f7 fb56 	bl	8000ab0 <__aeabi_fsub>
 8009404:	4603      	mov	r3, r0
 8009406:	4619      	mov	r1, r3
 8009408:	4620      	mov	r0, r4
 800940a:	f7f7 fc5b 	bl	8000cc4 <__aeabi_fmul>
 800940e:	4603      	mov	r3, r0
}
 8009410:	4618      	mov	r0, r3
 8009412:	b004      	add	sp, #16
 8009414:	bd10      	pop	{r4, pc}
 8009416:	bf00      	nop
 8009418:	5f1f1412 	.word	0x5f1f1412
 800941c:	3f36d312 	.word	0x3f36d312
 8009420:	3fd851ff 	.word	0x3fd851ff
	...

08009430 <FusionVectorIsZero>:
/**
 * @brief Returns true if the vector is zero.
 * @param vector Vector.
 * @return True if the vector is zero.
 */
static inline bool FusionVectorIsZero(const FusionVector vector) {
 8009430:	b500      	push	{lr}
 8009432:	b085      	sub	sp, #20
 8009434:	ab01      	add	r3, sp, #4
 8009436:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
 800943a:	9b01      	ldr	r3, [sp, #4]
 800943c:	f04f 0100 	mov.w	r1, #0
 8009440:	4618      	mov	r0, r3
 8009442:	f7f7 fdd3 	bl	8000fec <__aeabi_fcmpeq>
 8009446:	4603      	mov	r3, r0
 8009448:	2b00      	cmp	r3, #0
 800944a:	d013      	beq.n	8009474 <FusionVectorIsZero+0x44>
 800944c:	9b02      	ldr	r3, [sp, #8]
 800944e:	f04f 0100 	mov.w	r1, #0
 8009452:	4618      	mov	r0, r3
 8009454:	f7f7 fdca 	bl	8000fec <__aeabi_fcmpeq>
 8009458:	4603      	mov	r3, r0
 800945a:	2b00      	cmp	r3, #0
 800945c:	d00a      	beq.n	8009474 <FusionVectorIsZero+0x44>
 800945e:	9b03      	ldr	r3, [sp, #12]
 8009460:	f04f 0100 	mov.w	r1, #0
 8009464:	4618      	mov	r0, r3
 8009466:	f7f7 fdc1 	bl	8000fec <__aeabi_fcmpeq>
 800946a:	4603      	mov	r3, r0
 800946c:	2b00      	cmp	r3, #0
 800946e:	d001      	beq.n	8009474 <FusionVectorIsZero+0x44>
 8009470:	2301      	movs	r3, #1
 8009472:	e000      	b.n	8009476 <FusionVectorIsZero+0x46>
 8009474:	2300      	movs	r3, #0
 8009476:	f003 0301 	and.w	r3, r3, #1
 800947a:	b2db      	uxtb	r3, r3
}
 800947c:	4618      	mov	r0, r3
 800947e:	b005      	add	sp, #20
 8009480:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08009490 <FusionVectorAdd.lto_priv.0>:
 * @brief Returns the sum of two vectors.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Sum of two vectors.
 */
static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) {
 8009490:	b510      	push	{r4, lr}
 8009492:	b088      	sub	sp, #32
 8009494:	9003      	str	r0, [sp, #12]
 8009496:	4668      	mov	r0, sp
 8009498:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    FusionVector result;
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
 800949c:	9b00      	ldr	r3, [sp, #0]
 800949e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094a0:	4611      	mov	r1, r2
 80094a2:	4618      	mov	r0, r3
 80094a4:	f7f7 fb06 	bl	8000ab4 <__addsf3>
 80094a8:	4603      	mov	r3, r0
 80094aa:	9305      	str	r3, [sp, #20]
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
 80094ac:	9b01      	ldr	r3, [sp, #4]
 80094ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80094b0:	4611      	mov	r1, r2
 80094b2:	4618      	mov	r0, r3
 80094b4:	f7f7 fafe 	bl	8000ab4 <__addsf3>
 80094b8:	4603      	mov	r3, r0
 80094ba:	9306      	str	r3, [sp, #24]
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
 80094bc:	9b02      	ldr	r3, [sp, #8]
 80094be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80094c0:	4611      	mov	r1, r2
 80094c2:	4618      	mov	r0, r3
 80094c4:	f7f7 faf6 	bl	8000ab4 <__addsf3>
 80094c8:	4603      	mov	r3, r0
 80094ca:	9307      	str	r3, [sp, #28]
    return result;
 80094cc:	9b03      	ldr	r3, [sp, #12]
 80094ce:	461c      	mov	r4, r3
 80094d0:	ab05      	add	r3, sp, #20
 80094d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80094d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80094da:	9803      	ldr	r0, [sp, #12]
 80094dc:	b008      	add	sp, #32
 80094de:	bd10      	pop	{r4, pc}

080094e0 <FusionVectorSum.lto_priv.0>:
/**
 * @brief Returns the sum of the elements.
 * @param vector Vector.
 * @return Sum of the elements.
 */
static inline float FusionVectorSum(const FusionVector vector) {
 80094e0:	b500      	push	{lr}
 80094e2:	b085      	sub	sp, #20
 80094e4:	ab01      	add	r3, sp, #4
 80094e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return vector.axis.x + vector.axis.y + vector.axis.z;
 80094ea:	9b01      	ldr	r3, [sp, #4]
 80094ec:	9a02      	ldr	r2, [sp, #8]
 80094ee:	4611      	mov	r1, r2
 80094f0:	4618      	mov	r0, r3
 80094f2:	f7f7 fadf 	bl	8000ab4 <__addsf3>
 80094f6:	4603      	mov	r3, r0
 80094f8:	461a      	mov	r2, r3
 80094fa:	9b03      	ldr	r3, [sp, #12]
 80094fc:	4619      	mov	r1, r3
 80094fe:	4610      	mov	r0, r2
 8009500:	f7f7 fad8 	bl	8000ab4 <__addsf3>
 8009504:	4603      	mov	r3, r0
}
 8009506:	4618      	mov	r0, r3
 8009508:	b005      	add	sp, #20
 800950a:	f85d fb04 	ldr.w	pc, [sp], #4
 800950e:	bf00      	nop

08009510 <FusionVectorMultiplyScalar.lto_priv.0>:
 * @brief Returns the multiplication of a vector by a scalar.
 * @param vector Vector.
 * @param scalar Scalar.
 * @return Multiplication of a vector by a scalar.
 */
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 8009510:	b510      	push	{r4, lr}
 8009512:	b088      	sub	sp, #32
 8009514:	9003      	str	r0, [sp, #12]
 8009516:	4668      	mov	r0, sp
 8009518:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    FusionVector result;
    result.axis.x = vector.axis.x * scalar;
 800951c:	9b00      	ldr	r3, [sp, #0]
 800951e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009520:	4618      	mov	r0, r3
 8009522:	f7f7 fbcf 	bl	8000cc4 <__aeabi_fmul>
 8009526:	4603      	mov	r3, r0
 8009528:	9305      	str	r3, [sp, #20]
    result.axis.y = vector.axis.y * scalar;
 800952a:	9b01      	ldr	r3, [sp, #4]
 800952c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800952e:	4618      	mov	r0, r3
 8009530:	f7f7 fbc8 	bl	8000cc4 <__aeabi_fmul>
 8009534:	4603      	mov	r3, r0
 8009536:	9306      	str	r3, [sp, #24]
    result.axis.z = vector.axis.z * scalar;
 8009538:	9b02      	ldr	r3, [sp, #8]
 800953a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800953c:	4618      	mov	r0, r3
 800953e:	f7f7 fbc1 	bl	8000cc4 <__aeabi_fmul>
 8009542:	4603      	mov	r3, r0
 8009544:	9307      	str	r3, [sp, #28]
    return result;
 8009546:	9b03      	ldr	r3, [sp, #12]
 8009548:	461c      	mov	r4, r3
 800954a:	ab05      	add	r3, sp, #20
 800954c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009550:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009554:	9803      	ldr	r0, [sp, #12]
 8009556:	b008      	add	sp, #32
 8009558:	bd10      	pop	{r4, pc}
 800955a:	bf00      	nop
 800955c:	0000      	movs	r0, r0
	...

08009560 <FusionVectorHadamardProduct.lto_priv.0>:
 * @brief Calculates the Hadamard product (element-wise multiplication).
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Hadamard product.
 */
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8009560:	b510      	push	{r4, lr}
 8009562:	b088      	sub	sp, #32
 8009564:	9003      	str	r0, [sp, #12]
 8009566:	4668      	mov	r0, sp
 8009568:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    FusionVector result;
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
 800956c:	9b00      	ldr	r3, [sp, #0]
 800956e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009570:	4611      	mov	r1, r2
 8009572:	4618      	mov	r0, r3
 8009574:	f7f7 fba6 	bl	8000cc4 <__aeabi_fmul>
 8009578:	4603      	mov	r3, r0
 800957a:	9305      	str	r3, [sp, #20]
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
 800957c:	9b01      	ldr	r3, [sp, #4]
 800957e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009580:	4611      	mov	r1, r2
 8009582:	4618      	mov	r0, r3
 8009584:	f7f7 fb9e 	bl	8000cc4 <__aeabi_fmul>
 8009588:	4603      	mov	r3, r0
 800958a:	9306      	str	r3, [sp, #24]
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
 800958c:	9b02      	ldr	r3, [sp, #8]
 800958e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009590:	4611      	mov	r1, r2
 8009592:	4618      	mov	r0, r3
 8009594:	f7f7 fb96 	bl	8000cc4 <__aeabi_fmul>
 8009598:	4603      	mov	r3, r0
 800959a:	9307      	str	r3, [sp, #28]
    return result;
 800959c:	9b03      	ldr	r3, [sp, #12]
 800959e:	461c      	mov	r4, r3
 80095a0:	ab05      	add	r3, sp, #20
 80095a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80095a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80095aa:	9803      	ldr	r0, [sp, #12]
 80095ac:	b008      	add	sp, #32
 80095ae:	bd10      	pop	{r4, pc}

080095b0 <FusionVectorCrossProduct.lto_priv.0>:
 * @brief Returns the cross product.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Cross product.
 */
static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector vectorB) {
 80095b0:	b510      	push	{r4, lr}
 80095b2:	b088      	sub	sp, #32
 80095b4:	9003      	str	r0, [sp, #12]
 80095b6:	4668      	mov	r0, sp
 80095b8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
#define A vectorA.axis
#define B vectorB.axis
    FusionVector result;
    result.axis.x = A.y * B.z - A.z * B.y;
 80095bc:	9b01      	ldr	r3, [sp, #4]
 80095be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80095c0:	4611      	mov	r1, r2
 80095c2:	4618      	mov	r0, r3
 80095c4:	f7f7 fb7e 	bl	8000cc4 <__aeabi_fmul>
 80095c8:	4603      	mov	r3, r0
 80095ca:	461c      	mov	r4, r3
 80095cc:	9b02      	ldr	r3, [sp, #8]
 80095ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80095d0:	4611      	mov	r1, r2
 80095d2:	4618      	mov	r0, r3
 80095d4:	f7f7 fb76 	bl	8000cc4 <__aeabi_fmul>
 80095d8:	4603      	mov	r3, r0
 80095da:	4619      	mov	r1, r3
 80095dc:	4620      	mov	r0, r4
 80095de:	f7f7 fa67 	bl	8000ab0 <__aeabi_fsub>
 80095e2:	4603      	mov	r3, r0
 80095e4:	9305      	str	r3, [sp, #20]
    result.axis.y = A.z * B.x - A.x * B.z;
 80095e6:	9b02      	ldr	r3, [sp, #8]
 80095e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095ea:	4611      	mov	r1, r2
 80095ec:	4618      	mov	r0, r3
 80095ee:	f7f7 fb69 	bl	8000cc4 <__aeabi_fmul>
 80095f2:	4603      	mov	r3, r0
 80095f4:	461c      	mov	r4, r3
 80095f6:	9b00      	ldr	r3, [sp, #0]
 80095f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80095fa:	4611      	mov	r1, r2
 80095fc:	4618      	mov	r0, r3
 80095fe:	f7f7 fb61 	bl	8000cc4 <__aeabi_fmul>
 8009602:	4603      	mov	r3, r0
 8009604:	4619      	mov	r1, r3
 8009606:	4620      	mov	r0, r4
 8009608:	f7f7 fa52 	bl	8000ab0 <__aeabi_fsub>
 800960c:	4603      	mov	r3, r0
 800960e:	9306      	str	r3, [sp, #24]
    result.axis.z = A.x * B.y - A.y * B.x;
 8009610:	9b00      	ldr	r3, [sp, #0]
 8009612:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009614:	4611      	mov	r1, r2
 8009616:	4618      	mov	r0, r3
 8009618:	f7f7 fb54 	bl	8000cc4 <__aeabi_fmul>
 800961c:	4603      	mov	r3, r0
 800961e:	461c      	mov	r4, r3
 8009620:	9b01      	ldr	r3, [sp, #4]
 8009622:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009624:	4611      	mov	r1, r2
 8009626:	4618      	mov	r0, r3
 8009628:	f7f7 fb4c 	bl	8000cc4 <__aeabi_fmul>
 800962c:	4603      	mov	r3, r0
 800962e:	4619      	mov	r1, r3
 8009630:	4620      	mov	r0, r4
 8009632:	f7f7 fa3d 	bl	8000ab0 <__aeabi_fsub>
 8009636:	4603      	mov	r3, r0
 8009638:	9307      	str	r3, [sp, #28]
    return result;
 800963a:	9b03      	ldr	r3, [sp, #12]
 800963c:	461c      	mov	r4, r3
 800963e:	ab05      	add	r3, sp, #20
 8009640:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009644:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#undef A
#undef B
}
 8009648:	9803      	ldr	r0, [sp, #12]
 800964a:	b008      	add	sp, #32
 800964c:	bd10      	pop	{r4, pc}
 800964e:	bf00      	nop

08009650 <FusionVectorMagnitudeSquared.lto_priv.0>:
/**
 * @brief Returns the vector magnitude squared.
 * @param vector Vector.
 * @return Vector magnitude squared.
 */
static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 8009650:	b530      	push	{r4, r5, lr}
 8009652:	b08d      	sub	sp, #52	; 0x34
 8009654:	ab05      	add	r3, sp, #20
 8009656:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 800965a:	ad09      	add	r5, sp, #36	; 0x24
 800965c:	466c      	mov	r4, sp
 800965e:	ab05      	add	r3, sp, #20
 8009660:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009664:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009668:	ab05      	add	r3, sp, #20
 800966a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800966c:	4628      	mov	r0, r5
 800966e:	f7ff ff77 	bl	8009560 <FusionVectorHadamardProduct.lto_priv.0>
 8009672:	ab09      	add	r3, sp, #36	; 0x24
 8009674:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009678:	f7ff ff32 	bl	80094e0 <FusionVectorSum.lto_priv.0>
 800967c:	4603      	mov	r3, r0
}
 800967e:	4618      	mov	r0, r3
 8009680:	b00d      	add	sp, #52	; 0x34
 8009682:	bd30      	pop	{r4, r5, pc}
	...

08009690 <FusionVectorNormalise.lto_priv.0>:
/**
 * @brief Returns the normalised vector.
 * @param vector Vector.
 * @return Normalised vector.
 */
static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 8009690:	b500      	push	{lr}
 8009692:	b089      	sub	sp, #36	; 0x24
 8009694:	9005      	str	r0, [sp, #20]
 8009696:	a802      	add	r0, sp, #8
 8009698:	e880 000e 	stmia.w	r0, {r1, r2, r3}
#ifdef FUSION_USE_NORMAL_SQRT
    const float magnitudeReciprocal = 1.0f / sqrtf(FusionVectorMagnitudeSquared(vector));
#else
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 800969c:	ab02      	add	r3, sp, #8
 800969e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80096a2:	f7ff ffd5 	bl	8009650 <FusionVectorMagnitudeSquared.lto_priv.0>
 80096a6:	4603      	mov	r3, r0
 80096a8:	4618      	mov	r0, r3
 80096aa:	f7ff fe89 	bl	80093c0 <FusionFastInverseSqrt.lto_priv.0>
 80096ae:	9007      	str	r0, [sp, #28]
#endif
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 80096b0:	9805      	ldr	r0, [sp, #20]
 80096b2:	9b07      	ldr	r3, [sp, #28]
 80096b4:	9300      	str	r3, [sp, #0]
 80096b6:	ab02      	add	r3, sp, #8
 80096b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80096ba:	f7ff ff29 	bl	8009510 <FusionVectorMultiplyScalar.lto_priv.0>
}
 80096be:	9805      	ldr	r0, [sp, #20]
 80096c0:	b009      	add	sp, #36	; 0x24
 80096c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80096c6:	bf00      	nop
	...

080096d0 <FusionQuaternionAdd>:
 * @brief Returns the sum of two quaternions.
 * @param quaternionA Quaternion A.
 * @param quaternionB Quaternion B.
 * @return Sum of two quaternions.
 */
static inline FusionQuaternion FusionQuaternionAdd(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 80096d0:	b084      	sub	sp, #16
 80096d2:	b510      	push	{r4, lr}
 80096d4:	b086      	sub	sp, #24
 80096d6:	9001      	str	r0, [sp, #4]
 80096d8:	a809      	add	r0, sp, #36	; 0x24
 80096da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    FusionQuaternion result;
    result.element.w = quaternionA.element.w + quaternionB.element.w;
 80096de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80096e2:	4611      	mov	r1, r2
 80096e4:	4618      	mov	r0, r3
 80096e6:	f7f7 f9e5 	bl	8000ab4 <__addsf3>
 80096ea:	4603      	mov	r3, r0
 80096ec:	9302      	str	r3, [sp, #8]
    result.element.x = quaternionA.element.x + quaternionB.element.x;
 80096ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80096f2:	4611      	mov	r1, r2
 80096f4:	4618      	mov	r0, r3
 80096f6:	f7f7 f9dd 	bl	8000ab4 <__addsf3>
 80096fa:	4603      	mov	r3, r0
 80096fc:	9303      	str	r3, [sp, #12]
    result.element.y = quaternionA.element.y + quaternionB.element.y;
 80096fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009700:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009702:	4611      	mov	r1, r2
 8009704:	4618      	mov	r0, r3
 8009706:	f7f7 f9d5 	bl	8000ab4 <__addsf3>
 800970a:	4603      	mov	r3, r0
 800970c:	9304      	str	r3, [sp, #16]
    result.element.z = quaternionA.element.z + quaternionB.element.z;
 800970e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009710:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009712:	4611      	mov	r1, r2
 8009714:	4618      	mov	r0, r3
 8009716:	f7f7 f9cd 	bl	8000ab4 <__addsf3>
 800971a:	4603      	mov	r3, r0
 800971c:	9305      	str	r3, [sp, #20]
    return result;
 800971e:	9b01      	ldr	r3, [sp, #4]
 8009720:	461c      	mov	r4, r3
 8009722:	ab02      	add	r3, sp, #8
 8009724:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009726:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800972a:	9801      	ldr	r0, [sp, #4]
 800972c:	b006      	add	sp, #24
 800972e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009732:	b004      	add	sp, #16
 8009734:	4770      	bx	lr
 8009736:	bf00      	nop
	...

08009740 <FusionQuaternionMultiply>:
 * @brief Returns the multiplication of two quaternions.
 * @param quaternionA Quaternion A (to be post-multiplied).
 * @param quaternionB Quaternion B (to be pre-multiplied).
 * @return Multiplication of two quaternions.
 */
static inline FusionQuaternion FusionQuaternionMultiply(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 8009740:	b084      	sub	sp, #16
 8009742:	b510      	push	{r4, lr}
 8009744:	b086      	sub	sp, #24
 8009746:	9001      	str	r0, [sp, #4]
 8009748:	a809      	add	r0, sp, #36	; 0x24
 800974a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
#define A quaternionA.element
#define B quaternionB.element
    FusionQuaternion result;
    result.element.w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z;
 800974e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009750:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009752:	4611      	mov	r1, r2
 8009754:	4618      	mov	r0, r3
 8009756:	f7f7 fab5 	bl	8000cc4 <__aeabi_fmul>
 800975a:	4603      	mov	r3, r0
 800975c:	461c      	mov	r4, r3
 800975e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009760:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009762:	4611      	mov	r1, r2
 8009764:	4618      	mov	r0, r3
 8009766:	f7f7 faad 	bl	8000cc4 <__aeabi_fmul>
 800976a:	4603      	mov	r3, r0
 800976c:	4619      	mov	r1, r3
 800976e:	4620      	mov	r0, r4
 8009770:	f7f7 f99e 	bl	8000ab0 <__aeabi_fsub>
 8009774:	4603      	mov	r3, r0
 8009776:	461c      	mov	r4, r3
 8009778:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800977a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800977c:	4611      	mov	r1, r2
 800977e:	4618      	mov	r0, r3
 8009780:	f7f7 faa0 	bl	8000cc4 <__aeabi_fmul>
 8009784:	4603      	mov	r3, r0
 8009786:	4619      	mov	r1, r3
 8009788:	4620      	mov	r0, r4
 800978a:	f7f7 f991 	bl	8000ab0 <__aeabi_fsub>
 800978e:	4603      	mov	r3, r0
 8009790:	461c      	mov	r4, r3
 8009792:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009794:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009796:	4611      	mov	r1, r2
 8009798:	4618      	mov	r0, r3
 800979a:	f7f7 fa93 	bl	8000cc4 <__aeabi_fmul>
 800979e:	4603      	mov	r3, r0
 80097a0:	4619      	mov	r1, r3
 80097a2:	4620      	mov	r0, r4
 80097a4:	f7f7 f984 	bl	8000ab0 <__aeabi_fsub>
 80097a8:	4603      	mov	r3, r0
 80097aa:	9302      	str	r3, [sp, #8]
    result.element.x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y;
 80097ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80097b0:	4611      	mov	r1, r2
 80097b2:	4618      	mov	r0, r3
 80097b4:	f7f7 fa86 	bl	8000cc4 <__aeabi_fmul>
 80097b8:	4603      	mov	r3, r0
 80097ba:	461c      	mov	r4, r3
 80097bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80097c0:	4611      	mov	r1, r2
 80097c2:	4618      	mov	r0, r3
 80097c4:	f7f7 fa7e 	bl	8000cc4 <__aeabi_fmul>
 80097c8:	4603      	mov	r3, r0
 80097ca:	4619      	mov	r1, r3
 80097cc:	4620      	mov	r0, r4
 80097ce:	f7f7 f971 	bl	8000ab4 <__addsf3>
 80097d2:	4603      	mov	r3, r0
 80097d4:	461c      	mov	r4, r3
 80097d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80097da:	4611      	mov	r1, r2
 80097dc:	4618      	mov	r0, r3
 80097de:	f7f7 fa71 	bl	8000cc4 <__aeabi_fmul>
 80097e2:	4603      	mov	r3, r0
 80097e4:	4619      	mov	r1, r3
 80097e6:	4620      	mov	r0, r4
 80097e8:	f7f7 f964 	bl	8000ab4 <__addsf3>
 80097ec:	4603      	mov	r3, r0
 80097ee:	461c      	mov	r4, r3
 80097f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80097f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80097f4:	4611      	mov	r1, r2
 80097f6:	4618      	mov	r0, r3
 80097f8:	f7f7 fa64 	bl	8000cc4 <__aeabi_fmul>
 80097fc:	4603      	mov	r3, r0
 80097fe:	4619      	mov	r1, r3
 8009800:	4620      	mov	r0, r4
 8009802:	f7f7 f955 	bl	8000ab0 <__aeabi_fsub>
 8009806:	4603      	mov	r3, r0
 8009808:	9303      	str	r3, [sp, #12]
    result.element.y = A.w * B.y - A.x * B.z + A.y * B.w + A.z * B.x;
 800980a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800980c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800980e:	4611      	mov	r1, r2
 8009810:	4618      	mov	r0, r3
 8009812:	f7f7 fa57 	bl	8000cc4 <__aeabi_fmul>
 8009816:	4603      	mov	r3, r0
 8009818:	461c      	mov	r4, r3
 800981a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800981c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800981e:	4611      	mov	r1, r2
 8009820:	4618      	mov	r0, r3
 8009822:	f7f7 fa4f 	bl	8000cc4 <__aeabi_fmul>
 8009826:	4603      	mov	r3, r0
 8009828:	4619      	mov	r1, r3
 800982a:	4620      	mov	r0, r4
 800982c:	f7f7 f940 	bl	8000ab0 <__aeabi_fsub>
 8009830:	4603      	mov	r3, r0
 8009832:	461c      	mov	r4, r3
 8009834:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009836:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009838:	4611      	mov	r1, r2
 800983a:	4618      	mov	r0, r3
 800983c:	f7f7 fa42 	bl	8000cc4 <__aeabi_fmul>
 8009840:	4603      	mov	r3, r0
 8009842:	4619      	mov	r1, r3
 8009844:	4620      	mov	r0, r4
 8009846:	f7f7 f935 	bl	8000ab4 <__addsf3>
 800984a:	4603      	mov	r3, r0
 800984c:	461c      	mov	r4, r3
 800984e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009850:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009852:	4611      	mov	r1, r2
 8009854:	4618      	mov	r0, r3
 8009856:	f7f7 fa35 	bl	8000cc4 <__aeabi_fmul>
 800985a:	4603      	mov	r3, r0
 800985c:	4619      	mov	r1, r3
 800985e:	4620      	mov	r0, r4
 8009860:	f7f7 f928 	bl	8000ab4 <__addsf3>
 8009864:	4603      	mov	r3, r0
 8009866:	9304      	str	r3, [sp, #16]
    result.element.z = A.w * B.z + A.x * B.y - A.y * B.x + A.z * B.w;
 8009868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800986a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800986c:	4611      	mov	r1, r2
 800986e:	4618      	mov	r0, r3
 8009870:	f7f7 fa28 	bl	8000cc4 <__aeabi_fmul>
 8009874:	4603      	mov	r3, r0
 8009876:	461c      	mov	r4, r3
 8009878:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800987a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800987c:	4611      	mov	r1, r2
 800987e:	4618      	mov	r0, r3
 8009880:	f7f7 fa20 	bl	8000cc4 <__aeabi_fmul>
 8009884:	4603      	mov	r3, r0
 8009886:	4619      	mov	r1, r3
 8009888:	4620      	mov	r0, r4
 800988a:	f7f7 f913 	bl	8000ab4 <__addsf3>
 800988e:	4603      	mov	r3, r0
 8009890:	461c      	mov	r4, r3
 8009892:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009894:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009896:	4611      	mov	r1, r2
 8009898:	4618      	mov	r0, r3
 800989a:	f7f7 fa13 	bl	8000cc4 <__aeabi_fmul>
 800989e:	4603      	mov	r3, r0
 80098a0:	4619      	mov	r1, r3
 80098a2:	4620      	mov	r0, r4
 80098a4:	f7f7 f904 	bl	8000ab0 <__aeabi_fsub>
 80098a8:	4603      	mov	r3, r0
 80098aa:	461c      	mov	r4, r3
 80098ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80098b0:	4611      	mov	r1, r2
 80098b2:	4618      	mov	r0, r3
 80098b4:	f7f7 fa06 	bl	8000cc4 <__aeabi_fmul>
 80098b8:	4603      	mov	r3, r0
 80098ba:	4619      	mov	r1, r3
 80098bc:	4620      	mov	r0, r4
 80098be:	f7f7 f8f9 	bl	8000ab4 <__addsf3>
 80098c2:	4603      	mov	r3, r0
 80098c4:	9305      	str	r3, [sp, #20]
    return result;
 80098c6:	9b01      	ldr	r3, [sp, #4]
 80098c8:	461c      	mov	r4, r3
 80098ca:	ab02      	add	r3, sp, #8
 80098cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80098ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#undef A
#undef B
}
 80098d2:	9801      	ldr	r0, [sp, #4]
 80098d4:	b006      	add	sp, #24
 80098d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098da:	b004      	add	sp, #16
 80098dc:	4770      	bx	lr
 80098de:	bf00      	nop

080098e0 <FusionQuaternionMultiplyVector>:
 * multiplied by the vector.
 * @param quaternion Quaternion.
 * @param vector Vector.
 * @return Multiplication of a quaternion with a vector.
 */
static inline FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector vector) {
 80098e0:	b084      	sub	sp, #16
 80098e2:	b510      	push	{r4, lr}
 80098e4:	b086      	sub	sp, #24
 80098e6:	9001      	str	r0, [sp, #4]
 80098e8:	a809      	add	r0, sp, #36	; 0x24
 80098ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
#define Q quaternion.element
#define V vector.axis
    FusionQuaternion result;
    result.element.w = -Q.x * V.x - Q.y * V.y - Q.z * V.z;
 80098ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80098f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80098f6:	4611      	mov	r1, r2
 80098f8:	4618      	mov	r0, r3
 80098fa:	f7f7 f9e3 	bl	8000cc4 <__aeabi_fmul>
 80098fe:	4603      	mov	r3, r0
 8009900:	461c      	mov	r4, r3
 8009902:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009904:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009906:	4611      	mov	r1, r2
 8009908:	4618      	mov	r0, r3
 800990a:	f7f7 f9db 	bl	8000cc4 <__aeabi_fmul>
 800990e:	4603      	mov	r3, r0
 8009910:	4619      	mov	r1, r3
 8009912:	4620      	mov	r0, r4
 8009914:	f7f7 f8cc 	bl	8000ab0 <__aeabi_fsub>
 8009918:	4603      	mov	r3, r0
 800991a:	461c      	mov	r4, r3
 800991c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800991e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009920:	4611      	mov	r1, r2
 8009922:	4618      	mov	r0, r3
 8009924:	f7f7 f9ce 	bl	8000cc4 <__aeabi_fmul>
 8009928:	4603      	mov	r3, r0
 800992a:	4619      	mov	r1, r3
 800992c:	4620      	mov	r0, r4
 800992e:	f7f7 f8bf 	bl	8000ab0 <__aeabi_fsub>
 8009932:	4603      	mov	r3, r0
 8009934:	9302      	str	r3, [sp, #8]
    result.element.x = Q.w * V.x + Q.y * V.z - Q.z * V.y;
 8009936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009938:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800993a:	4611      	mov	r1, r2
 800993c:	4618      	mov	r0, r3
 800993e:	f7f7 f9c1 	bl	8000cc4 <__aeabi_fmul>
 8009942:	4603      	mov	r3, r0
 8009944:	461c      	mov	r4, r3
 8009946:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009948:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800994a:	4611      	mov	r1, r2
 800994c:	4618      	mov	r0, r3
 800994e:	f7f7 f9b9 	bl	8000cc4 <__aeabi_fmul>
 8009952:	4603      	mov	r3, r0
 8009954:	4619      	mov	r1, r3
 8009956:	4620      	mov	r0, r4
 8009958:	f7f7 f8ac 	bl	8000ab4 <__addsf3>
 800995c:	4603      	mov	r3, r0
 800995e:	461c      	mov	r4, r3
 8009960:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009962:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009964:	4611      	mov	r1, r2
 8009966:	4618      	mov	r0, r3
 8009968:	f7f7 f9ac 	bl	8000cc4 <__aeabi_fmul>
 800996c:	4603      	mov	r3, r0
 800996e:	4619      	mov	r1, r3
 8009970:	4620      	mov	r0, r4
 8009972:	f7f7 f89d 	bl	8000ab0 <__aeabi_fsub>
 8009976:	4603      	mov	r3, r0
 8009978:	9303      	str	r3, [sp, #12]
    result.element.y = Q.w * V.y - Q.x * V.z + Q.z * V.x;
 800997a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800997c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800997e:	4611      	mov	r1, r2
 8009980:	4618      	mov	r0, r3
 8009982:	f7f7 f99f 	bl	8000cc4 <__aeabi_fmul>
 8009986:	4603      	mov	r3, r0
 8009988:	461c      	mov	r4, r3
 800998a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800998c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800998e:	4611      	mov	r1, r2
 8009990:	4618      	mov	r0, r3
 8009992:	f7f7 f997 	bl	8000cc4 <__aeabi_fmul>
 8009996:	4603      	mov	r3, r0
 8009998:	4619      	mov	r1, r3
 800999a:	4620      	mov	r0, r4
 800999c:	f7f7 f888 	bl	8000ab0 <__aeabi_fsub>
 80099a0:	4603      	mov	r3, r0
 80099a2:	461c      	mov	r4, r3
 80099a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80099a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80099a8:	4611      	mov	r1, r2
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7f7 f98a 	bl	8000cc4 <__aeabi_fmul>
 80099b0:	4603      	mov	r3, r0
 80099b2:	4619      	mov	r1, r3
 80099b4:	4620      	mov	r0, r4
 80099b6:	f7f7 f87d 	bl	8000ab4 <__addsf3>
 80099ba:	4603      	mov	r3, r0
 80099bc:	9304      	str	r3, [sp, #16]
    result.element.z = Q.w * V.z + Q.x * V.y - Q.y * V.x;
 80099be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80099c2:	4611      	mov	r1, r2
 80099c4:	4618      	mov	r0, r3
 80099c6:	f7f7 f97d 	bl	8000cc4 <__aeabi_fmul>
 80099ca:	4603      	mov	r3, r0
 80099cc:	461c      	mov	r4, r3
 80099ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80099d2:	4611      	mov	r1, r2
 80099d4:	4618      	mov	r0, r3
 80099d6:	f7f7 f975 	bl	8000cc4 <__aeabi_fmul>
 80099da:	4603      	mov	r3, r0
 80099dc:	4619      	mov	r1, r3
 80099de:	4620      	mov	r0, r4
 80099e0:	f7f7 f868 	bl	8000ab4 <__addsf3>
 80099e4:	4603      	mov	r3, r0
 80099e6:	461c      	mov	r4, r3
 80099e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80099ec:	4611      	mov	r1, r2
 80099ee:	4618      	mov	r0, r3
 80099f0:	f7f7 f968 	bl	8000cc4 <__aeabi_fmul>
 80099f4:	4603      	mov	r3, r0
 80099f6:	4619      	mov	r1, r3
 80099f8:	4620      	mov	r0, r4
 80099fa:	f7f7 f859 	bl	8000ab0 <__aeabi_fsub>
 80099fe:	4603      	mov	r3, r0
 8009a00:	9305      	str	r3, [sp, #20]
    return result;
 8009a02:	9b01      	ldr	r3, [sp, #4]
 8009a04:	461c      	mov	r4, r3
 8009a06:	ab02      	add	r3, sp, #8
 8009a08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009a0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#undef Q
#undef V
}
 8009a0e:	9801      	ldr	r0, [sp, #4]
 8009a10:	b006      	add	sp, #24
 8009a12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a16:	b004      	add	sp, #16
 8009a18:	4770      	bx	lr
 8009a1a:	bf00      	nop
 8009a1c:	0000      	movs	r0, r0
	...

08009a20 <FusionQuaternionNormalise>:
/**
 * @brief Returns the normalised quaternion.
 * @param quaternion Quaternion.
 * @return Normalised quaternion.
 */
static inline FusionQuaternion FusionQuaternionNormalise(const FusionQuaternion quaternion) {
 8009a20:	b084      	sub	sp, #16
 8009a22:	b510      	push	{r4, lr}
 8009a24:	b088      	sub	sp, #32
 8009a26:	9001      	str	r0, [sp, #4]
 8009a28:	a80b      	add	r0, sp, #44	; 0x2c
 8009a2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
#define Q quaternion.element
#ifdef FUSION_USE_NORMAL_SQRT
    const float magnitudeReciprocal = 1.0f / sqrtf(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
#else
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 8009a2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009a32:	4611      	mov	r1, r2
 8009a34:	4618      	mov	r0, r3
 8009a36:	f7f7 f945 	bl	8000cc4 <__aeabi_fmul>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	461c      	mov	r4, r3
 8009a3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a42:	4611      	mov	r1, r2
 8009a44:	4618      	mov	r0, r3
 8009a46:	f7f7 f93d 	bl	8000cc4 <__aeabi_fmul>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	4619      	mov	r1, r3
 8009a4e:	4620      	mov	r0, r4
 8009a50:	f7f7 f830 	bl	8000ab4 <__addsf3>
 8009a54:	4603      	mov	r3, r0
 8009a56:	461c      	mov	r4, r3
 8009a58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a5a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a5c:	4611      	mov	r1, r2
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f7f7 f930 	bl	8000cc4 <__aeabi_fmul>
 8009a64:	4603      	mov	r3, r0
 8009a66:	4619      	mov	r1, r3
 8009a68:	4620      	mov	r0, r4
 8009a6a:	f7f7 f823 	bl	8000ab4 <__addsf3>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	461c      	mov	r4, r3
 8009a72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a76:	4611      	mov	r1, r2
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f7f7 f923 	bl	8000cc4 <__aeabi_fmul>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	4619      	mov	r1, r3
 8009a82:	4620      	mov	r0, r4
 8009a84:	f7f7 f816 	bl	8000ab4 <__addsf3>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f7ff fc98 	bl	80093c0 <FusionFastInverseSqrt.lto_priv.0>
 8009a90:	9007      	str	r0, [sp, #28]
#endif
    FusionQuaternion normalisedQuaternion;
    normalisedQuaternion.element.w = Q.w * magnitudeReciprocal;
 8009a92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a94:	9907      	ldr	r1, [sp, #28]
 8009a96:	4618      	mov	r0, r3
 8009a98:	f7f7 f914 	bl	8000cc4 <__aeabi_fmul>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	9303      	str	r3, [sp, #12]
    normalisedQuaternion.element.x = Q.x * magnitudeReciprocal;
 8009aa0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009aa2:	9907      	ldr	r1, [sp, #28]
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f7f7 f90d 	bl	8000cc4 <__aeabi_fmul>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	9304      	str	r3, [sp, #16]
    normalisedQuaternion.element.y = Q.y * magnitudeReciprocal;
 8009aae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ab0:	9907      	ldr	r1, [sp, #28]
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f7f7 f906 	bl	8000cc4 <__aeabi_fmul>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	9305      	str	r3, [sp, #20]
    normalisedQuaternion.element.z = Q.z * magnitudeReciprocal;
 8009abc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009abe:	9907      	ldr	r1, [sp, #28]
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f7f7 f8ff 	bl	8000cc4 <__aeabi_fmul>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	9306      	str	r3, [sp, #24]
    return normalisedQuaternion;
 8009aca:	9b01      	ldr	r3, [sp, #4]
 8009acc:	461c      	mov	r4, r3
 8009ace:	ab03      	add	r3, sp, #12
 8009ad0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009ad2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#undef Q
}
 8009ad6:	9801      	ldr	r0, [sp, #4]
 8009ad8:	b008      	add	sp, #32
 8009ada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ade:	b004      	add	sp, #16
 8009ae0:	4770      	bx	lr
 8009ae2:	bf00      	nop
	...

08009af0 <FusionAhrsInitialise>:

/**
 * @brief Initialises the AHRS algorithm structure.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsInitialise(FusionAhrs *const ahrs) {
 8009af0:	b510      	push	{r4, lr}
 8009af2:	b086      	sub	sp, #24
 8009af4:	9001      	str	r0, [sp, #4]
    const FusionAhrsSettings settings = {
 8009af6:	4b08      	ldr	r3, [pc, #32]	; (8009b18 <FusionAhrsInitialise+0x28>)
 8009af8:	ac02      	add	r4, sp, #8
 8009afa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009afc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            .gain = 0.5f,
            .accelerationRejection = 10.0f,
            .magneticRejection = 20.0f,
            .rejectionTimeout = 5*104,
    };
    FusionAhrsSetSettings(ahrs, &settings);
 8009b00:	ab02      	add	r3, sp, #8
 8009b02:	4619      	mov	r1, r3
 8009b04:	9801      	ldr	r0, [sp, #4]
 8009b06:	f000 f863 	bl	8009bd0 <FusionAhrsSetSettings>
    FusionAhrsReset(ahrs);
 8009b0a:	9801      	ldr	r0, [sp, #4]
 8009b0c:	f000 f808 	bl	8009b20 <FusionAhrsReset>
}
 8009b10:	bf00      	nop
 8009b12:	b006      	add	sp, #24
 8009b14:	bd10      	pop	{r4, pc}
 8009b16:	bf00      	nop
 8009b18:	0800ea78 	.word	0x0800ea78
 8009b1c:	00000000 	.word	0x00000000

08009b20 <FusionAhrsReset>:
/**
 * @brief Resets the AHRS algorithm.  This is equivalent to reinitialising the
 * algorithm while maintaining the current settings.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsReset(FusionAhrs *const ahrs) {
 8009b20:	b090      	sub	sp, #64	; 0x40
 8009b22:	9001      	str	r0, [sp, #4]
    ahrs->quaternion = FUSION_IDENTITY_QUATERNION;
 8009b24:	9b01      	ldr	r3, [sp, #4]
 8009b26:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8009b2a:	611a      	str	r2, [r3, #16]
 8009b2c:	9b01      	ldr	r3, [sp, #4]
 8009b2e:	f04f 0200 	mov.w	r2, #0
 8009b32:	615a      	str	r2, [r3, #20]
 8009b34:	9b01      	ldr	r3, [sp, #4]
 8009b36:	f04f 0200 	mov.w	r2, #0
 8009b3a:	619a      	str	r2, [r3, #24]
 8009b3c:	9b01      	ldr	r3, [sp, #4]
 8009b3e:	f04f 0200 	mov.w	r2, #0
 8009b42:	61da      	str	r2, [r3, #28]
    ahrs->accelerometer = FUSION_VECTOR_ZERO;
 8009b44:	9b01      	ldr	r3, [sp, #4]
 8009b46:	f04f 0200 	mov.w	r2, #0
 8009b4a:	621a      	str	r2, [r3, #32]
 8009b4c:	9b01      	ldr	r3, [sp, #4]
 8009b4e:	f04f 0200 	mov.w	r2, #0
 8009b52:	625a      	str	r2, [r3, #36]	; 0x24
 8009b54:	9b01      	ldr	r3, [sp, #4]
 8009b56:	f04f 0200 	mov.w	r2, #0
 8009b5a:	629a      	str	r2, [r3, #40]	; 0x28
    ahrs->initialising = true;
 8009b5c:	9b01      	ldr	r3, [sp, #4]
 8009b5e:	2201      	movs	r2, #1
 8009b60:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    ahrs->rampedGain = INITIAL_GAIN;
 8009b64:	9b01      	ldr	r3, [sp, #4]
 8009b66:	4a19      	ldr	r2, [pc, #100]	; (8009bcc <FusionAhrsReset+0xac>)
 8009b68:	631a      	str	r2, [r3, #48]	; 0x30
    ahrs->halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 8009b6a:	9b01      	ldr	r3, [sp, #4]
 8009b6c:	f04f 0200 	mov.w	r2, #0
 8009b70:	639a      	str	r2, [r3, #56]	; 0x38
 8009b72:	9b01      	ldr	r3, [sp, #4]
 8009b74:	f04f 0200 	mov.w	r2, #0
 8009b78:	63da      	str	r2, [r3, #60]	; 0x3c
 8009b7a:	9b01      	ldr	r3, [sp, #4]
 8009b7c:	f04f 0200 	mov.w	r2, #0
 8009b80:	641a      	str	r2, [r3, #64]	; 0x40
    ahrs->halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 8009b82:	9b01      	ldr	r3, [sp, #4]
 8009b84:	f04f 0200 	mov.w	r2, #0
 8009b88:	645a      	str	r2, [r3, #68]	; 0x44
 8009b8a:	9b01      	ldr	r3, [sp, #4]
 8009b8c:	f04f 0200 	mov.w	r2, #0
 8009b90:	649a      	str	r2, [r3, #72]	; 0x48
 8009b92:	9b01      	ldr	r3, [sp, #4]
 8009b94:	f04f 0200 	mov.w	r2, #0
 8009b98:	64da      	str	r2, [r3, #76]	; 0x4c
    ahrs->accelerometerIgnored = false;
 8009b9a:	9b01      	ldr	r3, [sp, #4]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    ahrs->accelerationRejectionTimer = 0;
 8009ba2:	9b01      	ldr	r3, [sp, #4]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	655a      	str	r2, [r3, #84]	; 0x54
    ahrs->accelerationRejectionTimeout = false;
 8009ba8:	9b01      	ldr	r3, [sp, #4]
 8009baa:	2200      	movs	r2, #0
 8009bac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    ahrs->magnetometerIgnored = false;
 8009bb0:	9b01      	ldr	r3, [sp, #4]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
    ahrs->magneticRejectionTimer = 0;
 8009bb8:	9b01      	ldr	r3, [sp, #4]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	65da      	str	r2, [r3, #92]	; 0x5c
    ahrs->magneticRejectionTimeout = false;
 8009bbe:	9b01      	ldr	r3, [sp, #4]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
 8009bc6:	bf00      	nop
 8009bc8:	b010      	add	sp, #64	; 0x40
 8009bca:	4770      	bx	lr
 8009bcc:	41200000 	.word	0x41200000

08009bd0 <FusionAhrsSetSettings>:
/**
 * @brief Sets the AHRS algorithm settings.
 * @param ahrs AHRS algorithm structure.
 * @param settings Settings.
 */
void FusionAhrsSetSettings(FusionAhrs *const ahrs, const FusionAhrsSettings *const settings) {
 8009bd0:	b500      	push	{lr}
 8009bd2:	b083      	sub	sp, #12
 8009bd4:	9001      	str	r0, [sp, #4]
 8009bd6:	9100      	str	r1, [sp, #0]
    ahrs->settings.gain = settings->gain;
 8009bd8:	9b00      	ldr	r3, [sp, #0]
 8009bda:	681a      	ldr	r2, [r3, #0]
 8009bdc:	9b01      	ldr	r3, [sp, #4]
 8009bde:	601a      	str	r2, [r3, #0]
    if ((settings->accelerationRejection == 0.0f) || (settings->rejectionTimeout == 0)) {
 8009be0:	9b00      	ldr	r3, [sp, #0]
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	f04f 0100 	mov.w	r1, #0
 8009be8:	4618      	mov	r0, r3
 8009bea:	f7f7 f9ff 	bl	8000fec <__aeabi_fcmpeq>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d103      	bne.n	8009bfc <FusionAhrsSetSettings+0x2c>
 8009bf4:	9b00      	ldr	r3, [sp, #0]
 8009bf6:	68db      	ldr	r3, [r3, #12]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d103      	bne.n	8009c04 <FusionAhrsSetSettings+0x34>
        ahrs->settings.accelerationRejection = FLT_MAX;
 8009bfc:	9b01      	ldr	r3, [sp, #4]
 8009bfe:	4a34      	ldr	r2, [pc, #208]	; (8009cd0 <FusionAhrsSetSettings+0x100>)
 8009c00:	605a      	str	r2, [r3, #4]
 8009c02:	e017      	b.n	8009c34 <FusionAhrsSetSettings+0x64>
    } else {
        ahrs->settings.accelerationRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->accelerationRejection)), 2);
 8009c04:	9b00      	ldr	r3, [sp, #0]
 8009c06:	685b      	ldr	r3, [r3, #4]
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f7ff fbc9 	bl	80093a0 <FusionDegreesToRadians>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	4618      	mov	r0, r3
 8009c12:	f002 ffcd 	bl	800cbb0 <sinf>
 8009c16:	4603      	mov	r3, r0
 8009c18:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f7f7 f851 	bl	8000cc4 <__aeabi_fmul>
 8009c22:	4603      	mov	r3, r0
 8009c24:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f003 f81b 	bl	800cc64 <powf>
 8009c2e:	4602      	mov	r2, r0
 8009c30:	9b01      	ldr	r3, [sp, #4]
 8009c32:	605a      	str	r2, [r3, #4]
    }
    if ((settings->magneticRejection == 0.0f) || (settings->rejectionTimeout == 0)) {
 8009c34:	9b00      	ldr	r3, [sp, #0]
 8009c36:	689b      	ldr	r3, [r3, #8]
 8009c38:	f04f 0100 	mov.w	r1, #0
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f7f7 f9d5 	bl	8000fec <__aeabi_fcmpeq>
 8009c42:	4603      	mov	r3, r0
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d103      	bne.n	8009c50 <FusionAhrsSetSettings+0x80>
 8009c48:	9b00      	ldr	r3, [sp, #0]
 8009c4a:	68db      	ldr	r3, [r3, #12]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d103      	bne.n	8009c58 <FusionAhrsSetSettings+0x88>
        ahrs->settings.magneticRejection = FLT_MAX;
 8009c50:	9b01      	ldr	r3, [sp, #4]
 8009c52:	4a1f      	ldr	r2, [pc, #124]	; (8009cd0 <FusionAhrsSetSettings+0x100>)
 8009c54:	609a      	str	r2, [r3, #8]
 8009c56:	e017      	b.n	8009c88 <FusionAhrsSetSettings+0xb8>
    } else {
        ahrs->settings.magneticRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->magneticRejection)), 2);
 8009c58:	9b00      	ldr	r3, [sp, #0]
 8009c5a:	689b      	ldr	r3, [r3, #8]
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f7ff fb9f 	bl	80093a0 <FusionDegreesToRadians>
 8009c62:	4603      	mov	r3, r0
 8009c64:	4618      	mov	r0, r3
 8009c66:	f002 ffa3 	bl	800cbb0 <sinf>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8009c70:	4618      	mov	r0, r3
 8009c72:	f7f7 f827 	bl	8000cc4 <__aeabi_fmul>
 8009c76:	4603      	mov	r3, r0
 8009c78:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f002 fff1 	bl	800cc64 <powf>
 8009c82:	4602      	mov	r2, r0
 8009c84:	9b01      	ldr	r3, [sp, #4]
 8009c86:	609a      	str	r2, [r3, #8]
    }
    ahrs->settings.rejectionTimeout = settings->rejectionTimeout;
 8009c88:	9b00      	ldr	r3, [sp, #0]
 8009c8a:	68da      	ldr	r2, [r3, #12]
 8009c8c:	9b01      	ldr	r3, [sp, #4]
 8009c8e:	60da      	str	r2, [r3, #12]
    if (ahrs->initialising == false) {
 8009c90:	9b01      	ldr	r3, [sp, #4]
 8009c92:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009c96:	f083 0301 	eor.w	r3, r3, #1
 8009c9a:	b2db      	uxtb	r3, r3
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d003      	beq.n	8009ca8 <FusionAhrsSetSettings+0xd8>
        ahrs->rampedGain = ahrs->settings.gain;
 8009ca0:	9b01      	ldr	r3, [sp, #4]
 8009ca2:	681a      	ldr	r2, [r3, #0]
 8009ca4:	9b01      	ldr	r3, [sp, #4]
 8009ca6:	631a      	str	r2, [r3, #48]	; 0x30
    }
    ahrs->rampedGainStep = (INITIAL_GAIN - ahrs->settings.gain) / INITIALISATION_PERIOD;
 8009ca8:	9b01      	ldr	r3, [sp, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4619      	mov	r1, r3
 8009cae:	4809      	ldr	r0, [pc, #36]	; (8009cd4 <FusionAhrsSetSettings+0x104>)
 8009cb0:	f7f6 fefe 	bl	8000ab0 <__aeabi_fsub>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	4908      	ldr	r1, [pc, #32]	; (8009cd8 <FusionAhrsSetSettings+0x108>)
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f7f7 f8b7 	bl	8000e2c <__aeabi_fdiv>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	9b01      	ldr	r3, [sp, #4]
 8009cc4:	635a      	str	r2, [r3, #52]	; 0x34
}
 8009cc6:	bf00      	nop
 8009cc8:	b003      	add	sp, #12
 8009cca:	f85d fb04 	ldr.w	pc, [sp], #4
 8009cce:	bf00      	nop
 8009cd0:	7f7fffff 	.word	0x7f7fffff
 8009cd4:	41200000 	.word	0x41200000
 8009cd8:	40400000 	.word	0x40400000
 8009cdc:	00000000 	.word	0x00000000

08009ce0 <FusionAhrsUpdate>:
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param magnetometer Magnetometer measurement in arbitrary units.
 * @param deltaTime Delta time in seconds.
 */
void FusionAhrsUpdate(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const FusionVector magnetometer, const float deltaTime) {
 8009ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ce2:	b0c1      	sub	sp, #260	; 0x104
 8009ce4:	900d      	str	r0, [sp, #52]	; 0x34
 8009ce6:	a80a      	add	r0, sp, #40	; 0x28
 8009ce8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
#define Q ahrs->quaternion.element

    // Store accelerometer
    ahrs->accelerometer = accelerometer;
 8009cec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009cee:	3320      	adds	r3, #32
 8009cf0:	aa46      	add	r2, sp, #280	; 0x118
 8009cf2:	ca07      	ldmia	r2, {r0, r1, r2}
 8009cf4:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Ramp down gain during initialisation
    if (ahrs->initialising == true) {
 8009cf8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009cfa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d027      	beq.n	8009d52 <FusionAhrsUpdate+0x72>
        ahrs->rampedGain -= ahrs->rampedGainStep * deltaTime;
 8009d02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d04:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8009d06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d0a:	994c      	ldr	r1, [sp, #304]	; 0x130
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f7f6 ffd9 	bl	8000cc4 <__aeabi_fmul>
 8009d12:	4603      	mov	r3, r0
 8009d14:	4619      	mov	r1, r3
 8009d16:	4620      	mov	r0, r4
 8009d18:	f7f6 feca 	bl	8000ab0 <__aeabi_fsub>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	461a      	mov	r2, r3
 8009d20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d22:	631a      	str	r2, [r3, #48]	; 0x30
        if (ahrs->rampedGain < ahrs->settings.gain) {
 8009d24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4619      	mov	r1, r3
 8009d2e:	4610      	mov	r0, r2
 8009d30:	f7f7 f966 	bl	8001000 <__aeabi_fcmplt>
 8009d34:	4603      	mov	r3, r0
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d00b      	beq.n	8009d52 <FusionAhrsUpdate+0x72>
            ahrs->rampedGain = ahrs->settings.gain;
 8009d3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d3c:	681a      	ldr	r2, [r3, #0]
 8009d3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d40:	631a      	str	r2, [r3, #48]	; 0x30
            ahrs->initialising = false;
 8009d42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d44:	2200      	movs	r2, #0
 8009d46:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            ahrs->accelerationRejectionTimeout = false;
 8009d4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        }
    }

    // Calculate direction of gravity indicated by algorithm
    const FusionVector halfGravity = {
            .axis.x = Q.x * Q.z - Q.w * Q.y,
 8009d52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d54:	695a      	ldr	r2, [r3, #20]
 8009d56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d58:	69db      	ldr	r3, [r3, #28]
 8009d5a:	4619      	mov	r1, r3
 8009d5c:	4610      	mov	r0, r2
 8009d5e:	f7f6 ffb1 	bl	8000cc4 <__aeabi_fmul>
 8009d62:	4603      	mov	r3, r0
 8009d64:	461c      	mov	r4, r3
 8009d66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d68:	691a      	ldr	r2, [r3, #16]
 8009d6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d6c:	699b      	ldr	r3, [r3, #24]
 8009d6e:	4619      	mov	r1, r3
 8009d70:	4610      	mov	r0, r2
 8009d72:	f7f6 ffa7 	bl	8000cc4 <__aeabi_fmul>
 8009d76:	4603      	mov	r3, r0
 8009d78:	4619      	mov	r1, r3
 8009d7a:	4620      	mov	r0, r4
 8009d7c:	f7f6 fe98 	bl	8000ab0 <__aeabi_fsub>
 8009d80:	4603      	mov	r3, r0
    const FusionVector halfGravity = {
 8009d82:	9327      	str	r3, [sp, #156]	; 0x9c
            .axis.y = Q.y * Q.z + Q.w * Q.x,
 8009d84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d86:	699a      	ldr	r2, [r3, #24]
 8009d88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d8a:	69db      	ldr	r3, [r3, #28]
 8009d8c:	4619      	mov	r1, r3
 8009d8e:	4610      	mov	r0, r2
 8009d90:	f7f6 ff98 	bl	8000cc4 <__aeabi_fmul>
 8009d94:	4603      	mov	r3, r0
 8009d96:	461c      	mov	r4, r3
 8009d98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d9a:	691a      	ldr	r2, [r3, #16]
 8009d9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d9e:	695b      	ldr	r3, [r3, #20]
 8009da0:	4619      	mov	r1, r3
 8009da2:	4610      	mov	r0, r2
 8009da4:	f7f6 ff8e 	bl	8000cc4 <__aeabi_fmul>
 8009da8:	4603      	mov	r3, r0
 8009daa:	4619      	mov	r1, r3
 8009dac:	4620      	mov	r0, r4
 8009dae:	f7f6 fe81 	bl	8000ab4 <__addsf3>
 8009db2:	4603      	mov	r3, r0
    const FusionVector halfGravity = {
 8009db4:	9328      	str	r3, [sp, #160]	; 0xa0
            .axis.z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 8009db6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009db8:	691a      	ldr	r2, [r3, #16]
 8009dba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009dbc:	691b      	ldr	r3, [r3, #16]
 8009dbe:	4619      	mov	r1, r3
 8009dc0:	4610      	mov	r0, r2
 8009dc2:	f7f6 ff7f 	bl	8000cc4 <__aeabi_fmul>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f7f6 fe6f 	bl	8000ab0 <__aeabi_fsub>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	461c      	mov	r4, r3
 8009dd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009dd8:	69da      	ldr	r2, [r3, #28]
 8009dda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ddc:	69db      	ldr	r3, [r3, #28]
 8009dde:	4619      	mov	r1, r3
 8009de0:	4610      	mov	r0, r2
 8009de2:	f7f6 ff6f 	bl	8000cc4 <__aeabi_fmul>
 8009de6:	4603      	mov	r3, r0
 8009de8:	4619      	mov	r1, r3
 8009dea:	4620      	mov	r0, r4
 8009dec:	f7f6 fe62 	bl	8000ab4 <__addsf3>
 8009df0:	4603      	mov	r3, r0
    const FusionVector halfGravity = {
 8009df2:	9329      	str	r3, [sp, #164]	; 0xa4
    }; // third column of transposed rotation matrix scaled by 0.5

    // Calculate accelerometer feedback
    FusionVector halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 8009df4:	f04f 0300 	mov.w	r3, #0
 8009df8:	9324      	str	r3, [sp, #144]	; 0x90
 8009dfa:	f04f 0300 	mov.w	r3, #0
 8009dfe:	9325      	str	r3, [sp, #148]	; 0x94
 8009e00:	f04f 0300 	mov.w	r3, #0
 8009e04:	9326      	str	r3, [sp, #152]	; 0x98
    ahrs->accelerometerIgnored = true;
 8009e06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e08:	2201      	movs	r2, #1
 8009e0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    if (FusionVectorIsZero(accelerometer) == false) {
 8009e0e:	ab46      	add	r3, sp, #280	; 0x118
 8009e10:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009e14:	f7ff fb0c 	bl	8009430 <FusionVectorIsZero>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	f083 0301 	eor.w	r3, r3, #1
 8009e1e:	b2db      	uxtb	r3, r3
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d065      	beq.n	8009ef0 <FusionAhrsUpdate+0x210>

        // Enter acceleration recovery state if acceleration rejection times out
        if (ahrs->accelerationRejectionTimer > ahrs->settings.rejectionTimeout) {
 8009e24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e26:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e2a:	68db      	ldr	r3, [r3, #12]
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d916      	bls.n	8009e5e <FusionAhrsUpdate+0x17e>
            const FusionQuaternion quaternion = ahrs->quaternion;
 8009e30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e32:	ac0e      	add	r4, sp, #56	; 0x38
 8009e34:	3310      	adds	r3, #16
 8009e36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009e38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            FusionAhrsReset(ahrs);
 8009e3c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009e3e:	f7ff fe6f 	bl	8009b20 <FusionAhrsReset>
            ahrs->quaternion = quaternion;
 8009e42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e44:	f103 0410 	add.w	r4, r3, #16
 8009e48:	ab0e      	add	r3, sp, #56	; 0x38
 8009e4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009e4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            ahrs->accelerationRejectionTimer = 0;
 8009e50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e52:	2200      	movs	r2, #0
 8009e54:	655a      	str	r2, [r3, #84]	; 0x54
            ahrs->accelerationRejectionTimeout = true;
 8009e56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e58:	2201      	movs	r2, #1
 8009e5a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        }

        // Calculate accelerometer feedback scaled by 0.5
        ahrs->halfAccelerometerFeedback = FusionVectorCrossProduct(FusionVectorNormalise(accelerometer), halfGravity);
 8009e5e:	a82a      	add	r0, sp, #168	; 0xa8
 8009e60:	ab46      	add	r3, sp, #280	; 0x118
 8009e62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009e64:	f7ff fc14 	bl	8009690 <FusionVectorNormalise.lto_priv.0>
 8009e68:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009e6a:	ae06      	add	r6, sp, #24
 8009e6c:	466c      	mov	r4, sp
 8009e6e:	ab27      	add	r3, sp, #156	; 0x9c
 8009e70:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009e74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009e78:	ab2a      	add	r3, sp, #168	; 0xa8
 8009e7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009e7c:	4630      	mov	r0, r6
 8009e7e:	f7ff fb97 	bl	80095b0 <FusionVectorCrossProduct.lto_priv.0>
 8009e82:	f105 0338 	add.w	r3, r5, #56	; 0x38
 8009e86:	aa06      	add	r2, sp, #24
 8009e88:	ca07      	ldmia	r2, {r0, r1, r2}
 8009e8a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        // Ignore accelerometer if acceleration distortion detected
        if ((ahrs->initialising == true) || (FusionVectorMagnitudeSquared(ahrs->halfAccelerometerFeedback) <= ahrs->settings.accelerationRejection)) {
 8009e8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e90:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d10f      	bne.n	8009eb8 <FusionAhrsUpdate+0x1d8>
 8009e98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e9a:	3338      	adds	r3, #56	; 0x38
 8009e9c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009ea0:	f7ff fbd6 	bl	8009650 <FusionVectorMagnitudeSquared.lto_priv.0>
 8009ea4:	4602      	mov	r2, r0
 8009ea6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	4619      	mov	r1, r3
 8009eac:	4610      	mov	r0, r2
 8009eae:	f7f7 f8b1 	bl	8001014 <__aeabi_fcmple>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d016      	beq.n	8009ee6 <FusionAhrsUpdate+0x206>
            halfAccelerometerFeedback = ahrs->halfAccelerometerFeedback;
 8009eb8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009eba:	ab24      	add	r3, sp, #144	; 0x90
 8009ebc:	3238      	adds	r2, #56	; 0x38
 8009ebe:	ca07      	ldmia	r2, {r0, r1, r2}
 8009ec0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            ahrs->accelerometerIgnored = false;
 8009ec4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            ahrs->accelerationRejectionTimer -= ahrs->accelerationRejectionTimer >= 10 ? 10 : 0;
 8009ecc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ece:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009ed0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ed4:	2b09      	cmp	r3, #9
 8009ed6:	d901      	bls.n	8009edc <FusionAhrsUpdate+0x1fc>
 8009ed8:	230a      	movs	r3, #10
 8009eda:	e000      	b.n	8009ede <FusionAhrsUpdate+0x1fe>
 8009edc:	2300      	movs	r3, #0
 8009ede:	1ad2      	subs	r2, r2, r3
 8009ee0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ee2:	655a      	str	r2, [r3, #84]	; 0x54
 8009ee4:	e004      	b.n	8009ef0 <FusionAhrsUpdate+0x210>
        } else {
            ahrs->accelerationRejectionTimer++;
 8009ee6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009eea:	1c5a      	adds	r2, r3, #1
 8009eec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009eee:	655a      	str	r2, [r3, #84]	; 0x54
        }
    }

    // Calculate magnetometer feedback
    FusionVector halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 8009ef0:	f04f 0300 	mov.w	r3, #0
 8009ef4:	931e      	str	r3, [sp, #120]	; 0x78
 8009ef6:	f04f 0300 	mov.w	r3, #0
 8009efa:	931f      	str	r3, [sp, #124]	; 0x7c
 8009efc:	f04f 0300 	mov.w	r3, #0
 8009f00:	9320      	str	r3, [sp, #128]	; 0x80
    ahrs->magnetometerIgnored = true;
 8009f02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f04:	2201      	movs	r2, #1
 8009f06:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
    if (FusionVectorIsZero(magnetometer) == false) {
 8009f0a:	ab49      	add	r3, sp, #292	; 0x124
 8009f0c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009f10:	f7ff fa8e 	bl	8009430 <FusionVectorIsZero>
 8009f14:	4603      	mov	r3, r0
 8009f16:	f083 0301 	eor.w	r3, r3, #1
 8009f1a:	b2db      	uxtb	r3, r3
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	f000 80c7 	beq.w	800a0b0 <FusionAhrsUpdate+0x3d0>

        // Set to compass heading if magnetic rejection times out
        ahrs->magneticRejectionTimeout = false;
 8009f22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f24:	2200      	movs	r2, #0
 8009f26:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
        if (ahrs->magneticRejectionTimer > ahrs->settings.rejectionTimeout) {
 8009f2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f2c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009f2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f30:	68db      	ldr	r3, [r3, #12]
 8009f32:	429a      	cmp	r2, r3
 8009f34:	d916      	bls.n	8009f64 <FusionAhrsUpdate+0x284>
            FusionAhrsSetHeading(ahrs, FusionCompassCalculateHeading(halfGravity, magnetometer));
 8009f36:	466a      	mov	r2, sp
 8009f38:	ab4a      	add	r3, sp, #296	; 0x128
 8009f3a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009f3e:	e882 0003 	stmia.w	r2, {r0, r1}
 8009f42:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8009f44:	aa27      	add	r2, sp, #156	; 0x9c
 8009f46:	ca07      	ldmia	r2, {r0, r1, r2}
 8009f48:	f000 fada 	bl	800a500 <FusionCompassCalculateHeading>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	4619      	mov	r1, r3
 8009f50:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009f52:	f000 f915 	bl	800a180 <FusionAhrsSetHeading>
            ahrs->magneticRejectionTimer = 0;
 8009f56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f58:	2200      	movs	r2, #0
 8009f5a:	65da      	str	r2, [r3, #92]	; 0x5c
            ahrs->magneticRejectionTimeout = true;
 8009f5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f5e:	2201      	movs	r2, #1
 8009f60:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
        }

        // Compute direction of west indicated by algorithm
        const FusionVector halfWest = {
                .axis.x = Q.x * Q.y + Q.w * Q.z,
 8009f64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f66:	695a      	ldr	r2, [r3, #20]
 8009f68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f6a:	699b      	ldr	r3, [r3, #24]
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	4610      	mov	r0, r2
 8009f70:	f7f6 fea8 	bl	8000cc4 <__aeabi_fmul>
 8009f74:	4603      	mov	r3, r0
 8009f76:	461c      	mov	r4, r3
 8009f78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f7a:	691a      	ldr	r2, [r3, #16]
 8009f7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f7e:	69db      	ldr	r3, [r3, #28]
 8009f80:	4619      	mov	r1, r3
 8009f82:	4610      	mov	r0, r2
 8009f84:	f7f6 fe9e 	bl	8000cc4 <__aeabi_fmul>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	4620      	mov	r0, r4
 8009f8e:	f7f6 fd91 	bl	8000ab4 <__addsf3>
 8009f92:	4603      	mov	r3, r0
        const FusionVector halfWest = {
 8009f94:	9312      	str	r3, [sp, #72]	; 0x48
                .axis.y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 8009f96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f98:	691a      	ldr	r2, [r3, #16]
 8009f9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f9c:	691b      	ldr	r3, [r3, #16]
 8009f9e:	4619      	mov	r1, r3
 8009fa0:	4610      	mov	r0, r2
 8009fa2:	f7f6 fe8f 	bl	8000cc4 <__aeabi_fmul>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8009fac:	4618      	mov	r0, r3
 8009fae:	f7f6 fd7f 	bl	8000ab0 <__aeabi_fsub>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	461c      	mov	r4, r3
 8009fb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fb8:	699a      	ldr	r2, [r3, #24]
 8009fba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fbc:	699b      	ldr	r3, [r3, #24]
 8009fbe:	4619      	mov	r1, r3
 8009fc0:	4610      	mov	r0, r2
 8009fc2:	f7f6 fe7f 	bl	8000cc4 <__aeabi_fmul>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	4619      	mov	r1, r3
 8009fca:	4620      	mov	r0, r4
 8009fcc:	f7f6 fd72 	bl	8000ab4 <__addsf3>
 8009fd0:	4603      	mov	r3, r0
        const FusionVector halfWest = {
 8009fd2:	9313      	str	r3, [sp, #76]	; 0x4c
                .axis.z = Q.y * Q.z - Q.w * Q.x
 8009fd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fd6:	699a      	ldr	r2, [r3, #24]
 8009fd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fda:	69db      	ldr	r3, [r3, #28]
 8009fdc:	4619      	mov	r1, r3
 8009fde:	4610      	mov	r0, r2
 8009fe0:	f7f6 fe70 	bl	8000cc4 <__aeabi_fmul>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	461c      	mov	r4, r3
 8009fe8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fea:	691a      	ldr	r2, [r3, #16]
 8009fec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fee:	695b      	ldr	r3, [r3, #20]
 8009ff0:	4619      	mov	r1, r3
 8009ff2:	4610      	mov	r0, r2
 8009ff4:	f7f6 fe66 	bl	8000cc4 <__aeabi_fmul>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	4619      	mov	r1, r3
 8009ffc:	4620      	mov	r0, r4
 8009ffe:	f7f6 fd57 	bl	8000ab0 <__aeabi_fsub>
 800a002:	4603      	mov	r3, r0
        const FusionVector halfWest = {
 800a004:	9314      	str	r3, [sp, #80]	; 0x50
        }; // second column of transposed rotation matrix scaled by 0.5

        // Calculate magnetometer feedback scaled by 0.5
        ahrs->halfMagnetometerFeedback = FusionVectorCrossProduct(FusionVectorNormalise(FusionVectorCrossProduct(halfGravity, magnetometer)), halfWest);
 800a006:	ad2d      	add	r5, sp, #180	; 0xb4
 800a008:	466c      	mov	r4, sp
 800a00a:	ab49      	add	r3, sp, #292	; 0x124
 800a00c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a010:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a014:	ab27      	add	r3, sp, #156	; 0x9c
 800a016:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a018:	4628      	mov	r0, r5
 800a01a:	f7ff fac9 	bl	80095b0 <FusionVectorCrossProduct.lto_priv.0>
 800a01e:	a830      	add	r0, sp, #192	; 0xc0
 800a020:	ab2d      	add	r3, sp, #180	; 0xb4
 800a022:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a024:	f7ff fb34 	bl	8009690 <FusionVectorNormalise.lto_priv.0>
 800a028:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a02a:	ae06      	add	r6, sp, #24
 800a02c:	466c      	mov	r4, sp
 800a02e:	ab12      	add	r3, sp, #72	; 0x48
 800a030:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a034:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a038:	ab30      	add	r3, sp, #192	; 0xc0
 800a03a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a03c:	4630      	mov	r0, r6
 800a03e:	f7ff fab7 	bl	80095b0 <FusionVectorCrossProduct.lto_priv.0>
 800a042:	f105 0344 	add.w	r3, r5, #68	; 0x44
 800a046:	aa06      	add	r2, sp, #24
 800a048:	ca07      	ldmia	r2, {r0, r1, r2}
 800a04a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        // Ignore magnetometer if magnetic distortion detected
        if ((ahrs->initialising == true) || (FusionVectorMagnitudeSquared(ahrs->halfMagnetometerFeedback) <= ahrs->settings.magneticRejection)) {
 800a04e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a050:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a054:	2b00      	cmp	r3, #0
 800a056:	d10f      	bne.n	800a078 <FusionAhrsUpdate+0x398>
 800a058:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a05a:	3344      	adds	r3, #68	; 0x44
 800a05c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a060:	f7ff faf6 	bl	8009650 <FusionVectorMagnitudeSquared.lto_priv.0>
 800a064:	4602      	mov	r2, r0
 800a066:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a068:	689b      	ldr	r3, [r3, #8]
 800a06a:	4619      	mov	r1, r3
 800a06c:	4610      	mov	r0, r2
 800a06e:	f7f6 ffd1 	bl	8001014 <__aeabi_fcmple>
 800a072:	4603      	mov	r3, r0
 800a074:	2b00      	cmp	r3, #0
 800a076:	d016      	beq.n	800a0a6 <FusionAhrsUpdate+0x3c6>
            halfMagnetometerFeedback = ahrs->halfMagnetometerFeedback;
 800a078:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a07a:	ab1e      	add	r3, sp, #120	; 0x78
 800a07c:	3244      	adds	r2, #68	; 0x44
 800a07e:	ca07      	ldmia	r2, {r0, r1, r2}
 800a080:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            ahrs->magnetometerIgnored = false;
 800a084:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a086:	2200      	movs	r2, #0
 800a088:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
            ahrs->magneticRejectionTimer -= ahrs->magneticRejectionTimer >= 10 ? 10 : 0;
 800a08c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a08e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a090:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a094:	2b09      	cmp	r3, #9
 800a096:	d901      	bls.n	800a09c <FusionAhrsUpdate+0x3bc>
 800a098:	230a      	movs	r3, #10
 800a09a:	e000      	b.n	800a09e <FusionAhrsUpdate+0x3be>
 800a09c:	2300      	movs	r3, #0
 800a09e:	1ad2      	subs	r2, r2, r3
 800a0a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0a2:	65da      	str	r2, [r3, #92]	; 0x5c
 800a0a4:	e004      	b.n	800a0b0 <FusionAhrsUpdate+0x3d0>
        } else {
            ahrs->magneticRejectionTimer++;
 800a0a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0aa:	1c5a      	adds	r2, r3, #1
 800a0ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0ae:	65da      	str	r2, [r3, #92]	; 0x5c
        }
    }

    // Convert gyroscope to radians per second scaled by 0.5
    const FusionVector halfGyroscope = FusionVectorMultiplyScalar(gyroscope, FusionDegreesToRadians(0.5f));
 800a0b0:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800a0b4:	f7ff f974 	bl	80093a0 <FusionDegreesToRadians>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	a818      	add	r0, sp, #96	; 0x60
 800a0bc:	9300      	str	r3, [sp, #0]
 800a0be:	ab0a      	add	r3, sp, #40	; 0x28
 800a0c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a0c2:	f7ff fa25 	bl	8009510 <FusionVectorMultiplyScalar.lto_priv.0>

    // Apply feedback to gyroscope
    const FusionVector adjustedHalfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(FusionVectorAdd(halfAccelerometerFeedback, halfMagnetometerFeedback), ahrs->rampedGain));
 800a0c6:	ad33      	add	r5, sp, #204	; 0xcc
 800a0c8:	466c      	mov	r4, sp
 800a0ca:	ab1e      	add	r3, sp, #120	; 0x78
 800a0cc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a0d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a0d4:	ab24      	add	r3, sp, #144	; 0x90
 800a0d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a0d8:	4628      	mov	r0, r5
 800a0da:	f7ff f9d9 	bl	8009490 <FusionVectorAdd.lto_priv.0>
 800a0de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0e2:	a836      	add	r0, sp, #216	; 0xd8
 800a0e4:	9300      	str	r3, [sp, #0]
 800a0e6:	ab33      	add	r3, sp, #204	; 0xcc
 800a0e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a0ea:	f7ff fa11 	bl	8009510 <FusionVectorMultiplyScalar.lto_priv.0>
 800a0ee:	ad15      	add	r5, sp, #84	; 0x54
 800a0f0:	466c      	mov	r4, sp
 800a0f2:	ab36      	add	r3, sp, #216	; 0xd8
 800a0f4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a0f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a0fc:	ab18      	add	r3, sp, #96	; 0x60
 800a0fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a100:	4628      	mov	r0, r5
 800a102:	f7ff f9c5 	bl	8009490 <FusionVectorAdd.lto_priv.0>

    // Integrate rate of change of quaternion
    ahrs->quaternion = FusionQuaternionAdd(ahrs->quaternion, FusionQuaternionMultiplyVector(ahrs->quaternion, FusionVectorMultiplyScalar(adjustedHalfGyroscope, deltaTime)));
 800a106:	a839      	add	r0, sp, #228	; 0xe4
 800a108:	9b4c      	ldr	r3, [sp, #304]	; 0x130
 800a10a:	9300      	str	r3, [sp, #0]
 800a10c:	ab15      	add	r3, sp, #84	; 0x54
 800a10e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a110:	f7ff f9fe 	bl	8009510 <FusionVectorMultiplyScalar.lto_priv.0>
 800a114:	ad3c      	add	r5, sp, #240	; 0xf0
 800a116:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a118:	ac01      	add	r4, sp, #4
 800a11a:	aa39      	add	r2, sp, #228	; 0xe4
 800a11c:	ca07      	ldmia	r2, {r0, r1, r2}
 800a11e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a122:	69da      	ldr	r2, [r3, #28]
 800a124:	9200      	str	r2, [sp, #0]
 800a126:	3310      	adds	r3, #16
 800a128:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a12a:	4628      	mov	r0, r5
 800a12c:	f7ff fbd8 	bl	80098e0 <FusionQuaternionMultiplyVector>
 800a130:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800a132:	af06      	add	r7, sp, #24
 800a134:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800a136:	ad01      	add	r5, sp, #4
 800a138:	ab3c      	add	r3, sp, #240	; 0xf0
 800a13a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a13c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800a140:	69e3      	ldr	r3, [r4, #28]
 800a142:	9300      	str	r3, [sp, #0]
 800a144:	f104 0310 	add.w	r3, r4, #16
 800a148:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a14a:	4638      	mov	r0, r7
 800a14c:	f7ff fac0 	bl	80096d0 <FusionQuaternionAdd>
 800a150:	f106 0410 	add.w	r4, r6, #16
 800a154:	ab06      	add	r3, sp, #24
 800a156:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a158:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Normalise quaternion
    ahrs->quaternion = FusionQuaternionNormalise(ahrs->quaternion);
 800a15c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800a15e:	a806      	add	r0, sp, #24
 800a160:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a162:	69da      	ldr	r2, [r3, #28]
 800a164:	9200      	str	r2, [sp, #0]
 800a166:	3310      	adds	r3, #16
 800a168:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a16a:	f7ff fc59 	bl	8009a20 <FusionQuaternionNormalise>
 800a16e:	3410      	adds	r4, #16
 800a170:	ab06      	add	r3, sp, #24
 800a172:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a174:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#undef Q
}
 800a178:	bf00      	nop
 800a17a:	b041      	add	sp, #260	; 0x104
 800a17c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a17e:	bf00      	nop

0800a180 <FusionAhrsSetHeading>:
 * algorithm.  This function can be used to reset drift in heading when the AHRS
 * algorithm is being used without a magnetometer.
 * @param ahrs AHRS algorithm structure.
 * @param heading Heading angle in degrees.
 */
void FusionAhrsSetHeading(FusionAhrs *const ahrs, const float heading) {
 800a180:	b570      	push	{r4, r5, r6, lr}
 800a182:	b092      	sub	sp, #72	; 0x48
 800a184:	900b      	str	r0, [sp, #44]	; 0x2c
 800a186:	910a      	str	r1, [sp, #40]	; 0x28
#define Q ahrs->quaternion.element
    const float yaw = atan2f(Q.w * Q.z + Q.x * Q.y, 0.5f - Q.y * Q.y - Q.z * Q.z);
 800a188:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a18a:	691a      	ldr	r2, [r3, #16]
 800a18c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a18e:	69db      	ldr	r3, [r3, #28]
 800a190:	4619      	mov	r1, r3
 800a192:	4610      	mov	r0, r2
 800a194:	f7f6 fd96 	bl	8000cc4 <__aeabi_fmul>
 800a198:	4603      	mov	r3, r0
 800a19a:	461c      	mov	r4, r3
 800a19c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a19e:	695a      	ldr	r2, [r3, #20]
 800a1a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1a2:	699b      	ldr	r3, [r3, #24]
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	4610      	mov	r0, r2
 800a1a8:	f7f6 fd8c 	bl	8000cc4 <__aeabi_fmul>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	4619      	mov	r1, r3
 800a1b0:	4620      	mov	r0, r4
 800a1b2:	f7f6 fc7f 	bl	8000ab4 <__addsf3>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	461c      	mov	r4, r3
 800a1ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1bc:	699a      	ldr	r2, [r3, #24]
 800a1be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1c0:	699b      	ldr	r3, [r3, #24]
 800a1c2:	4619      	mov	r1, r3
 800a1c4:	4610      	mov	r0, r2
 800a1c6:	f7f6 fd7d 	bl	8000cc4 <__aeabi_fmul>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	4619      	mov	r1, r3
 800a1ce:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800a1d2:	f7f6 fc6d 	bl	8000ab0 <__aeabi_fsub>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	461d      	mov	r5, r3
 800a1da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1dc:	69da      	ldr	r2, [r3, #28]
 800a1de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1e0:	69db      	ldr	r3, [r3, #28]
 800a1e2:	4619      	mov	r1, r3
 800a1e4:	4610      	mov	r0, r2
 800a1e6:	f7f6 fd6d 	bl	8000cc4 <__aeabi_fmul>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	4619      	mov	r1, r3
 800a1ee:	4628      	mov	r0, r5
 800a1f0:	f7f6 fc5e 	bl	8000ab0 <__aeabi_fsub>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	4619      	mov	r1, r3
 800a1f8:	4620      	mov	r0, r4
 800a1fa:	f002 fd31 	bl	800cc60 <atan2f>
 800a1fe:	9011      	str	r0, [sp, #68]	; 0x44
    const float halfYawMinusHeading = 0.5f * (yaw - FusionDegreesToRadians(heading));
 800a200:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a202:	f7ff f8cd 	bl	80093a0 <FusionDegreesToRadians>
 800a206:	4603      	mov	r3, r0
 800a208:	4619      	mov	r1, r3
 800a20a:	9811      	ldr	r0, [sp, #68]	; 0x44
 800a20c:	f7f6 fc50 	bl	8000ab0 <__aeabi_fsub>
 800a210:	4603      	mov	r3, r0
 800a212:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800a216:	4618      	mov	r0, r3
 800a218:	f7f6 fd54 	bl	8000cc4 <__aeabi_fmul>
 800a21c:	4603      	mov	r3, r0
 800a21e:	9310      	str	r3, [sp, #64]	; 0x40
    const FusionQuaternion rotation = {
            .element.w = cosf(halfYawMinusHeading),
 800a220:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a222:	f002 fc93 	bl	800cb4c <cosf>
 800a226:	4603      	mov	r3, r0
    const FusionQuaternion rotation = {
 800a228:	930c      	str	r3, [sp, #48]	; 0x30
 800a22a:	f04f 0300 	mov.w	r3, #0
 800a22e:	930d      	str	r3, [sp, #52]	; 0x34
 800a230:	f04f 0300 	mov.w	r3, #0
 800a234:	930e      	str	r3, [sp, #56]	; 0x38
            .element.x = 0.0f,
            .element.y = 0.0f,
            .element.z = -1.0f * sinf(halfYawMinusHeading),
 800a236:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a238:	f002 fcba 	bl	800cbb0 <sinf>
 800a23c:	4603      	mov	r3, r0
 800a23e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    const FusionQuaternion rotation = {
 800a242:	930f      	str	r3, [sp, #60]	; 0x3c
    };
    ahrs->quaternion = FusionQuaternionMultiply(rotation, ahrs->quaternion);
 800a244:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a246:	ae06      	add	r6, sp, #24
 800a248:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a24a:	ac01      	add	r4, sp, #4
 800a24c:	3310      	adds	r3, #16
 800a24e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a250:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a254:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a256:	9300      	str	r3, [sp, #0]
 800a258:	ab0c      	add	r3, sp, #48	; 0x30
 800a25a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a25c:	4630      	mov	r0, r6
 800a25e:	f7ff fa6f 	bl	8009740 <FusionQuaternionMultiply>
 800a262:	f105 0410 	add.w	r4, r5, #16
 800a266:	ab06      	add	r3, sp, #24
 800a268:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a26a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#undef Q
}
 800a26e:	bf00      	nop
 800a270:	b012      	add	sp, #72	; 0x48
 800a272:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a280 <FusionRadiansToDegrees.lto_priv.1>:
static inline float FusionRadiansToDegrees(const float radians) {
 800a280:	b500      	push	{lr}
 800a282:	b083      	sub	sp, #12
 800a284:	9001      	str	r0, [sp, #4]
    return radians * (180.0f / (float) M_PI);
 800a286:	4904      	ldr	r1, [pc, #16]	; (800a298 <FusionRadiansToDegrees.lto_priv.1+0x18>)
 800a288:	9801      	ldr	r0, [sp, #4]
 800a28a:	f7f6 fd1b 	bl	8000cc4 <__aeabi_fmul>
 800a28e:	4603      	mov	r3, r0
}
 800a290:	4618      	mov	r0, r3
 800a292:	b003      	add	sp, #12
 800a294:	f85d fb04 	ldr.w	pc, [sp], #4
 800a298:	42652ee0 	.word	0x42652ee0
 800a29c:	00000000 	.word	0x00000000

0800a2a0 <FusionFastInverseSqrt.lto_priv.1>:
static inline float FusionFastInverseSqrt(const float x) {
 800a2a0:	b510      	push	{r4, lr}
 800a2a2:	b084      	sub	sp, #16
 800a2a4:	9001      	str	r0, [sp, #4]
    Union32 union32 = {.f = x};
 800a2a6:	9b01      	ldr	r3, [sp, #4]
 800a2a8:	9303      	str	r3, [sp, #12]
    union32.i = 0x5F1F1412 - (union32.i >> 1);
 800a2aa:	9b03      	ldr	r3, [sp, #12]
 800a2ac:	105a      	asrs	r2, r3, #1
 800a2ae:	4b12      	ldr	r3, [pc, #72]	; (800a2f8 <FusionFastInverseSqrt.lto_priv.1+0x58>)
 800a2b0:	1a9b      	subs	r3, r3, r2
 800a2b2:	9303      	str	r3, [sp, #12]
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 800a2b4:	9c03      	ldr	r4, [sp, #12]
 800a2b6:	4911      	ldr	r1, [pc, #68]	; (800a2fc <FusionFastInverseSqrt.lto_priv.1+0x5c>)
 800a2b8:	9801      	ldr	r0, [sp, #4]
 800a2ba:	f7f6 fd03 	bl	8000cc4 <__aeabi_fmul>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	461a      	mov	r2, r3
 800a2c2:	9b03      	ldr	r3, [sp, #12]
 800a2c4:	4619      	mov	r1, r3
 800a2c6:	4610      	mov	r0, r2
 800a2c8:	f7f6 fcfc 	bl	8000cc4 <__aeabi_fmul>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	461a      	mov	r2, r3
 800a2d0:	9b03      	ldr	r3, [sp, #12]
 800a2d2:	4619      	mov	r1, r3
 800a2d4:	4610      	mov	r0, r2
 800a2d6:	f7f6 fcf5 	bl	8000cc4 <__aeabi_fmul>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	4619      	mov	r1, r3
 800a2de:	4808      	ldr	r0, [pc, #32]	; (800a300 <FusionFastInverseSqrt.lto_priv.1+0x60>)
 800a2e0:	f7f6 fbe6 	bl	8000ab0 <__aeabi_fsub>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	4619      	mov	r1, r3
 800a2e8:	4620      	mov	r0, r4
 800a2ea:	f7f6 fceb 	bl	8000cc4 <__aeabi_fmul>
 800a2ee:	4603      	mov	r3, r0
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	b004      	add	sp, #16
 800a2f4:	bd10      	pop	{r4, pc}
 800a2f6:	bf00      	nop
 800a2f8:	5f1f1412 	.word	0x5f1f1412
 800a2fc:	3f36d312 	.word	0x3f36d312
 800a300:	3fd851ff 	.word	0x3fd851ff
	...

0800a310 <FusionVectorSum.lto_priv.1>:
static inline float FusionVectorSum(const FusionVector vector) {
 800a310:	b500      	push	{lr}
 800a312:	b085      	sub	sp, #20
 800a314:	ab01      	add	r3, sp, #4
 800a316:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return vector.axis.x + vector.axis.y + vector.axis.z;
 800a31a:	9b01      	ldr	r3, [sp, #4]
 800a31c:	9a02      	ldr	r2, [sp, #8]
 800a31e:	4611      	mov	r1, r2
 800a320:	4618      	mov	r0, r3
 800a322:	f7f6 fbc7 	bl	8000ab4 <__addsf3>
 800a326:	4603      	mov	r3, r0
 800a328:	461a      	mov	r2, r3
 800a32a:	9b03      	ldr	r3, [sp, #12]
 800a32c:	4619      	mov	r1, r3
 800a32e:	4610      	mov	r0, r2
 800a330:	f7f6 fbc0 	bl	8000ab4 <__addsf3>
 800a334:	4603      	mov	r3, r0
}
 800a336:	4618      	mov	r0, r3
 800a338:	b005      	add	sp, #20
 800a33a:	f85d fb04 	ldr.w	pc, [sp], #4
 800a33e:	bf00      	nop

0800a340 <FusionVectorMultiplyScalar.lto_priv.1>:
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 800a340:	b510      	push	{r4, lr}
 800a342:	b088      	sub	sp, #32
 800a344:	9003      	str	r0, [sp, #12]
 800a346:	4668      	mov	r0, sp
 800a348:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    result.axis.x = vector.axis.x * scalar;
 800a34c:	9b00      	ldr	r3, [sp, #0]
 800a34e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a350:	4618      	mov	r0, r3
 800a352:	f7f6 fcb7 	bl	8000cc4 <__aeabi_fmul>
 800a356:	4603      	mov	r3, r0
 800a358:	9305      	str	r3, [sp, #20]
    result.axis.y = vector.axis.y * scalar;
 800a35a:	9b01      	ldr	r3, [sp, #4]
 800a35c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a35e:	4618      	mov	r0, r3
 800a360:	f7f6 fcb0 	bl	8000cc4 <__aeabi_fmul>
 800a364:	4603      	mov	r3, r0
 800a366:	9306      	str	r3, [sp, #24]
    result.axis.z = vector.axis.z * scalar;
 800a368:	9b02      	ldr	r3, [sp, #8]
 800a36a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a36c:	4618      	mov	r0, r3
 800a36e:	f7f6 fca9 	bl	8000cc4 <__aeabi_fmul>
 800a372:	4603      	mov	r3, r0
 800a374:	9307      	str	r3, [sp, #28]
    return result;
 800a376:	9b03      	ldr	r3, [sp, #12]
 800a378:	461c      	mov	r4, r3
 800a37a:	ab05      	add	r3, sp, #20
 800a37c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a380:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a384:	9803      	ldr	r0, [sp, #12]
 800a386:	b008      	add	sp, #32
 800a388:	bd10      	pop	{r4, pc}
 800a38a:	bf00      	nop
 800a38c:	0000      	movs	r0, r0
	...

0800a390 <FusionVectorHadamardProduct.lto_priv.1>:
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 800a390:	b510      	push	{r4, lr}
 800a392:	b088      	sub	sp, #32
 800a394:	9003      	str	r0, [sp, #12]
 800a396:	4668      	mov	r0, sp
 800a398:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
 800a39c:	9b00      	ldr	r3, [sp, #0]
 800a39e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a3a0:	4611      	mov	r1, r2
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f7f6 fc8e 	bl	8000cc4 <__aeabi_fmul>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	9305      	str	r3, [sp, #20]
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
 800a3ac:	9b01      	ldr	r3, [sp, #4]
 800a3ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a3b0:	4611      	mov	r1, r2
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f7f6 fc86 	bl	8000cc4 <__aeabi_fmul>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	9306      	str	r3, [sp, #24]
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
 800a3bc:	9b02      	ldr	r3, [sp, #8]
 800a3be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3c0:	4611      	mov	r1, r2
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f7f6 fc7e 	bl	8000cc4 <__aeabi_fmul>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	9307      	str	r3, [sp, #28]
    return result;
 800a3cc:	9b03      	ldr	r3, [sp, #12]
 800a3ce:	461c      	mov	r4, r3
 800a3d0:	ab05      	add	r3, sp, #20
 800a3d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a3d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a3da:	9803      	ldr	r0, [sp, #12]
 800a3dc:	b008      	add	sp, #32
 800a3de:	bd10      	pop	{r4, pc}

0800a3e0 <FusionVectorCrossProduct.lto_priv.1>:
static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector vectorB) {
 800a3e0:	b510      	push	{r4, lr}
 800a3e2:	b088      	sub	sp, #32
 800a3e4:	9003      	str	r0, [sp, #12]
 800a3e6:	4668      	mov	r0, sp
 800a3e8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    result.axis.x = A.y * B.z - A.z * B.y;
 800a3ec:	9b01      	ldr	r3, [sp, #4]
 800a3ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3f0:	4611      	mov	r1, r2
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f7f6 fc66 	bl	8000cc4 <__aeabi_fmul>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	461c      	mov	r4, r3
 800a3fc:	9b02      	ldr	r3, [sp, #8]
 800a3fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a400:	4611      	mov	r1, r2
 800a402:	4618      	mov	r0, r3
 800a404:	f7f6 fc5e 	bl	8000cc4 <__aeabi_fmul>
 800a408:	4603      	mov	r3, r0
 800a40a:	4619      	mov	r1, r3
 800a40c:	4620      	mov	r0, r4
 800a40e:	f7f6 fb4f 	bl	8000ab0 <__aeabi_fsub>
 800a412:	4603      	mov	r3, r0
 800a414:	9305      	str	r3, [sp, #20]
    result.axis.y = A.z * B.x - A.x * B.z;
 800a416:	9b02      	ldr	r3, [sp, #8]
 800a418:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a41a:	4611      	mov	r1, r2
 800a41c:	4618      	mov	r0, r3
 800a41e:	f7f6 fc51 	bl	8000cc4 <__aeabi_fmul>
 800a422:	4603      	mov	r3, r0
 800a424:	461c      	mov	r4, r3
 800a426:	9b00      	ldr	r3, [sp, #0]
 800a428:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a42a:	4611      	mov	r1, r2
 800a42c:	4618      	mov	r0, r3
 800a42e:	f7f6 fc49 	bl	8000cc4 <__aeabi_fmul>
 800a432:	4603      	mov	r3, r0
 800a434:	4619      	mov	r1, r3
 800a436:	4620      	mov	r0, r4
 800a438:	f7f6 fb3a 	bl	8000ab0 <__aeabi_fsub>
 800a43c:	4603      	mov	r3, r0
 800a43e:	9306      	str	r3, [sp, #24]
    result.axis.z = A.x * B.y - A.y * B.x;
 800a440:	9b00      	ldr	r3, [sp, #0]
 800a442:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a444:	4611      	mov	r1, r2
 800a446:	4618      	mov	r0, r3
 800a448:	f7f6 fc3c 	bl	8000cc4 <__aeabi_fmul>
 800a44c:	4603      	mov	r3, r0
 800a44e:	461c      	mov	r4, r3
 800a450:	9b01      	ldr	r3, [sp, #4]
 800a452:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a454:	4611      	mov	r1, r2
 800a456:	4618      	mov	r0, r3
 800a458:	f7f6 fc34 	bl	8000cc4 <__aeabi_fmul>
 800a45c:	4603      	mov	r3, r0
 800a45e:	4619      	mov	r1, r3
 800a460:	4620      	mov	r0, r4
 800a462:	f7f6 fb25 	bl	8000ab0 <__aeabi_fsub>
 800a466:	4603      	mov	r3, r0
 800a468:	9307      	str	r3, [sp, #28]
    return result;
 800a46a:	9b03      	ldr	r3, [sp, #12]
 800a46c:	461c      	mov	r4, r3
 800a46e:	ab05      	add	r3, sp, #20
 800a470:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a474:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a478:	9803      	ldr	r0, [sp, #12]
 800a47a:	b008      	add	sp, #32
 800a47c:	bd10      	pop	{r4, pc}
 800a47e:	bf00      	nop

0800a480 <FusionVectorMagnitudeSquared.lto_priv.1>:
static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 800a480:	b530      	push	{r4, r5, lr}
 800a482:	b08d      	sub	sp, #52	; 0x34
 800a484:	ab05      	add	r3, sp, #20
 800a486:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 800a48a:	ad09      	add	r5, sp, #36	; 0x24
 800a48c:	466c      	mov	r4, sp
 800a48e:	ab05      	add	r3, sp, #20
 800a490:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a494:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a498:	ab05      	add	r3, sp, #20
 800a49a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a49c:	4628      	mov	r0, r5
 800a49e:	f7ff ff77 	bl	800a390 <FusionVectorHadamardProduct.lto_priv.1>
 800a4a2:	ab09      	add	r3, sp, #36	; 0x24
 800a4a4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a4a8:	f7ff ff32 	bl	800a310 <FusionVectorSum.lto_priv.1>
 800a4ac:	4603      	mov	r3, r0
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	b00d      	add	sp, #52	; 0x34
 800a4b2:	bd30      	pop	{r4, r5, pc}
	...

0800a4c0 <FusionVectorNormalise.lto_priv.1>:
static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 800a4c0:	b500      	push	{lr}
 800a4c2:	b089      	sub	sp, #36	; 0x24
 800a4c4:	9005      	str	r0, [sp, #20]
 800a4c6:	a802      	add	r0, sp, #8
 800a4c8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 800a4cc:	ab02      	add	r3, sp, #8
 800a4ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a4d2:	f7ff ffd5 	bl	800a480 <FusionVectorMagnitudeSquared.lto_priv.1>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f7ff fee1 	bl	800a2a0 <FusionFastInverseSqrt.lto_priv.1>
 800a4de:	9007      	str	r0, [sp, #28]
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 800a4e0:	9805      	ldr	r0, [sp, #20]
 800a4e2:	9b07      	ldr	r3, [sp, #28]
 800a4e4:	9300      	str	r3, [sp, #0]
 800a4e6:	ab02      	add	r3, sp, #8
 800a4e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a4ea:	f7ff ff29 	bl	800a340 <FusionVectorMultiplyScalar.lto_priv.1>
}
 800a4ee:	9805      	ldr	r0, [sp, #20]
 800a4f0:	b009      	add	sp, #36	; 0x24
 800a4f2:	f85d fb04 	ldr.w	pc, [sp], #4
 800a4f6:	bf00      	nop
	...

0800a500 <FusionCompassCalculateHeading>:
 * @brief Calculates the heading relative to magnetic north.
 * @param accelerometer Accelerometer measurement in any calibrated units.
 * @param magnetometer Magnetometer measurement in any calibrated units.
 * @return Heading angle in degrees.
 */
float FusionCompassCalculateHeading(const FusionVector accelerometer, const FusionVector magnetometer) {
 800a500:	b082      	sub	sp, #8
 800a502:	b530      	push	{r4, r5, lr}
 800a504:	b095      	sub	sp, #84	; 0x54
 800a506:	ac05      	add	r4, sp, #20
 800a508:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a50c:	9319      	str	r3, [sp, #100]	; 0x64

    // Compute direction of magnetic west (Earth's y axis)
    const FusionVector magneticWest = FusionVectorNormalise(FusionVectorCrossProduct(accelerometer, magnetometer));
 800a50e:	ad0e      	add	r5, sp, #56	; 0x38
 800a510:	466c      	mov	r4, sp
 800a512:	ab19      	add	r3, sp, #100	; 0x64
 800a514:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a518:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a51c:	ab05      	add	r3, sp, #20
 800a51e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a520:	4628      	mov	r0, r5
 800a522:	f7ff ff5d 	bl	800a3e0 <FusionVectorCrossProduct.lto_priv.1>
 800a526:	a80b      	add	r0, sp, #44	; 0x2c
 800a528:	ab0e      	add	r3, sp, #56	; 0x38
 800a52a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a52c:	f7ff ffc8 	bl	800a4c0 <FusionVectorNormalise.lto_priv.1>

    // Compute direction of magnetic north (Earth's x axis)
    const FusionVector magneticNorth = FusionVectorNormalise(FusionVectorCrossProduct(magneticWest, accelerometer));
 800a530:	ad11      	add	r5, sp, #68	; 0x44
 800a532:	466c      	mov	r4, sp
 800a534:	ab05      	add	r3, sp, #20
 800a536:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a53a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a53e:	ab0b      	add	r3, sp, #44	; 0x2c
 800a540:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a542:	4628      	mov	r0, r5
 800a544:	f7ff ff4c 	bl	800a3e0 <FusionVectorCrossProduct.lto_priv.1>
 800a548:	a808      	add	r0, sp, #32
 800a54a:	ab11      	add	r3, sp, #68	; 0x44
 800a54c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a54e:	f7ff ffb7 	bl	800a4c0 <FusionVectorNormalise.lto_priv.1>

    // Calculate angular heading relative to magnetic north
    return FusionRadiansToDegrees(atan2f(magneticWest.axis.x, magneticNorth.axis.x));
 800a552:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a554:	9a08      	ldr	r2, [sp, #32]
 800a556:	4611      	mov	r1, r2
 800a558:	4618      	mov	r0, r3
 800a55a:	f002 fb81 	bl	800cc60 <atan2f>
 800a55e:	4603      	mov	r3, r0
 800a560:	4618      	mov	r0, r3
 800a562:	f7ff fe8d 	bl	800a280 <FusionRadiansToDegrees.lto_priv.1>
 800a566:	4603      	mov	r3, r0
}
 800a568:	4618      	mov	r0, r3
 800a56a:	b015      	add	sp, #84	; 0x54
 800a56c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a570:	b002      	add	sp, #8
 800a572:	4770      	bx	lr
	...

0800a580 <osalThreadSleep.lto_priv.2>:
static inline void osalThreadSleep(sysinterval_t delay) {
 800a580:	b500      	push	{lr}
 800a582:	b083      	sub	sp, #12
 800a584:	9001      	str	r0, [sp, #4]
  chThdSleep(delay);
 800a586:	9801      	ldr	r0, [sp, #4]
 800a588:	f7fc ffa2 	bl	80074d0 <chThdSleep>
}
 800a58c:	bf00      	nop
 800a58e:	b003      	add	sp, #12
 800a590:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800a5a0 <lsm6dslI2CReadRegister>:
 * @param[in]  n         number of consecutive register to read
 * @return               the operation status.
 * @notapi
 */
msg_t lsm6dslI2CReadRegister(I2CDriver *i2cp, lsm6dsl_sad_t sad, uint8_t reg,
                             uint8_t* rxbuf, size_t n) {
 800a5a0:	b500      	push	{lr}
 800a5a2:	b089      	sub	sp, #36	; 0x24
 800a5a4:	9007      	str	r0, [sp, #28]
 800a5a6:	9305      	str	r3, [sp, #20]
 800a5a8:	460b      	mov	r3, r1
 800a5aa:	f88d 301b 	strb.w	r3, [sp, #27]
 800a5ae:	4613      	mov	r3, r2
 800a5b0:	f88d 301a 	strb.w	r3, [sp, #26]

  return i2cMasterTransmitTimeout(i2cp, sad, &reg, 1, rxbuf, n,
 800a5b4:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800a5b8:	b299      	uxth	r1, r3
 800a5ba:	f10d 021a 	add.w	r2, sp, #26
 800a5be:	f04f 33ff 	mov.w	r3, #4294967295
 800a5c2:	9302      	str	r3, [sp, #8]
 800a5c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5c6:	9301      	str	r3, [sp, #4]
 800a5c8:	9b05      	ldr	r3, [sp, #20]
 800a5ca:	9300      	str	r3, [sp, #0]
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	9807      	ldr	r0, [sp, #28]
 800a5d0:	f7f7 fd76 	bl	80020c0 <i2cMasterTransmitTimeout>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	bf00      	nop
                                  TIME_INFINITE);
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	b009      	add	sp, #36	; 0x24
 800a5dc:	f85d fb04 	ldr.w	pc, [sp], #4

0800a5e0 <acc_get_axes_number.lto_priv.0>:
 *
 * @param[in] ip        pointer to @p BaseAccelerometer interface.
 *
 * @return              the number of axes.
 */
static size_t acc_get_axes_number(void *ip) {
 800a5e0:	b082      	sub	sp, #8
 800a5e2:	9001      	str	r0, [sp, #4]
  (void)ip;

  return LSM6DSL_ACC_NUMBER_OF_AXES;
 800a5e4:	2303      	movs	r3, #3
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	b002      	add	sp, #8
 800a5ea:	4770      	bx	lr
 800a5ec:	0000      	movs	r0, r0
	...

0800a5f0 <acc_read_raw.lto_priv.0>:
 * @retval MSG_OK       if the function succeeded.
 * @retval MSG_RESET    if one or more I2C errors occurred, the errors can
 *                      be retrieved using @p i2cGetErrors().
 * @retval MSG_TIMEOUT  if a timeout occurred before operation end.
 */
static msg_t acc_read_raw(void *ip, int32_t axes[]) {
 800a5f0:	b500      	push	{lr}
 800a5f2:	b08b      	sub	sp, #44	; 0x2c
 800a5f4:	9003      	str	r0, [sp, #12]
 800a5f6:	9102      	str	r1, [sp, #8]
  msg_t msg;

  osalDbgCheck((ip != NULL) && (axes != NULL));

  /* Getting parent instance pointer.*/
  devp = objGetInstance(LSM6DSLDriver*, (BaseAccelerometer*)ip);
 800a5f8:	9a03      	ldr	r2, [sp, #12]
 800a5fa:	9b03      	ldr	r3, [sp, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	1ad3      	subs	r3, r2, r3
 800a602:	9306      	str	r3, [sp, #24]
  i2cAcquireBus(devp->config->i2cp);
  i2cStart(devp->config->i2cp,
           devp->config->i2ccfg);
#endif /* LSM6DSL_SHARED_I2C */

  msg = lsm6dslI2CReadRegister(devp->config->i2cp, devp->config->slaveaddress,
 800a604:	9b06      	ldr	r3, [sp, #24]
 800a606:	691b      	ldr	r3, [r3, #16]
 800a608:	6818      	ldr	r0, [r3, #0]
 800a60a:	9b06      	ldr	r3, [sp, #24]
 800a60c:	691b      	ldr	r3, [r3, #16]
 800a60e:	7a19      	ldrb	r1, [r3, #8]
 800a610:	ab04      	add	r3, sp, #16
 800a612:	2206      	movs	r2, #6
 800a614:	9200      	str	r2, [sp, #0]
 800a616:	2228      	movs	r2, #40	; 0x28
 800a618:	f7ff ffc2 	bl	800a5a0 <lsm6dslI2CReadRegister>
 800a61c:	9008      	str	r0, [sp, #32]

#if LSM6DSL_SHARED_I2C
  i2cReleaseBus(devp->config->i2cp);
#endif /* LSM6DSL_SHARED_I2C */
#endif /* LSM6DSL_USE_I2C */
  if(msg == MSG_OK)
 800a61e:	9b08      	ldr	r3, [sp, #32]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d12b      	bne.n	800a67c <acc_read_raw.lto_priv.0+0x8c>
    for(i = 0; i < LSM6DSL_ACC_NUMBER_OF_AXES; i++) {
 800a624:	2300      	movs	r3, #0
 800a626:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 800a62a:	e023      	b.n	800a674 <acc_read_raw.lto_priv.0+0x84>
      tmp = buff[2 * i] + (buff[2 * i + 1] << 8);
 800a62c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800a630:	005b      	lsls	r3, r3, #1
 800a632:	3328      	adds	r3, #40	; 0x28
 800a634:	446b      	add	r3, sp
 800a636:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800a63a:	b29a      	uxth	r2, r3
 800a63c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800a640:	005b      	lsls	r3, r3, #1
 800a642:	3301      	adds	r3, #1
 800a644:	3328      	adds	r3, #40	; 0x28
 800a646:	446b      	add	r3, sp
 800a648:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800a64c:	b29b      	uxth	r3, r3
 800a64e:	021b      	lsls	r3, r3, #8
 800a650:	b29b      	uxth	r3, r3
 800a652:	4413      	add	r3, r2
 800a654:	b29b      	uxth	r3, r3
 800a656:	f8ad 301e 	strh.w	r3, [sp, #30]
      axes[i] = (int32_t)tmp;
 800a65a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800a65e:	009b      	lsls	r3, r3, #2
 800a660:	9a02      	ldr	r2, [sp, #8]
 800a662:	4413      	add	r3, r2
 800a664:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
 800a668:	601a      	str	r2, [r3, #0]
    for(i = 0; i < LSM6DSL_ACC_NUMBER_OF_AXES; i++) {
 800a66a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800a66e:	3301      	adds	r3, #1
 800a670:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 800a674:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800a678:	2b02      	cmp	r3, #2
 800a67a:	d9d7      	bls.n	800a62c <acc_read_raw.lto_priv.0+0x3c>
    }
  return msg;
 800a67c:	9b08      	ldr	r3, [sp, #32]
 800a67e:	bf00      	nop
}
 800a680:	4618      	mov	r0, r3
 800a682:	b00b      	add	sp, #44	; 0x2c
 800a684:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800a690 <acc_read_cooked.lto_priv.0>:
 * @retval MSG_OK       if the function succeeded.
 * @retval MSG_RESET    if one or more I2C errors occurred, the errors can
 *                      be retrieved using @p i2cGetErrors().
 * @retval MSG_TIMEOUT  if a timeout occurred before operation end.
 */
static msg_t acc_read_cooked(void *ip, float axes[]) {
 800a690:	b510      	push	{r4, lr}
 800a692:	b088      	sub	sp, #32
 800a694:	9001      	str	r0, [sp, #4]
 800a696:	9100      	str	r1, [sp, #0]
  msg_t msg;

  osalDbgCheck((ip != NULL) && (axes != NULL));

  /* Getting parent instance pointer.*/
  devp = objGetInstance(LSM6DSLDriver*, (BaseAccelerometer*)ip);
 800a698:	9a01      	ldr	r2, [sp, #4]
 800a69a:	9b01      	ldr	r3, [sp, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	1ad3      	subs	r3, r2, r3
 800a6a2:	9306      	str	r3, [sp, #24]

  osalDbgAssert((devp->state == LSM6DSL_READY),
                "acc_read_cooked(), invalid state");

  msg = acc_read_raw(ip, raw);
 800a6a4:	ab02      	add	r3, sp, #8
 800a6a6:	4619      	mov	r1, r3
 800a6a8:	9801      	ldr	r0, [sp, #4]
 800a6aa:	f7ff ffa1 	bl	800a5f0 <acc_read_raw.lto_priv.0>
 800a6ae:	9005      	str	r0, [sp, #20]
  for(i = 0; i < LSM6DSL_ACC_NUMBER_OF_AXES; i++) {
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	9307      	str	r3, [sp, #28]
 800a6b4:	e023      	b.n	800a6fe <acc_read_cooked.lto_priv.0+0x6e>
    axes[i] = (raw[i] * devp->accsensitivity[i]) - devp->accbias[i];
 800a6b6:	9b07      	ldr	r3, [sp, #28]
 800a6b8:	009b      	lsls	r3, r3, #2
 800a6ba:	3320      	adds	r3, #32
 800a6bc:	446b      	add	r3, sp
 800a6be:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f7f6 faaa 	bl	8000c1c <__aeabi_i2f>
 800a6c8:	9b06      	ldr	r3, [sp, #24]
 800a6ca:	9a07      	ldr	r2, [sp, #28]
 800a6cc:	3206      	adds	r2, #6
 800a6ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6d2:	4619      	mov	r1, r3
 800a6d4:	f7f6 faf6 	bl	8000cc4 <__aeabi_fmul>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	4618      	mov	r0, r3
 800a6dc:	9a06      	ldr	r2, [sp, #24]
 800a6de:	9b07      	ldr	r3, [sp, #28]
 800a6e0:	3308      	adds	r3, #8
 800a6e2:	009b      	lsls	r3, r3, #2
 800a6e4:	4413      	add	r3, r2
 800a6e6:	6859      	ldr	r1, [r3, #4]
 800a6e8:	9b07      	ldr	r3, [sp, #28]
 800a6ea:	009b      	lsls	r3, r3, #2
 800a6ec:	9a00      	ldr	r2, [sp, #0]
 800a6ee:	18d4      	adds	r4, r2, r3
 800a6f0:	f7f6 f9de 	bl	8000ab0 <__aeabi_fsub>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	6023      	str	r3, [r4, #0]
  for(i = 0; i < LSM6DSL_ACC_NUMBER_OF_AXES; i++) {
 800a6f8:	9b07      	ldr	r3, [sp, #28]
 800a6fa:	3301      	adds	r3, #1
 800a6fc:	9307      	str	r3, [sp, #28]
 800a6fe:	9b07      	ldr	r3, [sp, #28]
 800a700:	2b02      	cmp	r3, #2
 800a702:	d9d8      	bls.n	800a6b6 <acc_read_cooked.lto_priv.0+0x26>
  }
  return msg;
 800a704:	9b05      	ldr	r3, [sp, #20]
 800a706:	bf00      	nop
}
 800a708:	4618      	mov	r0, r3
 800a70a:	b008      	add	sp, #32
 800a70c:	bd10      	pop	{r4, pc}
 800a70e:	bf00      	nop

0800a710 <acc_set_bias.lto_priv.0>:
 * @param[in] bp        a buffer which contains biases.
 *
 * @return              The operation status.
 * @retval MSG_OK       if the function succeeded.
 */
static msg_t acc_set_bias(void *ip, float *bp) {
 800a710:	b086      	sub	sp, #24
 800a712:	9001      	str	r0, [sp, #4]
 800a714:	9100      	str	r1, [sp, #0]
  LSM6DSLDriver* devp;
  uint32_t i;
  msg_t msg = MSG_OK;
 800a716:	2300      	movs	r3, #0
 800a718:	9303      	str	r3, [sp, #12]

  osalDbgCheck((ip != NULL) && (bp != NULL));

  /* Getting parent instance pointer.*/
  devp = objGetInstance(LSM6DSLDriver*, (BaseAccelerometer*)ip);
 800a71a:	9a01      	ldr	r2, [sp, #4]
 800a71c:	9b01      	ldr	r3, [sp, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	1ad3      	subs	r3, r2, r3
 800a724:	9305      	str	r3, [sp, #20]

  osalDbgAssert((devp->state == LSM6DSL_READY),
                "acc_set_bias(), invalid state");

  for(i = 0; i < LSM6DSL_ACC_NUMBER_OF_AXES; i++) {
 800a726:	2300      	movs	r3, #0
 800a728:	9304      	str	r3, [sp, #16]
 800a72a:	e00d      	b.n	800a748 <acc_set_bias.lto_priv.0+0x38>
    devp->accbias[i] = bp[i];
 800a72c:	9b04      	ldr	r3, [sp, #16]
 800a72e:	009b      	lsls	r3, r3, #2
 800a730:	9a00      	ldr	r2, [sp, #0]
 800a732:	4413      	add	r3, r2
 800a734:	681a      	ldr	r2, [r3, #0]
 800a736:	9905      	ldr	r1, [sp, #20]
 800a738:	9b04      	ldr	r3, [sp, #16]
 800a73a:	3308      	adds	r3, #8
 800a73c:	009b      	lsls	r3, r3, #2
 800a73e:	440b      	add	r3, r1
 800a740:	605a      	str	r2, [r3, #4]
  for(i = 0; i < LSM6DSL_ACC_NUMBER_OF_AXES; i++) {
 800a742:	9b04      	ldr	r3, [sp, #16]
 800a744:	3301      	adds	r3, #1
 800a746:	9304      	str	r3, [sp, #16]
 800a748:	9b04      	ldr	r3, [sp, #16]
 800a74a:	2b02      	cmp	r3, #2
 800a74c:	d9ee      	bls.n	800a72c <acc_set_bias.lto_priv.0+0x1c>
  }
  return msg;
 800a74e:	9b03      	ldr	r3, [sp, #12]
}
 800a750:	4618      	mov	r0, r3
 800a752:	b006      	add	sp, #24
 800a754:	4770      	bx	lr
 800a756:	bf00      	nop
	...

0800a760 <acc_reset_bias.lto_priv.0>:
 * @param[in] ip        pointer to @p BaseAccelerometer interface.
 *
 * @return              The operation status.
 * @retval MSG_OK       if the function succeeded.
 */
static msg_t acc_reset_bias(void *ip) {
 800a760:	b086      	sub	sp, #24
 800a762:	9001      	str	r0, [sp, #4]
  LSM6DSLDriver* devp;
  uint32_t i;
  msg_t msg = MSG_OK;
 800a764:	2300      	movs	r3, #0
 800a766:	9303      	str	r3, [sp, #12]

  osalDbgCheck(ip != NULL);

  /* Getting parent instance pointer.*/
  devp = objGetInstance(LSM6DSLDriver*, (BaseAccelerometer*)ip);
 800a768:	9a01      	ldr	r2, [sp, #4]
 800a76a:	9b01      	ldr	r3, [sp, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	1ad3      	subs	r3, r2, r3
 800a772:	9305      	str	r3, [sp, #20]

  osalDbgAssert((devp->state == LSM6DSL_READY),
                "acc_reset_bias(), invalid state");

  for(i = 0; i < LSM6DSL_ACC_NUMBER_OF_AXES; i++)
 800a774:	2300      	movs	r3, #0
 800a776:	9304      	str	r3, [sp, #16]
 800a778:	e00a      	b.n	800a790 <acc_reset_bias.lto_priv.0+0x30>
    devp->accbias[i] = LSM6DSL_ACC_BIAS;
 800a77a:	9a05      	ldr	r2, [sp, #20]
 800a77c:	9b04      	ldr	r3, [sp, #16]
 800a77e:	3308      	adds	r3, #8
 800a780:	009b      	lsls	r3, r3, #2
 800a782:	4413      	add	r3, r2
 800a784:	f04f 0200 	mov.w	r2, #0
 800a788:	605a      	str	r2, [r3, #4]
  for(i = 0; i < LSM6DSL_ACC_NUMBER_OF_AXES; i++)
 800a78a:	9b04      	ldr	r3, [sp, #16]
 800a78c:	3301      	adds	r3, #1
 800a78e:	9304      	str	r3, [sp, #16]
 800a790:	9b04      	ldr	r3, [sp, #16]
 800a792:	2b02      	cmp	r3, #2
 800a794:	d9f1      	bls.n	800a77a <acc_reset_bias.lto_priv.0+0x1a>
  return msg;
 800a796:	9b03      	ldr	r3, [sp, #12]
}
 800a798:	4618      	mov	r0, r3
 800a79a:	b006      	add	sp, #24
 800a79c:	4770      	bx	lr
 800a79e:	bf00      	nop

0800a7a0 <acc_set_sensivity.lto_priv.0>:
 * @param[in] sp        a buffer which contains sensitivities.
 *
 * @return              The operation status.
 * @retval MSG_OK       if the function succeeded.
 */
static msg_t acc_set_sensivity(void *ip, float *sp) {
 800a7a0:	b086      	sub	sp, #24
 800a7a2:	9001      	str	r0, [sp, #4]
 800a7a4:	9100      	str	r1, [sp, #0]
  LSM6DSLDriver* devp;
  uint32_t i;
  msg_t msg = MSG_OK;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	9303      	str	r3, [sp, #12]

  /* Getting parent instance pointer.*/
  devp = objGetInstance(LSM6DSLDriver*, (BaseAccelerometer*)ip);
 800a7aa:	9a01      	ldr	r2, [sp, #4]
 800a7ac:	9b01      	ldr	r3, [sp, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	1ad3      	subs	r3, r2, r3
 800a7b4:	9305      	str	r3, [sp, #20]
  osalDbgCheck((ip != NULL) && (sp != NULL));

  osalDbgAssert((devp->state == LSM6DSL_READY),
                "acc_set_sensivity(), invalid state");

  for(i = 0; i < LSM6DSL_ACC_NUMBER_OF_AXES; i++) {
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	9304      	str	r3, [sp, #16]
 800a7ba:	e00c      	b.n	800a7d6 <acc_set_sensivity.lto_priv.0+0x36>
    devp->accsensitivity[i] = sp[i];
 800a7bc:	9b04      	ldr	r3, [sp, #16]
 800a7be:	009b      	lsls	r3, r3, #2
 800a7c0:	9a00      	ldr	r2, [sp, #0]
 800a7c2:	4413      	add	r3, r2
 800a7c4:	6819      	ldr	r1, [r3, #0]
 800a7c6:	9b05      	ldr	r3, [sp, #20]
 800a7c8:	9a04      	ldr	r2, [sp, #16]
 800a7ca:	3206      	adds	r2, #6
 800a7cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < LSM6DSL_ACC_NUMBER_OF_AXES; i++) {
 800a7d0:	9b04      	ldr	r3, [sp, #16]
 800a7d2:	3301      	adds	r3, #1
 800a7d4:	9304      	str	r3, [sp, #16]
 800a7d6:	9b04      	ldr	r3, [sp, #16]
 800a7d8:	2b02      	cmp	r3, #2
 800a7da:	d9ef      	bls.n	800a7bc <acc_set_sensivity.lto_priv.0+0x1c>
  }
  return msg;
 800a7dc:	9b03      	ldr	r3, [sp, #12]
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	b006      	add	sp, #24
 800a7e2:	4770      	bx	lr
	...

0800a7f0 <acc_reset_sensivity.lto_priv.0>:
 *
 * @return              The operation status.
 * @retval MSG_OK       if the function succeeded.
 * @retval MSG_RESET    otherwise.
 */
static msg_t acc_reset_sensivity(void *ip) {
 800a7f0:	b086      	sub	sp, #24
 800a7f2:	9001      	str	r0, [sp, #4]
  LSM6DSLDriver* devp;
  uint32_t i;
  msg_t msg = MSG_OK;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	9305      	str	r3, [sp, #20]

  osalDbgCheck(ip != NULL);

  /* Getting parent instance pointer.*/
  devp = objGetInstance(LSM6DSLDriver*, (BaseAccelerometer*)ip);
 800a7f8:	9a01      	ldr	r2, [sp, #4]
 800a7fa:	9b01      	ldr	r3, [sp, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	1ad3      	subs	r3, r2, r3
 800a802:	9303      	str	r3, [sp, #12]

  osalDbgAssert((devp->state == LSM6DSL_READY),
                "acc_reset_sensivity(), invalid state");

  if(devp->config->accfullscale == LSM6DSL_ACC_FS_2G)
 800a804:	9b03      	ldr	r3, [sp, #12]
 800a806:	691b      	ldr	r3, [r3, #16]
 800a808:	7d1b      	ldrb	r3, [r3, #20]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d10f      	bne.n	800a82e <acc_reset_sensivity.lto_priv.0+0x3e>
    for(i = 0; i < LSM6DSL_ACC_NUMBER_OF_AXES; i++)
 800a80e:	2300      	movs	r3, #0
 800a810:	9304      	str	r3, [sp, #16]
 800a812:	e008      	b.n	800a826 <acc_reset_sensivity.lto_priv.0+0x36>
      devp->accsensitivity[i] = LSM6DSL_ACC_SENS_2G;
 800a814:	9b03      	ldr	r3, [sp, #12]
 800a816:	9a04      	ldr	r2, [sp, #16]
 800a818:	3206      	adds	r2, #6
 800a81a:	4928      	ldr	r1, [pc, #160]	; (800a8bc <acc_reset_sensivity.lto_priv.0+0xcc>)
 800a81c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(i = 0; i < LSM6DSL_ACC_NUMBER_OF_AXES; i++)
 800a820:	9b04      	ldr	r3, [sp, #16]
 800a822:	3301      	adds	r3, #1
 800a824:	9304      	str	r3, [sp, #16]
 800a826:	9b04      	ldr	r3, [sp, #16]
 800a828:	2b02      	cmp	r3, #2
 800a82a:	d9f3      	bls.n	800a814 <acc_reset_sensivity.lto_priv.0+0x24>
 800a82c:	e041      	b.n	800a8b2 <acc_reset_sensivity.lto_priv.0+0xc2>
  else if(devp->config->accfullscale == LSM6DSL_ACC_FS_4G)
 800a82e:	9b03      	ldr	r3, [sp, #12]
 800a830:	691b      	ldr	r3, [r3, #16]
 800a832:	7d1b      	ldrb	r3, [r3, #20]
 800a834:	2b40      	cmp	r3, #64	; 0x40
 800a836:	d10f      	bne.n	800a858 <acc_reset_sensivity.lto_priv.0+0x68>
	for(i = 0; i < LSM6DSL_ACC_NUMBER_OF_AXES; i++)
 800a838:	2300      	movs	r3, #0
 800a83a:	9304      	str	r3, [sp, #16]
 800a83c:	e008      	b.n	800a850 <acc_reset_sensivity.lto_priv.0+0x60>
      devp->accsensitivity[i] = LSM6DSL_ACC_SENS_4G;
 800a83e:	9b03      	ldr	r3, [sp, #12]
 800a840:	9a04      	ldr	r2, [sp, #16]
 800a842:	3206      	adds	r2, #6
 800a844:	491e      	ldr	r1, [pc, #120]	; (800a8c0 <acc_reset_sensivity.lto_priv.0+0xd0>)
 800a846:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(i = 0; i < LSM6DSL_ACC_NUMBER_OF_AXES; i++)
 800a84a:	9b04      	ldr	r3, [sp, #16]
 800a84c:	3301      	adds	r3, #1
 800a84e:	9304      	str	r3, [sp, #16]
 800a850:	9b04      	ldr	r3, [sp, #16]
 800a852:	2b02      	cmp	r3, #2
 800a854:	d9f3      	bls.n	800a83e <acc_reset_sensivity.lto_priv.0+0x4e>
 800a856:	e02c      	b.n	800a8b2 <acc_reset_sensivity.lto_priv.0+0xc2>
  else if(devp->config->accfullscale == LSM6DSL_ACC_FS_8G)
 800a858:	9b03      	ldr	r3, [sp, #12]
 800a85a:	691b      	ldr	r3, [r3, #16]
 800a85c:	7d1b      	ldrb	r3, [r3, #20]
 800a85e:	2b80      	cmp	r3, #128	; 0x80
 800a860:	d10f      	bne.n	800a882 <acc_reset_sensivity.lto_priv.0+0x92>
	for(i = 0; i < LSM6DSL_ACC_NUMBER_OF_AXES; i++)
 800a862:	2300      	movs	r3, #0
 800a864:	9304      	str	r3, [sp, #16]
 800a866:	e008      	b.n	800a87a <acc_reset_sensivity.lto_priv.0+0x8a>
      devp->accsensitivity[i] = LSM6DSL_ACC_SENS_8G;
 800a868:	9b03      	ldr	r3, [sp, #12]
 800a86a:	9a04      	ldr	r2, [sp, #16]
 800a86c:	3206      	adds	r2, #6
 800a86e:	4915      	ldr	r1, [pc, #84]	; (800a8c4 <acc_reset_sensivity.lto_priv.0+0xd4>)
 800a870:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(i = 0; i < LSM6DSL_ACC_NUMBER_OF_AXES; i++)
 800a874:	9b04      	ldr	r3, [sp, #16]
 800a876:	3301      	adds	r3, #1
 800a878:	9304      	str	r3, [sp, #16]
 800a87a:	9b04      	ldr	r3, [sp, #16]
 800a87c:	2b02      	cmp	r3, #2
 800a87e:	d9f3      	bls.n	800a868 <acc_reset_sensivity.lto_priv.0+0x78>
 800a880:	e017      	b.n	800a8b2 <acc_reset_sensivity.lto_priv.0+0xc2>
  else if(devp->config->accfullscale == LSM6DSL_ACC_FS_16G)
 800a882:	9b03      	ldr	r3, [sp, #12]
 800a884:	691b      	ldr	r3, [r3, #16]
 800a886:	7d1b      	ldrb	r3, [r3, #20]
 800a888:	2bc0      	cmp	r3, #192	; 0xc0
 800a88a:	d10f      	bne.n	800a8ac <acc_reset_sensivity.lto_priv.0+0xbc>
	for(i = 0; i < LSM6DSL_ACC_NUMBER_OF_AXES; i++)
 800a88c:	2300      	movs	r3, #0
 800a88e:	9304      	str	r3, [sp, #16]
 800a890:	e008      	b.n	800a8a4 <acc_reset_sensivity.lto_priv.0+0xb4>
      devp->accsensitivity[i] = LSM6DSL_ACC_SENS_16G;
 800a892:	9b03      	ldr	r3, [sp, #12]
 800a894:	9a04      	ldr	r2, [sp, #16]
 800a896:	3206      	adds	r2, #6
 800a898:	490b      	ldr	r1, [pc, #44]	; (800a8c8 <acc_reset_sensivity.lto_priv.0+0xd8>)
 800a89a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(i = 0; i < LSM6DSL_ACC_NUMBER_OF_AXES; i++)
 800a89e:	9b04      	ldr	r3, [sp, #16]
 800a8a0:	3301      	adds	r3, #1
 800a8a2:	9304      	str	r3, [sp, #16]
 800a8a4:	9b04      	ldr	r3, [sp, #16]
 800a8a6:	2b02      	cmp	r3, #2
 800a8a8:	d9f3      	bls.n	800a892 <acc_reset_sensivity.lto_priv.0+0xa2>
 800a8aa:	e002      	b.n	800a8b2 <acc_reset_sensivity.lto_priv.0+0xc2>
  else {
    osalDbgAssert(FALSE, "reset_sensivity(), accelerometer full scale issue");
    msg = MSG_RESET;
 800a8ac:	f06f 0301 	mvn.w	r3, #1
 800a8b0:	9305      	str	r3, [sp, #20]
  }
  return msg;
 800a8b2:	9b05      	ldr	r3, [sp, #20]
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	b006      	add	sp, #24
 800a8b8:	4770      	bx	lr
 800a8ba:	bf00      	nop
 800a8bc:	3d79db23 	.word	0x3d79db23
 800a8c0:	3df9db23 	.word	0x3df9db23
 800a8c4:	3e79db23 	.word	0x3e79db23
 800a8c8:	3ef9db23 	.word	0x3ef9db23
 800a8cc:	00000000 	.word	0x00000000

0800a8d0 <acc_set_full_scale.lto_priv.0>:
 *
 * @return              The operation status.
 * @retval MSG_OK       if the function succeeded.
 * @retval MSG_RESET    otherwise.
 */
static msg_t acc_set_full_scale(LSM6DSLDriver *devp, lsm6dsl_acc_fs_t fs) {
 800a8d0:	b510      	push	{r4, lr}
 800a8d2:	b08c      	sub	sp, #48	; 0x30
 800a8d4:	9005      	str	r0, [sp, #20]
 800a8d6:	460b      	mov	r3, r1
 800a8d8:	f88d 3013 	strb.w	r3, [sp, #19]
                "acc_set_full_scale(), invalid state");
  osalDbgAssert((devp->config->i2cp->state == I2C_READY),
                "acc_set_full_scale(), channel not ready");

  /* Computing new fullscale value.*/
  if(fs == LSM6DSL_ACC_FS_2G) {
 800a8dc:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d103      	bne.n	800a8ec <acc_set_full_scale.lto_priv.0+0x1c>
    newfs = LSM6DSL_ACC_2G;
 800a8e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a8e8:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8ea:	e01c      	b.n	800a926 <acc_set_full_scale.lto_priv.0+0x56>
  }
  else if(fs == LSM6DSL_ACC_FS_4G) {
 800a8ec:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800a8f0:	2b40      	cmp	r3, #64	; 0x40
 800a8f2:	d103      	bne.n	800a8fc <acc_set_full_scale.lto_priv.0+0x2c>
    newfs = LSM6DSL_ACC_4G;
 800a8f4:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 800a8f8:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8fa:	e014      	b.n	800a926 <acc_set_full_scale.lto_priv.0+0x56>
  }
  else if(fs == LSM6DSL_ACC_FS_8G) {
 800a8fc:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800a900:	2b80      	cmp	r3, #128	; 0x80
 800a902:	d103      	bne.n	800a90c <acc_set_full_scale.lto_priv.0+0x3c>
    newfs = LSM6DSL_ACC_8G;
 800a904:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 800a908:	930b      	str	r3, [sp, #44]	; 0x2c
 800a90a:	e00c      	b.n	800a926 <acc_set_full_scale.lto_priv.0+0x56>
  }
  else if(fs == LSM6DSL_ACC_FS_16G) {
 800a90c:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800a910:	2bc0      	cmp	r3, #192	; 0xc0
 800a912:	d103      	bne.n	800a91c <acc_set_full_scale.lto_priv.0+0x4c>
    newfs = LSM6DSL_ACC_16G;
 800a914:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 800a918:	930b      	str	r3, [sp, #44]	; 0x2c
 800a91a:	e004      	b.n	800a926 <acc_set_full_scale.lto_priv.0+0x56>
  }
  else {
    msg = MSG_RESET;
 800a91c:	f06f 0301 	mvn.w	r3, #1
 800a920:	930a      	str	r3, [sp, #40]	; 0x28
    return msg;
 800a922:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a924:	e086      	b.n	800aa34 <acc_set_full_scale.lto_priv.0+0x164>
  }

  if(newfs != devp->accfullscale) {
 800a926:	9b05      	ldr	r3, [sp, #20]
 800a928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a92a:	4619      	mov	r1, r3
 800a92c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a92e:	f7f6 fb5d 	bl	8000fec <__aeabi_fcmpeq>
 800a932:	4603      	mov	r3, r0
 800a934:	2b00      	cmp	r3, #0
 800a936:	d17b      	bne.n	800aa30 <acc_set_full_scale.lto_priv.0+0x160>
    /* Computing scale value.*/
    scale = newfs / devp->accfullscale;
 800a938:	9b05      	ldr	r3, [sp, #20]
 800a93a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a93c:	4619      	mov	r1, r3
 800a93e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a940:	f7f6 fa74 	bl	8000e2c <__aeabi_fdiv>
 800a944:	4603      	mov	r3, r0
 800a946:	9308      	str	r3, [sp, #32]
    devp->accfullscale = newfs;
 800a948:	9b05      	ldr	r3, [sp, #20]
 800a94a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a94c:	631a      	str	r2, [r3, #48]	; 0x30
		i2cStart(devp->config->i2cp,
						 devp->config->i2ccfg);
#endif /* LSM6DSL_SHARED_I2C */

    /* Updating register.*/
    msg = lsm6dslI2CReadRegister(devp->config->i2cp,
 800a94e:	9b05      	ldr	r3, [sp, #20]
 800a950:	691b      	ldr	r3, [r3, #16]
 800a952:	6818      	ldr	r0, [r3, #0]
                                 devp->config->slaveaddress,
 800a954:	9b05      	ldr	r3, [sp, #20]
 800a956:	691b      	ldr	r3, [r3, #16]
    msg = lsm6dslI2CReadRegister(devp->config->i2cp,
 800a958:	7a19      	ldrb	r1, [r3, #8]
 800a95a:	ab07      	add	r3, sp, #28
 800a95c:	3301      	adds	r3, #1
 800a95e:	2201      	movs	r2, #1
 800a960:	9200      	str	r2, [sp, #0]
 800a962:	2210      	movs	r2, #16
 800a964:	f7ff fe1c 	bl	800a5a0 <lsm6dslI2CReadRegister>
 800a968:	900a      	str	r0, [sp, #40]	; 0x28

#if LSM6DSL_SHARED_I2C
        i2cReleaseBus(devp->config->i2cp);
#endif /* LSM6DSL_SHARED_I2C */

    if(msg != MSG_OK)
 800a96a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d001      	beq.n	800a974 <acc_set_full_scale.lto_priv.0+0xa4>
      return msg;
 800a970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a972:	e05f      	b.n	800aa34 <acc_set_full_scale.lto_priv.0+0x164>

    buff[1] &= ~(LSMDSL_CTRL1_XL_FS_MASK);
 800a974:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800a978:	f023 030c 	bic.w	r3, r3, #12
 800a97c:	b2db      	uxtb	r3, r3
 800a97e:	f88d 301d 	strb.w	r3, [sp, #29]
    buff[1] |= fs;
 800a982:	f89d 201d 	ldrb.w	r2, [sp, #29]
 800a986:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800a98a:	4313      	orrs	r3, r2
 800a98c:	b2db      	uxtb	r3, r3
 800a98e:	f88d 301d 	strb.w	r3, [sp, #29]
    buff[0] = LSM6DSL_AD_CTRL1_XL;
 800a992:	2310      	movs	r3, #16
 800a994:	f88d 301c 	strb.w	r3, [sp, #28]
#if LSM6DSL_SHARED_I2C
    i2cAcquireBus(devp->config->i2cp);
    i2cStart(devp->config->i2cp, devp->config->i2ccfg);
#endif /* LSM6DSL_SHARED_I2C */

    msg = lsm6dslI2CWriteRegister(devp->config->i2cp,
 800a998:	9b05      	ldr	r3, [sp, #20]
 800a99a:	691b      	ldr	r3, [r3, #16]
 800a99c:	6818      	ldr	r0, [r3, #0]
 800a99e:	9b05      	ldr	r3, [sp, #20]
 800a9a0:	691b      	ldr	r3, [r3, #16]
 800a9a2:	7a1b      	ldrb	r3, [r3, #8]
 800a9a4:	b299      	uxth	r1, r3
 800a9a6:	aa07      	add	r2, sp, #28
 800a9a8:	f04f 33ff 	mov.w	r3, #4294967295
 800a9ac:	9302      	str	r3, [sp, #8]
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	9301      	str	r3, [sp, #4]
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	9300      	str	r3, [sp, #0]
 800a9b6:	2302      	movs	r3, #2
 800a9b8:	f7f7 fb82 	bl	80020c0 <i2cMasterTransmitTimeout>
 800a9bc:	900a      	str	r0, [sp, #40]	; 0x28

#if LSM6DSL_SHARED_I2C
		i2cReleaseBus(devp->config->i2cp);
#endif /* LSM6DSL_SHARED_I2C */

    if(msg != MSG_OK)
 800a9be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d001      	beq.n	800a9c8 <acc_set_full_scale.lto_priv.0+0xf8>
      return msg;
 800a9c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9c6:	e035      	b.n	800aa34 <acc_set_full_scale.lto_priv.0+0x164>

    /* Scaling sensitivity and bias. Re-calibration is suggested anyway.*/
    for(i = 0; i < LSM6DSL_ACC_NUMBER_OF_AXES; i++) {
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 800a9ce:	e02b      	b.n	800aa28 <acc_set_full_scale.lto_priv.0+0x158>
      devp->accsensitivity[i] *= scale;
 800a9d0:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 800a9d4:	9b05      	ldr	r3, [sp, #20]
 800a9d6:	3206      	adds	r2, #6
 800a9d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9dc:	f89d 4027 	ldrb.w	r4, [sp, #39]	; 0x27
 800a9e0:	9908      	ldr	r1, [sp, #32]
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f7f6 f96e 	bl	8000cc4 <__aeabi_fmul>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	4619      	mov	r1, r3
 800a9ec:	9b05      	ldr	r3, [sp, #20]
 800a9ee:	1da2      	adds	r2, r4, #6
 800a9f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      devp->accbias[i] *= scale;
 800a9f4:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800a9f8:	9a05      	ldr	r2, [sp, #20]
 800a9fa:	3308      	adds	r3, #8
 800a9fc:	009b      	lsls	r3, r3, #2
 800a9fe:	4413      	add	r3, r2
 800aa00:	685b      	ldr	r3, [r3, #4]
 800aa02:	f89d 4027 	ldrb.w	r4, [sp, #39]	; 0x27
 800aa06:	9908      	ldr	r1, [sp, #32]
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f7f6 f95b 	bl	8000cc4 <__aeabi_fmul>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	4619      	mov	r1, r3
 800aa12:	9a05      	ldr	r2, [sp, #20]
 800aa14:	f104 0308 	add.w	r3, r4, #8
 800aa18:	009b      	lsls	r3, r3, #2
 800aa1a:	4413      	add	r3, r2
 800aa1c:	6059      	str	r1, [r3, #4]
    for(i = 0; i < LSM6DSL_ACC_NUMBER_OF_AXES; i++) {
 800aa1e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800aa22:	3301      	adds	r3, #1
 800aa24:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 800aa28:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800aa2c:	2b02      	cmp	r3, #2
 800aa2e:	d9cf      	bls.n	800a9d0 <acc_set_full_scale.lto_priv.0+0x100>
    }
  }
  return msg;
 800aa30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa32:	bf00      	nop
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	b00c      	add	sp, #48	; 0x30
 800aa38:	bd10      	pop	{r4, pc}
 800aa3a:	bf00      	nop
 800aa3c:	0000      	movs	r0, r0
	...

0800aa40 <gyro_get_axes_number>:
 *
 * @param[in] ip        pointer to @p BaseGyroscope interface.
 *
 * @return              the number of axes.
 */
static size_t gyro_get_axes_number(void *ip) {
 800aa40:	b082      	sub	sp, #8
 800aa42:	9001      	str	r0, [sp, #4]
  (void)ip;

  return LSM6DSL_GYRO_NUMBER_OF_AXES;
 800aa44:	2303      	movs	r3, #3
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	b002      	add	sp, #8
 800aa4a:	4770      	bx	lr
 800aa4c:	0000      	movs	r0, r0
	...

0800aa50 <gyro_read_raw>:
 * @retval MSG_OK       if the function succeeded.
 * @retval MSG_RESET    if one or more I2C errors occurred, the errors can
 *                      be retrieved using @p i2cGetErrors().
 * @retval MSG_TIMEOUT  if a timeout occurred before operation end.
 */
static msg_t gyro_read_raw(void *ip, int32_t axes[LSM6DSL_GYRO_NUMBER_OF_AXES]) {
 800aa50:	b500      	push	{lr}
 800aa52:	b08b      	sub	sp, #44	; 0x2c
 800aa54:	9003      	str	r0, [sp, #12]
 800aa56:	9102      	str	r1, [sp, #8]
  LSM6DSLDriver* devp;
  int16_t tmp;
  uint8_t i, buff [2 * LSM6DSL_GYRO_NUMBER_OF_AXES];
  msg_t msg = MSG_OK;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	9308      	str	r3, [sp, #32]

  osalDbgCheck((ip != NULL) && (axes != NULL));

  /* Getting parent instance pointer.*/
  devp = objGetInstance(LSM6DSLDriver*, (BaseGyroscope*)ip);
 800aa5c:	9a03      	ldr	r2, [sp, #12]
 800aa5e:	9b03      	ldr	r3, [sp, #12]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	1ad3      	subs	r3, r2, r3
 800aa66:	9307      	str	r3, [sp, #28]
  i2cAcquireBus(devp->config->i2cp);
  i2cStart(devp->config->i2cp,
           devp->config->i2ccfg);
#endif /* LSM6DSL_SHARED_I2C */

  msg = lsm6dslI2CReadRegister(devp->config->i2cp, devp->config->slaveaddress,
 800aa68:	9b07      	ldr	r3, [sp, #28]
 800aa6a:	691b      	ldr	r3, [r3, #16]
 800aa6c:	6818      	ldr	r0, [r3, #0]
 800aa6e:	9b07      	ldr	r3, [sp, #28]
 800aa70:	691b      	ldr	r3, [r3, #16]
 800aa72:	7a19      	ldrb	r1, [r3, #8]
 800aa74:	ab05      	add	r3, sp, #20
 800aa76:	2206      	movs	r2, #6
 800aa78:	9200      	str	r2, [sp, #0]
 800aa7a:	2222      	movs	r2, #34	; 0x22
 800aa7c:	f7ff fd90 	bl	800a5a0 <lsm6dslI2CReadRegister>
 800aa80:	9008      	str	r0, [sp, #32]
#if	LSM6DSL_SHARED_I2C
  i2cReleaseBus(devp->config->i2cp);
#endif /* LSM6DSL_SHARED_I2C */
#endif /* LSM6DSL_USE_I2C */

    for(i = 0; i < LSM6DSL_GYRO_NUMBER_OF_AXES; i++) {
 800aa82:	2300      	movs	r3, #0
 800aa84:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 800aa88:	e023      	b.n	800aad2 <gyro_read_raw+0x82>
      tmp = buff[2 * i] + (buff[2 * i + 1] << 8);
 800aa8a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800aa8e:	005b      	lsls	r3, r3, #1
 800aa90:	3328      	adds	r3, #40	; 0x28
 800aa92:	446b      	add	r3, sp
 800aa94:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800aa98:	b29a      	uxth	r2, r3
 800aa9a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800aa9e:	005b      	lsls	r3, r3, #1
 800aaa0:	3301      	adds	r3, #1
 800aaa2:	3328      	adds	r3, #40	; 0x28
 800aaa4:	446b      	add	r3, sp
 800aaa6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800aaaa:	b29b      	uxth	r3, r3
 800aaac:	021b      	lsls	r3, r3, #8
 800aaae:	b29b      	uxth	r3, r3
 800aab0:	4413      	add	r3, r2
 800aab2:	b29b      	uxth	r3, r3
 800aab4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
      axes[i] = (int32_t)tmp;
 800aab8:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800aabc:	009b      	lsls	r3, r3, #2
 800aabe:	9a02      	ldr	r2, [sp, #8]
 800aac0:	4413      	add	r3, r2
 800aac2:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
 800aac6:	601a      	str	r2, [r3, #0]
    for(i = 0; i < LSM6DSL_GYRO_NUMBER_OF_AXES; i++) {
 800aac8:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800aacc:	3301      	adds	r3, #1
 800aace:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 800aad2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800aad6:	2b02      	cmp	r3, #2
 800aad8:	d9d7      	bls.n	800aa8a <gyro_read_raw+0x3a>
    }
  return msg;
 800aada:	9b08      	ldr	r3, [sp, #32]
 800aadc:	bf00      	nop
}
 800aade:	4618      	mov	r0, r3
 800aae0:	b00b      	add	sp, #44	; 0x2c
 800aae2:	f85d fb04 	ldr.w	pc, [sp], #4
 800aae6:	bf00      	nop
	...

0800aaf0 <gyro_read_cooked>:
 * @retval MSG_OK       if the function succeeded.
 * @retval MSG_RESET    if one or more I2C errors occurred, the errors can
 *                      be retrieved using @p i2cGetErrors().
 * @retval MSG_TIMEOUT  if a timeout occurred before operation end.
 */
static msg_t gyro_read_cooked(void *ip, float axes[]) {
 800aaf0:	b510      	push	{r4, lr}
 800aaf2:	b088      	sub	sp, #32
 800aaf4:	9001      	str	r0, [sp, #4]
 800aaf6:	9100      	str	r1, [sp, #0]
  msg_t msg;

  osalDbgCheck((ip != NULL) && (axes != NULL));

  /* Getting parent instance pointer.*/
  devp = objGetInstance(LSM6DSLDriver*, (BaseGyroscope*)ip);
 800aaf8:	9a01      	ldr	r2, [sp, #4]
 800aafa:	9b01      	ldr	r3, [sp, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	1ad3      	subs	r3, r2, r3
 800ab02:	9306      	str	r3, [sp, #24]

  osalDbgAssert((devp->state == LSM6DSL_READY),
                "gyro_read_cooked(), invalid state");

  msg = gyro_read_raw(ip, raw);
 800ab04:	ab02      	add	r3, sp, #8
 800ab06:	4619      	mov	r1, r3
 800ab08:	9801      	ldr	r0, [sp, #4]
 800ab0a:	f7ff ffa1 	bl	800aa50 <gyro_read_raw>
 800ab0e:	9005      	str	r0, [sp, #20]
  for(i = 0; i < LSM6DSL_GYRO_NUMBER_OF_AXES; i++){
 800ab10:	2300      	movs	r3, #0
 800ab12:	9307      	str	r3, [sp, #28]
 800ab14:	e023      	b.n	800ab5e <gyro_read_cooked+0x6e>
    axes[i] = (raw[i] * devp->gyrosensitivity[i]) - devp->gyrobias[i];
 800ab16:	9b07      	ldr	r3, [sp, #28]
 800ab18:	009b      	lsls	r3, r3, #2
 800ab1a:	3320      	adds	r3, #32
 800ab1c:	446b      	add	r3, sp
 800ab1e:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800ab22:	4618      	mov	r0, r3
 800ab24:	f7f6 f87a 	bl	8000c1c <__aeabi_i2f>
 800ab28:	9b06      	ldr	r3, [sp, #24]
 800ab2a:	9a07      	ldr	r2, [sp, #28]
 800ab2c:	320e      	adds	r2, #14
 800ab2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab32:	4619      	mov	r1, r3
 800ab34:	f7f6 f8c6 	bl	8000cc4 <__aeabi_fmul>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	9a06      	ldr	r2, [sp, #24]
 800ab3e:	9b07      	ldr	r3, [sp, #28]
 800ab40:	3310      	adds	r3, #16
 800ab42:	009b      	lsls	r3, r3, #2
 800ab44:	4413      	add	r3, r2
 800ab46:	6859      	ldr	r1, [r3, #4]
 800ab48:	9b07      	ldr	r3, [sp, #28]
 800ab4a:	009b      	lsls	r3, r3, #2
 800ab4c:	9a00      	ldr	r2, [sp, #0]
 800ab4e:	18d4      	adds	r4, r2, r3
 800ab50:	f7f5 ffae 	bl	8000ab0 <__aeabi_fsub>
 800ab54:	4603      	mov	r3, r0
 800ab56:	6023      	str	r3, [r4, #0]
  for(i = 0; i < LSM6DSL_GYRO_NUMBER_OF_AXES; i++){
 800ab58:	9b07      	ldr	r3, [sp, #28]
 800ab5a:	3301      	adds	r3, #1
 800ab5c:	9307      	str	r3, [sp, #28]
 800ab5e:	9b07      	ldr	r3, [sp, #28]
 800ab60:	2b02      	cmp	r3, #2
 800ab62:	d9d8      	bls.n	800ab16 <gyro_read_cooked+0x26>
  }
  return msg;
 800ab64:	9b05      	ldr	r3, [sp, #20]
 800ab66:	bf00      	nop
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	b008      	add	sp, #32
 800ab6c:	bd10      	pop	{r4, pc}
 800ab6e:	bf00      	nop

0800ab70 <gyro_sample_bias>:
 * @param[in] ip        pointer to @p BaseGyroscope interface.
 *
 * @return              The operation status.
 * @retval MSG_OK       if the function succeeded.
 */
static msg_t gyro_sample_bias(void *ip) {
 800ab70:	b500      	push	{lr}
 800ab72:	b08d      	sub	sp, #52	; 0x34
 800ab74:	9001      	str	r0, [sp, #4]
  LSM6DSLDriver* devp;
  uint32_t i, j;
  int32_t raw[LSM6DSL_GYRO_NUMBER_OF_AXES];
  int32_t buff[LSM6DSL_GYRO_NUMBER_OF_AXES] = {0, 0, 0};
 800ab76:	2300      	movs	r3, #0
 800ab78:	9302      	str	r3, [sp, #8]
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	9303      	str	r3, [sp, #12]
 800ab7e:	2300      	movs	r3, #0
 800ab80:	9304      	str	r3, [sp, #16]
  msg_t msg;
	
  osalDbgCheck(ip != NULL);

  /* Getting parent instance pointer.*/
  devp = objGetInstance(LSM6DSLDriver*, (BaseGyroscope*)ip);
 800ab82:	9a01      	ldr	r2, [sp, #4]
 800ab84:	9b01      	ldr	r3, [sp, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	1ad3      	subs	r3, r2, r3
 800ab8c:	9308      	str	r3, [sp, #32]
#if LSM6DSL_USE_I2C
  osalDbgAssert((devp->config->i2cp->state == I2C_READY),
                "gyro_sample_bias(), channel not ready");
#endif

  for(i = 0; i < LSM6DSL_GYRO_BIAS_ACQ_TIMES; i++){
 800ab8e:	2300      	movs	r3, #0
 800ab90:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab92:	e02c      	b.n	800abee <gyro_sample_bias+0x7e>
    msg = gyro_read_raw(ip, raw);
 800ab94:	ab05      	add	r3, sp, #20
 800ab96:	4619      	mov	r1, r3
 800ab98:	9801      	ldr	r0, [sp, #4]
 800ab9a:	f7ff ff59 	bl	800aa50 <gyro_read_raw>
 800ab9e:	9009      	str	r0, [sp, #36]	; 0x24
		if(msg != MSG_OK)
 800aba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d001      	beq.n	800abaa <gyro_sample_bias+0x3a>
			return msg;
 800aba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aba8:	e05b      	b.n	800ac62 <gyro_sample_bias+0xf2>
    for(j = 0; j < LSM6DSL_GYRO_NUMBER_OF_AXES; j++){
 800abaa:	2300      	movs	r3, #0
 800abac:	930a      	str	r3, [sp, #40]	; 0x28
 800abae:	e015      	b.n	800abdc <gyro_sample_bias+0x6c>
      buff[j] += raw[j];
 800abb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abb2:	009b      	lsls	r3, r3, #2
 800abb4:	3330      	adds	r3, #48	; 0x30
 800abb6:	446b      	add	r3, sp
 800abb8:	f853 2c28 	ldr.w	r2, [r3, #-40]
 800abbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abbe:	009b      	lsls	r3, r3, #2
 800abc0:	3330      	adds	r3, #48	; 0x30
 800abc2:	446b      	add	r3, sp
 800abc4:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800abc8:	441a      	add	r2, r3
 800abca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abcc:	009b      	lsls	r3, r3, #2
 800abce:	3330      	adds	r3, #48	; 0x30
 800abd0:	446b      	add	r3, sp
 800abd2:	f843 2c28 	str.w	r2, [r3, #-40]
    for(j = 0; j < LSM6DSL_GYRO_NUMBER_OF_AXES; j++){
 800abd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abd8:	3301      	adds	r3, #1
 800abda:	930a      	str	r3, [sp, #40]	; 0x28
 800abdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abde:	2b02      	cmp	r3, #2
 800abe0:	d9e6      	bls.n	800abb0 <gyro_sample_bias+0x40>
    }
    osalThreadSleepMicroseconds(LSM6DSL_GYRO_BIAS_SETTLING_US);
 800abe2:	2032      	movs	r0, #50	; 0x32
 800abe4:	f7ff fccc 	bl	800a580 <osalThreadSleep.lto_priv.2>
  for(i = 0; i < LSM6DSL_GYRO_BIAS_ACQ_TIMES; i++){
 800abe8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abea:	3301      	adds	r3, #1
 800abec:	930b      	str	r3, [sp, #44]	; 0x2c
 800abee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abf0:	2b31      	cmp	r3, #49	; 0x31
 800abf2:	d9cf      	bls.n	800ab94 <gyro_sample_bias+0x24>
  }

  for(i = 0; i < LSM6DSL_GYRO_NUMBER_OF_AXES; i++){
 800abf4:	2300      	movs	r3, #0
 800abf6:	930b      	str	r3, [sp, #44]	; 0x2c
 800abf8:	e02e      	b.n	800ac58 <gyro_sample_bias+0xe8>
    devp->gyrobias[i] = (buff[i] / LSM6DSL_GYRO_BIAS_ACQ_TIMES);
 800abfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abfc:	009b      	lsls	r3, r3, #2
 800abfe:	3330      	adds	r3, #48	; 0x30
 800ac00:	446b      	add	r3, sp
 800ac02:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800ac06:	4a19      	ldr	r2, [pc, #100]	; (800ac6c <gyro_sample_bias+0xfc>)
 800ac08:	fb82 1203 	smull	r1, r2, r2, r3
 800ac0c:	1112      	asrs	r2, r2, #4
 800ac0e:	17db      	asrs	r3, r3, #31
 800ac10:	1ad3      	subs	r3, r2, r3
 800ac12:	4618      	mov	r0, r3
 800ac14:	f7f6 f802 	bl	8000c1c <__aeabi_i2f>
 800ac18:	4601      	mov	r1, r0
 800ac1a:	9a08      	ldr	r2, [sp, #32]
 800ac1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac1e:	3310      	adds	r3, #16
 800ac20:	009b      	lsls	r3, r3, #2
 800ac22:	4413      	add	r3, r2
 800ac24:	6059      	str	r1, [r3, #4]
    devp->gyrobias[i] *= devp->gyrosensitivity[i];
 800ac26:	9a08      	ldr	r2, [sp, #32]
 800ac28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac2a:	3310      	adds	r3, #16
 800ac2c:	009b      	lsls	r3, r3, #2
 800ac2e:	4413      	add	r3, r2
 800ac30:	6858      	ldr	r0, [r3, #4]
 800ac32:	9b08      	ldr	r3, [sp, #32]
 800ac34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ac36:	320e      	adds	r2, #14
 800ac38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac3c:	4619      	mov	r1, r3
 800ac3e:	f7f6 f841 	bl	8000cc4 <__aeabi_fmul>
 800ac42:	4603      	mov	r3, r0
 800ac44:	4619      	mov	r1, r3
 800ac46:	9a08      	ldr	r2, [sp, #32]
 800ac48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac4a:	3310      	adds	r3, #16
 800ac4c:	009b      	lsls	r3, r3, #2
 800ac4e:	4413      	add	r3, r2
 800ac50:	6059      	str	r1, [r3, #4]
  for(i = 0; i < LSM6DSL_GYRO_NUMBER_OF_AXES; i++){
 800ac52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac54:	3301      	adds	r3, #1
 800ac56:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac5a:	2b02      	cmp	r3, #2
 800ac5c:	d9cd      	bls.n	800abfa <gyro_sample_bias+0x8a>
  }
  return msg;
 800ac5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac60:	bf00      	nop
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	b00d      	add	sp, #52	; 0x34
 800ac66:	f85d fb04 	ldr.w	pc, [sp], #4
 800ac6a:	bf00      	nop
 800ac6c:	51eb851f 	.word	0x51eb851f

0800ac70 <gyro_set_bias>:
 * @param[in] bp        a buffer which contains biases.
 *
 * @return              The operation status.
 * @retval MSG_OK       if the function succeeded.
 */
static msg_t gyro_set_bias(void *ip, float *bp) {
 800ac70:	b086      	sub	sp, #24
 800ac72:	9001      	str	r0, [sp, #4]
 800ac74:	9100      	str	r1, [sp, #0]
  LSM6DSLDriver* devp;
  uint32_t i;
  msg_t msg = MSG_OK;
 800ac76:	2300      	movs	r3, #0
 800ac78:	9303      	str	r3, [sp, #12]

  osalDbgCheck((ip != NULL) && (bp != NULL));

  /* Getting parent instance pointer.*/
  devp = objGetInstance(LSM6DSLDriver*, (BaseGyroscope*)ip);
 800ac7a:	9a01      	ldr	r2, [sp, #4]
 800ac7c:	9b01      	ldr	r3, [sp, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	1ad3      	subs	r3, r2, r3
 800ac84:	9305      	str	r3, [sp, #20]

  osalDbgAssert((devp->state == LSM6DSL_READY),
                "gyro_set_bias(), invalid state");

  for(i = 0; i < LSM6DSL_GYRO_NUMBER_OF_AXES; i++) {
 800ac86:	2300      	movs	r3, #0
 800ac88:	9304      	str	r3, [sp, #16]
 800ac8a:	e00d      	b.n	800aca8 <gyro_set_bias+0x38>
    devp->gyrobias[i] = bp[i];
 800ac8c:	9b04      	ldr	r3, [sp, #16]
 800ac8e:	009b      	lsls	r3, r3, #2
 800ac90:	9a00      	ldr	r2, [sp, #0]
 800ac92:	4413      	add	r3, r2
 800ac94:	681a      	ldr	r2, [r3, #0]
 800ac96:	9905      	ldr	r1, [sp, #20]
 800ac98:	9b04      	ldr	r3, [sp, #16]
 800ac9a:	3310      	adds	r3, #16
 800ac9c:	009b      	lsls	r3, r3, #2
 800ac9e:	440b      	add	r3, r1
 800aca0:	605a      	str	r2, [r3, #4]
  for(i = 0; i < LSM6DSL_GYRO_NUMBER_OF_AXES; i++) {
 800aca2:	9b04      	ldr	r3, [sp, #16]
 800aca4:	3301      	adds	r3, #1
 800aca6:	9304      	str	r3, [sp, #16]
 800aca8:	9b04      	ldr	r3, [sp, #16]
 800acaa:	2b02      	cmp	r3, #2
 800acac:	d9ee      	bls.n	800ac8c <gyro_set_bias+0x1c>
  }
  return msg;
 800acae:	9b03      	ldr	r3, [sp, #12]
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	b006      	add	sp, #24
 800acb4:	4770      	bx	lr
 800acb6:	bf00      	nop
	...

0800acc0 <gyro_reset_bias>:
 * @param[in] ip        pointer to @p BaseGyroscope interface.
 *
 * @return              The operation status.
 * @retval MSG_OK       if the function succeeded.
 */
static msg_t gyro_reset_bias(void *ip) {
 800acc0:	b086      	sub	sp, #24
 800acc2:	9001      	str	r0, [sp, #4]
  LSM6DSLDriver* devp;
  uint32_t i;
  msg_t msg = MSG_OK;
 800acc4:	2300      	movs	r3, #0
 800acc6:	9303      	str	r3, [sp, #12]

  osalDbgCheck(ip != NULL);

  /* Getting parent instance pointer.*/
  devp = objGetInstance(LSM6DSLDriver*, (BaseGyroscope*)ip);
 800acc8:	9a01      	ldr	r2, [sp, #4]
 800acca:	9b01      	ldr	r3, [sp, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	1ad3      	subs	r3, r2, r3
 800acd2:	9305      	str	r3, [sp, #20]

  osalDbgAssert((devp->state == LSM6DSL_READY),
                "gyro_reset_bias(), invalid state");

  for(i = 0; i < LSM6DSL_GYRO_NUMBER_OF_AXES; i++)
 800acd4:	2300      	movs	r3, #0
 800acd6:	9304      	str	r3, [sp, #16]
 800acd8:	e00a      	b.n	800acf0 <gyro_reset_bias+0x30>
    devp->gyrobias[i] = LSM6DSL_GYRO_BIAS;
 800acda:	9a05      	ldr	r2, [sp, #20]
 800acdc:	9b04      	ldr	r3, [sp, #16]
 800acde:	3310      	adds	r3, #16
 800ace0:	009b      	lsls	r3, r3, #2
 800ace2:	4413      	add	r3, r2
 800ace4:	f04f 0200 	mov.w	r2, #0
 800ace8:	605a      	str	r2, [r3, #4]
  for(i = 0; i < LSM6DSL_GYRO_NUMBER_OF_AXES; i++)
 800acea:	9b04      	ldr	r3, [sp, #16]
 800acec:	3301      	adds	r3, #1
 800acee:	9304      	str	r3, [sp, #16]
 800acf0:	9b04      	ldr	r3, [sp, #16]
 800acf2:	2b02      	cmp	r3, #2
 800acf4:	d9f1      	bls.n	800acda <gyro_reset_bias+0x1a>
  return msg;
 800acf6:	9b03      	ldr	r3, [sp, #12]
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	b006      	add	sp, #24
 800acfc:	4770      	bx	lr
 800acfe:	bf00      	nop

0800ad00 <gyro_set_sensivity>:
 * @param[in] sp        a buffer which contains sensitivities.
 *
 * @return              The operation status.
 * @retval MSG_OK       if the function succeeded.
 */
static msg_t gyro_set_sensivity(void *ip, float *sp) {
 800ad00:	b086      	sub	sp, #24
 800ad02:	9001      	str	r0, [sp, #4]
 800ad04:	9100      	str	r1, [sp, #0]
  LSM6DSLDriver* devp;
  uint32_t i;
  msg_t msg = MSG_OK;
 800ad06:	2300      	movs	r3, #0
 800ad08:	9303      	str	r3, [sp, #12]

  osalDbgCheck((ip != NULL) && (sp !=NULL));

  /* Getting parent instance pointer.*/
  devp = objGetInstance(LSM6DSLDriver*, (BaseGyroscope*)ip);
 800ad0a:	9a01      	ldr	r2, [sp, #4]
 800ad0c:	9b01      	ldr	r3, [sp, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	1ad3      	subs	r3, r2, r3
 800ad14:	9305      	str	r3, [sp, #20]

  osalDbgAssert((devp->state == LSM6DSL_READY),
                "gyro_set_sensivity(), invalid state");

  for(i = 0; i < LSM6DSL_GYRO_NUMBER_OF_AXES; i++) {
 800ad16:	2300      	movs	r3, #0
 800ad18:	9304      	str	r3, [sp, #16]
 800ad1a:	e00c      	b.n	800ad36 <gyro_set_sensivity+0x36>
    devp->gyrosensitivity[i] = sp[i];
 800ad1c:	9b04      	ldr	r3, [sp, #16]
 800ad1e:	009b      	lsls	r3, r3, #2
 800ad20:	9a00      	ldr	r2, [sp, #0]
 800ad22:	4413      	add	r3, r2
 800ad24:	6819      	ldr	r1, [r3, #0]
 800ad26:	9b05      	ldr	r3, [sp, #20]
 800ad28:	9a04      	ldr	r2, [sp, #16]
 800ad2a:	320e      	adds	r2, #14
 800ad2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < LSM6DSL_GYRO_NUMBER_OF_AXES; i++) {
 800ad30:	9b04      	ldr	r3, [sp, #16]
 800ad32:	3301      	adds	r3, #1
 800ad34:	9304      	str	r3, [sp, #16]
 800ad36:	9b04      	ldr	r3, [sp, #16]
 800ad38:	2b02      	cmp	r3, #2
 800ad3a:	d9ef      	bls.n	800ad1c <gyro_set_sensivity+0x1c>
  }
  return msg;
 800ad3c:	9b03      	ldr	r3, [sp, #12]
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	b006      	add	sp, #24
 800ad42:	4770      	bx	lr
	...

0800ad50 <gyro_reset_sensivity>:
 *
 * @return              The operation status.
 * @retval MSG_OK       if the function succeeded.
 * @retval MSG_RESET    otherwise.
 */
static msg_t gyro_reset_sensivity(void *ip) {
 800ad50:	b086      	sub	sp, #24
 800ad52:	9001      	str	r0, [sp, #4]
  LSM6DSLDriver* devp;
  uint32_t i;
  msg_t msg = MSG_OK;
 800ad54:	2300      	movs	r3, #0
 800ad56:	9304      	str	r3, [sp, #16]

  osalDbgCheck(ip != NULL);

  /* Getting parent instance pointer.*/
  devp = objGetInstance(LSM6DSLDriver*, (BaseGyroscope*)ip);
 800ad58:	9a01      	ldr	r2, [sp, #4]
 800ad5a:	9b01      	ldr	r3, [sp, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	1ad3      	subs	r3, r2, r3
 800ad62:	9303      	str	r3, [sp, #12]

  osalDbgAssert((devp->state == LSM6DSL_READY),
                "gyro_reset_sensivity(), invalid state");
  if(devp->config->gyrofullscale == LSM6DSL_GYRO_FS_125DPS)
 800ad64:	9b03      	ldr	r3, [sp, #12]
 800ad66:	691b      	ldr	r3, [r3, #16]
 800ad68:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ad6c:	2b02      	cmp	r3, #2
 800ad6e:	d10f      	bne.n	800ad90 <gyro_reset_sensivity+0x40>
    for(i = 0; i < LSM6DSL_GYRO_NUMBER_OF_AXES; i++)
 800ad70:	2300      	movs	r3, #0
 800ad72:	9305      	str	r3, [sp, #20]
 800ad74:	e008      	b.n	800ad88 <gyro_reset_sensivity+0x38>
      devp->gyrosensitivity[i] = LSM6DSL_GYRO_SENS_125DPS;
 800ad76:	9b03      	ldr	r3, [sp, #12]
 800ad78:	9a05      	ldr	r2, [sp, #20]
 800ad7a:	320e      	adds	r2, #14
 800ad7c:	4934      	ldr	r1, [pc, #208]	; (800ae50 <gyro_reset_sensivity+0x100>)
 800ad7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(i = 0; i < LSM6DSL_GYRO_NUMBER_OF_AXES; i++)
 800ad82:	9b05      	ldr	r3, [sp, #20]
 800ad84:	3301      	adds	r3, #1
 800ad86:	9305      	str	r3, [sp, #20]
 800ad88:	9b05      	ldr	r3, [sp, #20]
 800ad8a:	2b02      	cmp	r3, #2
 800ad8c:	d9f3      	bls.n	800ad76 <gyro_reset_sensivity+0x26>
 800ad8e:	e05a      	b.n	800ae46 <gyro_reset_sensivity+0xf6>
  else if(devp->config->gyrofullscale == LSM6DSL_GYRO_FS_250DPS)
 800ad90:	9b03      	ldr	r3, [sp, #12]
 800ad92:	691b      	ldr	r3, [r3, #16]
 800ad94:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d10f      	bne.n	800adbc <gyro_reset_sensivity+0x6c>
    for(i = 0; i < LSM6DSL_GYRO_NUMBER_OF_AXES; i++)
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	9305      	str	r3, [sp, #20]
 800ada0:	e008      	b.n	800adb4 <gyro_reset_sensivity+0x64>
      devp->gyrosensitivity[i] = LSM6DSL_GYRO_SENS_250DPS;
 800ada2:	9b03      	ldr	r3, [sp, #12]
 800ada4:	9a05      	ldr	r2, [sp, #20]
 800ada6:	320e      	adds	r2, #14
 800ada8:	492a      	ldr	r1, [pc, #168]	; (800ae54 <gyro_reset_sensivity+0x104>)
 800adaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(i = 0; i < LSM6DSL_GYRO_NUMBER_OF_AXES; i++)
 800adae:	9b05      	ldr	r3, [sp, #20]
 800adb0:	3301      	adds	r3, #1
 800adb2:	9305      	str	r3, [sp, #20]
 800adb4:	9b05      	ldr	r3, [sp, #20]
 800adb6:	2b02      	cmp	r3, #2
 800adb8:	d9f3      	bls.n	800ada2 <gyro_reset_sensivity+0x52>
 800adba:	e044      	b.n	800ae46 <gyro_reset_sensivity+0xf6>
  else if(devp->config->gyrofullscale == LSM6DSL_GYRO_FS_500DPS)
 800adbc:	9b03      	ldr	r3, [sp, #12]
 800adbe:	691b      	ldr	r3, [r3, #16]
 800adc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800adc4:	2b04      	cmp	r3, #4
 800adc6:	d10f      	bne.n	800ade8 <gyro_reset_sensivity+0x98>
	for(i = 0; i < LSM6DSL_GYRO_NUMBER_OF_AXES; i++)
 800adc8:	2300      	movs	r3, #0
 800adca:	9305      	str	r3, [sp, #20]
 800adcc:	e008      	b.n	800ade0 <gyro_reset_sensivity+0x90>
      devp->gyrosensitivity[i] = LSM6DSL_GYRO_SENS_500DPS;
 800adce:	9b03      	ldr	r3, [sp, #12]
 800add0:	9a05      	ldr	r2, [sp, #20]
 800add2:	320e      	adds	r2, #14
 800add4:	4920      	ldr	r1, [pc, #128]	; (800ae58 <gyro_reset_sensivity+0x108>)
 800add6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(i = 0; i < LSM6DSL_GYRO_NUMBER_OF_AXES; i++)
 800adda:	9b05      	ldr	r3, [sp, #20]
 800addc:	3301      	adds	r3, #1
 800adde:	9305      	str	r3, [sp, #20]
 800ade0:	9b05      	ldr	r3, [sp, #20]
 800ade2:	2b02      	cmp	r3, #2
 800ade4:	d9f3      	bls.n	800adce <gyro_reset_sensivity+0x7e>
 800ade6:	e02e      	b.n	800ae46 <gyro_reset_sensivity+0xf6>
  else if(devp->config->gyrofullscale == LSM6DSL_GYRO_FS_1000DPS)
 800ade8:	9b03      	ldr	r3, [sp, #12]
 800adea:	691b      	ldr	r3, [r3, #16]
 800adec:	f893 3020 	ldrb.w	r3, [r3, #32]
 800adf0:	2b08      	cmp	r3, #8
 800adf2:	d10f      	bne.n	800ae14 <gyro_reset_sensivity+0xc4>
	for(i = 0; i < LSM6DSL_GYRO_NUMBER_OF_AXES; i++)
 800adf4:	2300      	movs	r3, #0
 800adf6:	9305      	str	r3, [sp, #20]
 800adf8:	e008      	b.n	800ae0c <gyro_reset_sensivity+0xbc>
      devp->gyrosensitivity[i] = LSM6DSL_GYRO_SENS_1000DPS;
 800adfa:	9b03      	ldr	r3, [sp, #12]
 800adfc:	9a05      	ldr	r2, [sp, #20]
 800adfe:	320e      	adds	r2, #14
 800ae00:	4916      	ldr	r1, [pc, #88]	; (800ae5c <gyro_reset_sensivity+0x10c>)
 800ae02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(i = 0; i < LSM6DSL_GYRO_NUMBER_OF_AXES; i++)
 800ae06:	9b05      	ldr	r3, [sp, #20]
 800ae08:	3301      	adds	r3, #1
 800ae0a:	9305      	str	r3, [sp, #20]
 800ae0c:	9b05      	ldr	r3, [sp, #20]
 800ae0e:	2b02      	cmp	r3, #2
 800ae10:	d9f3      	bls.n	800adfa <gyro_reset_sensivity+0xaa>
 800ae12:	e018      	b.n	800ae46 <gyro_reset_sensivity+0xf6>
  else if(devp->config->gyrofullscale == LSM6DSL_GYRO_FS_2000DPS)
 800ae14:	9b03      	ldr	r3, [sp, #12]
 800ae16:	691b      	ldr	r3, [r3, #16]
 800ae18:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ae1c:	2b0c      	cmp	r3, #12
 800ae1e:	d10f      	bne.n	800ae40 <gyro_reset_sensivity+0xf0>
	for(i = 0; i < LSM6DSL_GYRO_NUMBER_OF_AXES; i++)
 800ae20:	2300      	movs	r3, #0
 800ae22:	9305      	str	r3, [sp, #20]
 800ae24:	e008      	b.n	800ae38 <gyro_reset_sensivity+0xe8>
      devp->gyrosensitivity[i] = LSM6DSL_GYRO_SENS_2000DPS;
 800ae26:	9b03      	ldr	r3, [sp, #12]
 800ae28:	9a05      	ldr	r2, [sp, #20]
 800ae2a:	320e      	adds	r2, #14
 800ae2c:	490c      	ldr	r1, [pc, #48]	; (800ae60 <gyro_reset_sensivity+0x110>)
 800ae2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(i = 0; i < LSM6DSL_GYRO_NUMBER_OF_AXES; i++)
 800ae32:	9b05      	ldr	r3, [sp, #20]
 800ae34:	3301      	adds	r3, #1
 800ae36:	9305      	str	r3, [sp, #20]
 800ae38:	9b05      	ldr	r3, [sp, #20]
 800ae3a:	2b02      	cmp	r3, #2
 800ae3c:	d9f3      	bls.n	800ae26 <gyro_reset_sensivity+0xd6>
 800ae3e:	e002      	b.n	800ae46 <gyro_reset_sensivity+0xf6>
  else {
    osalDbgAssert(FALSE, "gyro_reset_sensivity(), full scale issue");
    return MSG_RESET;
 800ae40:	f06f 0301 	mvn.w	r3, #1
 800ae44:	e000      	b.n	800ae48 <gyro_reset_sensivity+0xf8>
  }
  return msg;
 800ae46:	9b04      	ldr	r3, [sp, #16]
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	b006      	add	sp, #24
 800ae4c:	4770      	bx	lr
 800ae4e:	bf00      	nop
 800ae50:	3b8f5c29 	.word	0x3b8f5c29
 800ae54:	3c0f5c29 	.word	0x3c0f5c29
 800ae58:	3c8f5c29 	.word	0x3c8f5c29
 800ae5c:	3d0f5c29 	.word	0x3d0f5c29
 800ae60:	3d8f5c29 	.word	0x3d8f5c29
	...

0800ae70 <gyro_set_full_scale>:
 *
 * @return              The operation status.
 * @retval MSG_OK       if the function succeeded.
 * @retval MSG_RESET    otherwise.
 */
static msg_t gyro_set_full_scale(LSM6DSLDriver *devp, lsm6dsl_gyro_fs_t fs) {
 800ae70:	b510      	push	{r4, lr}
 800ae72:	b08c      	sub	sp, #48	; 0x30
 800ae74:	9005      	str	r0, [sp, #20]
 800ae76:	460b      	mov	r3, r1
 800ae78:	f88d 3013 	strb.w	r3, [sp, #19]
  float newfs, scale;
  uint8_t i, buff[2];
  msg_t msg = MSG_OK;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	930a      	str	r3, [sp, #40]	; 0x28
#if LSM6DSL_USE_I2C
  osalDbgAssert((devp->config->i2cp->state == I2C_READY),
                "gyro_set_full_scale(), channel not ready");
#endif

  if(fs == LSM6DSL_GYRO_FS_125DPS) {
 800ae80:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800ae84:	2b02      	cmp	r3, #2
 800ae86:	d102      	bne.n	800ae8e <gyro_set_full_scale+0x1e>
    newfs = LSM6DSL_GYRO_125DPS;
 800ae88:	4b50      	ldr	r3, [pc, #320]	; (800afcc <gyro_set_full_scale+0x15c>)
 800ae8a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae8c:	e01e      	b.n	800aecc <gyro_set_full_scale+0x5c>
  }
  else if(fs == LSM6DSL_GYRO_FS_250DPS) {
 800ae8e:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d102      	bne.n	800ae9c <gyro_set_full_scale+0x2c>
    newfs = LSM6DSL_GYRO_250DPS;
 800ae96:	4b4e      	ldr	r3, [pc, #312]	; (800afd0 <gyro_set_full_scale+0x160>)
 800ae98:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae9a:	e017      	b.n	800aecc <gyro_set_full_scale+0x5c>
  }
  else if(fs == LSM6DSL_GYRO_FS_500DPS) {
 800ae9c:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800aea0:	2b04      	cmp	r3, #4
 800aea2:	d102      	bne.n	800aeaa <gyro_set_full_scale+0x3a>
    newfs = LSM6DSL_GYRO_500DPS;
 800aea4:	4b4b      	ldr	r3, [pc, #300]	; (800afd4 <gyro_set_full_scale+0x164>)
 800aea6:	930b      	str	r3, [sp, #44]	; 0x2c
 800aea8:	e010      	b.n	800aecc <gyro_set_full_scale+0x5c>
  }
  else if(fs == LSM6DSL_GYRO_FS_1000DPS) {
 800aeaa:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800aeae:	2b08      	cmp	r3, #8
 800aeb0:	d102      	bne.n	800aeb8 <gyro_set_full_scale+0x48>
    newfs = LSM6DSL_GYRO_1000DPS;
 800aeb2:	4b49      	ldr	r3, [pc, #292]	; (800afd8 <gyro_set_full_scale+0x168>)
 800aeb4:	930b      	str	r3, [sp, #44]	; 0x2c
 800aeb6:	e009      	b.n	800aecc <gyro_set_full_scale+0x5c>
  }
  else if(fs == LSM6DSL_GYRO_FS_2000DPS) {
 800aeb8:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800aebc:	2b0c      	cmp	r3, #12
 800aebe:	d102      	bne.n	800aec6 <gyro_set_full_scale+0x56>
    newfs = LSM6DSL_GYRO_2000DPS;
 800aec0:	4b46      	ldr	r3, [pc, #280]	; (800afdc <gyro_set_full_scale+0x16c>)
 800aec2:	930b      	str	r3, [sp, #44]	; 0x2c
 800aec4:	e002      	b.n	800aecc <gyro_set_full_scale+0x5c>
  }
  else {
    return MSG_RESET;
 800aec6:	f06f 0301 	mvn.w	r3, #1
 800aeca:	e07c      	b.n	800afc6 <gyro_set_full_scale+0x156>
  }

  if(newfs != devp->gyrofullscale) {
 800aecc:	9b05      	ldr	r3, [sp, #20]
 800aece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aed0:	4619      	mov	r1, r3
 800aed2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800aed4:	f7f6 f88a 	bl	8000fec <__aeabi_fcmpeq>
 800aed8:	4603      	mov	r3, r0
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d171      	bne.n	800afc2 <gyro_set_full_scale+0x152>
    scale = newfs / devp->gyrofullscale;
 800aede:	9b05      	ldr	r3, [sp, #20]
 800aee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aee2:	4619      	mov	r1, r3
 800aee4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800aee6:	f7f5 ffa1 	bl	8000e2c <__aeabi_fdiv>
 800aeea:	4603      	mov	r3, r0
 800aeec:	9308      	str	r3, [sp, #32]
    devp->gyrofullscale = newfs;
 800aeee:	9b05      	ldr	r3, [sp, #20]
 800aef0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aef2:	651a      	str	r2, [r3, #80]	; 0x50
		i2cStart(devp->config->i2cp,
						 devp->config->i2ccfg);
#endif /* LSM6DSL_SHARED_I2C */

    /* Updating register.*/
    msg = lsm6dslI2CReadRegister(devp->config->i2cp,
 800aef4:	9b05      	ldr	r3, [sp, #20]
 800aef6:	691b      	ldr	r3, [r3, #16]
 800aef8:	6818      	ldr	r0, [r3, #0]
                                 devp->config->slaveaddress,
 800aefa:	9b05      	ldr	r3, [sp, #20]
 800aefc:	691b      	ldr	r3, [r3, #16]
    msg = lsm6dslI2CReadRegister(devp->config->i2cp,
 800aefe:	7a19      	ldrb	r1, [r3, #8]
 800af00:	ab07      	add	r3, sp, #28
 800af02:	3301      	adds	r3, #1
 800af04:	2201      	movs	r2, #1
 800af06:	9200      	str	r2, [sp, #0]
 800af08:	2211      	movs	r2, #17
 800af0a:	f7ff fb49 	bl	800a5a0 <lsm6dslI2CReadRegister>
 800af0e:	900a      	str	r0, [sp, #40]	; 0x28
#if	LSM6DSL_SHARED_I2C
		i2cReleaseBus(devp->config->i2cp);
#endif /* LSM6DSL_SHARED_I2C */
#endif /* LSM6DSL_USE_I2C */

    buff[1] &= ~(LSMDSL_CTRL2_G_FS_MASK);
 800af10:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800af14:	f023 030e 	bic.w	r3, r3, #14
 800af18:	b2db      	uxtb	r3, r3
 800af1a:	f88d 301d 	strb.w	r3, [sp, #29]
    buff[1] |= fs;
 800af1e:	f89d 201d 	ldrb.w	r2, [sp, #29]
 800af22:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800af26:	4313      	orrs	r3, r2
 800af28:	b2db      	uxtb	r3, r3
 800af2a:	f88d 301d 	strb.w	r3, [sp, #29]
    buff[0] = LSM6DSL_AD_CTRL2_G;
 800af2e:	2311      	movs	r3, #17
 800af30:	f88d 301c 	strb.w	r3, [sp, #28]
		i2cAcquireBus(devp->config->i2cp);
		i2cStart(devp->config->i2cp,
						 devp->config->i2ccfg);
#endif /* LSM6DSL_SHARED_I2C */

    lsm6dslI2CWriteRegister(devp->config->i2cp, devp->config->slaveaddress,
 800af34:	9b05      	ldr	r3, [sp, #20]
 800af36:	691b      	ldr	r3, [r3, #16]
 800af38:	6818      	ldr	r0, [r3, #0]
 800af3a:	9b05      	ldr	r3, [sp, #20]
 800af3c:	691b      	ldr	r3, [r3, #16]
 800af3e:	7a1b      	ldrb	r3, [r3, #8]
 800af40:	b299      	uxth	r1, r3
 800af42:	aa07      	add	r2, sp, #28
 800af44:	f04f 33ff 	mov.w	r3, #4294967295
 800af48:	9302      	str	r3, [sp, #8]
 800af4a:	2300      	movs	r3, #0
 800af4c:	9301      	str	r3, [sp, #4]
 800af4e:	2300      	movs	r3, #0
 800af50:	9300      	str	r3, [sp, #0]
 800af52:	2302      	movs	r3, #2
 800af54:	f7f7 f8b4 	bl	80020c0 <i2cMasterTransmitTimeout>
		i2cReleaseBus(devp->config->i2cp);
#endif /* LSM6DSL_SHARED_I2C */
#endif /* LSM6DSL_USE_I2C */

    /* Scaling sensitivity and bias. Re-calibration is suggested anyway. */
    for(i = 0; i < LSM6DSL_GYRO_NUMBER_OF_AXES; i++) {
 800af58:	2300      	movs	r3, #0
 800af5a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 800af5e:	e02c      	b.n	800afba <gyro_set_full_scale+0x14a>
      devp->gyrosensitivity[i] *= scale;
 800af60:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 800af64:	9b05      	ldr	r3, [sp, #20]
 800af66:	320e      	adds	r2, #14
 800af68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af6c:	f89d 4027 	ldrb.w	r4, [sp, #39]	; 0x27
 800af70:	9908      	ldr	r1, [sp, #32]
 800af72:	4618      	mov	r0, r3
 800af74:	f7f5 fea6 	bl	8000cc4 <__aeabi_fmul>
 800af78:	4603      	mov	r3, r0
 800af7a:	4619      	mov	r1, r3
 800af7c:	9b05      	ldr	r3, [sp, #20]
 800af7e:	f104 020e 	add.w	r2, r4, #14
 800af82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      devp->gyrobias[i] *= scale;
 800af86:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800af8a:	9a05      	ldr	r2, [sp, #20]
 800af8c:	3310      	adds	r3, #16
 800af8e:	009b      	lsls	r3, r3, #2
 800af90:	4413      	add	r3, r2
 800af92:	685b      	ldr	r3, [r3, #4]
 800af94:	f89d 4027 	ldrb.w	r4, [sp, #39]	; 0x27
 800af98:	9908      	ldr	r1, [sp, #32]
 800af9a:	4618      	mov	r0, r3
 800af9c:	f7f5 fe92 	bl	8000cc4 <__aeabi_fmul>
 800afa0:	4603      	mov	r3, r0
 800afa2:	4619      	mov	r1, r3
 800afa4:	9a05      	ldr	r2, [sp, #20]
 800afa6:	f104 0310 	add.w	r3, r4, #16
 800afaa:	009b      	lsls	r3, r3, #2
 800afac:	4413      	add	r3, r2
 800afae:	6059      	str	r1, [r3, #4]
    for(i = 0; i < LSM6DSL_GYRO_NUMBER_OF_AXES; i++) {
 800afb0:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800afb4:	3301      	adds	r3, #1
 800afb6:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 800afba:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800afbe:	2b02      	cmp	r3, #2
 800afc0:	d9ce      	bls.n	800af60 <gyro_set_full_scale+0xf0>
    }
  }
  return msg;
 800afc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afc4:	bf00      	nop
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	b00c      	add	sp, #48	; 0x30
 800afca:	bd10      	pop	{r4, pc}
 800afcc:	42fa0000 	.word	0x42fa0000
 800afd0:	437a0000 	.word	0x437a0000
 800afd4:	43fa0000 	.word	0x43fa0000
 800afd8:	447a0000 	.word	0x447a0000
 800afdc:	44fa0000 	.word	0x44fa0000

0800afe0 <lsm6dslObjectInit>:
 *
 * @param[out] devp     pointer to the @p LSM6DSLDriver object
 *
 * @init
 */
void lsm6dslObjectInit(LSM6DSLDriver *devp) {
 800afe0:	b082      	sub	sp, #8
 800afe2:	9001      	str	r0, [sp, #4]
  devp->vmt = &vmt_device;
 800afe4:	9b01      	ldr	r3, [sp, #4]
 800afe6:	4a0b      	ldr	r2, [pc, #44]	; (800b014 <lsm6dslObjectInit+0x34>)
 800afe8:	601a      	str	r2, [r3, #0]
  devp->acc_if.vmt = &vmt_accelerometer;
 800afea:	9b01      	ldr	r3, [sp, #4]
 800afec:	4a0a      	ldr	r2, [pc, #40]	; (800b018 <lsm6dslObjectInit+0x38>)
 800afee:	605a      	str	r2, [r3, #4]
  devp->gyro_if.vmt = &vmt_gyroscope;
 800aff0:	9b01      	ldr	r3, [sp, #4]
 800aff2:	4a0a      	ldr	r2, [pc, #40]	; (800b01c <lsm6dslObjectInit+0x3c>)
 800aff4:	609a      	str	r2, [r3, #8]

  devp->config = NULL;
 800aff6:	9b01      	ldr	r3, [sp, #4]
 800aff8:	2200      	movs	r2, #0
 800affa:	611a      	str	r2, [r3, #16]

  devp->accaxes = LSM6DSL_ACC_NUMBER_OF_AXES;
 800affc:	9b01      	ldr	r3, [sp, #4]
 800affe:	2203      	movs	r2, #3
 800b000:	615a      	str	r2, [r3, #20]
  devp->gyroaxes = LSM6DSL_GYRO_NUMBER_OF_AXES;
 800b002:	9b01      	ldr	r3, [sp, #4]
 800b004:	2203      	movs	r2, #3
 800b006:	635a      	str	r2, [r3, #52]	; 0x34

  devp->state = LSM6DSL_STOP;
 800b008:	9b01      	ldr	r3, [sp, #4]
 800b00a:	2201      	movs	r2, #1
 800b00c:	731a      	strb	r2, [r3, #12]
}
 800b00e:	bf00      	nop
 800b010:	b002      	add	sp, #8
 800b012:	4770      	bx	lr
 800b014:	0800efd4 	.word	0x0800efd4
 800b018:	0800efe0 	.word	0x0800efe0
 800b01c:	0800f000 	.word	0x0800f000

0800b020 <lsm6dslStart>:
 * @param[in] devp      pointer to the @p LSM6DSLDriver object
 * @param[in] config    pointer to the @p LSM6DSLConfig object
 *
 * @api
 */
void lsm6dslStart(LSM6DSLDriver *devp, const LSM6DSLConfig *config) {
 800b020:	b500      	push	{lr}
 800b022:	b08b      	sub	sp, #44	; 0x2c
 800b024:	9005      	str	r0, [sp, #20]
 800b026:	9104      	str	r1, [sp, #16]

  osalDbgAssert((devp->state == LSM6DSL_STOP) ||
                (devp->state == LSM6DSL_READY),
                "lsm6dslStart(), invalid state");

  devp->config = config;
 800b028:	9b05      	ldr	r3, [sp, #20]
 800b02a:	9a04      	ldr	r2, [sp, #16]
 800b02c:	611a      	str	r2, [r3, #16]

  /* Enforcing multiple write configuration.*/
  {
    cr[0] = LSM6DSL_AD_CTRL3_C;
 800b02e:	2312      	movs	r3, #18
 800b030:	f88d 3018 	strb.w	r3, [sp, #24]
    cr[1] = LSMDSL_CTRL3_C_IF_INC;
 800b034:	2304      	movs	r3, #4
 800b036:	f88d 3019 	strb.w	r3, [sp, #25]
#if LSM6DSL_USE_I2C
#if LSM6DSL_SHARED_I2C
  i2cAcquireBus(devp->config->i2cp);
#endif /* LSM6DSL_SHARED_I2C */

  i2cStart(devp->config->i2cp, devp->config->i2ccfg);
 800b03a:	9b05      	ldr	r3, [sp, #20]
 800b03c:	691b      	ldr	r3, [r3, #16]
 800b03e:	681a      	ldr	r2, [r3, #0]
 800b040:	9b05      	ldr	r3, [sp, #20]
 800b042:	691b      	ldr	r3, [r3, #16]
 800b044:	685b      	ldr	r3, [r3, #4]
 800b046:	4619      	mov	r1, r3
 800b048:	4610      	mov	r0, r2
 800b04a:	f7f7 f819 	bl	8002080 <i2cStart>
  lsm6dslI2CWriteRegister(devp->config->i2cp, devp->config->slaveaddress,
 800b04e:	9b05      	ldr	r3, [sp, #20]
 800b050:	691b      	ldr	r3, [r3, #16]
 800b052:	6818      	ldr	r0, [r3, #0]
 800b054:	9b05      	ldr	r3, [sp, #20]
 800b056:	691b      	ldr	r3, [r3, #16]
 800b058:	7a1b      	ldrb	r3, [r3, #8]
 800b05a:	b299      	uxth	r1, r3
 800b05c:	aa06      	add	r2, sp, #24
 800b05e:	f04f 33ff 	mov.w	r3, #4294967295
 800b062:	9302      	str	r3, [sp, #8]
 800b064:	2300      	movs	r3, #0
 800b066:	9301      	str	r3, [sp, #4]
 800b068:	2300      	movs	r3, #0
 800b06a:	9300      	str	r3, [sp, #0]
 800b06c:	2302      	movs	r3, #2
 800b06e:	f7f7 f827 	bl	80020c0 <i2cMasterTransmitTimeout>
#endif /* LSM6DSL_SHARED_I2C */
#endif /* LSM6DSL_USE_I2C */

  /* Configuring all the control registers.*/
  /* Multiple write starting address.*/
  cr[0] = LSM6DSL_AD_CTRL1_XL;
 800b072:	2310      	movs	r3, #16
 800b074:	f88d 3018 	strb.w	r3, [sp, #24]
  /* Control register 1 configuration block.*/
  {
      cr[1] = devp->config->accoutdatarate |
 800b078:	9b05      	ldr	r3, [sp, #20]
 800b07a:	691b      	ldr	r3, [r3, #16]
 800b07c:	7d5a      	ldrb	r2, [r3, #21]
              devp->config->accfullscale;
 800b07e:	9b05      	ldr	r3, [sp, #20]
 800b080:	691b      	ldr	r3, [r3, #16]
 800b082:	7d1b      	ldrb	r3, [r3, #20]
      cr[1] = devp->config->accoutdatarate |
 800b084:	4313      	orrs	r3, r2
 800b086:	b2db      	uxtb	r3, r3
 800b088:	f88d 3019 	strb.w	r3, [sp, #25]
  }
  /* Control register 2 configuration block.*/
  {
      cr[2] = devp->config->gyrooutdatarate |
 800b08c:	9b05      	ldr	r3, [sp, #20]
 800b08e:	691b      	ldr	r3, [r3, #16]
 800b090:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
              devp->config->gyrofullscale;
 800b094:	9b05      	ldr	r3, [sp, #20]
 800b096:	691b      	ldr	r3, [r3, #16]
 800b098:	f893 3020 	ldrb.w	r3, [r3, #32]
      cr[2] = devp->config->gyrooutdatarate |
 800b09c:	4313      	orrs	r3, r2
 800b09e:	b2db      	uxtb	r3, r3
 800b0a0:	f88d 301a 	strb.w	r3, [sp, #26]
  }
  /* Control register 3 configuration block.*/
  {
      cr[3] = LSMDSL_CTRL3_C_IF_INC;
 800b0a4:	2304      	movs	r3, #4
 800b0a6:	f88d 301b 	strb.w	r3, [sp, #27]
      cr[3] |= devp->config->endianness | devp->config->blockdataupdate;
#endif
  }
  /* Control register 4 configuration block.*/
  {
      cr[4] = 0;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	f88d 301c 	strb.w	r3, [sp, #28]
      }
#endif
  }
  /* Control register 5 configuration block.*/
  {
      cr[5] = 0;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	f88d 301d 	strb.w	r3, [sp, #29]
  }
  /* Control register 6 configuration block.*/
  {
      cr[6] = 0;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	f88d 301e 	strb.w	r3, [sp, #30]
      }
#endif
  }
  /* Control register 7 configuration block.*/
  {
      cr[7] = 0;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	f88d 301f 	strb.w	r3, [sp, #31]

#endif
  }
  /* Control register 8 configuration block.*/
  {
      cr[8] = 0;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	f88d 3020 	strb.w	r3, [sp, #32]
  }
  /* Control register 9 configuration block.*/
  {
      cr[9] = 0;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
  }
  /* Control register 10 configuration block.*/
  {
      cr[10] = 0;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
#if LSM6DSL_SHARED_I2C
  i2cAcquireBus(devp->config->i2cp);
  i2cStart(devp->config->i2cp, devp->config->i2ccfg);
#endif /* LSM6DSL_SHARED_I2C */

  lsm6dslI2CWriteRegister(devp->config->i2cp, devp->config->slaveaddress,
 800b0d4:	9b05      	ldr	r3, [sp, #20]
 800b0d6:	691b      	ldr	r3, [r3, #16]
 800b0d8:	6818      	ldr	r0, [r3, #0]
 800b0da:	9b05      	ldr	r3, [sp, #20]
 800b0dc:	691b      	ldr	r3, [r3, #16]
 800b0de:	7a1b      	ldrb	r3, [r3, #8]
 800b0e0:	b299      	uxth	r1, r3
 800b0e2:	aa06      	add	r2, sp, #24
 800b0e4:	f04f 33ff 	mov.w	r3, #4294967295
 800b0e8:	9302      	str	r3, [sp, #8]
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	9301      	str	r3, [sp, #4]
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	9300      	str	r3, [sp, #0]
 800b0f2:	230b      	movs	r3, #11
 800b0f4:	f7f6 ffe4 	bl	80020c0 <i2cMasterTransmitTimeout>
  i2cReleaseBus(devp->config->i2cp);
#endif /* LSM6DSL_SHARED_I2C */
#endif /* LSM6DSL_USE_I2C */

  /* Storing sensitivity according to user settings */
  if(devp->config->accfullscale == LSM6DSL_ACC_FS_2G) {
 800b0f8:	9b05      	ldr	r3, [sp, #20]
 800b0fa:	691b      	ldr	r3, [r3, #16]
 800b0fc:	7d1b      	ldrb	r3, [r3, #20]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d125      	bne.n	800b14e <lsm6dslStart+0x12e>
    for(i = 0; i < LSM6DSL_ACC_NUMBER_OF_AXES; i++) {
 800b102:	2300      	movs	r3, #0
 800b104:	9309      	str	r3, [sp, #36]	; 0x24
 800b106:	e01a      	b.n	800b13e <lsm6dslStart+0x11e>
     if(devp->config->accsensitivity == NULL)
 800b108:	9b05      	ldr	r3, [sp, #20]
 800b10a:	691b      	ldr	r3, [r3, #16]
 800b10c:	68db      	ldr	r3, [r3, #12]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d106      	bne.n	800b120 <lsm6dslStart+0x100>
       devp->accsensitivity[i] = LSM6DSL_ACC_SENS_2G;
 800b112:	9b05      	ldr	r3, [sp, #20]
 800b114:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b116:	3206      	adds	r2, #6
 800b118:	4993      	ldr	r1, [pc, #588]	; (800b368 <lsm6dslStart+0x348>)
 800b11a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b11e:	e00b      	b.n	800b138 <lsm6dslStart+0x118>
     else
       devp->accsensitivity[i] = devp->config->accsensitivity[i];
 800b120:	9b05      	ldr	r3, [sp, #20]
 800b122:	691b      	ldr	r3, [r3, #16]
 800b124:	68da      	ldr	r2, [r3, #12]
 800b126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b128:	009b      	lsls	r3, r3, #2
 800b12a:	4413      	add	r3, r2
 800b12c:	6819      	ldr	r1, [r3, #0]
 800b12e:	9b05      	ldr	r3, [sp, #20]
 800b130:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b132:	3206      	adds	r2, #6
 800b134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(i = 0; i < LSM6DSL_ACC_NUMBER_OF_AXES; i++) {
 800b138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b13a:	3301      	adds	r3, #1
 800b13c:	9309      	str	r3, [sp, #36]	; 0x24
 800b13e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b140:	2b02      	cmp	r3, #2
 800b142:	d9e1      	bls.n	800b108 <lsm6dslStart+0xe8>
    }
    devp->accfullscale = LSM6DSL_ACC_2G;
 800b144:	9b05      	ldr	r3, [sp, #20]
 800b146:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b14a:	631a      	str	r2, [r3, #48]	; 0x30
 800b14c:	e07f      	b.n	800b24e <lsm6dslStart+0x22e>
  }
  else if(devp->config->accfullscale == LSM6DSL_ACC_FS_4G) {
 800b14e:	9b05      	ldr	r3, [sp, #20]
 800b150:	691b      	ldr	r3, [r3, #16]
 800b152:	7d1b      	ldrb	r3, [r3, #20]
 800b154:	2b40      	cmp	r3, #64	; 0x40
 800b156:	d125      	bne.n	800b1a4 <lsm6dslStart+0x184>
   for(i = 0; i < LSM6DSL_ACC_NUMBER_OF_AXES; i++) {
 800b158:	2300      	movs	r3, #0
 800b15a:	9309      	str	r3, [sp, #36]	; 0x24
 800b15c:	e01a      	b.n	800b194 <lsm6dslStart+0x174>
     if(devp->config->accsensitivity == NULL)
 800b15e:	9b05      	ldr	r3, [sp, #20]
 800b160:	691b      	ldr	r3, [r3, #16]
 800b162:	68db      	ldr	r3, [r3, #12]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d106      	bne.n	800b176 <lsm6dslStart+0x156>
       devp->accsensitivity[i] = LSM6DSL_ACC_SENS_4G;
 800b168:	9b05      	ldr	r3, [sp, #20]
 800b16a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b16c:	3206      	adds	r2, #6
 800b16e:	497f      	ldr	r1, [pc, #508]	; (800b36c <lsm6dslStart+0x34c>)
 800b170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b174:	e00b      	b.n	800b18e <lsm6dslStart+0x16e>
     else
       devp->accsensitivity[i] = devp->config->accsensitivity[i];
 800b176:	9b05      	ldr	r3, [sp, #20]
 800b178:	691b      	ldr	r3, [r3, #16]
 800b17a:	68da      	ldr	r2, [r3, #12]
 800b17c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b17e:	009b      	lsls	r3, r3, #2
 800b180:	4413      	add	r3, r2
 800b182:	6819      	ldr	r1, [r3, #0]
 800b184:	9b05      	ldr	r3, [sp, #20]
 800b186:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b188:	3206      	adds	r2, #6
 800b18a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   for(i = 0; i < LSM6DSL_ACC_NUMBER_OF_AXES; i++) {
 800b18e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b190:	3301      	adds	r3, #1
 800b192:	9309      	str	r3, [sp, #36]	; 0x24
 800b194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b196:	2b02      	cmp	r3, #2
 800b198:	d9e1      	bls.n	800b15e <lsm6dslStart+0x13e>
    }
   devp->accfullscale = LSM6DSL_ACC_4G;
 800b19a:	9b05      	ldr	r3, [sp, #20]
 800b19c:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800b1a0:	631a      	str	r2, [r3, #48]	; 0x30
 800b1a2:	e054      	b.n	800b24e <lsm6dslStart+0x22e>
  }
  else if(devp->config->accfullscale == LSM6DSL_ACC_FS_8G) {
 800b1a4:	9b05      	ldr	r3, [sp, #20]
 800b1a6:	691b      	ldr	r3, [r3, #16]
 800b1a8:	7d1b      	ldrb	r3, [r3, #20]
 800b1aa:	2b80      	cmp	r3, #128	; 0x80
 800b1ac:	d125      	bne.n	800b1fa <lsm6dslStart+0x1da>
   for(i = 0; i < LSM6DSL_ACC_NUMBER_OF_AXES; i++) {
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	9309      	str	r3, [sp, #36]	; 0x24
 800b1b2:	e01a      	b.n	800b1ea <lsm6dslStart+0x1ca>
     if(devp->config->accsensitivity == NULL)
 800b1b4:	9b05      	ldr	r3, [sp, #20]
 800b1b6:	691b      	ldr	r3, [r3, #16]
 800b1b8:	68db      	ldr	r3, [r3, #12]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d106      	bne.n	800b1cc <lsm6dslStart+0x1ac>
       devp->accsensitivity[i] = LSM6DSL_ACC_SENS_8G;
 800b1be:	9b05      	ldr	r3, [sp, #20]
 800b1c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1c2:	3206      	adds	r2, #6
 800b1c4:	496a      	ldr	r1, [pc, #424]	; (800b370 <lsm6dslStart+0x350>)
 800b1c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b1ca:	e00b      	b.n	800b1e4 <lsm6dslStart+0x1c4>
     else
       devp->accsensitivity[i] = devp->config->accsensitivity[i];
 800b1cc:	9b05      	ldr	r3, [sp, #20]
 800b1ce:	691b      	ldr	r3, [r3, #16]
 800b1d0:	68da      	ldr	r2, [r3, #12]
 800b1d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1d4:	009b      	lsls	r3, r3, #2
 800b1d6:	4413      	add	r3, r2
 800b1d8:	6819      	ldr	r1, [r3, #0]
 800b1da:	9b05      	ldr	r3, [sp, #20]
 800b1dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1de:	3206      	adds	r2, #6
 800b1e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   for(i = 0; i < LSM6DSL_ACC_NUMBER_OF_AXES; i++) {
 800b1e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1e6:	3301      	adds	r3, #1
 800b1e8:	9309      	str	r3, [sp, #36]	; 0x24
 800b1ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1ec:	2b02      	cmp	r3, #2
 800b1ee:	d9e1      	bls.n	800b1b4 <lsm6dslStart+0x194>
    }
   devp->accfullscale = LSM6DSL_ACC_8G;
 800b1f0:	9b05      	ldr	r3, [sp, #20]
 800b1f2:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 800b1f6:	631a      	str	r2, [r3, #48]	; 0x30
 800b1f8:	e029      	b.n	800b24e <lsm6dslStart+0x22e>
  }
  else if(devp->config->accfullscale == LSM6DSL_ACC_FS_16G) {
 800b1fa:	9b05      	ldr	r3, [sp, #20]
 800b1fc:	691b      	ldr	r3, [r3, #16]
 800b1fe:	7d1b      	ldrb	r3, [r3, #20]
 800b200:	2bc0      	cmp	r3, #192	; 0xc0
 800b202:	d124      	bne.n	800b24e <lsm6dslStart+0x22e>
    for(i = 0; i < LSM6DSL_ACC_NUMBER_OF_AXES; i++) {
 800b204:	2300      	movs	r3, #0
 800b206:	9309      	str	r3, [sp, #36]	; 0x24
 800b208:	e01a      	b.n	800b240 <lsm6dslStart+0x220>
      if(devp->config->accsensitivity == NULL)
 800b20a:	9b05      	ldr	r3, [sp, #20]
 800b20c:	691b      	ldr	r3, [r3, #16]
 800b20e:	68db      	ldr	r3, [r3, #12]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d106      	bne.n	800b222 <lsm6dslStart+0x202>
        devp->accsensitivity[i] = LSM6DSL_ACC_SENS_16G;
 800b214:	9b05      	ldr	r3, [sp, #20]
 800b216:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b218:	3206      	adds	r2, #6
 800b21a:	4956      	ldr	r1, [pc, #344]	; (800b374 <lsm6dslStart+0x354>)
 800b21c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b220:	e00b      	b.n	800b23a <lsm6dslStart+0x21a>
      else
        devp->accsensitivity[i] = devp->config->accsensitivity[i];
 800b222:	9b05      	ldr	r3, [sp, #20]
 800b224:	691b      	ldr	r3, [r3, #16]
 800b226:	68da      	ldr	r2, [r3, #12]
 800b228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b22a:	009b      	lsls	r3, r3, #2
 800b22c:	4413      	add	r3, r2
 800b22e:	6819      	ldr	r1, [r3, #0]
 800b230:	9b05      	ldr	r3, [sp, #20]
 800b232:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b234:	3206      	adds	r2, #6
 800b236:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(i = 0; i < LSM6DSL_ACC_NUMBER_OF_AXES; i++) {
 800b23a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b23c:	3301      	adds	r3, #1
 800b23e:	9309      	str	r3, [sp, #36]	; 0x24
 800b240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b242:	2b02      	cmp	r3, #2
 800b244:	d9e1      	bls.n	800b20a <lsm6dslStart+0x1ea>
    }
    devp->accfullscale = LSM6DSL_ACC_16G;
 800b246:	9b05      	ldr	r3, [sp, #20]
 800b248:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 800b24c:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
    osalDbgAssert(FALSE, "lsm6dslStart(), accelerometer full scale issue");

  /* Storing bias information */
  if(devp->config->accbias != NULL)
 800b24e:	9b05      	ldr	r3, [sp, #20]
 800b250:	691b      	ldr	r3, [r3, #16]
 800b252:	691b      	ldr	r3, [r3, #16]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d016      	beq.n	800b286 <lsm6dslStart+0x266>
    for(i = 0; i < LSM6DSL_ACC_NUMBER_OF_AXES; i++)
 800b258:	2300      	movs	r3, #0
 800b25a:	9309      	str	r3, [sp, #36]	; 0x24
 800b25c:	e00f      	b.n	800b27e <lsm6dslStart+0x25e>
      devp->accbias[i] = devp->config->accbias[i];
 800b25e:	9b05      	ldr	r3, [sp, #20]
 800b260:	691b      	ldr	r3, [r3, #16]
 800b262:	691a      	ldr	r2, [r3, #16]
 800b264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b266:	009b      	lsls	r3, r3, #2
 800b268:	4413      	add	r3, r2
 800b26a:	681a      	ldr	r2, [r3, #0]
 800b26c:	9905      	ldr	r1, [sp, #20]
 800b26e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b270:	3308      	adds	r3, #8
 800b272:	009b      	lsls	r3, r3, #2
 800b274:	440b      	add	r3, r1
 800b276:	605a      	str	r2, [r3, #4]
    for(i = 0; i < LSM6DSL_ACC_NUMBER_OF_AXES; i++)
 800b278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b27a:	3301      	adds	r3, #1
 800b27c:	9309      	str	r3, [sp, #36]	; 0x24
 800b27e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b280:	2b02      	cmp	r3, #2
 800b282:	d9ec      	bls.n	800b25e <lsm6dslStart+0x23e>
 800b284:	e010      	b.n	800b2a8 <lsm6dslStart+0x288>
  else
    for(i = 0; i < LSM6DSL_ACC_NUMBER_OF_AXES; i++)
 800b286:	2300      	movs	r3, #0
 800b288:	9309      	str	r3, [sp, #36]	; 0x24
 800b28a:	e00a      	b.n	800b2a2 <lsm6dslStart+0x282>
      devp->accbias[i] = LSM6DSL_ACC_BIAS;
 800b28c:	9a05      	ldr	r2, [sp, #20]
 800b28e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b290:	3308      	adds	r3, #8
 800b292:	009b      	lsls	r3, r3, #2
 800b294:	4413      	add	r3, r2
 800b296:	f04f 0200 	mov.w	r2, #0
 800b29a:	605a      	str	r2, [r3, #4]
    for(i = 0; i < LSM6DSL_ACC_NUMBER_OF_AXES; i++)
 800b29c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b29e:	3301      	adds	r3, #1
 800b2a0:	9309      	str	r3, [sp, #36]	; 0x24
 800b2a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2a4:	2b02      	cmp	r3, #2
 800b2a6:	d9f1      	bls.n	800b28c <lsm6dslStart+0x26c>

  if(devp->config->gyrofullscale == LSM6DSL_GYRO_FS_125DPS) {
 800b2a8:	9b05      	ldr	r3, [sp, #20]
 800b2aa:	691b      	ldr	r3, [r3, #16]
 800b2ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b2b0:	2b02      	cmp	r3, #2
 800b2b2:	d124      	bne.n	800b2fe <lsm6dslStart+0x2de>
    for(i = 0; i < LSM6DSL_GYRO_NUMBER_OF_AXES; i++) {
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	9309      	str	r3, [sp, #36]	; 0x24
 800b2b8:	e01a      	b.n	800b2f0 <lsm6dslStart+0x2d0>
      if(devp->config->gyrosensitivity == NULL)
 800b2ba:	9b05      	ldr	r3, [sp, #20]
 800b2bc:	691b      	ldr	r3, [r3, #16]
 800b2be:	699b      	ldr	r3, [r3, #24]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d106      	bne.n	800b2d2 <lsm6dslStart+0x2b2>
        devp->gyrosensitivity[i] = LSM6DSL_GYRO_SENS_125DPS;
 800b2c4:	9b05      	ldr	r3, [sp, #20]
 800b2c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2c8:	320e      	adds	r2, #14
 800b2ca:	492b      	ldr	r1, [pc, #172]	; (800b378 <lsm6dslStart+0x358>)
 800b2cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b2d0:	e00b      	b.n	800b2ea <lsm6dslStart+0x2ca>
      else
        devp->gyrosensitivity[i] = devp->config->gyrosensitivity[i];
 800b2d2:	9b05      	ldr	r3, [sp, #20]
 800b2d4:	691b      	ldr	r3, [r3, #16]
 800b2d6:	699a      	ldr	r2, [r3, #24]
 800b2d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2da:	009b      	lsls	r3, r3, #2
 800b2dc:	4413      	add	r3, r2
 800b2de:	6819      	ldr	r1, [r3, #0]
 800b2e0:	9b05      	ldr	r3, [sp, #20]
 800b2e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2e4:	320e      	adds	r2, #14
 800b2e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(i = 0; i < LSM6DSL_GYRO_NUMBER_OF_AXES; i++) {
 800b2ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2ec:	3301      	adds	r3, #1
 800b2ee:	9309      	str	r3, [sp, #36]	; 0x24
 800b2f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2f2:	2b02      	cmp	r3, #2
 800b2f4:	d9e1      	bls.n	800b2ba <lsm6dslStart+0x29a>
    }
    devp->gyrofullscale = LSM6DSL_GYRO_125DPS;
 800b2f6:	9b05      	ldr	r3, [sp, #20]
 800b2f8:	4a20      	ldr	r2, [pc, #128]	; (800b37c <lsm6dslStart+0x35c>)
 800b2fa:	651a      	str	r2, [r3, #80]	; 0x50
 800b2fc:	e0bb      	b.n	800b476 <lsm6dslStart+0x456>
  }
  else if(devp->config->gyrofullscale == LSM6DSL_GYRO_FS_250DPS) {
 800b2fe:	9b05      	ldr	r3, [sp, #20]
 800b300:	691b      	ldr	r3, [r3, #16]
 800b302:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d124      	bne.n	800b354 <lsm6dslStart+0x334>
    for(i = 0; i < LSM6DSL_GYRO_NUMBER_OF_AXES; i++) {
 800b30a:	2300      	movs	r3, #0
 800b30c:	9309      	str	r3, [sp, #36]	; 0x24
 800b30e:	e01a      	b.n	800b346 <lsm6dslStart+0x326>
      if(devp->config->gyrosensitivity == NULL)
 800b310:	9b05      	ldr	r3, [sp, #20]
 800b312:	691b      	ldr	r3, [r3, #16]
 800b314:	699b      	ldr	r3, [r3, #24]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d106      	bne.n	800b328 <lsm6dslStart+0x308>
        devp->gyrosensitivity[i] = LSM6DSL_GYRO_SENS_250DPS;
 800b31a:	9b05      	ldr	r3, [sp, #20]
 800b31c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b31e:	320e      	adds	r2, #14
 800b320:	4917      	ldr	r1, [pc, #92]	; (800b380 <lsm6dslStart+0x360>)
 800b322:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b326:	e00b      	b.n	800b340 <lsm6dslStart+0x320>
      else
        devp->gyrosensitivity[i] = devp->config->gyrosensitivity[i];
 800b328:	9b05      	ldr	r3, [sp, #20]
 800b32a:	691b      	ldr	r3, [r3, #16]
 800b32c:	699a      	ldr	r2, [r3, #24]
 800b32e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b330:	009b      	lsls	r3, r3, #2
 800b332:	4413      	add	r3, r2
 800b334:	6819      	ldr	r1, [r3, #0]
 800b336:	9b05      	ldr	r3, [sp, #20]
 800b338:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b33a:	320e      	adds	r2, #14
 800b33c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(i = 0; i < LSM6DSL_GYRO_NUMBER_OF_AXES; i++) {
 800b340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b342:	3301      	adds	r3, #1
 800b344:	9309      	str	r3, [sp, #36]	; 0x24
 800b346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b348:	2b02      	cmp	r3, #2
 800b34a:	d9e1      	bls.n	800b310 <lsm6dslStart+0x2f0>
    }
    devp->gyrofullscale = LSM6DSL_GYRO_250DPS;
 800b34c:	9b05      	ldr	r3, [sp, #20]
 800b34e:	4a0d      	ldr	r2, [pc, #52]	; (800b384 <lsm6dslStart+0x364>)
 800b350:	651a      	str	r2, [r3, #80]	; 0x50
 800b352:	e090      	b.n	800b476 <lsm6dslStart+0x456>
  }
  else if(devp->config->gyrofullscale == LSM6DSL_GYRO_FS_500DPS) {
 800b354:	9b05      	ldr	r3, [sp, #20]
 800b356:	691b      	ldr	r3, [r3, #16]
 800b358:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b35c:	2b04      	cmp	r3, #4
 800b35e:	d135      	bne.n	800b3cc <lsm6dslStart+0x3ac>
    for(i = 0; i < LSM6DSL_GYRO_NUMBER_OF_AXES; i++) {
 800b360:	2300      	movs	r3, #0
 800b362:	9309      	str	r3, [sp, #36]	; 0x24
 800b364:	e02b      	b.n	800b3be <lsm6dslStart+0x39e>
 800b366:	bf00      	nop
 800b368:	3d79db23 	.word	0x3d79db23
 800b36c:	3df9db23 	.word	0x3df9db23
 800b370:	3e79db23 	.word	0x3e79db23
 800b374:	3ef9db23 	.word	0x3ef9db23
 800b378:	3b8f5c29 	.word	0x3b8f5c29
 800b37c:	42fa0000 	.word	0x42fa0000
 800b380:	3c0f5c29 	.word	0x3c0f5c29
 800b384:	437a0000 	.word	0x437a0000
      if(devp->config->gyrosensitivity == NULL)
 800b388:	9b05      	ldr	r3, [sp, #20]
 800b38a:	691b      	ldr	r3, [r3, #16]
 800b38c:	699b      	ldr	r3, [r3, #24]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d106      	bne.n	800b3a0 <lsm6dslStart+0x380>
        devp->gyrosensitivity[i] = LSM6DSL_GYRO_SENS_500DPS;
 800b392:	9b05      	ldr	r3, [sp, #20]
 800b394:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b396:	320e      	adds	r2, #14
 800b398:	4952      	ldr	r1, [pc, #328]	; (800b4e4 <lsm6dslStart+0x4c4>)
 800b39a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b39e:	e00b      	b.n	800b3b8 <lsm6dslStart+0x398>
      else
        devp->gyrosensitivity[i] = devp->config->gyrosensitivity[i];
 800b3a0:	9b05      	ldr	r3, [sp, #20]
 800b3a2:	691b      	ldr	r3, [r3, #16]
 800b3a4:	699a      	ldr	r2, [r3, #24]
 800b3a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3a8:	009b      	lsls	r3, r3, #2
 800b3aa:	4413      	add	r3, r2
 800b3ac:	6819      	ldr	r1, [r3, #0]
 800b3ae:	9b05      	ldr	r3, [sp, #20]
 800b3b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3b2:	320e      	adds	r2, #14
 800b3b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(i = 0; i < LSM6DSL_GYRO_NUMBER_OF_AXES; i++) {
 800b3b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3ba:	3301      	adds	r3, #1
 800b3bc:	9309      	str	r3, [sp, #36]	; 0x24
 800b3be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3c0:	2b02      	cmp	r3, #2
 800b3c2:	d9e1      	bls.n	800b388 <lsm6dslStart+0x368>
    }
    devp->gyrofullscale = LSM6DSL_GYRO_500DPS;
 800b3c4:	9b05      	ldr	r3, [sp, #20]
 800b3c6:	4a48      	ldr	r2, [pc, #288]	; (800b4e8 <lsm6dslStart+0x4c8>)
 800b3c8:	651a      	str	r2, [r3, #80]	; 0x50
 800b3ca:	e054      	b.n	800b476 <lsm6dslStart+0x456>
  }
  else if(devp->config->gyrofullscale == LSM6DSL_GYRO_FS_1000DPS) {
 800b3cc:	9b05      	ldr	r3, [sp, #20]
 800b3ce:	691b      	ldr	r3, [r3, #16]
 800b3d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b3d4:	2b08      	cmp	r3, #8
 800b3d6:	d124      	bne.n	800b422 <lsm6dslStart+0x402>
    for(i = 0; i < LSM6DSL_GYRO_NUMBER_OF_AXES; i++) {
 800b3d8:	2300      	movs	r3, #0
 800b3da:	9309      	str	r3, [sp, #36]	; 0x24
 800b3dc:	e01a      	b.n	800b414 <lsm6dslStart+0x3f4>
      if(devp->config->gyrosensitivity == NULL)
 800b3de:	9b05      	ldr	r3, [sp, #20]
 800b3e0:	691b      	ldr	r3, [r3, #16]
 800b3e2:	699b      	ldr	r3, [r3, #24]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d106      	bne.n	800b3f6 <lsm6dslStart+0x3d6>
        devp->gyrosensitivity[i] = LSM6DSL_GYRO_SENS_1000DPS;
 800b3e8:	9b05      	ldr	r3, [sp, #20]
 800b3ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3ec:	320e      	adds	r2, #14
 800b3ee:	493f      	ldr	r1, [pc, #252]	; (800b4ec <lsm6dslStart+0x4cc>)
 800b3f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b3f4:	e00b      	b.n	800b40e <lsm6dslStart+0x3ee>
      else
        devp->gyrosensitivity[i] = devp->config->gyrosensitivity[i];
 800b3f6:	9b05      	ldr	r3, [sp, #20]
 800b3f8:	691b      	ldr	r3, [r3, #16]
 800b3fa:	699a      	ldr	r2, [r3, #24]
 800b3fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3fe:	009b      	lsls	r3, r3, #2
 800b400:	4413      	add	r3, r2
 800b402:	6819      	ldr	r1, [r3, #0]
 800b404:	9b05      	ldr	r3, [sp, #20]
 800b406:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b408:	320e      	adds	r2, #14
 800b40a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(i = 0; i < LSM6DSL_GYRO_NUMBER_OF_AXES; i++) {
 800b40e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b410:	3301      	adds	r3, #1
 800b412:	9309      	str	r3, [sp, #36]	; 0x24
 800b414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b416:	2b02      	cmp	r3, #2
 800b418:	d9e1      	bls.n	800b3de <lsm6dslStart+0x3be>
    }
    devp->gyrofullscale = LSM6DSL_GYRO_1000DPS;
 800b41a:	9b05      	ldr	r3, [sp, #20]
 800b41c:	4a34      	ldr	r2, [pc, #208]	; (800b4f0 <lsm6dslStart+0x4d0>)
 800b41e:	651a      	str	r2, [r3, #80]	; 0x50
 800b420:	e029      	b.n	800b476 <lsm6dslStart+0x456>
  }
  else if(devp->config->gyrofullscale == LSM6DSL_GYRO_FS_2000DPS) {
 800b422:	9b05      	ldr	r3, [sp, #20]
 800b424:	691b      	ldr	r3, [r3, #16]
 800b426:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b42a:	2b0c      	cmp	r3, #12
 800b42c:	d123      	bne.n	800b476 <lsm6dslStart+0x456>
    for(i = 0; i < LSM6DSL_GYRO_NUMBER_OF_AXES; i++) {
 800b42e:	2300      	movs	r3, #0
 800b430:	9309      	str	r3, [sp, #36]	; 0x24
 800b432:	e01a      	b.n	800b46a <lsm6dslStart+0x44a>
      if(devp->config->gyrosensitivity == NULL)
 800b434:	9b05      	ldr	r3, [sp, #20]
 800b436:	691b      	ldr	r3, [r3, #16]
 800b438:	699b      	ldr	r3, [r3, #24]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d106      	bne.n	800b44c <lsm6dslStart+0x42c>
        devp->gyrosensitivity[i] = LSM6DSL_GYRO_SENS_2000DPS;
 800b43e:	9b05      	ldr	r3, [sp, #20]
 800b440:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b442:	320e      	adds	r2, #14
 800b444:	492b      	ldr	r1, [pc, #172]	; (800b4f4 <lsm6dslStart+0x4d4>)
 800b446:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b44a:	e00b      	b.n	800b464 <lsm6dslStart+0x444>
      else
        devp->gyrosensitivity[i] = devp->config->gyrosensitivity[i];
 800b44c:	9b05      	ldr	r3, [sp, #20]
 800b44e:	691b      	ldr	r3, [r3, #16]
 800b450:	699a      	ldr	r2, [r3, #24]
 800b452:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b454:	009b      	lsls	r3, r3, #2
 800b456:	4413      	add	r3, r2
 800b458:	6819      	ldr	r1, [r3, #0]
 800b45a:	9b05      	ldr	r3, [sp, #20]
 800b45c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b45e:	320e      	adds	r2, #14
 800b460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(i = 0; i < LSM6DSL_GYRO_NUMBER_OF_AXES; i++) {
 800b464:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b466:	3301      	adds	r3, #1
 800b468:	9309      	str	r3, [sp, #36]	; 0x24
 800b46a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b46c:	2b02      	cmp	r3, #2
 800b46e:	d9e1      	bls.n	800b434 <lsm6dslStart+0x414>
    }
    devp->gyrofullscale = LSM6DSL_GYRO_2000DPS;
 800b470:	9b05      	ldr	r3, [sp, #20]
 800b472:	4a21      	ldr	r2, [pc, #132]	; (800b4f8 <lsm6dslStart+0x4d8>)
 800b474:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
    osalDbgAssert(FALSE, "lsm6dslStart(), gyroscope full scale issue");

  /* Storing bias information */
  if(devp->config->gyrobias != NULL)
 800b476:	9b05      	ldr	r3, [sp, #20]
 800b478:	691b      	ldr	r3, [r3, #16]
 800b47a:	69db      	ldr	r3, [r3, #28]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d016      	beq.n	800b4ae <lsm6dslStart+0x48e>
    for(i = 0; i < LSM6DSL_GYRO_NUMBER_OF_AXES; i++)
 800b480:	2300      	movs	r3, #0
 800b482:	9309      	str	r3, [sp, #36]	; 0x24
 800b484:	e00f      	b.n	800b4a6 <lsm6dslStart+0x486>
      devp->gyrobias[i] = devp->config->gyrobias[i];
 800b486:	9b05      	ldr	r3, [sp, #20]
 800b488:	691b      	ldr	r3, [r3, #16]
 800b48a:	69da      	ldr	r2, [r3, #28]
 800b48c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b48e:	009b      	lsls	r3, r3, #2
 800b490:	4413      	add	r3, r2
 800b492:	681a      	ldr	r2, [r3, #0]
 800b494:	9905      	ldr	r1, [sp, #20]
 800b496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b498:	3310      	adds	r3, #16
 800b49a:	009b      	lsls	r3, r3, #2
 800b49c:	440b      	add	r3, r1
 800b49e:	605a      	str	r2, [r3, #4]
    for(i = 0; i < LSM6DSL_GYRO_NUMBER_OF_AXES; i++)
 800b4a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4a2:	3301      	adds	r3, #1
 800b4a4:	9309      	str	r3, [sp, #36]	; 0x24
 800b4a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4a8:	2b02      	cmp	r3, #2
 800b4aa:	d9ec      	bls.n	800b486 <lsm6dslStart+0x466>
 800b4ac:	e010      	b.n	800b4d0 <lsm6dslStart+0x4b0>
  else
    for(i = 0; i < LSM6DSL_GYRO_NUMBER_OF_AXES; i++)
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	9309      	str	r3, [sp, #36]	; 0x24
 800b4b2:	e00a      	b.n	800b4ca <lsm6dslStart+0x4aa>
      devp->gyrobias[i] = LSM6DSL_GYRO_BIAS;
 800b4b4:	9a05      	ldr	r2, [sp, #20]
 800b4b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4b8:	3310      	adds	r3, #16
 800b4ba:	009b      	lsls	r3, r3, #2
 800b4bc:	4413      	add	r3, r2
 800b4be:	f04f 0200 	mov.w	r2, #0
 800b4c2:	605a      	str	r2, [r3, #4]
    for(i = 0; i < LSM6DSL_GYRO_NUMBER_OF_AXES; i++)
 800b4c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4c6:	3301      	adds	r3, #1
 800b4c8:	9309      	str	r3, [sp, #36]	; 0x24
 800b4ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4cc:	2b02      	cmp	r3, #2
 800b4ce:	d9f1      	bls.n	800b4b4 <lsm6dslStart+0x494>

  /* This is the MEMS transient recovery time */
  osalThreadSleepMilliseconds(5);
 800b4d0:	2032      	movs	r0, #50	; 0x32
 800b4d2:	f7ff f855 	bl	800a580 <osalThreadSleep.lto_priv.2>

  devp->state = LSM6DSL_READY;
 800b4d6:	9b05      	ldr	r3, [sp, #20]
 800b4d8:	2202      	movs	r2, #2
 800b4da:	731a      	strb	r2, [r3, #12]
}
 800b4dc:	bf00      	nop
 800b4de:	b00b      	add	sp, #44	; 0x2c
 800b4e0:	f85d fb04 	ldr.w	pc, [sp], #4
 800b4e4:	3c8f5c29 	.word	0x3c8f5c29
 800b4e8:	43fa0000 	.word	0x43fa0000
 800b4ec:	3d0f5c29 	.word	0x3d0f5c29
 800b4f0:	447a0000 	.word	0x447a0000
 800b4f4:	3d8f5c29 	.word	0x3d8f5c29
 800b4f8:	44fa0000 	.word	0x44fa0000
 800b4fc:	00000000 	.word	0x00000000

0800b500 <osalThreadSleep.lto_priv.3>:
static inline void osalThreadSleep(sysinterval_t delay) {
 800b500:	b500      	push	{lr}
 800b502:	b083      	sub	sp, #12
 800b504:	9001      	str	r0, [sp, #4]
  chThdSleep(delay);
 800b506:	9801      	ldr	r0, [sp, #4]
 800b508:	f7fb ffe2 	bl	80074d0 <chThdSleep>
}
 800b50c:	bf00      	nop
 800b50e:	b003      	add	sp, #12
 800b510:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800b520 <lsm303agrI2CReadRegister>:
 * @param[in] rxbuf      receiving buffer.
 * @param[in] n          size of rxbuf.
 * @return               the operation status.
 */
static msg_t lsm303agrI2CReadRegister(I2CDriver *i2cp, lsm303agr_sad_t sad,
                                      uint8_t reg, uint8_t *rxbuf, size_t n) {
 800b520:	b500      	push	{lr}
 800b522:	b08b      	sub	sp, #44	; 0x2c
 800b524:	9007      	str	r0, [sp, #28]
 800b526:	9305      	str	r3, [sp, #20]
 800b528:	460b      	mov	r3, r1
 800b52a:	f88d 301b 	strb.w	r3, [sp, #27]
 800b52e:	4613      	mov	r3, r2
 800b530:	f88d 301a 	strb.w	r3, [sp, #26]

  uint8_t txbuf = reg | LSM303AGR_MS;
 800b534:	f89d 301a 	ldrb.w	r3, [sp, #26]
 800b538:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b53c:	b2db      	uxtb	r3, r3
 800b53e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
  return i2cMasterTransmitTimeout(i2cp, sad, &txbuf, 1, rxbuf, n,
 800b542:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800b546:	b299      	uxth	r1, r3
 800b548:	f10d 0227 	add.w	r2, sp, #39	; 0x27
 800b54c:	f04f 33ff 	mov.w	r3, #4294967295
 800b550:	9302      	str	r3, [sp, #8]
 800b552:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b554:	9301      	str	r3, [sp, #4]
 800b556:	9b05      	ldr	r3, [sp, #20]
 800b558:	9300      	str	r3, [sp, #0]
 800b55a:	2301      	movs	r3, #1
 800b55c:	9807      	ldr	r0, [sp, #28]
 800b55e:	f7f6 fdaf 	bl	80020c0 <i2cMasterTransmitTimeout>
 800b562:	4603      	mov	r3, r0
 800b564:	bf00      	nop
                                  TIME_INFINITE);
}
 800b566:	4618      	mov	r0, r3
 800b568:	b00b      	add	sp, #44	; 0x2c
 800b56a:	f85d fb04 	ldr.w	pc, [sp], #4
 800b56e:	bf00      	nop

0800b570 <lsm303agrI2CWriteRegister>:
 * @param[in] n         size of txbuf less one (not considering the first
 *                      element).
 * @return              the operation status.
 */
static msg_t lsm303agrI2CWriteRegister(I2CDriver *i2cp, lsm303agr_sad_t sad,
                                       uint8_t *txbuf, size_t n) {
 800b570:	b500      	push	{lr}
 800b572:	b089      	sub	sp, #36	; 0x24
 800b574:	9007      	str	r0, [sp, #28]
 800b576:	9205      	str	r2, [sp, #20]
 800b578:	9304      	str	r3, [sp, #16]
 800b57a:	460b      	mov	r3, r1
 800b57c:	f88d 301b 	strb.w	r3, [sp, #27]
  if (n != 1)
 800b580:	9b04      	ldr	r3, [sp, #16]
 800b582:	2b01      	cmp	r3, #1
 800b584:	d006      	beq.n	800b594 <lsm303agrI2CWriteRegister+0x24>
    *txbuf |= LSM303AGR_MS;
 800b586:	9b05      	ldr	r3, [sp, #20]
 800b588:	781b      	ldrb	r3, [r3, #0]
 800b58a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b58e:	b2da      	uxtb	r2, r3
 800b590:	9b05      	ldr	r3, [sp, #20]
 800b592:	701a      	strb	r2, [r3, #0]
  return i2cMasterTransmitTimeout(i2cp, sad, txbuf, n + 1, NULL, 0,
 800b594:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800b598:	b299      	uxth	r1, r3
 800b59a:	9b04      	ldr	r3, [sp, #16]
 800b59c:	3301      	adds	r3, #1
 800b59e:	f04f 32ff 	mov.w	r2, #4294967295
 800b5a2:	9202      	str	r2, [sp, #8]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	9201      	str	r2, [sp, #4]
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	9200      	str	r2, [sp, #0]
 800b5ac:	9a05      	ldr	r2, [sp, #20]
 800b5ae:	9807      	ldr	r0, [sp, #28]
 800b5b0:	f7f6 fd86 	bl	80020c0 <i2cMasterTransmitTimeout>
 800b5b4:	4603      	mov	r3, r0
                                  TIME_INFINITE);
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	b009      	add	sp, #36	; 0x24
 800b5ba:	f85d fb04 	ldr.w	pc, [sp], #4
 800b5be:	bf00      	nop

0800b5c0 <acc_get_axes_number.lto_priv.1>:
 *
 * @param[in] ip        pointer to @p BaseAccelerometer interface.
 *
 * @return              the number of axes.
 */
static size_t acc_get_axes_number(void *ip) {
 800b5c0:	b082      	sub	sp, #8
 800b5c2:	9001      	str	r0, [sp, #4]
  (void)ip;

  return LSM303AGR_ACC_NUMBER_OF_AXES;
 800b5c4:	2303      	movs	r3, #3
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	b002      	add	sp, #8
 800b5ca:	4770      	bx	lr
 800b5cc:	0000      	movs	r0, r0
	...

0800b5d0 <acc_read_raw.lto_priv.1>:
 * @retval MSG_OK       if the function succeeded.
 * @retval MSG_RESET    if one or more I2C errors occurred, the errors can
 *                      be retrieved using @p i2cGetErrors().
 * @retval MSG_TIMEOUT  if a timeout occurred before operation end.
 */
static msg_t acc_read_raw(void *ip, int32_t axes[]) {
 800b5d0:	b500      	push	{lr}
 800b5d2:	b08b      	sub	sp, #44	; 0x2c
 800b5d4:	9003      	str	r0, [sp, #12]
 800b5d6:	9102      	str	r1, [sp, #8]
  msg_t msg;

  osalDbgCheck((ip != NULL) && (axes != NULL));

  /* Getting parent instance pointer.*/
  devp = objGetInstance(LSM303AGRDriver*, (BaseAccelerometer*)ip);
 800b5d8:	9a03      	ldr	r2, [sp, #12]
 800b5da:	9b03      	ldr	r3, [sp, #12]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	1ad3      	subs	r3, r2, r3
 800b5e2:	9306      	str	r3, [sp, #24]
  i2cAcquireBus(devp->config->i2cp);
  i2cStart(devp->config->i2cp,
           devp->config->i2ccfg);
#endif /* LSM303AGR_SHARED_I2C */

  msg = lsm303agrI2CReadRegister(devp->config->i2cp, LSM303AGR_SAD_ACC,
 800b5e4:	9b06      	ldr	r3, [sp, #24]
 800b5e6:	691b      	ldr	r3, [r3, #16]
 800b5e8:	6818      	ldr	r0, [r3, #0]
 800b5ea:	ab04      	add	r3, sp, #16
 800b5ec:	2206      	movs	r2, #6
 800b5ee:	9200      	str	r2, [sp, #0]
 800b5f0:	2228      	movs	r2, #40	; 0x28
 800b5f2:	2119      	movs	r1, #25
 800b5f4:	f7ff ff94 	bl	800b520 <lsm303agrI2CReadRegister>
 800b5f8:	9008      	str	r0, [sp, #32]

#if LSM303AGR_SHARED_I2C
  i2cReleaseBus(devp->config->i2cp);
#endif /* LSM303AGR_SHARED_I2C */

  if(msg == MSG_OK)
 800b5fa:	9b08      	ldr	r3, [sp, #32]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d12b      	bne.n	800b658 <acc_read_raw.lto_priv.1+0x88>
    for(i = 0; i < LSM303AGR_ACC_NUMBER_OF_AXES; i++) {
 800b600:	2300      	movs	r3, #0
 800b602:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 800b606:	e023      	b.n	800b650 <acc_read_raw.lto_priv.1+0x80>
      tmp = buff[2 * i] + (buff[2 * i + 1] << 8);
 800b608:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800b60c:	005b      	lsls	r3, r3, #1
 800b60e:	3328      	adds	r3, #40	; 0x28
 800b610:	446b      	add	r3, sp
 800b612:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800b616:	b29a      	uxth	r2, r3
 800b618:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800b61c:	005b      	lsls	r3, r3, #1
 800b61e:	3301      	adds	r3, #1
 800b620:	3328      	adds	r3, #40	; 0x28
 800b622:	446b      	add	r3, sp
 800b624:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800b628:	b29b      	uxth	r3, r3
 800b62a:	021b      	lsls	r3, r3, #8
 800b62c:	b29b      	uxth	r3, r3
 800b62e:	4413      	add	r3, r2
 800b630:	b29b      	uxth	r3, r3
 800b632:	f8ad 301e 	strh.w	r3, [sp, #30]
      axes[i] = (int32_t)tmp;
 800b636:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800b63a:	009b      	lsls	r3, r3, #2
 800b63c:	9a02      	ldr	r2, [sp, #8]
 800b63e:	4413      	add	r3, r2
 800b640:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
 800b644:	601a      	str	r2, [r3, #0]
    for(i = 0; i < LSM303AGR_ACC_NUMBER_OF_AXES; i++) {
 800b646:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800b64a:	3301      	adds	r3, #1
 800b64c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 800b650:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800b654:	2b02      	cmp	r3, #2
 800b656:	d9d7      	bls.n	800b608 <acc_read_raw.lto_priv.1+0x38>
    }
  return msg;
 800b658:	9b08      	ldr	r3, [sp, #32]
 800b65a:	bf00      	nop
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	b00b      	add	sp, #44	; 0x2c
 800b660:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800b670 <acc_read_cooked.lto_priv.1>:
 * @retval MSG_OK       if the function succeeded.
 * @retval MSG_RESET    if one or more I2C errors occurred, the errors can
 *                      be retrieved using @p i2cGetErrors().
 * @retval MSG_TIMEOUT  if a timeout occurred before operation end.
 */
static msg_t acc_read_cooked(void *ip, float axes[]) {
 800b670:	b510      	push	{r4, lr}
 800b672:	b088      	sub	sp, #32
 800b674:	9001      	str	r0, [sp, #4]
 800b676:	9100      	str	r1, [sp, #0]
  msg_t msg;

  osalDbgCheck((ip != NULL) && (axes != NULL));

  /* Getting parent instance pointer.*/
  devp = objGetInstance(LSM303AGRDriver*, (BaseAccelerometer*)ip);
 800b678:	9a01      	ldr	r2, [sp, #4]
 800b67a:	9b01      	ldr	r3, [sp, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	1ad3      	subs	r3, r2, r3
 800b682:	9306      	str	r3, [sp, #24]

  osalDbgAssert((devp->state == LSM303AGR_READY),
                "acc_read_cooked(), invalid state");

  msg = acc_read_raw(ip, raw);
 800b684:	ab02      	add	r3, sp, #8
 800b686:	4619      	mov	r1, r3
 800b688:	9801      	ldr	r0, [sp, #4]
 800b68a:	f7ff ffa1 	bl	800b5d0 <acc_read_raw.lto_priv.1>
 800b68e:	9005      	str	r0, [sp, #20]
  for(i = 0; i < LSM303AGR_ACC_NUMBER_OF_AXES; i++) {
 800b690:	2300      	movs	r3, #0
 800b692:	9307      	str	r3, [sp, #28]
 800b694:	e023      	b.n	800b6de <acc_read_cooked.lto_priv.1+0x6e>
    axes[i] = (raw[i] * devp->accsensitivity[i]) - devp->accbias[i];
 800b696:	9b07      	ldr	r3, [sp, #28]
 800b698:	009b      	lsls	r3, r3, #2
 800b69a:	3320      	adds	r3, #32
 800b69c:	446b      	add	r3, sp
 800b69e:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	f7f5 faba 	bl	8000c1c <__aeabi_i2f>
 800b6a8:	9b06      	ldr	r3, [sp, #24]
 800b6aa:	9a07      	ldr	r2, [sp, #28]
 800b6ac:	3206      	adds	r2, #6
 800b6ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6b2:	4619      	mov	r1, r3
 800b6b4:	f7f5 fb06 	bl	8000cc4 <__aeabi_fmul>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	9a06      	ldr	r2, [sp, #24]
 800b6be:	9b07      	ldr	r3, [sp, #28]
 800b6c0:	3308      	adds	r3, #8
 800b6c2:	009b      	lsls	r3, r3, #2
 800b6c4:	4413      	add	r3, r2
 800b6c6:	6859      	ldr	r1, [r3, #4]
 800b6c8:	9b07      	ldr	r3, [sp, #28]
 800b6ca:	009b      	lsls	r3, r3, #2
 800b6cc:	9a00      	ldr	r2, [sp, #0]
 800b6ce:	18d4      	adds	r4, r2, r3
 800b6d0:	f7f5 f9ee 	bl	8000ab0 <__aeabi_fsub>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	6023      	str	r3, [r4, #0]
  for(i = 0; i < LSM303AGR_ACC_NUMBER_OF_AXES; i++) {
 800b6d8:	9b07      	ldr	r3, [sp, #28]
 800b6da:	3301      	adds	r3, #1
 800b6dc:	9307      	str	r3, [sp, #28]
 800b6de:	9b07      	ldr	r3, [sp, #28]
 800b6e0:	2b02      	cmp	r3, #2
 800b6e2:	d9d8      	bls.n	800b696 <acc_read_cooked.lto_priv.1+0x26>
  }
  return msg;
 800b6e4:	9b05      	ldr	r3, [sp, #20]
 800b6e6:	bf00      	nop
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	b008      	add	sp, #32
 800b6ec:	bd10      	pop	{r4, pc}
 800b6ee:	bf00      	nop

0800b6f0 <acc_set_bias.lto_priv.1>:
 * @param[in] bp        a buffer which contains biases.
 *
 * @return              The operation status.
 * @retval MSG_OK       if the function succeeded.
 */
static msg_t acc_set_bias(void *ip, float *bp) {
 800b6f0:	b086      	sub	sp, #24
 800b6f2:	9001      	str	r0, [sp, #4]
 800b6f4:	9100      	str	r1, [sp, #0]
  LSM303AGRDriver* devp;
  uint32_t i;
  msg_t msg = MSG_OK;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	9303      	str	r3, [sp, #12]

  osalDbgCheck((ip != NULL) && (bp != NULL));

  /* Getting parent instance pointer.*/
  devp = objGetInstance(LSM303AGRDriver*, (BaseAccelerometer*)ip);
 800b6fa:	9a01      	ldr	r2, [sp, #4]
 800b6fc:	9b01      	ldr	r3, [sp, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	1ad3      	subs	r3, r2, r3
 800b704:	9305      	str	r3, [sp, #20]

  osalDbgAssert((devp->state == LSM303AGR_READY),
                "acc_set_bias(), invalid state");

  for(i = 0; i < LSM303AGR_ACC_NUMBER_OF_AXES; i++) {
 800b706:	2300      	movs	r3, #0
 800b708:	9304      	str	r3, [sp, #16]
 800b70a:	e00d      	b.n	800b728 <acc_set_bias.lto_priv.1+0x38>
    devp->accbias[i] = bp[i];
 800b70c:	9b04      	ldr	r3, [sp, #16]
 800b70e:	009b      	lsls	r3, r3, #2
 800b710:	9a00      	ldr	r2, [sp, #0]
 800b712:	4413      	add	r3, r2
 800b714:	681a      	ldr	r2, [r3, #0]
 800b716:	9905      	ldr	r1, [sp, #20]
 800b718:	9b04      	ldr	r3, [sp, #16]
 800b71a:	3308      	adds	r3, #8
 800b71c:	009b      	lsls	r3, r3, #2
 800b71e:	440b      	add	r3, r1
 800b720:	605a      	str	r2, [r3, #4]
  for(i = 0; i < LSM303AGR_ACC_NUMBER_OF_AXES; i++) {
 800b722:	9b04      	ldr	r3, [sp, #16]
 800b724:	3301      	adds	r3, #1
 800b726:	9304      	str	r3, [sp, #16]
 800b728:	9b04      	ldr	r3, [sp, #16]
 800b72a:	2b02      	cmp	r3, #2
 800b72c:	d9ee      	bls.n	800b70c <acc_set_bias.lto_priv.1+0x1c>
  }
  return msg;
 800b72e:	9b03      	ldr	r3, [sp, #12]
}
 800b730:	4618      	mov	r0, r3
 800b732:	b006      	add	sp, #24
 800b734:	4770      	bx	lr
 800b736:	bf00      	nop
	...

0800b740 <acc_reset_bias.lto_priv.1>:
 * @param[in] ip        pointer to @p BaseAccelerometer interface.
 *
 * @return              The operation status.
 * @retval MSG_OK       if the function succeeded.
 */
static msg_t acc_reset_bias(void *ip) {
 800b740:	b086      	sub	sp, #24
 800b742:	9001      	str	r0, [sp, #4]
  LSM303AGRDriver* devp;
  uint32_t i;
  msg_t msg = MSG_OK;
 800b744:	2300      	movs	r3, #0
 800b746:	9303      	str	r3, [sp, #12]

  osalDbgCheck(ip != NULL);

  /* Getting parent instance pointer.*/
  devp = objGetInstance(LSM303AGRDriver*, (BaseAccelerometer*)ip);
 800b748:	9a01      	ldr	r2, [sp, #4]
 800b74a:	9b01      	ldr	r3, [sp, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	1ad3      	subs	r3, r2, r3
 800b752:	9305      	str	r3, [sp, #20]

  osalDbgAssert((devp->state == LSM303AGR_READY),
                "acc_reset_bias(), invalid state");

  for(i = 0; i < LSM303AGR_ACC_NUMBER_OF_AXES; i++)
 800b754:	2300      	movs	r3, #0
 800b756:	9304      	str	r3, [sp, #16]
 800b758:	e00a      	b.n	800b770 <acc_reset_bias.lto_priv.1+0x30>
    devp->accbias[i] = LSM303AGR_ACC_BIAS;
 800b75a:	9a05      	ldr	r2, [sp, #20]
 800b75c:	9b04      	ldr	r3, [sp, #16]
 800b75e:	3308      	adds	r3, #8
 800b760:	009b      	lsls	r3, r3, #2
 800b762:	4413      	add	r3, r2
 800b764:	f04f 0200 	mov.w	r2, #0
 800b768:	605a      	str	r2, [r3, #4]
  for(i = 0; i < LSM303AGR_ACC_NUMBER_OF_AXES; i++)
 800b76a:	9b04      	ldr	r3, [sp, #16]
 800b76c:	3301      	adds	r3, #1
 800b76e:	9304      	str	r3, [sp, #16]
 800b770:	9b04      	ldr	r3, [sp, #16]
 800b772:	2b02      	cmp	r3, #2
 800b774:	d9f1      	bls.n	800b75a <acc_reset_bias.lto_priv.1+0x1a>
  return msg;
 800b776:	9b03      	ldr	r3, [sp, #12]
}
 800b778:	4618      	mov	r0, r3
 800b77a:	b006      	add	sp, #24
 800b77c:	4770      	bx	lr
 800b77e:	bf00      	nop

0800b780 <acc_set_sensivity.lto_priv.1>:
 * @param[in] sp        a buffer which contains sensitivities.
 *
 * @return              The operation status.
 * @retval MSG_OK       if the function succeeded.
 */
static msg_t acc_set_sensivity(void *ip, float *sp) {
 800b780:	b086      	sub	sp, #24
 800b782:	9001      	str	r0, [sp, #4]
 800b784:	9100      	str	r1, [sp, #0]
  LSM303AGRDriver* devp;
  uint32_t i;
  msg_t msg = MSG_OK;
 800b786:	2300      	movs	r3, #0
 800b788:	9303      	str	r3, [sp, #12]

  /* Getting parent instance pointer.*/
  devp = objGetInstance(LSM303AGRDriver*, (BaseAccelerometer*)ip);
 800b78a:	9a01      	ldr	r2, [sp, #4]
 800b78c:	9b01      	ldr	r3, [sp, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	1ad3      	subs	r3, r2, r3
 800b794:	9305      	str	r3, [sp, #20]
  osalDbgCheck((ip != NULL) && (sp != NULL));

  osalDbgAssert((devp->state == LSM303AGR_READY),
                "acc_set_sensivity(), invalid state");

  for(i = 0; i < LSM303AGR_ACC_NUMBER_OF_AXES; i++) {
 800b796:	2300      	movs	r3, #0
 800b798:	9304      	str	r3, [sp, #16]
 800b79a:	e00c      	b.n	800b7b6 <acc_set_sensivity.lto_priv.1+0x36>
    devp->accsensitivity[i] = sp[i];
 800b79c:	9b04      	ldr	r3, [sp, #16]
 800b79e:	009b      	lsls	r3, r3, #2
 800b7a0:	9a00      	ldr	r2, [sp, #0]
 800b7a2:	4413      	add	r3, r2
 800b7a4:	6819      	ldr	r1, [r3, #0]
 800b7a6:	9b05      	ldr	r3, [sp, #20]
 800b7a8:	9a04      	ldr	r2, [sp, #16]
 800b7aa:	3206      	adds	r2, #6
 800b7ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < LSM303AGR_ACC_NUMBER_OF_AXES; i++) {
 800b7b0:	9b04      	ldr	r3, [sp, #16]
 800b7b2:	3301      	adds	r3, #1
 800b7b4:	9304      	str	r3, [sp, #16]
 800b7b6:	9b04      	ldr	r3, [sp, #16]
 800b7b8:	2b02      	cmp	r3, #2
 800b7ba:	d9ef      	bls.n	800b79c <acc_set_sensivity.lto_priv.1+0x1c>
  }
  return msg;
 800b7bc:	9b03      	ldr	r3, [sp, #12]
}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	b006      	add	sp, #24
 800b7c2:	4770      	bx	lr
	...

0800b7d0 <acc_reset_sensivity.lto_priv.1>:
 *
 * @return              The operation status.
 * @retval MSG_OK       if the function succeeded.
 * @retval MSG_RESET    otherwise.
 */
static msg_t acc_reset_sensivity(void *ip) {
 800b7d0:	b086      	sub	sp, #24
 800b7d2:	9001      	str	r0, [sp, #4]
  LSM303AGRDriver* devp;
  uint32_t i;
  msg_t msg = MSG_OK;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	9305      	str	r3, [sp, #20]

  osalDbgCheck(ip != NULL);

  /* Getting parent instance pointer.*/
  devp = objGetInstance(LSM303AGRDriver*, (BaseAccelerometer*)ip);
 800b7d8:	9a01      	ldr	r2, [sp, #4]
 800b7da:	9b01      	ldr	r3, [sp, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	1ad3      	subs	r3, r2, r3
 800b7e2:	9303      	str	r3, [sp, #12]

  osalDbgAssert((devp->state == LSM303AGR_READY),
                "acc_reset_sensivity(), invalid state");

  if(devp->config->accfullscale == LSM303AGR_ACC_FS_2G) {
 800b7e4:	9b03      	ldr	r3, [sp, #12]
 800b7e6:	691b      	ldr	r3, [r3, #16]
 800b7e8:	7c1b      	ldrb	r3, [r3, #16]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d10f      	bne.n	800b80e <acc_reset_sensivity.lto_priv.1+0x3e>
    for(i = 0; i < LSM303AGR_ACC_NUMBER_OF_AXES; i++) {
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	9304      	str	r3, [sp, #16]
 800b7f2:	e008      	b.n	800b806 <acc_reset_sensivity.lto_priv.1+0x36>
      devp->accsensitivity[i] = LSM303AGR_ACC_SENS_2G;
 800b7f4:	9b03      	ldr	r3, [sp, #12]
 800b7f6:	9a04      	ldr	r2, [sp, #16]
 800b7f8:	3206      	adds	r2, #6
 800b7fa:	4928      	ldr	r1, [pc, #160]	; (800b89c <acc_reset_sensivity.lto_priv.1+0xcc>)
 800b7fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(i = 0; i < LSM303AGR_ACC_NUMBER_OF_AXES; i++) {
 800b800:	9b04      	ldr	r3, [sp, #16]
 800b802:	3301      	adds	r3, #1
 800b804:	9304      	str	r3, [sp, #16]
 800b806:	9b04      	ldr	r3, [sp, #16]
 800b808:	2b02      	cmp	r3, #2
 800b80a:	d9f3      	bls.n	800b7f4 <acc_reset_sensivity.lto_priv.1+0x24>
 800b80c:	e042      	b.n	800b894 <acc_reset_sensivity.lto_priv.1+0xc4>
    }
  }
  else if(devp->config->accfullscale == LSM303AGR_ACC_FS_4G) {
 800b80e:	9b03      	ldr	r3, [sp, #12]
 800b810:	691b      	ldr	r3, [r3, #16]
 800b812:	7c1b      	ldrb	r3, [r3, #16]
 800b814:	2b10      	cmp	r3, #16
 800b816:	d10f      	bne.n	800b838 <acc_reset_sensivity.lto_priv.1+0x68>
    for(i = 0; i < LSM303AGR_ACC_NUMBER_OF_AXES; i++) {
 800b818:	2300      	movs	r3, #0
 800b81a:	9304      	str	r3, [sp, #16]
 800b81c:	e008      	b.n	800b830 <acc_reset_sensivity.lto_priv.1+0x60>
      devp->accsensitivity[i] = LSM303AGR_ACC_SENS_4G;
 800b81e:	9b03      	ldr	r3, [sp, #12]
 800b820:	9a04      	ldr	r2, [sp, #16]
 800b822:	3206      	adds	r2, #6
 800b824:	491e      	ldr	r1, [pc, #120]	; (800b8a0 <acc_reset_sensivity.lto_priv.1+0xd0>)
 800b826:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(i = 0; i < LSM303AGR_ACC_NUMBER_OF_AXES; i++) {
 800b82a:	9b04      	ldr	r3, [sp, #16]
 800b82c:	3301      	adds	r3, #1
 800b82e:	9304      	str	r3, [sp, #16]
 800b830:	9b04      	ldr	r3, [sp, #16]
 800b832:	2b02      	cmp	r3, #2
 800b834:	d9f3      	bls.n	800b81e <acc_reset_sensivity.lto_priv.1+0x4e>
 800b836:	e02d      	b.n	800b894 <acc_reset_sensivity.lto_priv.1+0xc4>
    }
  }
  else if(devp->config->accfullscale == LSM303AGR_ACC_FS_8G) {
 800b838:	9b03      	ldr	r3, [sp, #12]
 800b83a:	691b      	ldr	r3, [r3, #16]
 800b83c:	7c1b      	ldrb	r3, [r3, #16]
 800b83e:	2b20      	cmp	r3, #32
 800b840:	d10f      	bne.n	800b862 <acc_reset_sensivity.lto_priv.1+0x92>
    for(i = 0; i < LSM303AGR_ACC_NUMBER_OF_AXES; i++) {
 800b842:	2300      	movs	r3, #0
 800b844:	9304      	str	r3, [sp, #16]
 800b846:	e008      	b.n	800b85a <acc_reset_sensivity.lto_priv.1+0x8a>
      devp->accsensitivity[i] = LSM303AGR_ACC_SENS_8G;
 800b848:	9b03      	ldr	r3, [sp, #12]
 800b84a:	9a04      	ldr	r2, [sp, #16]
 800b84c:	3206      	adds	r2, #6
 800b84e:	4915      	ldr	r1, [pc, #84]	; (800b8a4 <acc_reset_sensivity.lto_priv.1+0xd4>)
 800b850:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(i = 0; i < LSM303AGR_ACC_NUMBER_OF_AXES; i++) {
 800b854:	9b04      	ldr	r3, [sp, #16]
 800b856:	3301      	adds	r3, #1
 800b858:	9304      	str	r3, [sp, #16]
 800b85a:	9b04      	ldr	r3, [sp, #16]
 800b85c:	2b02      	cmp	r3, #2
 800b85e:	d9f3      	bls.n	800b848 <acc_reset_sensivity.lto_priv.1+0x78>
 800b860:	e018      	b.n	800b894 <acc_reset_sensivity.lto_priv.1+0xc4>
    }
  }
  else if(devp->config->accfullscale == LSM303AGR_ACC_FS_16G) {
 800b862:	9b03      	ldr	r3, [sp, #12]
 800b864:	691b      	ldr	r3, [r3, #16]
 800b866:	7c1b      	ldrb	r3, [r3, #16]
 800b868:	2b30      	cmp	r3, #48	; 0x30
 800b86a:	d110      	bne.n	800b88e <acc_reset_sensivity.lto_priv.1+0xbe>
    for(i = 0; i < LSM303AGR_ACC_NUMBER_OF_AXES; i++) {
 800b86c:	2300      	movs	r3, #0
 800b86e:	9304      	str	r3, [sp, #16]
 800b870:	e009      	b.n	800b886 <acc_reset_sensivity.lto_priv.1+0xb6>
      devp->accsensitivity[i] = LSM303AGR_ACC_SENS_16G;
 800b872:	9b03      	ldr	r3, [sp, #12]
 800b874:	9a04      	ldr	r2, [sp, #16]
 800b876:	3206      	adds	r2, #6
 800b878:	f04f 517d 	mov.w	r1, #1061158912	; 0x3f400000
 800b87c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(i = 0; i < LSM303AGR_ACC_NUMBER_OF_AXES; i++) {
 800b880:	9b04      	ldr	r3, [sp, #16]
 800b882:	3301      	adds	r3, #1
 800b884:	9304      	str	r3, [sp, #16]
 800b886:	9b04      	ldr	r3, [sp, #16]
 800b888:	2b02      	cmp	r3, #2
 800b88a:	d9f2      	bls.n	800b872 <acc_reset_sensivity.lto_priv.1+0xa2>
 800b88c:	e002      	b.n	800b894 <acc_reset_sensivity.lto_priv.1+0xc4>
    }
  }
  else {
    osalDbgAssert(FALSE, "reset_sensivity(), accelerometer full scale issue");
    msg = MSG_RESET;
 800b88e:	f06f 0301 	mvn.w	r3, #1
 800b892:	9305      	str	r3, [sp, #20]
  }
  return msg;
 800b894:	9b05      	ldr	r3, [sp, #20]
}
 800b896:	4618      	mov	r0, r3
 800b898:	b006      	add	sp, #24
 800b89a:	4770      	bx	lr
 800b89c:	3d75c28f 	.word	0x3d75c28f
 800b8a0:	3df5c28f 	.word	0x3df5c28f
 800b8a4:	3e75c28f 	.word	0x3e75c28f
	...

0800b8b0 <acc_set_full_scale.lto_priv.1>:
 * @return              The operation status.
 * @retval MSG_OK       if the function succeeded.
 * @retval MSG_RESET    otherwise.
 */
static msg_t acc_set_full_scale(LSM303AGRDriver *devp,
                                lsm303agr_acc_fs_t fs) {
 800b8b0:	b510      	push	{r4, lr}
 800b8b2:	b08a      	sub	sp, #40	; 0x28
 800b8b4:	9003      	str	r0, [sp, #12]
 800b8b6:	460b      	mov	r3, r1
 800b8b8:	f88d 300b 	strb.w	r3, [sp, #11]
                "acc_set_full_scale(), invalid state");
  osalDbgAssert((devp->config->i2cp->state == I2C_READY),
                "acc_set_full_scale(), channel not ready");

  /* Computing new fullscale value.*/
  if(fs == LSM303AGR_ACC_FS_2G) {
 800b8bc:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d103      	bne.n	800b8cc <acc_set_full_scale.lto_priv.1+0x1c>
    newfs = LSM303AGR_ACC_2G;
 800b8c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b8c8:	9309      	str	r3, [sp, #36]	; 0x24
 800b8ca:	e01c      	b.n	800b906 <acc_set_full_scale.lto_priv.1+0x56>
  }
  else if(fs == LSM303AGR_ACC_FS_4G) {
 800b8cc:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800b8d0:	2b10      	cmp	r3, #16
 800b8d2:	d103      	bne.n	800b8dc <acc_set_full_scale.lto_priv.1+0x2c>
    newfs = LSM303AGR_ACC_4G;
 800b8d4:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 800b8d8:	9309      	str	r3, [sp, #36]	; 0x24
 800b8da:	e014      	b.n	800b906 <acc_set_full_scale.lto_priv.1+0x56>
  }
  else if(fs == LSM303AGR_ACC_FS_8G) {
 800b8dc:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800b8e0:	2b20      	cmp	r3, #32
 800b8e2:	d103      	bne.n	800b8ec <acc_set_full_scale.lto_priv.1+0x3c>
    newfs = LSM303AGR_ACC_8G;
 800b8e4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 800b8e8:	9309      	str	r3, [sp, #36]	; 0x24
 800b8ea:	e00c      	b.n	800b906 <acc_set_full_scale.lto_priv.1+0x56>
  }
  else if(fs == LSM303AGR_ACC_FS_16G) {
 800b8ec:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800b8f0:	2b30      	cmp	r3, #48	; 0x30
 800b8f2:	d103      	bne.n	800b8fc <acc_set_full_scale.lto_priv.1+0x4c>
    newfs = LSM303AGR_ACC_16G;
 800b8f4:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 800b8f8:	9309      	str	r3, [sp, #36]	; 0x24
 800b8fa:	e004      	b.n	800b906 <acc_set_full_scale.lto_priv.1+0x56>
  }
  else {
    msg = MSG_RESET;
 800b8fc:	f06f 0301 	mvn.w	r3, #1
 800b900:	9308      	str	r3, [sp, #32]
    return msg;
 800b902:	9b08      	ldr	r3, [sp, #32]
 800b904:	e07a      	b.n	800b9fc <acc_set_full_scale.lto_priv.1+0x14c>
  }

  if(newfs != devp->accfullscale) {
 800b906:	9b03      	ldr	r3, [sp, #12]
 800b908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b90a:	4619      	mov	r1, r3
 800b90c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b90e:	f7f5 fb6d 	bl	8000fec <__aeabi_fcmpeq>
 800b912:	4603      	mov	r3, r0
 800b914:	2b00      	cmp	r3, #0
 800b916:	d16f      	bne.n	800b9f8 <acc_set_full_scale.lto_priv.1+0x148>
    /* Computing scale value.*/
    scale = newfs / devp->accfullscale;
 800b918:	9b03      	ldr	r3, [sp, #12]
 800b91a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b91c:	4619      	mov	r1, r3
 800b91e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b920:	f7f5 fa84 	bl	8000e2c <__aeabi_fdiv>
 800b924:	4603      	mov	r3, r0
 800b926:	9306      	str	r3, [sp, #24]
    devp->accfullscale = newfs;
 800b928:	9b03      	ldr	r3, [sp, #12]
 800b92a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b92c:	631a      	str	r2, [r3, #48]	; 0x30
		i2cStart(devp->config->i2cp,
						 devp->config->i2ccfg);
#endif /* LSM303AGR_SHARED_I2C */

    /* Updating register.*/
    msg = lsm303agrI2CReadRegister(devp->config->i2cp,
 800b92e:	9b03      	ldr	r3, [sp, #12]
 800b930:	691b      	ldr	r3, [r3, #16]
 800b932:	6818      	ldr	r0, [r3, #0]
 800b934:	ab05      	add	r3, sp, #20
 800b936:	3301      	adds	r3, #1
 800b938:	2201      	movs	r2, #1
 800b93a:	9200      	str	r2, [sp, #0]
 800b93c:	2223      	movs	r2, #35	; 0x23
 800b93e:	2119      	movs	r1, #25
 800b940:	f7ff fdee 	bl	800b520 <lsm303agrI2CReadRegister>
 800b944:	9008      	str	r0, [sp, #32]

#if LSM303AGR_SHARED_I2C
        i2cReleaseBus(devp->config->i2cp);
#endif /* LSM303AGR_SHARED_I2C */

    if(msg != MSG_OK)
 800b946:	9b08      	ldr	r3, [sp, #32]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d001      	beq.n	800b950 <acc_set_full_scale.lto_priv.1+0xa0>
      return msg;
 800b94c:	9b08      	ldr	r3, [sp, #32]
 800b94e:	e055      	b.n	800b9fc <acc_set_full_scale.lto_priv.1+0x14c>

    buff[1] &= ~(LSM303AGR_CTRL_REG4_A_FS_MASK);
 800b950:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800b954:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800b958:	b2db      	uxtb	r3, r3
 800b95a:	f88d 3015 	strb.w	r3, [sp, #21]
    buff[1] |= fs;
 800b95e:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800b962:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800b966:	4313      	orrs	r3, r2
 800b968:	b2db      	uxtb	r3, r3
 800b96a:	f88d 3015 	strb.w	r3, [sp, #21]
    buff[0] = LSM303AGR_AD_CTRL_REG4_A;
 800b96e:	2323      	movs	r3, #35	; 0x23
 800b970:	f88d 3014 	strb.w	r3, [sp, #20]
#if LSM303AGR_SHARED_I2C
    i2cAcquireBus(devp->config->i2cp);
    i2cStart(devp->config->i2cp, devp->config->i2ccfg);
#endif /* LSM303AGR_SHARED_I2C */

    msg = lsm303agrI2CWriteRegister(devp->config->i2cp,
 800b974:	9b03      	ldr	r3, [sp, #12]
 800b976:	691b      	ldr	r3, [r3, #16]
 800b978:	6818      	ldr	r0, [r3, #0]
 800b97a:	aa05      	add	r2, sp, #20
 800b97c:	2301      	movs	r3, #1
 800b97e:	2119      	movs	r1, #25
 800b980:	f7ff fdf6 	bl	800b570 <lsm303agrI2CWriteRegister>
 800b984:	9008      	str	r0, [sp, #32]

#if LSM303AGR_SHARED_I2C
		i2cReleaseBus(devp->config->i2cp);
#endif /* LSM303AGR_SHARED_I2C */

    if(msg != MSG_OK)
 800b986:	9b08      	ldr	r3, [sp, #32]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d001      	beq.n	800b990 <acc_set_full_scale.lto_priv.1+0xe0>
      return msg;
 800b98c:	9b08      	ldr	r3, [sp, #32]
 800b98e:	e035      	b.n	800b9fc <acc_set_full_scale.lto_priv.1+0x14c>

    /* Scaling sensitivity and bias. Re-calibration is suggested anyway.*/
    for(i = 0; i < LSM303AGR_ACC_NUMBER_OF_AXES; i++) {
 800b990:	2300      	movs	r3, #0
 800b992:	f88d 301f 	strb.w	r3, [sp, #31]
 800b996:	e02b      	b.n	800b9f0 <acc_set_full_scale.lto_priv.1+0x140>
      devp->accsensitivity[i] *= scale;
 800b998:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800b99c:	9b03      	ldr	r3, [sp, #12]
 800b99e:	3206      	adds	r2, #6
 800b9a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9a4:	f89d 401f 	ldrb.w	r4, [sp, #31]
 800b9a8:	9906      	ldr	r1, [sp, #24]
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f7f5 f98a 	bl	8000cc4 <__aeabi_fmul>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	4619      	mov	r1, r3
 800b9b4:	9b03      	ldr	r3, [sp, #12]
 800b9b6:	1da2      	adds	r2, r4, #6
 800b9b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      devp->accbias[i] *= scale;
 800b9bc:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800b9c0:	9a03      	ldr	r2, [sp, #12]
 800b9c2:	3308      	adds	r3, #8
 800b9c4:	009b      	lsls	r3, r3, #2
 800b9c6:	4413      	add	r3, r2
 800b9c8:	685b      	ldr	r3, [r3, #4]
 800b9ca:	f89d 401f 	ldrb.w	r4, [sp, #31]
 800b9ce:	9906      	ldr	r1, [sp, #24]
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	f7f5 f977 	bl	8000cc4 <__aeabi_fmul>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	4619      	mov	r1, r3
 800b9da:	9a03      	ldr	r2, [sp, #12]
 800b9dc:	f104 0308 	add.w	r3, r4, #8
 800b9e0:	009b      	lsls	r3, r3, #2
 800b9e2:	4413      	add	r3, r2
 800b9e4:	6059      	str	r1, [r3, #4]
    for(i = 0; i < LSM303AGR_ACC_NUMBER_OF_AXES; i++) {
 800b9e6:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800b9ea:	3301      	adds	r3, #1
 800b9ec:	f88d 301f 	strb.w	r3, [sp, #31]
 800b9f0:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800b9f4:	2b02      	cmp	r3, #2
 800b9f6:	d9cf      	bls.n	800b998 <acc_set_full_scale.lto_priv.1+0xe8>
    }
  }
  return msg;
 800b9f8:	9b08      	ldr	r3, [sp, #32]
 800b9fa:	bf00      	nop
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	b00a      	add	sp, #40	; 0x28
 800ba00:	bd10      	pop	{r4, pc}
 800ba02:	bf00      	nop
	...

0800ba10 <comp_get_axes_number>:
 *
 * @param[in] ip        pointer to @p BaseCompass interface
 *
 * @return              the number of axes.
 */
static size_t comp_get_axes_number(void *ip) {
 800ba10:	b082      	sub	sp, #8
 800ba12:	9001      	str	r0, [sp, #4]

  osalDbgCheck(ip != NULL);
  return LSM303AGR_COMP_NUMBER_OF_AXES;
 800ba14:	2303      	movs	r3, #3
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	b002      	add	sp, #8
 800ba1a:	4770      	bx	lr
 800ba1c:	0000      	movs	r0, r0
	...

0800ba20 <comp_read_raw>:
 * @retval MSG_OK       if the function succeeded.
 * @retval MSG_RESET    if one or more I2C errors occurred, the errors can
 *                      be retrieved using @p i2cGetErrors().
 * @retval MSG_TIMEOUT  if a timeout occurred before operation end.
 */
static msg_t comp_read_raw(void *ip, int32_t axes[]) {
 800ba20:	b500      	push	{lr}
 800ba22:	b08b      	sub	sp, #44	; 0x2c
 800ba24:	9003      	str	r0, [sp, #12]
 800ba26:	9102      	str	r1, [sp, #8]
  msg_t msg;

  osalDbgCheck((ip != NULL) && (axes != NULL));

  /* Getting parent instance pointer.*/
  devp = objGetInstance(LSM303AGRDriver*, (BaseCompass*)ip);
 800ba28:	9a03      	ldr	r2, [sp, #12]
 800ba2a:	9b03      	ldr	r3, [sp, #12]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	1ad3      	subs	r3, r2, r3
 800ba32:	9306      	str	r3, [sp, #24]
#if LSM303AGR_SHARED_I2C
  i2cAcquireBus(devp->config->i2cp);
  i2cStart(devp->config->i2cp,
           devp->config->i2ccfg);
#endif /* LSM303AGR_SHARED_I2C */
  msg = lsm303agrI2CReadRegister(devp->config->i2cp, LSM303AGR_SAD_COMP,
 800ba34:	9b06      	ldr	r3, [sp, #24]
 800ba36:	691b      	ldr	r3, [r3, #16]
 800ba38:	6818      	ldr	r0, [r3, #0]
 800ba3a:	ab04      	add	r3, sp, #16
 800ba3c:	2206      	movs	r2, #6
 800ba3e:	9200      	str	r2, [sp, #0]
 800ba40:	2268      	movs	r2, #104	; 0x68
 800ba42:	211e      	movs	r1, #30
 800ba44:	f7ff fd6c 	bl	800b520 <lsm303agrI2CReadRegister>
 800ba48:	9008      	str	r0, [sp, #32]

#if LSM303AGR_SHARED_I2C
  i2cReleaseBus(devp->config->i2cp);
#endif /* LSM303AGR_SHARED_I2C */

  if(msg == MSG_OK)
 800ba4a:	9b08      	ldr	r3, [sp, #32]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d12b      	bne.n	800baa8 <comp_read_raw+0x88>
    for(i = 0; i < LSM303AGR_COMP_NUMBER_OF_AXES; i++) {
 800ba50:	2300      	movs	r3, #0
 800ba52:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 800ba56:	e023      	b.n	800baa0 <comp_read_raw+0x80>
      tmp = buff[2 * i] + (buff[2 * i + 1] << 8);
 800ba58:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800ba5c:	005b      	lsls	r3, r3, #1
 800ba5e:	3328      	adds	r3, #40	; 0x28
 800ba60:	446b      	add	r3, sp
 800ba62:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800ba66:	b29a      	uxth	r2, r3
 800ba68:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800ba6c:	005b      	lsls	r3, r3, #1
 800ba6e:	3301      	adds	r3, #1
 800ba70:	3328      	adds	r3, #40	; 0x28
 800ba72:	446b      	add	r3, sp
 800ba74:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800ba78:	b29b      	uxth	r3, r3
 800ba7a:	021b      	lsls	r3, r3, #8
 800ba7c:	b29b      	uxth	r3, r3
 800ba7e:	4413      	add	r3, r2
 800ba80:	b29b      	uxth	r3, r3
 800ba82:	f8ad 301e 	strh.w	r3, [sp, #30]
      axes[i] = (int32_t)tmp;
 800ba86:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800ba8a:	009b      	lsls	r3, r3, #2
 800ba8c:	9a02      	ldr	r2, [sp, #8]
 800ba8e:	4413      	add	r3, r2
 800ba90:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
 800ba94:	601a      	str	r2, [r3, #0]
    for(i = 0; i < LSM303AGR_COMP_NUMBER_OF_AXES; i++) {
 800ba96:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800ba9a:	3301      	adds	r3, #1
 800ba9c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 800baa0:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800baa4:	2b02      	cmp	r3, #2
 800baa6:	d9d7      	bls.n	800ba58 <comp_read_raw+0x38>
    }
  return msg;
 800baa8:	9b08      	ldr	r3, [sp, #32]
 800baaa:	bf00      	nop
}
 800baac:	4618      	mov	r0, r3
 800baae:	b00b      	add	sp, #44	; 0x2c
 800bab0:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800bac0 <comp_read_cooked>:
 * @retval MSG_OK       if the function succeeded.
 * @retval MSG_RESET    if one or more I2C errors occurred, the errors can
 *                      be retrieved using @p i2cGetErrors().
 * @retval MSG_TIMEOUT  if a timeout occurred before operation end.
 */
static msg_t comp_read_cooked(void *ip, float axes[]) {
 800bac0:	b510      	push	{r4, lr}
 800bac2:	b088      	sub	sp, #32
 800bac4:	9001      	str	r0, [sp, #4]
 800bac6:	9100      	str	r1, [sp, #0]

  osalDbgCheck((ip != NULL) && (axes != NULL));


  /* Getting parent instance pointer.*/
  devp = objGetInstance(LSM303AGRDriver*, (BaseCompass*)ip);
 800bac8:	9a01      	ldr	r2, [sp, #4]
 800baca:	9b01      	ldr	r3, [sp, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	1ad3      	subs	r3, r2, r3
 800bad2:	9306      	str	r3, [sp, #24]

  osalDbgAssert((devp->state == LSM303AGR_READY),
                "comp_read_cooked(), invalid state");

  msg = comp_read_raw(ip, raw);
 800bad4:	ab02      	add	r3, sp, #8
 800bad6:	4619      	mov	r1, r3
 800bad8:	9801      	ldr	r0, [sp, #4]
 800bada:	f7ff ffa1 	bl	800ba20 <comp_read_raw>
 800bade:	9005      	str	r0, [sp, #20]
  for(i = 0; i < LSM303AGR_COMP_NUMBER_OF_AXES ; i++) {
 800bae0:	2300      	movs	r3, #0
 800bae2:	9307      	str	r3, [sp, #28]
 800bae4:	e023      	b.n	800bb2e <comp_read_cooked+0x6e>
    axes[i] = (raw[i] * devp->compsensitivity[i]) - devp->compbias[i];
 800bae6:	9b07      	ldr	r3, [sp, #28]
 800bae8:	009b      	lsls	r3, r3, #2
 800baea:	3320      	adds	r3, #32
 800baec:	446b      	add	r3, sp
 800baee:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800baf2:	4618      	mov	r0, r3
 800baf4:	f7f5 f892 	bl	8000c1c <__aeabi_i2f>
 800baf8:	9b06      	ldr	r3, [sp, #24]
 800bafa:	9a07      	ldr	r2, [sp, #28]
 800bafc:	320e      	adds	r2, #14
 800bafe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb02:	4619      	mov	r1, r3
 800bb04:	f7f5 f8de 	bl	8000cc4 <__aeabi_fmul>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	9a06      	ldr	r2, [sp, #24]
 800bb0e:	9b07      	ldr	r3, [sp, #28]
 800bb10:	3310      	adds	r3, #16
 800bb12:	009b      	lsls	r3, r3, #2
 800bb14:	4413      	add	r3, r2
 800bb16:	6859      	ldr	r1, [r3, #4]
 800bb18:	9b07      	ldr	r3, [sp, #28]
 800bb1a:	009b      	lsls	r3, r3, #2
 800bb1c:	9a00      	ldr	r2, [sp, #0]
 800bb1e:	18d4      	adds	r4, r2, r3
 800bb20:	f7f4 ffc6 	bl	8000ab0 <__aeabi_fsub>
 800bb24:	4603      	mov	r3, r0
 800bb26:	6023      	str	r3, [r4, #0]
  for(i = 0; i < LSM303AGR_COMP_NUMBER_OF_AXES ; i++) {
 800bb28:	9b07      	ldr	r3, [sp, #28]
 800bb2a:	3301      	adds	r3, #1
 800bb2c:	9307      	str	r3, [sp, #28]
 800bb2e:	9b07      	ldr	r3, [sp, #28]
 800bb30:	2b02      	cmp	r3, #2
 800bb32:	d9d8      	bls.n	800bae6 <comp_read_cooked+0x26>
  }
  return msg;
 800bb34:	9b05      	ldr	r3, [sp, #20]
 800bb36:	bf00      	nop
}
 800bb38:	4618      	mov	r0, r3
 800bb3a:	b008      	add	sp, #32
 800bb3c:	bd10      	pop	{r4, pc}
 800bb3e:	bf00      	nop

0800bb40 <comp_set_bias>:
 * @param[in] bp        a buffer which contains biases.
 *
 * @return              The operation status.
 * @retval MSG_OK       if the function succeeded.
 */
static msg_t comp_set_bias(void *ip, float *bp) {
 800bb40:	b086      	sub	sp, #24
 800bb42:	9001      	str	r0, [sp, #4]
 800bb44:	9100      	str	r1, [sp, #0]
  LSM303AGRDriver* devp;
  uint32_t i;
  msg_t msg = MSG_OK;
 800bb46:	2300      	movs	r3, #0
 800bb48:	9303      	str	r3, [sp, #12]

  osalDbgCheck((ip != NULL) && (bp != NULL));

  /* Getting parent instance pointer.*/
  devp = objGetInstance(LSM303AGRDriver*, (BaseCompass*)ip);
 800bb4a:	9a01      	ldr	r2, [sp, #4]
 800bb4c:	9b01      	ldr	r3, [sp, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	1ad3      	subs	r3, r2, r3
 800bb54:	9305      	str	r3, [sp, #20]

  osalDbgAssert((devp->state == LSM303AGR_READY),
                "comp_set_bias(), invalid state");

  for(i = 0; i < LSM303AGR_COMP_NUMBER_OF_AXES; i++) {
 800bb56:	2300      	movs	r3, #0
 800bb58:	9304      	str	r3, [sp, #16]
 800bb5a:	e00d      	b.n	800bb78 <comp_set_bias+0x38>
    devp->compbias[i] = bp[i];
 800bb5c:	9b04      	ldr	r3, [sp, #16]
 800bb5e:	009b      	lsls	r3, r3, #2
 800bb60:	9a00      	ldr	r2, [sp, #0]
 800bb62:	4413      	add	r3, r2
 800bb64:	681a      	ldr	r2, [r3, #0]
 800bb66:	9905      	ldr	r1, [sp, #20]
 800bb68:	9b04      	ldr	r3, [sp, #16]
 800bb6a:	3310      	adds	r3, #16
 800bb6c:	009b      	lsls	r3, r3, #2
 800bb6e:	440b      	add	r3, r1
 800bb70:	605a      	str	r2, [r3, #4]
  for(i = 0; i < LSM303AGR_COMP_NUMBER_OF_AXES; i++) {
 800bb72:	9b04      	ldr	r3, [sp, #16]
 800bb74:	3301      	adds	r3, #1
 800bb76:	9304      	str	r3, [sp, #16]
 800bb78:	9b04      	ldr	r3, [sp, #16]
 800bb7a:	2b02      	cmp	r3, #2
 800bb7c:	d9ee      	bls.n	800bb5c <comp_set_bias+0x1c>
  }
  return msg;
 800bb7e:	9b03      	ldr	r3, [sp, #12]
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	b006      	add	sp, #24
 800bb84:	4770      	bx	lr
 800bb86:	bf00      	nop
	...

0800bb90 <comp_reset_bias>:
 * @param[in] ip        pointer to @p BaseCompass interface.
 *
 * @return              The operation status.
 * @retval MSG_OK       if the function succeeded.
 */
static msg_t comp_reset_bias(void *ip) {
 800bb90:	b086      	sub	sp, #24
 800bb92:	9001      	str	r0, [sp, #4]
  LSM303AGRDriver* devp;
  uint32_t i;
  msg_t msg = MSG_OK;
 800bb94:	2300      	movs	r3, #0
 800bb96:	9303      	str	r3, [sp, #12]

  osalDbgCheck(ip != NULL);

  /* Getting parent instance pointer.*/
  devp = objGetInstance(LSM303AGRDriver*, (BaseCompass*)ip);
 800bb98:	9a01      	ldr	r2, [sp, #4]
 800bb9a:	9b01      	ldr	r3, [sp, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	1ad3      	subs	r3, r2, r3
 800bba2:	9305      	str	r3, [sp, #20]

  osalDbgAssert((devp->state == LSM303AGR_READY),
                "comp_reset_bias(), invalid state");

  for(i = 0; i < LSM303AGR_COMP_NUMBER_OF_AXES; i++)
 800bba4:	2300      	movs	r3, #0
 800bba6:	9304      	str	r3, [sp, #16]
 800bba8:	e00a      	b.n	800bbc0 <comp_reset_bias+0x30>
    devp->compbias[i] = LSM303AGR_COMP_BIAS;
 800bbaa:	9a05      	ldr	r2, [sp, #20]
 800bbac:	9b04      	ldr	r3, [sp, #16]
 800bbae:	3310      	adds	r3, #16
 800bbb0:	009b      	lsls	r3, r3, #2
 800bbb2:	4413      	add	r3, r2
 800bbb4:	f04f 0200 	mov.w	r2, #0
 800bbb8:	605a      	str	r2, [r3, #4]
  for(i = 0; i < LSM303AGR_COMP_NUMBER_OF_AXES; i++)
 800bbba:	9b04      	ldr	r3, [sp, #16]
 800bbbc:	3301      	adds	r3, #1
 800bbbe:	9304      	str	r3, [sp, #16]
 800bbc0:	9b04      	ldr	r3, [sp, #16]
 800bbc2:	2b02      	cmp	r3, #2
 800bbc4:	d9f1      	bls.n	800bbaa <comp_reset_bias+0x1a>
  return msg;
 800bbc6:	9b03      	ldr	r3, [sp, #12]
}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	b006      	add	sp, #24
 800bbcc:	4770      	bx	lr
 800bbce:	bf00      	nop

0800bbd0 <comp_set_sensivity>:
 * @param[in] sp        a buffer which contains sensitivities.
 *
 * @return              The operation status.
 * @retval MSG_OK       if the function succeeded.
 */
static msg_t comp_set_sensivity(void *ip, float *sp) {
 800bbd0:	b086      	sub	sp, #24
 800bbd2:	9001      	str	r0, [sp, #4]
 800bbd4:	9100      	str	r1, [sp, #0]
  LSM303AGRDriver* devp;
  uint32_t i;
  msg_t msg = MSG_OK;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	9303      	str	r3, [sp, #12]

  /* Getting parent instance pointer.*/
  devp = objGetInstance(LSM303AGRDriver*, (BaseCompass*)ip);
 800bbda:	9a01      	ldr	r2, [sp, #4]
 800bbdc:	9b01      	ldr	r3, [sp, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	1ad3      	subs	r3, r2, r3
 800bbe4:	9305      	str	r3, [sp, #20]
  osalDbgCheck((ip != NULL) && (sp != NULL));

  osalDbgAssert((devp->state == LSM303AGR_READY),
                "comp_set_sensivity(), invalid state");

  for(i = 0; i < LSM303AGR_COMP_NUMBER_OF_AXES; i++) {
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	9304      	str	r3, [sp, #16]
 800bbea:	e00c      	b.n	800bc06 <comp_set_sensivity+0x36>
    devp->compsensitivity[i] = sp[i];
 800bbec:	9b04      	ldr	r3, [sp, #16]
 800bbee:	009b      	lsls	r3, r3, #2
 800bbf0:	9a00      	ldr	r2, [sp, #0]
 800bbf2:	4413      	add	r3, r2
 800bbf4:	6819      	ldr	r1, [r3, #0]
 800bbf6:	9b05      	ldr	r3, [sp, #20]
 800bbf8:	9a04      	ldr	r2, [sp, #16]
 800bbfa:	320e      	adds	r2, #14
 800bbfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < LSM303AGR_COMP_NUMBER_OF_AXES; i++) {
 800bc00:	9b04      	ldr	r3, [sp, #16]
 800bc02:	3301      	adds	r3, #1
 800bc04:	9304      	str	r3, [sp, #16]
 800bc06:	9b04      	ldr	r3, [sp, #16]
 800bc08:	2b02      	cmp	r3, #2
 800bc0a:	d9ef      	bls.n	800bbec <comp_set_sensivity+0x1c>
  }
  return msg;
 800bc0c:	9b03      	ldr	r3, [sp, #12]
}
 800bc0e:	4618      	mov	r0, r3
 800bc10:	b006      	add	sp, #24
 800bc12:	4770      	bx	lr
	...

0800bc20 <comp_reset_sensivity>:
 *
 * @return              The operation status.
 * @retval MSG_OK       if the function succeeded.
 * @retval MSG_RESET    otherwise.
 */
static msg_t comp_reset_sensivity(void *ip) {
 800bc20:	b086      	sub	sp, #24
 800bc22:	9001      	str	r0, [sp, #4]
  LSM303AGRDriver* devp;
  uint32_t i;
  msg_t msg = MSG_OK;
 800bc24:	2300      	movs	r3, #0
 800bc26:	9303      	str	r3, [sp, #12]

  osalDbgCheck(ip != NULL);

  /* Getting parent instance pointer.*/
  devp = objGetInstance(LSM303AGRDriver*, (BaseCompass*)ip);
 800bc28:	9a01      	ldr	r2, [sp, #4]
 800bc2a:	9b01      	ldr	r3, [sp, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	1ad3      	subs	r3, r2, r3
 800bc32:	9305      	str	r3, [sp, #20]

  osalDbgAssert((devp->state == LSM303AGR_READY),
                "comp_reset_sensivity(), invalid state");

  for(i = 0; i < LSM303AGR_COMP_NUMBER_OF_AXES; i++)
 800bc34:	2300      	movs	r3, #0
 800bc36:	9304      	str	r3, [sp, #16]
 800bc38:	e008      	b.n	800bc4c <comp_reset_sensivity+0x2c>
    devp->compsensitivity[i] = LSM303AGR_COMP_SENS_50GA;
 800bc3a:	9b05      	ldr	r3, [sp, #20]
 800bc3c:	9a04      	ldr	r2, [sp, #16]
 800bc3e:	320e      	adds	r2, #14
 800bc40:	4906      	ldr	r1, [pc, #24]	; (800bc5c <comp_reset_sensivity+0x3c>)
 800bc42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < LSM303AGR_COMP_NUMBER_OF_AXES; i++)
 800bc46:	9b04      	ldr	r3, [sp, #16]
 800bc48:	3301      	adds	r3, #1
 800bc4a:	9304      	str	r3, [sp, #16]
 800bc4c:	9b04      	ldr	r3, [sp, #16]
 800bc4e:	2b02      	cmp	r3, #2
 800bc50:	d9f3      	bls.n	800bc3a <comp_reset_sensivity+0x1a>
  
  return msg;
 800bc52:	9b03      	ldr	r3, [sp, #12]
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	b006      	add	sp, #24
 800bc58:	4770      	bx	lr
 800bc5a:	bf00      	nop
 800bc5c:	391d4952 	.word	0x391d4952

0800bc60 <lsm303agrObjectInit>:
 *
 * @param[out] devp     pointer to the @p LSM303AGRDriver object
 *
 * @init
 */
void lsm303agrObjectInit(LSM303AGRDriver *devp) {
 800bc60:	b082      	sub	sp, #8
 800bc62:	9001      	str	r0, [sp, #4]
  devp->vmt = &vmt_device;
 800bc64:	9b01      	ldr	r3, [sp, #4]
 800bc66:	4a0b      	ldr	r2, [pc, #44]	; (800bc94 <lsm303agrObjectInit+0x34>)
 800bc68:	601a      	str	r2, [r3, #0]
  devp->acc_if.vmt = &vmt_accelerometer;
 800bc6a:	9b01      	ldr	r3, [sp, #4]
 800bc6c:	4a0a      	ldr	r2, [pc, #40]	; (800bc98 <lsm303agrObjectInit+0x38>)
 800bc6e:	605a      	str	r2, [r3, #4]
  devp->comp_if.vmt = &vmt_compass;
 800bc70:	9b01      	ldr	r3, [sp, #4]
 800bc72:	4a0a      	ldr	r2, [pc, #40]	; (800bc9c <lsm303agrObjectInit+0x3c>)
 800bc74:	609a      	str	r2, [r3, #8]

  devp->config = NULL;
 800bc76:	9b01      	ldr	r3, [sp, #4]
 800bc78:	2200      	movs	r2, #0
 800bc7a:	611a      	str	r2, [r3, #16]

  devp->accaxes = LSM303AGR_ACC_NUMBER_OF_AXES;
 800bc7c:	9b01      	ldr	r3, [sp, #4]
 800bc7e:	2203      	movs	r2, #3
 800bc80:	615a      	str	r2, [r3, #20]
  devp->compaxes = LSM303AGR_COMP_NUMBER_OF_AXES;
 800bc82:	9b01      	ldr	r3, [sp, #4]
 800bc84:	2203      	movs	r2, #3
 800bc86:	635a      	str	r2, [r3, #52]	; 0x34

  devp->state = LSM303AGR_STOP;
 800bc88:	9b01      	ldr	r3, [sp, #4]
 800bc8a:	2201      	movs	r2, #1
 800bc8c:	731a      	strb	r2, [r3, #12]
}
 800bc8e:	bf00      	nop
 800bc90:	b002      	add	sp, #8
 800bc92:	4770      	bx	lr
 800bc94:	0800f024 	.word	0x0800f024
 800bc98:	0800f02c 	.word	0x0800f02c
 800bc9c:	0800f04c 	.word	0x0800f04c

0800bca0 <lsm303agrStart>:
 * @param[in] devp      pointer to the @p LSM303AGRDriver object
 * @param[in] config    pointer to the @p LSM303AGRConfig object
 *
 * @api
 */
void lsm303agrStart(LSM303AGRDriver *devp, const LSM303AGRConfig *config) {
 800bca0:	b500      	push	{lr}
 800bca2:	b087      	sub	sp, #28
 800bca4:	9001      	str	r0, [sp, #4]
 800bca6:	9100      	str	r1, [sp, #0]

  osalDbgAssert((devp->state == LSM303AGR_STOP) ||
                (devp->state == LSM303AGR_READY),
                "lsm303agrStart(), invalid state");

  devp->config = config;
 800bca8:	9b01      	ldr	r3, [sp, #4]
 800bcaa:	9a00      	ldr	r2, [sp, #0]
 800bcac:	611a      	str	r2, [r3, #16]

  /* Configuring Accelerometer subsystem.*/

  /* Multiple write starting address.*/
  cr[0] = LSM303AGR_AD_CTRL_REG1_A;
 800bcae:	2320      	movs	r3, #32
 800bcb0:	f88d 300c 	strb.w	r3, [sp, #12]

  /* Control register 1 configuration block.*/
  {
    cr[1] = LSM303AGR_ACC_AE_XYZ | devp->config->accoutdatarate;
 800bcb4:	9b01      	ldr	r3, [sp, #4]
 800bcb6:	691b      	ldr	r3, [r3, #16]
 800bcb8:	7c5b      	ldrb	r3, [r3, #17]
 800bcba:	f043 0307 	orr.w	r3, r3, #7
 800bcbe:	b2db      	uxtb	r3, r3
 800bcc0:	f88d 300d 	strb.w	r3, [sp, #13]
#endif
  }

  /* Control register 2 configuration block.*/
  {
    cr[2] = 0;
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	f88d 300e 	strb.w	r3, [sp, #14]
  }

  /* Control register 3 configuration block.*/
  {
    cr[3] = 0;
 800bcca:	2300      	movs	r3, #0
 800bccc:	f88d 300f 	strb.w	r3, [sp, #15]
  }

  /* Control register 4 configuration block.*/
  {
    cr[4] = devp->config->accfullscale;
 800bcd0:	9b01      	ldr	r3, [sp, #4]
 800bcd2:	691b      	ldr	r3, [r3, #16]
 800bcd4:	7c1b      	ldrb	r3, [r3, #16]
 800bcd6:	f88d 3010 	strb.w	r3, [sp, #16]
      cr[4] |= LSM303AGR_CTRL_REG4_A_HR;
#endif
  }

  /* Storing sensitivity according to user settings */
  if(devp->config->accfullscale == LSM303AGR_ACC_FS_2G) {
 800bcda:	9b01      	ldr	r3, [sp, #4]
 800bcdc:	691b      	ldr	r3, [r3, #16]
 800bcde:	7c1b      	ldrb	r3, [r3, #16]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d125      	bne.n	800bd30 <lsm303agrStart+0x90>
    devp->accfullscale = LSM303AGR_ACC_2G;
 800bce4:	9b01      	ldr	r3, [sp, #4]
 800bce6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800bcea:	631a      	str	r2, [r3, #48]	; 0x30
    for(i = 0; i < LSM303AGR_ACC_NUMBER_OF_AXES; i++) {
 800bcec:	2300      	movs	r3, #0
 800bcee:	9305      	str	r3, [sp, #20]
 800bcf0:	e01a      	b.n	800bd28 <lsm303agrStart+0x88>
      if(devp->config->accsensitivity == NULL)
 800bcf2:	9b01      	ldr	r3, [sp, #4]
 800bcf4:	691b      	ldr	r3, [r3, #16]
 800bcf6:	689b      	ldr	r3, [r3, #8]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d106      	bne.n	800bd0a <lsm303agrStart+0x6a>
        devp->accsensitivity[i] = LSM303AGR_ACC_SENS_2G;
 800bcfc:	9b01      	ldr	r3, [sp, #4]
 800bcfe:	9a05      	ldr	r2, [sp, #20]
 800bd00:	3206      	adds	r2, #6
 800bd02:	498d      	ldr	r1, [pc, #564]	; (800bf38 <lsm303agrStart+0x298>)
 800bd04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800bd08:	e00b      	b.n	800bd22 <lsm303agrStart+0x82>
      else
        devp->accsensitivity[i] = devp->config->accsensitivity[i];
 800bd0a:	9b01      	ldr	r3, [sp, #4]
 800bd0c:	691b      	ldr	r3, [r3, #16]
 800bd0e:	689a      	ldr	r2, [r3, #8]
 800bd10:	9b05      	ldr	r3, [sp, #20]
 800bd12:	009b      	lsls	r3, r3, #2
 800bd14:	4413      	add	r3, r2
 800bd16:	6819      	ldr	r1, [r3, #0]
 800bd18:	9b01      	ldr	r3, [sp, #4]
 800bd1a:	9a05      	ldr	r2, [sp, #20]
 800bd1c:	3206      	adds	r2, #6
 800bd1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(i = 0; i < LSM303AGR_ACC_NUMBER_OF_AXES; i++) {
 800bd22:	9b05      	ldr	r3, [sp, #20]
 800bd24:	3301      	adds	r3, #1
 800bd26:	9305      	str	r3, [sp, #20]
 800bd28:	9b05      	ldr	r3, [sp, #20]
 800bd2a:	2b02      	cmp	r3, #2
 800bd2c:	d9e1      	bls.n	800bcf2 <lsm303agrStart+0x52>
 800bd2e:	e080      	b.n	800be32 <lsm303agrStart+0x192>
    }
  }
  else if(devp->config->accfullscale == LSM303AGR_ACC_FS_4G) {
 800bd30:	9b01      	ldr	r3, [sp, #4]
 800bd32:	691b      	ldr	r3, [r3, #16]
 800bd34:	7c1b      	ldrb	r3, [r3, #16]
 800bd36:	2b10      	cmp	r3, #16
 800bd38:	d125      	bne.n	800bd86 <lsm303agrStart+0xe6>
    devp->accfullscale = LSM303AGR_ACC_4G;
 800bd3a:	9b01      	ldr	r3, [sp, #4]
 800bd3c:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800bd40:	631a      	str	r2, [r3, #48]	; 0x30
    for(i = 0; i < LSM303AGR_ACC_NUMBER_OF_AXES; i++) {
 800bd42:	2300      	movs	r3, #0
 800bd44:	9305      	str	r3, [sp, #20]
 800bd46:	e01a      	b.n	800bd7e <lsm303agrStart+0xde>
      if(devp->config->accsensitivity == NULL)
 800bd48:	9b01      	ldr	r3, [sp, #4]
 800bd4a:	691b      	ldr	r3, [r3, #16]
 800bd4c:	689b      	ldr	r3, [r3, #8]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d106      	bne.n	800bd60 <lsm303agrStart+0xc0>
        devp->accsensitivity[i] = LSM303AGR_ACC_SENS_4G;
 800bd52:	9b01      	ldr	r3, [sp, #4]
 800bd54:	9a05      	ldr	r2, [sp, #20]
 800bd56:	3206      	adds	r2, #6
 800bd58:	4978      	ldr	r1, [pc, #480]	; (800bf3c <lsm303agrStart+0x29c>)
 800bd5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800bd5e:	e00b      	b.n	800bd78 <lsm303agrStart+0xd8>
      else
        devp->accsensitivity[i] = devp->config->accsensitivity[i];
 800bd60:	9b01      	ldr	r3, [sp, #4]
 800bd62:	691b      	ldr	r3, [r3, #16]
 800bd64:	689a      	ldr	r2, [r3, #8]
 800bd66:	9b05      	ldr	r3, [sp, #20]
 800bd68:	009b      	lsls	r3, r3, #2
 800bd6a:	4413      	add	r3, r2
 800bd6c:	6819      	ldr	r1, [r3, #0]
 800bd6e:	9b01      	ldr	r3, [sp, #4]
 800bd70:	9a05      	ldr	r2, [sp, #20]
 800bd72:	3206      	adds	r2, #6
 800bd74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(i = 0; i < LSM303AGR_ACC_NUMBER_OF_AXES; i++) {
 800bd78:	9b05      	ldr	r3, [sp, #20]
 800bd7a:	3301      	adds	r3, #1
 800bd7c:	9305      	str	r3, [sp, #20]
 800bd7e:	9b05      	ldr	r3, [sp, #20]
 800bd80:	2b02      	cmp	r3, #2
 800bd82:	d9e1      	bls.n	800bd48 <lsm303agrStart+0xa8>
 800bd84:	e055      	b.n	800be32 <lsm303agrStart+0x192>
    }
  }
  else if(devp->config->accfullscale == LSM303AGR_ACC_FS_8G) {
 800bd86:	9b01      	ldr	r3, [sp, #4]
 800bd88:	691b      	ldr	r3, [r3, #16]
 800bd8a:	7c1b      	ldrb	r3, [r3, #16]
 800bd8c:	2b20      	cmp	r3, #32
 800bd8e:	d125      	bne.n	800bddc <lsm303agrStart+0x13c>
    devp->accfullscale = LSM303AGR_ACC_8G;
 800bd90:	9b01      	ldr	r3, [sp, #4]
 800bd92:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 800bd96:	631a      	str	r2, [r3, #48]	; 0x30
    for(i = 0; i < LSM303AGR_ACC_NUMBER_OF_AXES; i++) {
 800bd98:	2300      	movs	r3, #0
 800bd9a:	9305      	str	r3, [sp, #20]
 800bd9c:	e01a      	b.n	800bdd4 <lsm303agrStart+0x134>
      if(devp->config->accsensitivity == NULL)
 800bd9e:	9b01      	ldr	r3, [sp, #4]
 800bda0:	691b      	ldr	r3, [r3, #16]
 800bda2:	689b      	ldr	r3, [r3, #8]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d106      	bne.n	800bdb6 <lsm303agrStart+0x116>
        devp->accsensitivity[i] = LSM303AGR_ACC_SENS_8G;
 800bda8:	9b01      	ldr	r3, [sp, #4]
 800bdaa:	9a05      	ldr	r2, [sp, #20]
 800bdac:	3206      	adds	r2, #6
 800bdae:	4964      	ldr	r1, [pc, #400]	; (800bf40 <lsm303agrStart+0x2a0>)
 800bdb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800bdb4:	e00b      	b.n	800bdce <lsm303agrStart+0x12e>
      else
        devp->accsensitivity[i] = devp->config->accsensitivity[i];
 800bdb6:	9b01      	ldr	r3, [sp, #4]
 800bdb8:	691b      	ldr	r3, [r3, #16]
 800bdba:	689a      	ldr	r2, [r3, #8]
 800bdbc:	9b05      	ldr	r3, [sp, #20]
 800bdbe:	009b      	lsls	r3, r3, #2
 800bdc0:	4413      	add	r3, r2
 800bdc2:	6819      	ldr	r1, [r3, #0]
 800bdc4:	9b01      	ldr	r3, [sp, #4]
 800bdc6:	9a05      	ldr	r2, [sp, #20]
 800bdc8:	3206      	adds	r2, #6
 800bdca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(i = 0; i < LSM303AGR_ACC_NUMBER_OF_AXES; i++) {
 800bdce:	9b05      	ldr	r3, [sp, #20]
 800bdd0:	3301      	adds	r3, #1
 800bdd2:	9305      	str	r3, [sp, #20]
 800bdd4:	9b05      	ldr	r3, [sp, #20]
 800bdd6:	2b02      	cmp	r3, #2
 800bdd8:	d9e1      	bls.n	800bd9e <lsm303agrStart+0xfe>
 800bdda:	e02a      	b.n	800be32 <lsm303agrStart+0x192>
    }
  }
  else if(devp->config->accfullscale == LSM303AGR_ACC_FS_16G) {
 800bddc:	9b01      	ldr	r3, [sp, #4]
 800bdde:	691b      	ldr	r3, [r3, #16]
 800bde0:	7c1b      	ldrb	r3, [r3, #16]
 800bde2:	2b30      	cmp	r3, #48	; 0x30
 800bde4:	d125      	bne.n	800be32 <lsm303agrStart+0x192>
    devp->accfullscale = LSM303AGR_ACC_16G;
 800bde6:	9b01      	ldr	r3, [sp, #4]
 800bde8:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 800bdec:	631a      	str	r2, [r3, #48]	; 0x30
    for(i = 0; i < LSM303AGR_ACC_NUMBER_OF_AXES; i++) {
 800bdee:	2300      	movs	r3, #0
 800bdf0:	9305      	str	r3, [sp, #20]
 800bdf2:	e01b      	b.n	800be2c <lsm303agrStart+0x18c>
      if(devp->config->accsensitivity == NULL)
 800bdf4:	9b01      	ldr	r3, [sp, #4]
 800bdf6:	691b      	ldr	r3, [r3, #16]
 800bdf8:	689b      	ldr	r3, [r3, #8]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d107      	bne.n	800be0e <lsm303agrStart+0x16e>
        devp->accsensitivity[i] = LSM303AGR_ACC_SENS_16G;
 800bdfe:	9b01      	ldr	r3, [sp, #4]
 800be00:	9a05      	ldr	r2, [sp, #20]
 800be02:	3206      	adds	r2, #6
 800be04:	f04f 517d 	mov.w	r1, #1061158912	; 0x3f400000
 800be08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800be0c:	e00b      	b.n	800be26 <lsm303agrStart+0x186>
      else
        devp->accsensitivity[i] = devp->config->accsensitivity[i];
 800be0e:	9b01      	ldr	r3, [sp, #4]
 800be10:	691b      	ldr	r3, [r3, #16]
 800be12:	689a      	ldr	r2, [r3, #8]
 800be14:	9b05      	ldr	r3, [sp, #20]
 800be16:	009b      	lsls	r3, r3, #2
 800be18:	4413      	add	r3, r2
 800be1a:	6819      	ldr	r1, [r3, #0]
 800be1c:	9b01      	ldr	r3, [sp, #4]
 800be1e:	9a05      	ldr	r2, [sp, #20]
 800be20:	3206      	adds	r2, #6
 800be22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(i = 0; i < LSM303AGR_ACC_NUMBER_OF_AXES; i++) {
 800be26:	9b05      	ldr	r3, [sp, #20]
 800be28:	3301      	adds	r3, #1
 800be2a:	9305      	str	r3, [sp, #20]
 800be2c:	9b05      	ldr	r3, [sp, #20]
 800be2e:	2b02      	cmp	r3, #2
 800be30:	d9e0      	bls.n	800bdf4 <lsm303agrStart+0x154>
  }
  else
    osalDbgAssert(FALSE, "lsm303dlhcStart(), accelerometer full scale issue");

  /* Storing bias information */
  if(devp->config->accbias != NULL)
 800be32:	9b01      	ldr	r3, [sp, #4]
 800be34:	691b      	ldr	r3, [r3, #16]
 800be36:	68db      	ldr	r3, [r3, #12]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d016      	beq.n	800be6a <lsm303agrStart+0x1ca>
    for(i = 0; i < LSM303AGR_ACC_NUMBER_OF_AXES; i++)
 800be3c:	2300      	movs	r3, #0
 800be3e:	9305      	str	r3, [sp, #20]
 800be40:	e00f      	b.n	800be62 <lsm303agrStart+0x1c2>
      devp->accbias[i] = devp->config->accbias[i];
 800be42:	9b01      	ldr	r3, [sp, #4]
 800be44:	691b      	ldr	r3, [r3, #16]
 800be46:	68da      	ldr	r2, [r3, #12]
 800be48:	9b05      	ldr	r3, [sp, #20]
 800be4a:	009b      	lsls	r3, r3, #2
 800be4c:	4413      	add	r3, r2
 800be4e:	681a      	ldr	r2, [r3, #0]
 800be50:	9901      	ldr	r1, [sp, #4]
 800be52:	9b05      	ldr	r3, [sp, #20]
 800be54:	3308      	adds	r3, #8
 800be56:	009b      	lsls	r3, r3, #2
 800be58:	440b      	add	r3, r1
 800be5a:	605a      	str	r2, [r3, #4]
    for(i = 0; i < LSM303AGR_ACC_NUMBER_OF_AXES; i++)
 800be5c:	9b05      	ldr	r3, [sp, #20]
 800be5e:	3301      	adds	r3, #1
 800be60:	9305      	str	r3, [sp, #20]
 800be62:	9b05      	ldr	r3, [sp, #20]
 800be64:	2b02      	cmp	r3, #2
 800be66:	d9ec      	bls.n	800be42 <lsm303agrStart+0x1a2>
 800be68:	e010      	b.n	800be8c <lsm303agrStart+0x1ec>
  else
    for(i = 0; i < LSM303AGR_ACC_NUMBER_OF_AXES; i++)
 800be6a:	2300      	movs	r3, #0
 800be6c:	9305      	str	r3, [sp, #20]
 800be6e:	e00a      	b.n	800be86 <lsm303agrStart+0x1e6>
      devp->accbias[i] = LSM303AGR_ACC_BIAS;
 800be70:	9a01      	ldr	r2, [sp, #4]
 800be72:	9b05      	ldr	r3, [sp, #20]
 800be74:	3308      	adds	r3, #8
 800be76:	009b      	lsls	r3, r3, #2
 800be78:	4413      	add	r3, r2
 800be7a:	f04f 0200 	mov.w	r2, #0
 800be7e:	605a      	str	r2, [r3, #4]
    for(i = 0; i < LSM303AGR_ACC_NUMBER_OF_AXES; i++)
 800be80:	9b05      	ldr	r3, [sp, #20]
 800be82:	3301      	adds	r3, #1
 800be84:	9305      	str	r3, [sp, #20]
 800be86:	9b05      	ldr	r3, [sp, #20]
 800be88:	2b02      	cmp	r3, #2
 800be8a:	d9f1      	bls.n	800be70 <lsm303agrStart+0x1d0>

#if LSM303AGR_SHARED_I2C
  i2cAcquireBus((devp)->config->i2cp);
#endif /* LSM303AGR_SHARED_I2C */
  i2cStart((devp)->config->i2cp, (devp)->config->i2ccfg);
 800be8c:	9b01      	ldr	r3, [sp, #4]
 800be8e:	691b      	ldr	r3, [r3, #16]
 800be90:	681a      	ldr	r2, [r3, #0]
 800be92:	9b01      	ldr	r3, [sp, #4]
 800be94:	691b      	ldr	r3, [r3, #16]
 800be96:	685b      	ldr	r3, [r3, #4]
 800be98:	4619      	mov	r1, r3
 800be9a:	4610      	mov	r0, r2
 800be9c:	f7f6 f8f0 	bl	8002080 <i2cStart>

  lsm303agrI2CWriteRegister(devp->config->i2cp, LSM303AGR_SAD_ACC, cr, 4);
 800bea0:	9b01      	ldr	r3, [sp, #4]
 800bea2:	691b      	ldr	r3, [r3, #16]
 800bea4:	6818      	ldr	r0, [r3, #0]
 800bea6:	aa03      	add	r2, sp, #12
 800bea8:	2304      	movs	r3, #4
 800beaa:	2119      	movs	r1, #25
 800beac:	f7ff fb60 	bl	800b570 <lsm303agrI2CWriteRegister>
  i2cReleaseBus((devp)->config->i2cp);
#endif /* LSM303AGR_SHARED_I2C */
  
  /* Configuring Compass subsystem */
  /* Multiple write starting address.*/
  cr[0] = LSM303AGR_AD_CFG_REG_A_M;
 800beb0:	2360      	movs	r3, #96	; 0x60
 800beb2:	f88d 300c 	strb.w	r3, [sp, #12]

  /* Control register A configuration block.*/
  {
    cr[1] = devp->config->compoutputdatarate;
 800beb6:	9b01      	ldr	r3, [sp, #4]
 800beb8:	691b      	ldr	r3, [r3, #16]
 800beba:	7f1b      	ldrb	r3, [r3, #28]
 800bebc:	f88d 300d 	strb.w	r3, [sp, #13]
#endif
  }

  /* Control register B configuration block.*/
  {
    cr[2] = 0;
 800bec0:	2300      	movs	r3, #0
 800bec2:	f88d 300e 	strb.w	r3, [sp, #14]
  }

  /* Control register C configuration block.*/
  {
    cr[3] = 0;
 800bec6:	2300      	movs	r3, #0
 800bec8:	f88d 300f 	strb.w	r3, [sp, #15]
#if LSM303AGR_SHARED_I2C
  i2cAcquireBus((devp)->config->i2cp);
  i2cStart((devp)->config->i2cp, (devp)->config->i2ccfg);
#endif /* LSM303AGR_SHARED_I2C */

  lsm303agrI2CWriteRegister(devp->config->i2cp, LSM303AGR_SAD_COMP,
 800becc:	9b01      	ldr	r3, [sp, #4]
 800bece:	691b      	ldr	r3, [r3, #16]
 800bed0:	6818      	ldr	r0, [r3, #0]
 800bed2:	aa03      	add	r2, sp, #12
 800bed4:	2303      	movs	r3, #3
 800bed6:	211e      	movs	r1, #30
 800bed8:	f7ff fb4a 	bl	800b570 <lsm303agrI2CWriteRegister>

#if LSM303AGR_SHARED_I2C
  i2cReleaseBus((devp)->config->i2cp);
#endif /* LSM303AGR_SHARED_I2C */

  devp->compfullscale = LSM303AGR_COMP_50GA;
 800bedc:	9b01      	ldr	r3, [sp, #4]
 800bede:	4a19      	ldr	r2, [pc, #100]	; (800bf44 <lsm303agrStart+0x2a4>)
 800bee0:	651a      	str	r2, [r3, #80]	; 0x50
  for(i = 0; i < LSM303AGR_COMP_NUMBER_OF_AXES; i++) {
 800bee2:	2300      	movs	r3, #0
 800bee4:	9305      	str	r3, [sp, #20]
 800bee6:	e01a      	b.n	800bf1e <lsm303agrStart+0x27e>
    if(devp->config->compsensitivity == NULL) {
 800bee8:	9b01      	ldr	r3, [sp, #4]
 800beea:	691b      	ldr	r3, [r3, #16]
 800beec:	695b      	ldr	r3, [r3, #20]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d106      	bne.n	800bf00 <lsm303agrStart+0x260>
      devp->compsensitivity[i] = LSM303AGR_COMP_SENS_50GA;
 800bef2:	9b01      	ldr	r3, [sp, #4]
 800bef4:	9a05      	ldr	r2, [sp, #20]
 800bef6:	320e      	adds	r2, #14
 800bef8:	4913      	ldr	r1, [pc, #76]	; (800bf48 <lsm303agrStart+0x2a8>)
 800befa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800befe:	e00b      	b.n	800bf18 <lsm303agrStart+0x278>
    }
    else {
      devp->compsensitivity[i] = devp->config->compsensitivity[i];
 800bf00:	9b01      	ldr	r3, [sp, #4]
 800bf02:	691b      	ldr	r3, [r3, #16]
 800bf04:	695a      	ldr	r2, [r3, #20]
 800bf06:	9b05      	ldr	r3, [sp, #20]
 800bf08:	009b      	lsls	r3, r3, #2
 800bf0a:	4413      	add	r3, r2
 800bf0c:	6819      	ldr	r1, [r3, #0]
 800bf0e:	9b01      	ldr	r3, [sp, #4]
 800bf10:	9a05      	ldr	r2, [sp, #20]
 800bf12:	320e      	adds	r2, #14
 800bf14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < LSM303AGR_COMP_NUMBER_OF_AXES; i++) {
 800bf18:	9b05      	ldr	r3, [sp, #20]
 800bf1a:	3301      	adds	r3, #1
 800bf1c:	9305      	str	r3, [sp, #20]
 800bf1e:	9b05      	ldr	r3, [sp, #20]
 800bf20:	2b02      	cmp	r3, #2
 800bf22:	d9e1      	bls.n	800bee8 <lsm303agrStart+0x248>
    }
  }
    
  /* This is the MEMS transient recovery time */
  osalThreadSleepMilliseconds(5);
 800bf24:	2032      	movs	r0, #50	; 0x32
 800bf26:	f7ff faeb 	bl	800b500 <osalThreadSleep.lto_priv.3>

  devp->state = LSM303AGR_READY;
 800bf2a:	9b01      	ldr	r3, [sp, #4]
 800bf2c:	2202      	movs	r2, #2
 800bf2e:	731a      	strb	r2, [r3, #12]
}
 800bf30:	bf00      	nop
 800bf32:	b007      	add	sp, #28
 800bf34:	f85d fb04 	ldr.w	pc, [sp], #4
 800bf38:	3d75c28f 	.word	0x3d75c28f
 800bf3c:	3df5c28f 	.word	0x3df5c28f
 800bf40:	3e75c28f 	.word	0x3e75c28f
 800bf44:	42480000 	.word	0x42480000
 800bf48:	391d4952 	.word	0x391d4952
 800bf4c:	00000000 	.word	0x00000000

0800bf50 <chRegSetThreadName.lto_priv.1>:
 *
 * @param[in] name      thread name as a zero terminated string
 *
 * @api
 */
static inline void chRegSetThreadName(const char *name) {
 800bf50:	b082      	sub	sp, #8
 800bf52:	9001      	str	r0, [sp, #4]

#if CH_CFG_USE_REGISTRY == TRUE
  __sch_get_currthread()->name = name;
 800bf54:	4b03      	ldr	r3, [pc, #12]	; (800bf64 <chRegSetThreadName.lto_priv.1+0x14>)
 800bf56:	68db      	ldr	r3, [r3, #12]
 800bf58:	9a01      	ldr	r2, [sp, #4]
 800bf5a:	61da      	str	r2, [r3, #28]
#else
  (void)name;
#endif
}
 800bf5c:	bf00      	nop
 800bf5e:	b002      	add	sp, #8
 800bf60:	4770      	bx	lr
 800bf62:	bf00      	nop
 800bf64:	20000e50 	.word	0x20000e50
	...

0800bf70 <chFifoTakeObjectTimeout.lto_priv.0>:
 *                      timeout.
 *
 * @api
 */
static inline void *chFifoTakeObjectTimeout(objects_fifo_t *ofp,
                                            sysinterval_t timeout) {
 800bf70:	b500      	push	{lr}
 800bf72:	b083      	sub	sp, #12
 800bf74:	9001      	str	r0, [sp, #4]
 800bf76:	9100      	str	r1, [sp, #0]

  return chGuardedPoolAllocTimeout(&ofp->free, timeout);
 800bf78:	9b01      	ldr	r3, [sp, #4]
 800bf7a:	9900      	ldr	r1, [sp, #0]
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f7fb ffbf 	bl	8007f00 <chGuardedPoolAllocTimeout>
 800bf82:	4603      	mov	r3, r0
}
 800bf84:	4618      	mov	r0, r3
 800bf86:	b003      	add	sp, #12
 800bf88:	f85d fb04 	ldr.w	pc, [sp], #4
 800bf8c:	0000      	movs	r0, r0
	...

0800bf90 <chFifoSendObject.lto_priv.0>:
 * @param[in] ofp       pointer to a @p objects_fifo_t structure
 * @param[in] objp      pointer to the object to be released
 *
 * @api
 */
static inline void chFifoSendObject(objects_fifo_t *ofp, void *objp) {
 800bf90:	b500      	push	{lr}
 800bf92:	b085      	sub	sp, #20
 800bf94:	9001      	str	r0, [sp, #4]
 800bf96:	9100      	str	r1, [sp, #0]

  msg_t msg;

  msg = chMBPostTimeout(&ofp->mbx, (msg_t)objp, TIME_IMMEDIATE);
 800bf98:	9b01      	ldr	r3, [sp, #4]
 800bf9a:	331c      	adds	r3, #28
 800bf9c:	9900      	ldr	r1, [sp, #0]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	f7fb fd75 	bl	8007a90 <chMBPostTimeout>
 800bfa6:	9003      	str	r0, [sp, #12]
  chDbgAssert(msg == MSG_OK, "post failed");
}
 800bfa8:	bf00      	nop
 800bfaa:	b005      	add	sp, #20
 800bfac:	f85d fb04 	ldr.w	pc, [sp], #4

0800bfb0 <minmea_tofloat>:
/**
 * Convert a fixed-point value to a floating-point value.
 * Returns NaN for "unknown" values.
 */
static inline float minmea_tofloat(struct minmea_float *f)
{
 800bfb0:	b510      	push	{r4, lr}
 800bfb2:	b082      	sub	sp, #8
 800bfb4:	9001      	str	r0, [sp, #4]
    if (f->scale == 0)
 800bfb6:	9b01      	ldr	r3, [sp, #4]
 800bfb8:	685b      	ldr	r3, [r3, #4]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d101      	bne.n	800bfc2 <minmea_tofloat+0x12>
        return NAN;
 800bfbe:	4b0b      	ldr	r3, [pc, #44]	; (800bfec <minmea_tofloat+0x3c>)
 800bfc0:	e010      	b.n	800bfe4 <minmea_tofloat+0x34>
    return (float) f->value / (float) f->scale;
 800bfc2:	9b01      	ldr	r3, [sp, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f7f4 fe28 	bl	8000c1c <__aeabi_i2f>
 800bfcc:	4604      	mov	r4, r0
 800bfce:	9b01      	ldr	r3, [sp, #4]
 800bfd0:	685b      	ldr	r3, [r3, #4]
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	f7f4 fe22 	bl	8000c1c <__aeabi_i2f>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	4619      	mov	r1, r3
 800bfdc:	4620      	mov	r0, r4
 800bfde:	f7f4 ff25 	bl	8000e2c <__aeabi_fdiv>
 800bfe2:	4603      	mov	r3, r0
}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	b002      	add	sp, #8
 800bfe8:	bd10      	pop	{r4, pc}
 800bfea:	bf00      	nop
 800bfec:	7fc00000 	.word	0x7fc00000

0800bff0 <minmea_tocoord>:
/**
 * Convert a raw coordinate to a floating point DD.DDD... value.
 * Returns NaN for "unknown" values.
 */
static inline float minmea_tocoord(struct minmea_float *f)
{
 800bff0:	b530      	push	{r4, r5, lr}
 800bff2:	b085      	sub	sp, #20
 800bff4:	9001      	str	r0, [sp, #4]
    if (f->scale == 0)
 800bff6:	9b01      	ldr	r3, [sp, #4]
 800bff8:	685b      	ldr	r3, [r3, #4]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d101      	bne.n	800c002 <minmea_tocoord+0x12>
        return NAN;
 800bffe:	4b1c      	ldr	r3, [pc, #112]	; (800c070 <minmea_tocoord+0x80>)
 800c000:	e032      	b.n	800c068 <minmea_tocoord+0x78>
    int_least32_t degrees = f->value / (f->scale * 100);
 800c002:	9b01      	ldr	r3, [sp, #4]
 800c004:	681a      	ldr	r2, [r3, #0]
 800c006:	9b01      	ldr	r3, [sp, #4]
 800c008:	685b      	ldr	r3, [r3, #4]
 800c00a:	2164      	movs	r1, #100	; 0x64
 800c00c:	fb01 f303 	mul.w	r3, r1, r3
 800c010:	fb92 f3f3 	sdiv	r3, r2, r3
 800c014:	9303      	str	r3, [sp, #12]
    int_least32_t minutes = f->value % (f->scale * 100);
 800c016:	9b01      	ldr	r3, [sp, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	9a01      	ldr	r2, [sp, #4]
 800c01c:	6852      	ldr	r2, [r2, #4]
 800c01e:	2164      	movs	r1, #100	; 0x64
 800c020:	fb01 f202 	mul.w	r2, r1, r2
 800c024:	fb93 f1f2 	sdiv	r1, r3, r2
 800c028:	fb01 f202 	mul.w	r2, r1, r2
 800c02c:	1a9b      	subs	r3, r3, r2
 800c02e:	9302      	str	r3, [sp, #8]
    return (float) degrees + (float) minutes / (60 * f->scale);
 800c030:	9803      	ldr	r0, [sp, #12]
 800c032:	f7f4 fdf3 	bl	8000c1c <__aeabi_i2f>
 800c036:	4604      	mov	r4, r0
 800c038:	9802      	ldr	r0, [sp, #8]
 800c03a:	f7f4 fdef 	bl	8000c1c <__aeabi_i2f>
 800c03e:	4605      	mov	r5, r0
 800c040:	9b01      	ldr	r3, [sp, #4]
 800c042:	685a      	ldr	r2, [r3, #4]
 800c044:	4613      	mov	r3, r2
 800c046:	011b      	lsls	r3, r3, #4
 800c048:	1a9b      	subs	r3, r3, r2
 800c04a:	009b      	lsls	r3, r3, #2
 800c04c:	4618      	mov	r0, r3
 800c04e:	f7f4 fde5 	bl	8000c1c <__aeabi_i2f>
 800c052:	4603      	mov	r3, r0
 800c054:	4619      	mov	r1, r3
 800c056:	4628      	mov	r0, r5
 800c058:	f7f4 fee8 	bl	8000e2c <__aeabi_fdiv>
 800c05c:	4603      	mov	r3, r0
 800c05e:	4619      	mov	r1, r3
 800c060:	4620      	mov	r0, r4
 800c062:	f7f4 fd27 	bl	8000ab4 <__addsf3>
 800c066:	4603      	mov	r3, r0
}
 800c068:	4618      	mov	r0, r3
 800c06a:	b005      	add	sp, #20
 800c06c:	bd30      	pop	{r4, r5, pc}
 800c06e:	bf00      	nop
 800c070:	7fc00000 	.word	0x7fc00000
	...

0800c080 <rxchar>:
  int type;
  float data[3];

}fifo_data;

void rxchar(UARTDriver *uartp, uint16_t c) {
 800c080:	b500      	push	{lr}
 800c082:	b085      	sub	sp, #20
 800c084:	9001      	str	r0, [sp, #4]
 800c086:	460b      	mov	r3, r1
 800c088:	f8ad 3002 	strh.w	r3, [sp, #2]

  (void)uartp;
  char ch = (char)c;
 800c08c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800c090:	f88d 300f 	strb.w	r3, [sp, #15]
  static int k = 0;

  if (trp == NULL) {
 800c094:	4b1c      	ldr	r3, [pc, #112]	; (800c108 <rxchar+0x88>)
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d103      	bne.n	800c0a4 <rxchar+0x24>
    k = 0;
 800c09c:	4b1b      	ldr	r3, [pc, #108]	; (800c10c <rxchar+0x8c>)
 800c09e:	2200      	movs	r2, #0
 800c0a0:	601a      	str	r2, [r3, #0]
    return;
 800c0a2:	e02d      	b.n	800c100 <rxchar+0x80>
  }

  if (k == 0) {
 800c0a4:	4b19      	ldr	r3, [pc, #100]	; (800c10c <rxchar+0x8c>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d10d      	bne.n	800c0c8 <rxchar+0x48>
    if (ch == '$') {
 800c0ac:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800c0b0:	2b24      	cmp	r3, #36	; 0x24
 800c0b2:	d125      	bne.n	800c100 <rxchar+0x80>
      line[k++] = ch;
 800c0b4:	4b15      	ldr	r3, [pc, #84]	; (800c10c <rxchar+0x8c>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	1c5a      	adds	r2, r3, #1
 800c0ba:	4914      	ldr	r1, [pc, #80]	; (800c10c <rxchar+0x8c>)
 800c0bc:	600a      	str	r2, [r1, #0]
 800c0be:	4914      	ldr	r1, [pc, #80]	; (800c110 <rxchar+0x90>)
 800c0c0:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800c0c4:	54ca      	strb	r2, [r1, r3]
 800c0c6:	e01b      	b.n	800c100 <rxchar+0x80>
    }
  } else {
    line[k++] = ch;
 800c0c8:	4b10      	ldr	r3, [pc, #64]	; (800c10c <rxchar+0x8c>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	1c5a      	adds	r2, r3, #1
 800c0ce:	490f      	ldr	r1, [pc, #60]	; (800c10c <rxchar+0x8c>)
 800c0d0:	600a      	str	r2, [r1, #0]
 800c0d2:	490f      	ldr	r1, [pc, #60]	; (800c110 <rxchar+0x90>)
 800c0d4:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800c0d8:	54ca      	strb	r2, [r1, r3]

    if (ch == '\n') {
 800c0da:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800c0de:	2b0a      	cmp	r3, #10
 800c0e0:	d10e      	bne.n	800c100 <rxchar+0x80>
      line[k++] = '\0';
 800c0e2:	4b0a      	ldr	r3, [pc, #40]	; (800c10c <rxchar+0x8c>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	1c5a      	adds	r2, r3, #1
 800c0e8:	4908      	ldr	r1, [pc, #32]	; (800c10c <rxchar+0x8c>)
 800c0ea:	600a      	str	r2, [r1, #0]
 800c0ec:	4a08      	ldr	r2, [pc, #32]	; (800c110 <rxchar+0x90>)
 800c0ee:	2100      	movs	r1, #0
 800c0f0:	54d1      	strb	r1, [r2, r3]
      k = 0;
 800c0f2:	4b06      	ldr	r3, [pc, #24]	; (800c10c <rxchar+0x8c>)
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	601a      	str	r2, [r3, #0]

      chThdResumeI(&trp, 0);
 800c0f8:	2100      	movs	r1, #0
 800c0fa:	4803      	ldr	r0, [pc, #12]	; (800c108 <rxchar+0x88>)
 800c0fc:	f7fb fa38 	bl	8007570 <chThdResumeI>
    }
  }
}
 800c100:	b005      	add	sp, #20
 800c102:	f85d fb04 	ldr.w	pc, [sp], #4
 800c106:	bf00      	nop
 800c108:	200010c4 	.word	0x200010c4
 800c10c:	200010c8 	.word	0x200010c8
 800c110:	20001074 	.word	0x20001074
	...

0800c120 <thdGps>:

UARTConfig uart1_cfg = {NULL, NULL, NULL, rxchar, NULL, NULL, 9600, 0, USART_CR2_STOP1_BITS, 0};

BaseSequentialStream *chp2 = (BaseSequentialStream*) &SD2;
THD_FUNCTION(thdGps, arg) {
 800c120:	b500      	push	{lr}
 800c122:	b099      	sub	sp, #100	; 0x64
 800c124:	9001      	str	r0, [sp, #4]

  objects_fifo_t* ofp=(objects_fifo_t*) arg;
 800c126:	9b01      	ldr	r3, [sp, #4]
 800c128:	9316      	str	r3, [sp, #88]	; 0x58

  chRegSetThreadName("GPS Thread");
 800c12a:	484f      	ldr	r0, [pc, #316]	; (800c268 <thdGps+0x148>)
 800c12c:	f7ff ff10 	bl	800bf50 <chRegSetThreadName.lto_priv.1>
  palSetPadMode(GPIOA, 10, PAL_MODE_ALTERNATE(7));
 800c130:	f240 3282 	movw	r2, #898	; 0x382
 800c134:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c138:	484c      	ldr	r0, [pc, #304]	; (800c26c <thdGps+0x14c>)
 800c13a:	f7f7 ff59 	bl	8003ff0 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOA, 8, PAL_MODE_OUTPUT_PUSHPULL);
 800c13e:	2201      	movs	r2, #1
 800c140:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c144:	4849      	ldr	r0, [pc, #292]	; (800c26c <thdGps+0x14c>)
 800c146:	f7f7 ff53 	bl	8003ff0 <_pal_lld_setgroupmode>

  sdStart(&SD2, NULL);
 800c14a:	2100      	movs	r1, #0
 800c14c:	4848      	ldr	r0, [pc, #288]	; (800c270 <thdGps+0x150>)
 800c14e:	f7f6 fe7f 	bl	8002e50 <sdStart>

  // RESET SEQUENCE
  palClearPad(GPIOA, 8);
 800c152:	4b46      	ldr	r3, [pc, #280]	; (800c26c <thdGps+0x14c>)
 800c154:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c158:	835a      	strh	r2, [r3, #26]
  chThdSleepMilliseconds(100);
 800c15a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c15e:	f7fb f9b7 	bl	80074d0 <chThdSleep>
  palSetPad(GPIOA, 8);
 800c162:	4b42      	ldr	r3, [pc, #264]	; (800c26c <thdGps+0x14c>)
 800c164:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c168:	831a      	strh	r2, [r3, #24]
  chThdSleepMilliseconds(1000);
 800c16a:	f242 7010 	movw	r0, #10000	; 0x2710
 800c16e:	f7fb f9af 	bl	80074d0 <chThdSleep>
  palClearPad(GPIOA, 8);
 800c172:	4b3e      	ldr	r3, [pc, #248]	; (800c26c <thdGps+0x14c>)
 800c174:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c178:	835a      	strh	r2, [r3, #26]
  chThdSleepMilliseconds(2000);
 800c17a:	f644 6020 	movw	r0, #20000	; 0x4e20
 800c17e:	f7fb f9a7 	bl	80074d0 <chThdSleep>
  palSetPad(GPIOA, 8);
 800c182:	4b3a      	ldr	r3, [pc, #232]	; (800c26c <thdGps+0x14c>)
 800c184:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c188:	831a      	strh	r2, [r3, #24]

  while (TRUE) {
    fifo_data*objp=NULL;
 800c18a:	2300      	movs	r3, #0
 800c18c:	9315      	str	r3, [sp, #84]	; 0x54

    trp = (thread_reference_t) NULL;
 800c18e:	4b39      	ldr	r3, [pc, #228]	; (800c274 <thdGps+0x154>)
 800c190:	2200      	movs	r2, #0
 800c192:	601a      	str	r2, [r3, #0]
    uartStart(&UARTD1, &uart1_cfg);
 800c194:	4938      	ldr	r1, [pc, #224]	; (800c278 <thdGps+0x158>)
 800c196:	4839      	ldr	r0, [pc, #228]	; (800c27c <thdGps+0x15c>)
 800c198:	f7f7 f88a 	bl	80032b0 <uartStart>
    chThdSuspendS(&trp);
 800c19c:	4835      	ldr	r0, [pc, #212]	; (800c274 <thdGps+0x154>)
 800c19e:	f7fb f9a7 	bl	80074f0 <chThdSuspendS>

   trp = (thread_reference_t) NULL;
 800c1a2:	4b34      	ldr	r3, [pc, #208]	; (800c274 <thdGps+0x154>)
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	601a      	str	r2, [r3, #0]
    uartStop(&UARTD1);
 800c1a8:	4834      	ldr	r0, [pc, #208]	; (800c27c <thdGps+0x15c>)
 800c1aa:	f7f7 f8a1 	bl	80032f0 <uartStop>
    int i;

    switch (minmea_sentence_id(line, true)) {
 800c1ae:	2101      	movs	r1, #1
 800c1b0:	4833      	ldr	r0, [pc, #204]	; (800c280 <thdGps+0x160>)
 800c1b2:	f7fc fff5 	bl	80091a0 <minmea_sentence_id>
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	2b01      	cmp	r3, #1
 800c1ba:	d14b      	bne.n	800c254 <thdGps+0x134>
      case MINMEA_SENTENCE_RMC: {
        objp = (fifo_data*)chFifoTakeObjectTimeout(ofp, TIME_I2MS(100));
 800c1bc:	210a      	movs	r1, #10
 800c1be:	9816      	ldr	r0, [sp, #88]	; 0x58
 800c1c0:	f7ff fed6 	bl	800bf70 <chFifoTakeObjectTimeout.lto_priv.0>
 800c1c4:	9015      	str	r0, [sp, #84]	; 0x54
            objp->type = 1;
 800c1c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c1c8:	2201      	movs	r2, #1
 800c1ca:	601a      	str	r2, [r3, #0]
            for(i=0;i<3;i++){
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	9317      	str	r3, [sp, #92]	; 0x5c
 800c1d0:	e009      	b.n	800c1e6 <thdGps+0xc6>
              objp->data[i]=0;
 800c1d2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c1d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c1d6:	009b      	lsls	r3, r3, #2
 800c1d8:	4413      	add	r3, r2
 800c1da:	f04f 0200 	mov.w	r2, #0
 800c1de:	605a      	str	r2, [r3, #4]
            for(i=0;i<3;i++){
 800c1e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c1e2:	3301      	adds	r3, #1
 800c1e4:	9317      	str	r3, [sp, #92]	; 0x5c
 800c1e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c1e8:	2b02      	cmp	r3, #2
 800c1ea:	ddf2      	ble.n	800c1d2 <thdGps+0xb2>
            }
        struct minmea_sentence_rmc frame;
        if (minmea_parse_rmc(&frame, line)) {
 800c1ec:	ab03      	add	r3, sp, #12
 800c1ee:	4924      	ldr	r1, [pc, #144]	; (800c280 <thdGps+0x160>)
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	f7fd f86d 	bl	80092d0 <minmea_parse_rmc>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d02a      	beq.n	800c252 <thdGps+0x132>
          objp->data[0] = minmea_tocoord(&frame.latitude);
 800c1fc:	ab03      	add	r3, sp, #12
 800c1fe:	3314      	adds	r3, #20
 800c200:	4618      	mov	r0, r3
 800c202:	f7ff fef5 	bl	800bff0 <minmea_tocoord>
 800c206:	4602      	mov	r2, r0
 800c208:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c20a:	605a      	str	r2, [r3, #4]
              objp->data[1] = minmea_tocoord(&frame.longitude);
 800c20c:	ab03      	add	r3, sp, #12
 800c20e:	331c      	adds	r3, #28
 800c210:	4618      	mov	r0, r3
 800c212:	f7ff feed 	bl	800bff0 <minmea_tocoord>
 800c216:	4602      	mov	r2, r0
 800c218:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c21a:	609a      	str	r2, [r3, #8]
              objp->data[2] = minmea_tofloat(&frame.speed)*1.852;
 800c21c:	ab03      	add	r3, sp, #12
 800c21e:	3324      	adds	r3, #36	; 0x24
 800c220:	4618      	mov	r0, r3
 800c222:	f7ff fec5 	bl	800bfb0 <minmea_tofloat>
 800c226:	4603      	mov	r3, r0
 800c228:	4618      	mov	r0, r3
 800c22a:	f7f4 f9d3 	bl	80005d4 <__aeabi_f2d>
 800c22e:	a30c      	add	r3, pc, #48	; (adr r3, 800c260 <thdGps+0x140>)
 800c230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c234:	f7f4 fa26 	bl	8000684 <__aeabi_dmul>
 800c238:	4602      	mov	r2, r0
 800c23a:	460b      	mov	r3, r1
 800c23c:	4610      	mov	r0, r2
 800c23e:	4619      	mov	r1, r3
 800c240:	f7f4 ff6a 	bl	8001118 <__aeabi_d2f>
 800c244:	4602      	mov	r2, r0
 800c246:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c248:	60da      	str	r2, [r3, #12]
              chFifoSendObject(ofp, objp);
 800c24a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800c24c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800c24e:	f7ff fe9f 	bl	800bf90 <chFifoSendObject.lto_priv.0>
        }

      }
        break;
 800c252:	bf00      	nop


      default: {
      }
    }
    chThdSleepMilliseconds(150);
 800c254:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800c258:	f7fb f93a 	bl	80074d0 <chThdSleep>
  while (TRUE) {
 800c25c:	e795      	b.n	800c18a <thdGps+0x6a>
 800c25e:	bf00      	nop
 800c260:	c083126f 	.word	0xc083126f
 800c264:	3ffda1ca 	.word	0x3ffda1ca
 800c268:	0800f06c 	.word	0x0800f06c
 800c26c:	40020000 	.word	0x40020000
 800c270:	20000d9c 	.word	0x20000d9c
 800c274:	200010c4 	.word	0x200010c4
 800c278:	20000800 	.word	0x20000800
 800c27c:	20000e1c 	.word	0x20000e1c
 800c280:	20001074 	.word	0x20001074
	...

0800c290 <chSysLock.lto_priv.25>:
static inline void chSysLock(void) {
 800c290:	b082      	sub	sp, #8
 800c292:	2330      	movs	r3, #48	; 0x30
 800c294:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800c296:	9b01      	ldr	r3, [sp, #4]
 800c298:	f383 8811 	msr	BASEPRI, r3
}
 800c29c:	bf00      	nop
}
 800c29e:	bf00      	nop
}
 800c2a0:	bf00      	nop
 800c2a2:	b002      	add	sp, #8
 800c2a4:	4770      	bx	lr
 800c2a6:	bf00      	nop
	...

0800c2b0 <chSysUnlock.lto_priv.24>:
static inline void chSysUnlock(void) {
 800c2b0:	b082      	sub	sp, #8
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800c2b6:	9b01      	ldr	r3, [sp, #4]
 800c2b8:	f383 8811 	msr	BASEPRI, r3
}
 800c2bc:	bf00      	nop
}
 800c2be:	bf00      	nop
}
 800c2c0:	bf00      	nop
 800c2c2:	b002      	add	sp, #8
 800c2c4:	4770      	bx	lr
 800c2c6:	bf00      	nop
	...

0800c2d0 <chVTGetTimeStamp>:
static inline systimestamp_t chVTGetTimeStamp(void) {
 800c2d0:	b500      	push	{lr}
 800c2d2:	b083      	sub	sp, #12
  chSysLock();
 800c2d4:	f7ff ffdc 	bl	800c290 <chSysLock.lto_priv.25>
  stamp = chVTGetTimeStampI();
 800c2d8:	f7fa fb9a 	bl	8006a10 <chVTGetTimeStampI>
 800c2dc:	e9cd 0100 	strd	r0, r1, [sp]
  chSysUnlock();
 800c2e0:	f7ff ffe6 	bl	800c2b0 <chSysUnlock.lto_priv.24>
  return stamp;
 800c2e4:	e9dd 2300 	ldrd	r2, r3, [sp]
}
 800c2e8:	4610      	mov	r0, r2
 800c2ea:	4619      	mov	r1, r3
 800c2ec:	b003      	add	sp, #12
 800c2ee:	f85d fb04 	ldr.w	pc, [sp], #4
 800c2f2:	bf00      	nop
	...

0800c300 <chRegSetThreadName.lto_priv.2>:
static inline void chRegSetThreadName(const char *name) {
 800c300:	b082      	sub	sp, #8
 800c302:	9001      	str	r0, [sp, #4]
  __sch_get_currthread()->name = name;
 800c304:	4b03      	ldr	r3, [pc, #12]	; (800c314 <chRegSetThreadName.lto_priv.2+0x14>)
 800c306:	68db      	ldr	r3, [r3, #12]
 800c308:	9a01      	ldr	r2, [sp, #4]
 800c30a:	61da      	str	r2, [r3, #28]
}
 800c30c:	bf00      	nop
 800c30e:	b002      	add	sp, #8
 800c310:	4770      	bx	lr
 800c312:	bf00      	nop
 800c314:	20000e50 	.word	0x20000e50
	...

0800c320 <chFifoTakeObjectTimeout.lto_priv.1>:
                                            sysinterval_t timeout) {
 800c320:	b500      	push	{lr}
 800c322:	b083      	sub	sp, #12
 800c324:	9001      	str	r0, [sp, #4]
 800c326:	9100      	str	r1, [sp, #0]
  return chGuardedPoolAllocTimeout(&ofp->free, timeout);
 800c328:	9b01      	ldr	r3, [sp, #4]
 800c32a:	9900      	ldr	r1, [sp, #0]
 800c32c:	4618      	mov	r0, r3
 800c32e:	f7fb fde7 	bl	8007f00 <chGuardedPoolAllocTimeout>
 800c332:	4603      	mov	r3, r0
}
 800c334:	4618      	mov	r0, r3
 800c336:	b003      	add	sp, #12
 800c338:	f85d fb04 	ldr.w	pc, [sp], #4
 800c33c:	0000      	movs	r0, r0
	...

0800c340 <chFifoSendObject.lto_priv.1>:
static inline void chFifoSendObject(objects_fifo_t *ofp, void *objp) {
 800c340:	b500      	push	{lr}
 800c342:	b085      	sub	sp, #20
 800c344:	9001      	str	r0, [sp, #4]
 800c346:	9100      	str	r1, [sp, #0]
  msg = chMBPostTimeout(&ofp->mbx, (msg_t)objp, TIME_IMMEDIATE);
 800c348:	9b01      	ldr	r3, [sp, #4]
 800c34a:	331c      	adds	r3, #28
 800c34c:	9900      	ldr	r1, [sp, #0]
 800c34e:	2200      	movs	r2, #0
 800c350:	4618      	mov	r0, r3
 800c352:	f7fb fb9d 	bl	8007a90 <chMBPostTimeout>
 800c356:	9003      	str	r0, [sp, #12]
}
 800c358:	bf00      	nop
 800c35a:	b005      	add	sp, #20
 800c35c:	f85d fb04 	ldr.w	pc, [sp], #4

0800c360 <FusionRadiansToDegrees.lto_priv.2>:
static inline float FusionRadiansToDegrees(const float radians) {
 800c360:	b500      	push	{lr}
 800c362:	b083      	sub	sp, #12
 800c364:	9001      	str	r0, [sp, #4]
    return radians * (180.0f / (float) M_PI);
 800c366:	4904      	ldr	r1, [pc, #16]	; (800c378 <FusionRadiansToDegrees.lto_priv.2+0x18>)
 800c368:	9801      	ldr	r0, [sp, #4]
 800c36a:	f7f4 fcab 	bl	8000cc4 <__aeabi_fmul>
 800c36e:	4603      	mov	r3, r0
}
 800c370:	4618      	mov	r0, r3
 800c372:	b003      	add	sp, #12
 800c374:	f85d fb04 	ldr.w	pc, [sp], #4
 800c378:	42652ee0 	.word	0x42652ee0
 800c37c:	00000000 	.word	0x00000000

0800c380 <FusionAsin.lto_priv.1>:
static inline float FusionAsin(const float value) {
 800c380:	b500      	push	{lr}
 800c382:	b083      	sub	sp, #12
 800c384:	9001      	str	r0, [sp, #4]
    if (value <= -1.0f) {
 800c386:	490d      	ldr	r1, [pc, #52]	; (800c3bc <FusionAsin.lto_priv.1+0x3c>)
 800c388:	9801      	ldr	r0, [sp, #4]
 800c38a:	f7f4 fe43 	bl	8001014 <__aeabi_fcmple>
 800c38e:	4603      	mov	r3, r0
 800c390:	2b00      	cmp	r3, #0
 800c392:	d001      	beq.n	800c398 <FusionAsin.lto_priv.1+0x18>
        return (float) M_PI / -2.0f;
 800c394:	4b0a      	ldr	r3, [pc, #40]	; (800c3c0 <FusionAsin.lto_priv.1+0x40>)
 800c396:	e00d      	b.n	800c3b4 <FusionAsin.lto_priv.1+0x34>
    if (value >= 1.0f) {
 800c398:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c39c:	9801      	ldr	r0, [sp, #4]
 800c39e:	f7f4 fe43 	bl	8001028 <__aeabi_fcmpge>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d001      	beq.n	800c3ac <FusionAsin.lto_priv.1+0x2c>
        return (float) M_PI / 2.0f;
 800c3a8:	4b06      	ldr	r3, [pc, #24]	; (800c3c4 <FusionAsin.lto_priv.1+0x44>)
 800c3aa:	e003      	b.n	800c3b4 <FusionAsin.lto_priv.1+0x34>
    return asinf(value);
 800c3ac:	9801      	ldr	r0, [sp, #4]
 800c3ae:	f000 fc37 	bl	800cc20 <asinf>
 800c3b2:	4603      	mov	r3, r0
}
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	b003      	add	sp, #12
 800c3b8:	f85d fb04 	ldr.w	pc, [sp], #4
 800c3bc:	bf800000 	.word	0xbf800000
 800c3c0:	bfc90fdb 	.word	0xbfc90fdb
 800c3c4:	3fc90fdb 	.word	0x3fc90fdb
	...

0800c3d0 <FusionQuaternionToEuler>:
/**
 * @brief Converts a quaternion to ZYX Euler angles in degrees.
 * @param quaternion Quaternion.
 * @return Euler angles in degrees.
 */
static inline FusionEuler FusionQuaternionToEuler(const FusionQuaternion quaternion) {
 800c3d0:	b084      	sub	sp, #16
 800c3d2:	b510      	push	{r4, lr}
 800c3d4:	b086      	sub	sp, #24
 800c3d6:	9001      	str	r0, [sp, #4]
 800c3d8:	a809      	add	r0, sp, #36	; 0x24
 800c3da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
#define Q quaternion.element
    const float halfMinusQySquared = 0.5f - Q.y * Q.y; // calculate common terms to avoid repeated operations
 800c3de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c3e2:	4611      	mov	r1, r2
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f7f4 fc6d 	bl	8000cc4 <__aeabi_fmul>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	4619      	mov	r1, r3
 800c3ee:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800c3f2:	f7f4 fb5d 	bl	8000ab0 <__aeabi_fsub>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	9305      	str	r3, [sp, #20]
    FusionEuler euler;
    euler.angle.roll = FusionRadiansToDegrees(atan2f(Q.w * Q.x + Q.y * Q.z, halfMinusQySquared - Q.x * Q.x));
 800c3fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c3fe:	4611      	mov	r1, r2
 800c400:	4618      	mov	r0, r3
 800c402:	f7f4 fc5f 	bl	8000cc4 <__aeabi_fmul>
 800c406:	4603      	mov	r3, r0
 800c408:	461c      	mov	r4, r3
 800c40a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c40c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c40e:	4611      	mov	r1, r2
 800c410:	4618      	mov	r0, r3
 800c412:	f7f4 fc57 	bl	8000cc4 <__aeabi_fmul>
 800c416:	4603      	mov	r3, r0
 800c418:	4619      	mov	r1, r3
 800c41a:	4620      	mov	r0, r4
 800c41c:	f7f4 fb4a 	bl	8000ab4 <__addsf3>
 800c420:	4603      	mov	r3, r0
 800c422:	461c      	mov	r4, r3
 800c424:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c426:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c428:	4611      	mov	r1, r2
 800c42a:	4618      	mov	r0, r3
 800c42c:	f7f4 fc4a 	bl	8000cc4 <__aeabi_fmul>
 800c430:	4603      	mov	r3, r0
 800c432:	4619      	mov	r1, r3
 800c434:	9805      	ldr	r0, [sp, #20]
 800c436:	f7f4 fb3b 	bl	8000ab0 <__aeabi_fsub>
 800c43a:	4603      	mov	r3, r0
 800c43c:	4619      	mov	r1, r3
 800c43e:	4620      	mov	r0, r4
 800c440:	f000 fc0e 	bl	800cc60 <atan2f>
 800c444:	4603      	mov	r3, r0
 800c446:	4618      	mov	r0, r3
 800c448:	f7ff ff8a 	bl	800c360 <FusionRadiansToDegrees.lto_priv.2>
 800c44c:	4603      	mov	r3, r0
 800c44e:	9302      	str	r3, [sp, #8]
    euler.angle.pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x)));
 800c450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c452:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c454:	4611      	mov	r1, r2
 800c456:	4618      	mov	r0, r3
 800c458:	f7f4 fc34 	bl	8000cc4 <__aeabi_fmul>
 800c45c:	4603      	mov	r3, r0
 800c45e:	461c      	mov	r4, r3
 800c460:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c462:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c464:	4611      	mov	r1, r2
 800c466:	4618      	mov	r0, r3
 800c468:	f7f4 fc2c 	bl	8000cc4 <__aeabi_fmul>
 800c46c:	4603      	mov	r3, r0
 800c46e:	4619      	mov	r1, r3
 800c470:	4620      	mov	r0, r4
 800c472:	f7f4 fb1d 	bl	8000ab0 <__aeabi_fsub>
 800c476:	4603      	mov	r3, r0
 800c478:	4619      	mov	r1, r3
 800c47a:	4618      	mov	r0, r3
 800c47c:	f7f4 fb1a 	bl	8000ab4 <__addsf3>
 800c480:	4603      	mov	r3, r0
 800c482:	4618      	mov	r0, r3
 800c484:	f7ff ff7c 	bl	800c380 <FusionAsin.lto_priv.1>
 800c488:	4603      	mov	r3, r0
 800c48a:	4618      	mov	r0, r3
 800c48c:	f7ff ff68 	bl	800c360 <FusionRadiansToDegrees.lto_priv.2>
 800c490:	4603      	mov	r3, r0
 800c492:	9303      	str	r3, [sp, #12]
    euler.angle.yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z * Q.z));
 800c494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c496:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c498:	4611      	mov	r1, r2
 800c49a:	4618      	mov	r0, r3
 800c49c:	f7f4 fc12 	bl	8000cc4 <__aeabi_fmul>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	461c      	mov	r4, r3
 800c4a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c4a8:	4611      	mov	r1, r2
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f7f4 fc0a 	bl	8000cc4 <__aeabi_fmul>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	4619      	mov	r1, r3
 800c4b4:	4620      	mov	r0, r4
 800c4b6:	f7f4 fafd 	bl	8000ab4 <__addsf3>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	461c      	mov	r4, r3
 800c4be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c4c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c4c2:	4611      	mov	r1, r2
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f7f4 fbfd 	bl	8000cc4 <__aeabi_fmul>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	4619      	mov	r1, r3
 800c4ce:	9805      	ldr	r0, [sp, #20]
 800c4d0:	f7f4 faee 	bl	8000ab0 <__aeabi_fsub>
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	4619      	mov	r1, r3
 800c4d8:	4620      	mov	r0, r4
 800c4da:	f000 fbc1 	bl	800cc60 <atan2f>
 800c4de:	4603      	mov	r3, r0
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f7ff ff3d 	bl	800c360 <FusionRadiansToDegrees.lto_priv.2>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	9304      	str	r3, [sp, #16]
    return euler;
 800c4ea:	9b01      	ldr	r3, [sp, #4]
 800c4ec:	461c      	mov	r4, r3
 800c4ee:	ab02      	add	r3, sp, #8
 800c4f0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c4f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#undef Q
}
 800c4f8:	9801      	ldr	r0, [sp, #4]
 800c4fa:	b006      	add	sp, #24
 800c4fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c500:	b004      	add	sp, #16
 800c502:	4770      	bx	lr
	...

0800c510 <thdMems>:
                                               NULL,NULL,LSM303AGR_COMP_ODR_50HZ,};
  /* Questo dato va modificato in base alla frequesnza di campionamento scelta per i vari moduli*/


/*dichiarazione thread MEMS*/
 THD_FUNCTION(thdMems, arg) {
 800c510:	b570      	push	{r4, r5, r6, lr}
 800c512:	b094      	sub	sp, #80	; 0x50
 800c514:	900d      	str	r0, [sp, #52]	; 0x34


   objects_fifo_t* ofp=(objects_fifo_t*) arg;
 800c516:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c518:	9313      	str	r3, [sp, #76]	; 0x4c
   chRegSetThreadName("MEMS Thread");
 800c51a:	4866      	ldr	r0, [pc, #408]	; (800c6b4 <thdMems+0x1a4>)
 800c51c:	f7ff fef0 	bl	800c300 <chRegSetThreadName.lto_priv.2>




   /* configurazione pin per l'i2c */
   palSetLineMode( LINE_ARD_D15,
 800c520:	f240 221e 	movw	r2, #542	; 0x21e
 800c524:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c528:	4863      	ldr	r0, [pc, #396]	; (800c6b8 <thdMems+0x1a8>)
 800c52a:	f7f7 fd61 	bl	8003ff0 <_pal_lld_setgroupmode>
                   PAL_MODE_ALTERNATE(4) | PAL_STM32_OSPEED_HIGHEST | PAL_STM32_OTYPE_OPENDRAIN
   );

   palSetLineMode(LINE_ARD_D14,
 800c52e:	f240 221e 	movw	r2, #542	; 0x21e
 800c532:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c536:	4860      	ldr	r0, [pc, #384]	; (800c6b8 <thdMems+0x1a8>)
 800c538:	f7f7 fd5a 	bl	8003ff0 <_pal_lld_setgroupmode>
                  PAL_MODE_ALTERNATE(4) | PAL_STM32_OSPEED_HIGHEST | PAL_STM32_OTYPE_OPENDRAIN
   );

   /* inizializzazione driver imu */
   lsm6dslObjectInit(&LSM6DSLD1);
 800c53c:	485f      	ldr	r0, [pc, #380]	; (800c6bc <thdMems+0x1ac>)
 800c53e:	f7fe fd4f 	bl	800afe0 <lsm6dslObjectInit>

   /* Attivazione driver imu */
   lsm6dslStart(&LSM6DSLD1, &lsm6dslcfg);
 800c542:	495f      	ldr	r1, [pc, #380]	; (800c6c0 <thdMems+0x1b0>)
 800c544:	485d      	ldr	r0, [pc, #372]	; (800c6bc <thdMems+0x1ac>)
 800c546:	f7fe fd6b 	bl	800b020 <lsm6dslStart>

   /* inizializzazione driver magnetmetro */
   lsm303agrObjectInit(&LSM303AGRD1);
 800c54a:	485e      	ldr	r0, [pc, #376]	; (800c6c4 <thdMems+0x1b4>)
 800c54c:	f7ff fb88 	bl	800bc60 <lsm303agrObjectInit>

   /* Attivazione driver magnetometro */
   lsm303agrStart(&LSM303AGRD1, &lsm303agrcfg);
 800c550:	495d      	ldr	r1, [pc, #372]	; (800c6c8 <thdMems+0x1b8>)
 800c552:	485c      	ldr	r0, [pc, #368]	; (800c6c4 <thdMems+0x1b4>)
 800c554:	f7ff fba4 	bl	800bca0 <lsm303agrStart>


   while (true){
     systimestamp_t timestamp=chVTGetTimeStamp();
 800c558:	f7ff feba 	bl	800c2d0 <chVTGetTimeStamp>
 800c55c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    fifo_data* objp = NULL;
 800c560:	2300      	movs	r3, #0
 800c562:	930f      	str	r3, [sp, #60]	; 0x3c

    objp = (fifo_data*)chFifoTakeObjectTimeout(ofp, TIME_I2MS(100));
 800c564:	210a      	movs	r1, #10
 800c566:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800c568:	f7ff feda 	bl	800c320 <chFifoTakeObjectTimeout.lto_priv.1>
 800c56c:	900f      	str	r0, [sp, #60]	; 0x3c
    if(objp !=NULL){
 800c56e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c570:	2b00      	cmp	r3, #0
 800c572:	d0f1      	beq.n	800c558 <thdMems+0x48>

       lsm6dslAccelerometerReadCooked(&LSM6DSLD1, cookedAcc);
 800c574:	4b51      	ldr	r3, [pc, #324]	; (800c6bc <thdMems+0x1ac>)
 800c576:	685b      	ldr	r3, [r3, #4]
 800c578:	68db      	ldr	r3, [r3, #12]
 800c57a:	4954      	ldr	r1, [pc, #336]	; (800c6cc <thdMems+0x1bc>)
 800c57c:	4854      	ldr	r0, [pc, #336]	; (800c6d0 <thdMems+0x1c0>)
 800c57e:	4798      	blx	r3
       //lsm6dslAccelerometerReadRaw(&LSM6DSLD1, rawAcc);


       lsm6dslGyroscopeReadCooked(&LSM6DSLD1, cookedGyro);
 800c580:	4b4e      	ldr	r3, [pc, #312]	; (800c6bc <thdMems+0x1ac>)
 800c582:	689b      	ldr	r3, [r3, #8]
 800c584:	68db      	ldr	r3, [r3, #12]
 800c586:	4953      	ldr	r1, [pc, #332]	; (800c6d4 <thdMems+0x1c4>)
 800c588:	4853      	ldr	r0, [pc, #332]	; (800c6d8 <thdMems+0x1c8>)
 800c58a:	4798      	blx	r3
       //lsm6dslGyroscopeReadRaw(&LSM6DSLD1, rawGyro);


       lsm303agrCompassReadCooked(&LSM303AGRD1, cookedMag);
 800c58c:	4b4d      	ldr	r3, [pc, #308]	; (800c6c4 <thdMems+0x1b4>)
 800c58e:	689b      	ldr	r3, [r3, #8]
 800c590:	68db      	ldr	r3, [r3, #12]
 800c592:	4952      	ldr	r1, [pc, #328]	; (800c6dc <thdMems+0x1cc>)
 800c594:	4852      	ldr	r0, [pc, #328]	; (800c6e0 <thdMems+0x1d0>)
 800c596:	4798      	blx	r3
       //lsm303agrCompassReadCooked(&LSM303AGRD1, rawMag);
       accelerometer.array[0]=cookedAcc[0]/1000;
 800c598:	4b4c      	ldr	r3, [pc, #304]	; (800c6cc <thdMems+0x1bc>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	4951      	ldr	r1, [pc, #324]	; (800c6e4 <thdMems+0x1d4>)
 800c59e:	4618      	mov	r0, r3
 800c5a0:	f7f4 fc44 	bl	8000e2c <__aeabi_fdiv>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	461a      	mov	r2, r3
 800c5a8:	4b4f      	ldr	r3, [pc, #316]	; (800c6e8 <thdMems+0x1d8>)
 800c5aa:	601a      	str	r2, [r3, #0]
       accelerometer.array[1]=cookedAcc[1]/1000;
 800c5ac:	4b47      	ldr	r3, [pc, #284]	; (800c6cc <thdMems+0x1bc>)
 800c5ae:	685b      	ldr	r3, [r3, #4]
 800c5b0:	494c      	ldr	r1, [pc, #304]	; (800c6e4 <thdMems+0x1d4>)
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	f7f4 fc3a 	bl	8000e2c <__aeabi_fdiv>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	461a      	mov	r2, r3
 800c5bc:	4b4a      	ldr	r3, [pc, #296]	; (800c6e8 <thdMems+0x1d8>)
 800c5be:	605a      	str	r2, [r3, #4]
       accelerometer.array[2]=cookedAcc[2]/1000;
 800c5c0:	4b42      	ldr	r3, [pc, #264]	; (800c6cc <thdMems+0x1bc>)
 800c5c2:	689b      	ldr	r3, [r3, #8]
 800c5c4:	4947      	ldr	r1, [pc, #284]	; (800c6e4 <thdMems+0x1d4>)
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f7f4 fc30 	bl	8000e2c <__aeabi_fdiv>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	461a      	mov	r2, r3
 800c5d0:	4b45      	ldr	r3, [pc, #276]	; (800c6e8 <thdMems+0x1d8>)
 800c5d2:	609a      	str	r2, [r3, #8]

       gyroscope.array[0]=cookedGyro[0];
 800c5d4:	4b3f      	ldr	r3, [pc, #252]	; (800c6d4 <thdMems+0x1c4>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	4a44      	ldr	r2, [pc, #272]	; (800c6ec <thdMems+0x1dc>)
 800c5da:	6013      	str	r3, [r2, #0]
       gyroscope.array[1]=cookedGyro[1];
 800c5dc:	4b3d      	ldr	r3, [pc, #244]	; (800c6d4 <thdMems+0x1c4>)
 800c5de:	685b      	ldr	r3, [r3, #4]
 800c5e0:	4a42      	ldr	r2, [pc, #264]	; (800c6ec <thdMems+0x1dc>)
 800c5e2:	6053      	str	r3, [r2, #4]
       gyroscope.array[2]=cookedGyro[2];
 800c5e4:	4b3b      	ldr	r3, [pc, #236]	; (800c6d4 <thdMems+0x1c4>)
 800c5e6:	689b      	ldr	r3, [r3, #8]
 800c5e8:	4a40      	ldr	r2, [pc, #256]	; (800c6ec <thdMems+0x1dc>)
 800c5ea:	6093      	str	r3, [r2, #8]

       magnetometer.array[0] =cookedMag[0];
 800c5ec:	4b3b      	ldr	r3, [pc, #236]	; (800c6dc <thdMems+0x1cc>)
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	4a3f      	ldr	r2, [pc, #252]	; (800c6f0 <thdMems+0x1e0>)
 800c5f2:	6013      	str	r3, [r2, #0]
       magnetometer.array[1] =cookedMag[1];
 800c5f4:	4b39      	ldr	r3, [pc, #228]	; (800c6dc <thdMems+0x1cc>)
 800c5f6:	685b      	ldr	r3, [r3, #4]
 800c5f8:	4a3d      	ldr	r2, [pc, #244]	; (800c6f0 <thdMems+0x1e0>)
 800c5fa:	6053      	str	r3, [r2, #4]
       magnetometer.array[2] =cookedMag[2];
 800c5fc:	4b37      	ldr	r3, [pc, #220]	; (800c6dc <thdMems+0x1cc>)
 800c5fe:	689b      	ldr	r3, [r3, #8]
 800c600:	4a3b      	ldr	r2, [pc, #236]	; (800c6f0 <thdMems+0x1e0>)
 800c602:	6093      	str	r3, [r2, #8]
       //MadgwickAHRSupdate(gyrox,gyroy,gyroz,accx,accy,accz,magx,magy,magz);
       //MadgwickAHRSupdateIMU(gyrox, gyroy, gyroz, accx, accy, accz);
       FusionAhrsReset(&ahrs);
 800c604:	483b      	ldr	r0, [pc, #236]	; (800c6f4 <thdMems+0x1e4>)
 800c606:	f7fd fa8b 	bl	8009b20 <FusionAhrsReset>
       FusionAhrsInitialise(&ahrs);
 800c60a:	483a      	ldr	r0, [pc, #232]	; (800c6f4 <thdMems+0x1e4>)
 800c60c:	f7fd fa70 	bl	8009af0 <FusionAhrsInitialise>


       const float deltaTime=(timestamp-previusTimestamp)/clkPerSecond ;
 800c610:	4b39      	ldr	r3, [pc, #228]	; (800c6f8 <thdMems+0x1e8>)
 800c612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c616:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c61a:	1a84      	subs	r4, r0, r2
 800c61c:	eb61 0503 	sbc.w	r5, r1, r3
 800c620:	4620      	mov	r0, r4
 800c622:	4629      	mov	r1, r5
 800c624:	f7f4 fb08 	bl	8000c38 <__aeabi_ul2f>
 800c628:	4602      	mov	r2, r0
 800c62a:	4b34      	ldr	r3, [pc, #208]	; (800c6fc <thdMems+0x1ec>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	4619      	mov	r1, r3
 800c630:	4610      	mov	r0, r2
 800c632:	f7f4 fbfb 	bl	8000e2c <__aeabi_fdiv>
 800c636:	4603      	mov	r3, r0
 800c638:	930e      	str	r3, [sp, #56]	; 0x38
       previusTimestamp=timestamp;
 800c63a:	492f      	ldr	r1, [pc, #188]	; (800c6f8 <thdMems+0x1e8>)
 800c63c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c640:	e9c1 2300 	strd	r2, r3, [r1]

       FusionAhrsUpdate(&ahrs, gyroscope, accelerometer, magnetometer, deltaTime);
 800c644:	4e29      	ldr	r6, [pc, #164]	; (800c6ec <thdMems+0x1dc>)
 800c646:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c648:	9306      	str	r3, [sp, #24]
 800c64a:	4a29      	ldr	r2, [pc, #164]	; (800c6f0 <thdMems+0x1e0>)
 800c64c:	ab03      	add	r3, sp, #12
 800c64e:	ca07      	ldmia	r2, {r0, r1, r2}
 800c650:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c654:	4a24      	ldr	r2, [pc, #144]	; (800c6e8 <thdMems+0x1d8>)
 800c656:	466b      	mov	r3, sp
 800c658:	ca07      	ldmia	r2, {r0, r1, r2}
 800c65a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c65e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800c662:	4824      	ldr	r0, [pc, #144]	; (800c6f4 <thdMems+0x1e4>)
 800c664:	f7fd fb3c 	bl	8009ce0 <FusionAhrsUpdate>
       euler=FusionQuaternionToEuler(ahrs.quaternion);
 800c668:	4e25      	ldr	r6, [pc, #148]	; (800c700 <thdMems+0x1f0>)
 800c66a:	a808      	add	r0, sp, #32
 800c66c:	4b21      	ldr	r3, [pc, #132]	; (800c6f4 <thdMems+0x1e4>)
 800c66e:	69da      	ldr	r2, [r3, #28]
 800c670:	9200      	str	r2, [sp, #0]
 800c672:	3310      	adds	r3, #16
 800c674:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c676:	f7ff feab 	bl	800c3d0 <FusionQuaternionToEuler>
 800c67a:	ab08      	add	r3, sp, #32
 800c67c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c680:	e886 0007 	stmia.w	r6, {r0, r1, r2}


       //quatern2euler(q0, q1, q2, q3, &phi, &theta, &psi);

       objp->type=2;
 800c684:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c686:	2202      	movs	r2, #2
 800c688:	601a      	str	r2, [r3, #0]
       objp->data[0]=euler.angle.pitch;
 800c68a:	4b1d      	ldr	r3, [pc, #116]	; (800c700 <thdMems+0x1f0>)
 800c68c:	685a      	ldr	r2, [r3, #4]
 800c68e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c690:	605a      	str	r2, [r3, #4]
       objp->data[1]=euler.angle.roll;
 800c692:	4b1b      	ldr	r3, [pc, #108]	; (800c700 <thdMems+0x1f0>)
 800c694:	681a      	ldr	r2, [r3, #0]
 800c696:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c698:	609a      	str	r2, [r3, #8]
       objp->data[2]=euler.angle.yaw;
 800c69a:	4b19      	ldr	r3, [pc, #100]	; (800c700 <thdMems+0x1f0>)
 800c69c:	689a      	ldr	r2, [r3, #8]
 800c69e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c6a0:	60da      	str	r2, [r3, #12]
       chFifoSendObject(ofp, objp);
 800c6a2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c6a4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800c6a6:	f7ff fe4b 	bl	800c340 <chFifoSendObject.lto_priv.1>
       chThdSleepMilliseconds(100);
 800c6aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c6ae:	f7fa ff0f 	bl	80074d0 <chThdSleep>
   while (true){
 800c6b2:	e751      	b.n	800c558 <thdMems+0x48>
 800c6b4:	0800f0c8 	.word	0x0800f0c8
 800c6b8:	40020400 	.word	0x40020400
 800c6bc:	20001190 	.word	0x20001190
 800c6c0:	0800f084 	.word	0x0800f084
 800c6c4:	200011e4 	.word	0x200011e4
 800c6c8:	0800f0a8 	.word	0x0800f0a8
 800c6cc:	200010f0 	.word	0x200010f0
 800c6d0:	20001194 	.word	0x20001194
 800c6d4:	200010d8 	.word	0x200010d8
 800c6d8:	20001198 	.word	0x20001198
 800c6dc:	200010e4 	.word	0x200010e4
 800c6e0:	200011ec 	.word	0x200011ec
 800c6e4:	447a0000 	.word	0x447a0000
 800c6e8:	20001108 	.word	0x20001108
 800c6ec:	200010fc 	.word	0x200010fc
 800c6f0:	20001114 	.word	0x20001114
 800c6f4:	20001120 	.word	0x20001120
 800c6f8:	200010d0 	.word	0x200010d0
 800c6fc:	20000824 	.word	0x20000824
 800c700:	20001184 	.word	0x20001184
	...

0800c710 <chRegSetThreadName.lto_priv.3>:
static inline void chRegSetThreadName(const char *name) {
 800c710:	b082      	sub	sp, #8
 800c712:	9001      	str	r0, [sp, #4]
  __sch_get_currthread()->name = name;
 800c714:	4b03      	ldr	r3, [pc, #12]	; (800c724 <chRegSetThreadName.lto_priv.3+0x14>)
 800c716:	68db      	ldr	r3, [r3, #12]
 800c718:	9a01      	ldr	r2, [sp, #4]
 800c71a:	61da      	str	r2, [r3, #28]
}
 800c71c:	bf00      	nop
 800c71e:	b002      	add	sp, #8
 800c720:	4770      	bx	lr
 800c722:	bf00      	nop
 800c724:	20000e50 	.word	0x20000e50
	...

0800c730 <chFifoObjectInitAligned.lto_priv.1>:
                                           void *objbuf, msg_t *msgbuf) {
 800c730:	b500      	push	{lr}
 800c732:	b085      	sub	sp, #20
 800c734:	9003      	str	r0, [sp, #12]
 800c736:	9102      	str	r1, [sp, #8]
 800c738:	9201      	str	r2, [sp, #4]
 800c73a:	9300      	str	r3, [sp, #0]
  chGuardedPoolObjectInitAligned(&ofp->free, objsize, objalign);
 800c73c:	9b03      	ldr	r3, [sp, #12]
 800c73e:	9a00      	ldr	r2, [sp, #0]
 800c740:	9902      	ldr	r1, [sp, #8]
 800c742:	4618      	mov	r0, r3
 800c744:	f7fb fb84 	bl	8007e50 <chGuardedPoolObjectInitAligned>
  chGuardedPoolLoadArray(&ofp->free, objbuf, objn);
 800c748:	9b03      	ldr	r3, [sp, #12]
 800c74a:	9a01      	ldr	r2, [sp, #4]
 800c74c:	9906      	ldr	r1, [sp, #24]
 800c74e:	4618      	mov	r0, r3
 800c750:	f7fb fb96 	bl	8007e80 <chGuardedPoolLoadArray>
  chMBObjectInit(&ofp->mbx, msgbuf, objn);
 800c754:	9b03      	ldr	r3, [sp, #12]
 800c756:	331c      	adds	r3, #28
 800c758:	9a01      	ldr	r2, [sp, #4]
 800c75a:	9907      	ldr	r1, [sp, #28]
 800c75c:	4618      	mov	r0, r3
 800c75e:	f7fb f96f 	bl	8007a40 <chMBObjectInit>
}
 800c762:	bf00      	nop
 800c764:	b005      	add	sp, #20
 800c766:	f85d fb04 	ldr.w	pc, [sp], #4
 800c76a:	bf00      	nop
 800c76c:	0000      	movs	r0, r0
	...

0800c770 <chFifoObjectInit.lto_priv.0>:
                                    msg_t *msgbuf) {
 800c770:	b500      	push	{lr}
 800c772:	b087      	sub	sp, #28
 800c774:	9005      	str	r0, [sp, #20]
 800c776:	9104      	str	r1, [sp, #16]
 800c778:	9203      	str	r2, [sp, #12]
 800c77a:	9302      	str	r3, [sp, #8]
  chFifoObjectInitAligned(ofp, objsize, objn,
 800c77c:	9b08      	ldr	r3, [sp, #32]
 800c77e:	9301      	str	r3, [sp, #4]
 800c780:	9b02      	ldr	r3, [sp, #8]
 800c782:	9300      	str	r3, [sp, #0]
 800c784:	2304      	movs	r3, #4
 800c786:	9a03      	ldr	r2, [sp, #12]
 800c788:	9904      	ldr	r1, [sp, #16]
 800c78a:	9805      	ldr	r0, [sp, #20]
 800c78c:	f7ff ffd0 	bl	800c730 <chFifoObjectInitAligned.lto_priv.1>
}
 800c790:	bf00      	nop
 800c792:	b007      	add	sp, #28
 800c794:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800c7a0 <chFifoReceiveObjectTimeout.lto_priv.0>:
 *
 * @api
 */
static inline msg_t chFifoReceiveObjectTimeout(objects_fifo_t *ofp,
                                               void **objpp,
                                               sysinterval_t timeout) {
 800c7a0:	b500      	push	{lr}
 800c7a2:	b085      	sub	sp, #20
 800c7a4:	9003      	str	r0, [sp, #12]
 800c7a6:	9102      	str	r1, [sp, #8]
 800c7a8:	9201      	str	r2, [sp, #4]

  return chMBFetchTimeout(&ofp->mbx, (msg_t *)objpp, timeout);
 800c7aa:	9b03      	ldr	r3, [sp, #12]
 800c7ac:	331c      	adds	r3, #28
 800c7ae:	9a01      	ldr	r2, [sp, #4]
 800c7b0:	9902      	ldr	r1, [sp, #8]
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f7fb f9cc 	bl	8007b50 <chMBFetchTimeout>
 800c7b8:	4603      	mov	r3, r0
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	b005      	add	sp, #20
 800c7be:	f85d fb04 	ldr.w	pc, [sp], #4
 800c7c2:	bf00      	nop
	...

0800c7d0 <thdSD>:
static fifo_data objbuff[MAX_LENGHT_BUFF];
static msg_t msgBuff[MAX_LENGHT_BUFF];
static uint32_t i;
static MMCDriver MCCDriver;
BaseSequentialStream * chp1 = (BaseSequentialStream*)&SD2;
THD_FUNCTION(thdSD, arg){
 800c7d0:	b500      	push	{lr}
 800c7d2:	b089      	sub	sp, #36	; 0x24
 800c7d4:	9003      	str	r0, [sp, #12]
  objects_fifo_t* ofp=(objects_fifo_t*) arg;
 800c7d6:	9b03      	ldr	r3, [sp, #12]
 800c7d8:	9307      	str	r3, [sp, #28]

  /*configurazione pin per SPI*/
  palSetPadMode(GPIOA,5,PAL_MODE_ALTERNATE(5));
 800c7da:	f240 2282 	movw	r2, #642	; 0x282
 800c7de:	2120      	movs	r1, #32
 800c7e0:	4832      	ldr	r0, [pc, #200]	; (800c8ac <thdSD+0xdc>)
 800c7e2:	f7f7 fc05 	bl	8003ff0 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOA,6,PAL_MODE_ALTERNATE(5));
 800c7e6:	f240 2282 	movw	r2, #642	; 0x282
 800c7ea:	2140      	movs	r1, #64	; 0x40
 800c7ec:	482f      	ldr	r0, [pc, #188]	; (800c8ac <thdSD+0xdc>)
 800c7ee:	f7f7 fbff 	bl	8003ff0 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOA,7,PAL_MODE_ALTERNATE(5));
 800c7f2:	f240 2282 	movw	r2, #642	; 0x282
 800c7f6:	2180      	movs	r1, #128	; 0x80
 800c7f8:	482c      	ldr	r0, [pc, #176]	; (800c8ac <thdSD+0xdc>)
 800c7fa:	f7f7 fbf9 	bl	8003ff0 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOA,6,PAL_MODE_ALTERNATE(5));
 800c7fe:	f240 2282 	movw	r2, #642	; 0x282
 800c802:	2140      	movs	r1, #64	; 0x40
 800c804:	4829      	ldr	r0, [pc, #164]	; (800c8ac <thdSD+0xdc>)
 800c806:	f7f7 fbf3 	bl	8003ff0 <_pal_lld_setgroupmode>
  palSetPad(GPIOB,6);
 800c80a:	4b29      	ldr	r3, [pc, #164]	; (800c8b0 <thdSD+0xe0>)
 800c80c:	2240      	movs	r2, #64	; 0x40
 800c80e:	831a      	strh	r2, [r3, #24]
   chRegSetThreadName("SD Thread");
 800c810:	4828      	ldr	r0, [pc, #160]	; (800c8b4 <thdSD+0xe4>)
 800c812:	f7ff ff7d 	bl	800c710 <chRegSetThreadName.lto_priv.3>

   mmcObjectInit(&MCCDriver);
 800c816:	4828      	ldr	r0, [pc, #160]	; (800c8b8 <thdSD+0xe8>)
 800c818:	f7f5 fef2 	bl	8002600 <mmcObjectInit>




   sdStart(&SD2, NULL);
 800c81c:	2100      	movs	r1, #0
 800c81e:	4827      	ldr	r0, [pc, #156]	; (800c8bc <thdSD+0xec>)
 800c820:	f7f6 fb16 	bl	8002e50 <sdStart>
   chFifoObjectInit(&fifo, sizeof(fifo_data), MAX_LENGHT_BUFF, objbuff, msgBuff);
 800c824:	4b26      	ldr	r3, [pc, #152]	; (800c8c0 <thdSD+0xf0>)
 800c826:	9300      	str	r3, [sp, #0]
 800c828:	4b26      	ldr	r3, [pc, #152]	; (800c8c4 <thdSD+0xf4>)
 800c82a:	2228      	movs	r2, #40	; 0x28
 800c82c:	2110      	movs	r1, #16
 800c82e:	4826      	ldr	r0, [pc, #152]	; (800c8c8 <thdSD+0xf8>)
 800c830:	f7ff ff9e 	bl	800c770 <chFifoObjectInit.lto_priv.0>
   while (TRUE)

   {
     msg_t msg;
        fifo_data *objp=(fifo_data*)NULL;
 800c834:	2300      	movs	r3, #0
 800c836:	9305      	str	r3, [sp, #20]
        objp->type=0;
 800c838:	9b05      	ldr	r3, [sp, #20]
 800c83a:	2200      	movs	r2, #0
 800c83c:	601a      	str	r2, [r3, #0]


        msg = chFifoReceiveObjectTimeout(&fifo, (void**)&objp, TIME_MS2I(500));
 800c83e:	ab05      	add	r3, sp, #20
 800c840:	f241 3288 	movw	r2, #5000	; 0x1388
 800c844:	4619      	mov	r1, r3
 800c846:	4820      	ldr	r0, [pc, #128]	; (800c8c8 <thdSD+0xf8>)
 800c848:	f7ff ffaa 	bl	800c7a0 <chFifoReceiveObjectTimeout.lto_priv.0>
 800c84c:	9006      	str	r0, [sp, #24]
        if(msg==0 && objp!=NULL){
 800c84e:	9b06      	ldr	r3, [sp, #24]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d1ef      	bne.n	800c834 <thdSD+0x64>
 800c854:	9b05      	ldr	r3, [sp, #20]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d0ec      	beq.n	800c834 <thdSD+0x64>
        switch(objp->type){
 800c85a:	9b05      	ldr	r3, [sp, #20]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	2b01      	cmp	r3, #1
 800c860:	d002      	beq.n	800c868 <thdSD+0x98>
 800c862:	2b02      	cmp	r3, #2
 800c864:	d00e      	beq.n	800c884 <thdSD+0xb4>
                //chprintf(chp, "%s: %.3f\r\n",axis_id[MAX_AXIS_NUMBER], objp->data[i]);
        }
              break;

        default:
          break;
 800c866:	e01b      	b.n	800c8a0 <thdSD+0xd0>
          for(i = 0; i <GNSS; i++) {
 800c868:	4b18      	ldr	r3, [pc, #96]	; (800c8cc <thdSD+0xfc>)
 800c86a:	2200      	movs	r2, #0
 800c86c:	601a      	str	r2, [r3, #0]
 800c86e:	e004      	b.n	800c87a <thdSD+0xaa>
 800c870:	4b16      	ldr	r3, [pc, #88]	; (800c8cc <thdSD+0xfc>)
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	3301      	adds	r3, #1
 800c876:	4a15      	ldr	r2, [pc, #84]	; (800c8cc <thdSD+0xfc>)
 800c878:	6013      	str	r3, [r2, #0]
 800c87a:	4b14      	ldr	r3, [pc, #80]	; (800c8cc <thdSD+0xfc>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	2b02      	cmp	r3, #2
 800c880:	d9f6      	bls.n	800c870 <thdSD+0xa0>
                   break;
 800c882:	e00d      	b.n	800c8a0 <thdSD+0xd0>
          for(i = 0; i <GNSS; i++) {
 800c884:	4b11      	ldr	r3, [pc, #68]	; (800c8cc <thdSD+0xfc>)
 800c886:	2200      	movs	r2, #0
 800c888:	601a      	str	r2, [r3, #0]
 800c88a:	e004      	b.n	800c896 <thdSD+0xc6>
 800c88c:	4b0f      	ldr	r3, [pc, #60]	; (800c8cc <thdSD+0xfc>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	3301      	adds	r3, #1
 800c892:	4a0e      	ldr	r2, [pc, #56]	; (800c8cc <thdSD+0xfc>)
 800c894:	6013      	str	r3, [r2, #0]
 800c896:	4b0d      	ldr	r3, [pc, #52]	; (800c8cc <thdSD+0xfc>)
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	2b02      	cmp	r3, #2
 800c89c:	d9f6      	bls.n	800c88c <thdSD+0xbc>
              break;
 800c89e:	bf00      	nop
        }
     chThdSleepMilliseconds(100);
 800c8a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c8a4:	f7fa fe14 	bl	80074d0 <chThdSleep>
   {
 800c8a8:	e7c4      	b.n	800c834 <thdSD+0x64>
 800c8aa:	bf00      	nop
 800c8ac:	40020000 	.word	0x40020000
 800c8b0:	40020400 	.word	0x40020400
 800c8b4:	0800f0d4 	.word	0x0800f0d4
 800c8b8:	200015a0 	.word	0x200015a0
 800c8bc:	20000d9c 	.word	0x20000d9c
 800c8c0:	200014fc 	.word	0x200014fc
 800c8c4:	2000127c 	.word	0x2000127c
 800c8c8:	20001238 	.word	0x20001238
 800c8cc:	2000159c 	.word	0x2000159c

0800c8d0 <chRegSetThreadName.lto_priv.4>:
static inline void chRegSetThreadName(const char *name) {
 800c8d0:	b082      	sub	sp, #8
 800c8d2:	9001      	str	r0, [sp, #4]
  __sch_get_currthread()->name = name;
 800c8d4:	4b03      	ldr	r3, [pc, #12]	; (800c8e4 <chRegSetThreadName.lto_priv.4+0x14>)
 800c8d6:	68db      	ldr	r3, [r3, #12]
 800c8d8:	9a01      	ldr	r2, [sp, #4]
 800c8da:	61da      	str	r2, [r3, #28]
}
 800c8dc:	bf00      	nop
 800c8de:	b002      	add	sp, #8
 800c8e0:	4770      	bx	lr
 800c8e2:	bf00      	nop
 800c8e4:	20000e50 	.word	0x20000e50
	...

0800c8f0 <chFifoObjectInitAligned.lto_priv.2>:
                                           void *objbuf, msg_t *msgbuf) {
 800c8f0:	b500      	push	{lr}
 800c8f2:	b085      	sub	sp, #20
 800c8f4:	9003      	str	r0, [sp, #12]
 800c8f6:	9102      	str	r1, [sp, #8]
 800c8f8:	9201      	str	r2, [sp, #4]
 800c8fa:	9300      	str	r3, [sp, #0]
  chGuardedPoolObjectInitAligned(&ofp->free, objsize, objalign);
 800c8fc:	9b03      	ldr	r3, [sp, #12]
 800c8fe:	9a00      	ldr	r2, [sp, #0]
 800c900:	9902      	ldr	r1, [sp, #8]
 800c902:	4618      	mov	r0, r3
 800c904:	f7fb faa4 	bl	8007e50 <chGuardedPoolObjectInitAligned>
  chGuardedPoolLoadArray(&ofp->free, objbuf, objn);
 800c908:	9b03      	ldr	r3, [sp, #12]
 800c90a:	9a01      	ldr	r2, [sp, #4]
 800c90c:	9906      	ldr	r1, [sp, #24]
 800c90e:	4618      	mov	r0, r3
 800c910:	f7fb fab6 	bl	8007e80 <chGuardedPoolLoadArray>
  chMBObjectInit(&ofp->mbx, msgbuf, objn);
 800c914:	9b03      	ldr	r3, [sp, #12]
 800c916:	331c      	adds	r3, #28
 800c918:	9a01      	ldr	r2, [sp, #4]
 800c91a:	9907      	ldr	r1, [sp, #28]
 800c91c:	4618      	mov	r0, r3
 800c91e:	f7fb f88f 	bl	8007a40 <chMBObjectInit>
}
 800c922:	bf00      	nop
 800c924:	b005      	add	sp, #20
 800c926:	f85d fb04 	ldr.w	pc, [sp], #4
 800c92a:	bf00      	nop
 800c92c:	0000      	movs	r0, r0
	...

0800c930 <chFifoObjectInit.lto_priv.1>:
                                    msg_t *msgbuf) {
 800c930:	b500      	push	{lr}
 800c932:	b087      	sub	sp, #28
 800c934:	9005      	str	r0, [sp, #20]
 800c936:	9104      	str	r1, [sp, #16]
 800c938:	9203      	str	r2, [sp, #12]
 800c93a:	9302      	str	r3, [sp, #8]
  chFifoObjectInitAligned(ofp, objsize, objn,
 800c93c:	9b08      	ldr	r3, [sp, #32]
 800c93e:	9301      	str	r3, [sp, #4]
 800c940:	9b02      	ldr	r3, [sp, #8]
 800c942:	9300      	str	r3, [sp, #0]
 800c944:	2304      	movs	r3, #4
 800c946:	9a03      	ldr	r2, [sp, #12]
 800c948:	9904      	ldr	r1, [sp, #16]
 800c94a:	9805      	ldr	r0, [sp, #20]
 800c94c:	f7ff ffd0 	bl	800c8f0 <chFifoObjectInitAligned.lto_priv.2>
}
 800c950:	bf00      	nop
 800c952:	b007      	add	sp, #28
 800c954:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800c960 <chFifoReturnObject>:
                                      void *objp) {
 800c960:	b500      	push	{lr}
 800c962:	b083      	sub	sp, #12
 800c964:	9001      	str	r0, [sp, #4]
 800c966:	9100      	str	r1, [sp, #0]
  chGuardedPoolFree(&ofp->free, objp);
 800c968:	9b01      	ldr	r3, [sp, #4]
 800c96a:	9900      	ldr	r1, [sp, #0]
 800c96c:	4618      	mov	r0, r3
 800c96e:	f7fb fadf 	bl	8007f30 <chGuardedPoolFree>
}
 800c972:	bf00      	nop
 800c974:	b003      	add	sp, #12
 800c976:	f85d fb04 	ldr.w	pc, [sp], #4
 800c97a:	bf00      	nop
 800c97c:	0000      	movs	r0, r0
	...

0800c980 <chFifoReceiveObjectTimeout.lto_priv.1>:
                                               sysinterval_t timeout) {
 800c980:	b500      	push	{lr}
 800c982:	b085      	sub	sp, #20
 800c984:	9003      	str	r0, [sp, #12]
 800c986:	9102      	str	r1, [sp, #8]
 800c988:	9201      	str	r2, [sp, #4]
  return chMBFetchTimeout(&ofp->mbx, (msg_t *)objpp, timeout);
 800c98a:	9b03      	ldr	r3, [sp, #12]
 800c98c:	331c      	adds	r3, #28
 800c98e:	9a01      	ldr	r2, [sp, #4]
 800c990:	9902      	ldr	r1, [sp, #8]
 800c992:	4618      	mov	r0, r3
 800c994:	f7fb f8dc 	bl	8007b50 <chMBFetchTimeout>
 800c998:	4603      	mov	r3, r0
}
 800c99a:	4618      	mov	r0, r3
 800c99c:	b005      	add	sp, #20
 800c99e:	f85d fb04 	ldr.w	pc, [sp], #4
 800c9a2:	bf00      	nop
	...

0800c9b0 <thdBlinker>:


BaseSequentialStream * chp = (BaseSequentialStream*)&SD2;
static THD_WORKING_AREA(waBlinker, 256);

 static THD_FUNCTION(thdBlinker, arg){
 800c9b0:	b500      	push	{lr}
 800c9b2:	b083      	sub	sp, #12
 800c9b4:	9001      	str	r0, [sp, #4]
 (void) arg;
 chRegSetThreadName("Blinker");
 800c9b6:	4804      	ldr	r0, [pc, #16]	; (800c9c8 <thdBlinker+0x18>)
 800c9b8:	f7ff ff8a 	bl	800c8d0 <chRegSetThreadName.lto_priv.4>
 while(TRUE){
 chThdSleepMilliseconds(50);
 800c9bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c9c0:	f7fa fd86 	bl	80074d0 <chThdSleep>
 800c9c4:	e7fa      	b.n	800c9bc <thdBlinker+0xc>
 800c9c6:	bf00      	nop
 800c9c8:	0800f0e0 	.word	0x0800f0e0
 800c9cc:	00000000 	.word	0x00000000

0800c9d0 <main>:
static fifo_data objbuff[MAX_LENGHT_BUFF];
static msg_t msgBuff[MAX_LENGHT_BUFF];



int main(void) {
 800c9d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9d2:	b08b      	sub	sp, #44	; 0x2c
   * - HAL initialization, this also initializes the configured device drivers
   *   and performs the board-specific initializations.
   * - Kernel initialization, the main() function becomes a thread and the
   *   RTOS is active.
   */
  halInit();
 800c9d4:	f7f4 fedc 	bl	8001790 <halInit>
  chSysInit();
 800c9d8:	f7f9 fcaa 	bl	8006330 <chSysInit>

  sdStart(&SD2, NULL);
 800c9dc:	2100      	movs	r1, #0
 800c9de:	484b      	ldr	r0, [pc, #300]	; (800cb0c <main+0x13c>)
 800c9e0:	f7f6 fa36 	bl	8002e50 <sdStart>

  chThdCreateStatic(waBlinker, sizeof(waBlinker), NORMALPRIO - 1, thdBlinker, NULL);
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	9300      	str	r3, [sp, #0]
 800c9e8:	4b49      	ldr	r3, [pc, #292]	; (800cb10 <main+0x140>)
 800c9ea:	227f      	movs	r2, #127	; 0x7f
 800c9ec:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 800c9f0:	4848      	ldr	r0, [pc, #288]	; (800cb14 <main+0x144>)
 800c9f2:	f7fa fcdd 	bl	80073b0 <chThdCreateStatic>
  chThdCreateStatic(waGps, sizeof(waGps), NORMALPRIO + 1, thdGps, &fifo);
 800c9f6:	4b48      	ldr	r3, [pc, #288]	; (800cb18 <main+0x148>)
 800c9f8:	9300      	str	r3, [sp, #0]
 800c9fa:	4b48      	ldr	r3, [pc, #288]	; (800cb1c <main+0x14c>)
 800c9fc:	2281      	movs	r2, #129	; 0x81
 800c9fe:	f44f 619e 	mov.w	r1, #1264	; 0x4f0
 800ca02:	4847      	ldr	r0, [pc, #284]	; (800cb20 <main+0x150>)
 800ca04:	f7fa fcd4 	bl	80073b0 <chThdCreateStatic>
  chThdCreateStatic(waMems, sizeof(waMems), NORMALPRIO + 1, thdMems, &fifo);
 800ca08:	4b43      	ldr	r3, [pc, #268]	; (800cb18 <main+0x148>)
 800ca0a:	9300      	str	r3, [sp, #0]
 800ca0c:	4b45      	ldr	r3, [pc, #276]	; (800cb24 <main+0x154>)
 800ca0e:	2281      	movs	r2, #129	; 0x81
 800ca10:	f44f 619e 	mov.w	r1, #1264	; 0x4f0
 800ca14:	4844      	ldr	r0, [pc, #272]	; (800cb28 <main+0x158>)
 800ca16:	f7fa fccb 	bl	80073b0 <chThdCreateStatic>
  chThdCreateStatic(waSD, sizeof(waSD), NORMALPRIO + 1, thdSD, &fifo);
 800ca1a:	4b3f      	ldr	r3, [pc, #252]	; (800cb18 <main+0x148>)
 800ca1c:	9300      	str	r3, [sp, #0]
 800ca1e:	4b43      	ldr	r3, [pc, #268]	; (800cb2c <main+0x15c>)
 800ca20:	2281      	movs	r2, #129	; 0x81
 800ca22:	f44f 619e 	mov.w	r1, #1264	; 0x4f0
 800ca26:	4842      	ldr	r0, [pc, #264]	; (800cb30 <main+0x160>)
 800ca28:	f7fa fcc2 	bl	80073b0 <chThdCreateStatic>

  /*
   * Normal main() thread activity, in this demo it does nothing except
   * sleeping in a loop and check the button state.
   */
  chFifoObjectInit(&fifo, sizeof(fifo_data), MAX_LENGHT_BUFF, objbuff, msgBuff);
 800ca2c:	4b41      	ldr	r3, [pc, #260]	; (800cb34 <main+0x164>)
 800ca2e:	9300      	str	r3, [sp, #0]
 800ca30:	4b41      	ldr	r3, [pc, #260]	; (800cb38 <main+0x168>)
 800ca32:	2228      	movs	r2, #40	; 0x28
 800ca34:	2110      	movs	r1, #16
 800ca36:	4838      	ldr	r0, [pc, #224]	; (800cb18 <main+0x148>)
 800ca38:	f7ff ff7a 	bl	800c930 <chFifoObjectInit.lto_priv.1>
  uint32_t i;

  while (true) {
    msg_t msg;
    fifo_data *objp=(fifo_data*)NULL;
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	9307      	str	r3, [sp, #28]
    objp->type=0;
 800ca40:	9b07      	ldr	r3, [sp, #28]
 800ca42:	2200      	movs	r2, #0
 800ca44:	601a      	str	r2, [r3, #0]
    msg = chFifoReceiveObjectTimeout(&fifo, (void**)&objp, TIME_MS2I(500));
 800ca46:	ab07      	add	r3, sp, #28
 800ca48:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca4c:	4619      	mov	r1, r3
 800ca4e:	4832      	ldr	r0, [pc, #200]	; (800cb18 <main+0x148>)
 800ca50:	f7ff ff96 	bl	800c980 <chFifoReceiveObjectTimeout.lto_priv.1>
 800ca54:	9008      	str	r0, [sp, #32]
    if(msg==0 && objp!=NULL){
 800ca56:	9b08      	ldr	r3, [sp, #32]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d152      	bne.n	800cb02 <main+0x132>
 800ca5c:	9b07      	ldr	r3, [sp, #28]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d04f      	beq.n	800cb02 <main+0x132>
    switch(objp->type){
 800ca62:	9b07      	ldr	r3, [sp, #28]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	2b01      	cmp	r3, #1
 800ca68:	d002      	beq.n	800ca70 <main+0xa0>
 800ca6a:	2b02      	cmp	r3, #2
 800ca6c:	d021      	beq.n	800cab2 <main+0xe2>
    case 2:
            chprintf(chp, "%.3f,%.3f,%.3f\r\n",objp->data[0],objp->data[1],objp->data[2]);
          break;

    default:
      break;
 800ca6e:	e043      	b.n	800caf8 <main+0x128>
      for(i = 0; i <GNSS; i++) {
 800ca70:	2300      	movs	r3, #0
 800ca72:	9309      	str	r3, [sp, #36]	; 0x24
 800ca74:	e019      	b.n	800caaa <main+0xda>
                 chprintf(chp, "%s: %.3f\r\n", GNSS_id[i], objp->data[i]);
 800ca76:	4b31      	ldr	r3, [pc, #196]	; (800cb3c <main+0x16c>)
 800ca78:	681c      	ldr	r4, [r3, #0]
 800ca7a:	4a31      	ldr	r2, [pc, #196]	; (800cb40 <main+0x170>)
 800ca7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca7e:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800ca82:	9a07      	ldr	r2, [sp, #28]
 800ca84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca86:	009b      	lsls	r3, r3, #2
 800ca88:	4413      	add	r3, r2
 800ca8a:	685b      	ldr	r3, [r3, #4]
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	f7f3 fda1 	bl	80005d4 <__aeabi_f2d>
 800ca92:	4602      	mov	r2, r0
 800ca94:	460b      	mov	r3, r1
 800ca96:	e9cd 2300 	strd	r2, r3, [sp]
 800ca9a:	462a      	mov	r2, r5
 800ca9c:	4929      	ldr	r1, [pc, #164]	; (800cb44 <main+0x174>)
 800ca9e:	4620      	mov	r0, r4
 800caa0:	f7fb fef6 	bl	8008890 <chprintf>
      for(i = 0; i <GNSS; i++) {
 800caa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800caa6:	3301      	adds	r3, #1
 800caa8:	9309      	str	r3, [sp, #36]	; 0x24
 800caaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800caac:	2b02      	cmp	r3, #2
 800caae:	d9e2      	bls.n	800ca76 <main+0xa6>
               break;
 800cab0:	e022      	b.n	800caf8 <main+0x128>
            chprintf(chp, "%.3f,%.3f,%.3f\r\n",objp->data[0],objp->data[1],objp->data[2]);
 800cab2:	4b22      	ldr	r3, [pc, #136]	; (800cb3c <main+0x16c>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	9305      	str	r3, [sp, #20]
 800cab8:	9b07      	ldr	r3, [sp, #28]
 800caba:	685b      	ldr	r3, [r3, #4]
 800cabc:	4618      	mov	r0, r3
 800cabe:	f7f3 fd89 	bl	80005d4 <__aeabi_f2d>
 800cac2:	4606      	mov	r6, r0
 800cac4:	460f      	mov	r7, r1
 800cac6:	9b07      	ldr	r3, [sp, #28]
 800cac8:	689b      	ldr	r3, [r3, #8]
 800caca:	4618      	mov	r0, r3
 800cacc:	f7f3 fd82 	bl	80005d4 <__aeabi_f2d>
 800cad0:	4604      	mov	r4, r0
 800cad2:	460d      	mov	r5, r1
 800cad4:	9b07      	ldr	r3, [sp, #28]
 800cad6:	68db      	ldr	r3, [r3, #12]
 800cad8:	4618      	mov	r0, r3
 800cada:	f7f3 fd7b 	bl	80005d4 <__aeabi_f2d>
 800cade:	4602      	mov	r2, r0
 800cae0:	460b      	mov	r3, r1
 800cae2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cae6:	e9cd 4500 	strd	r4, r5, [sp]
 800caea:	4632      	mov	r2, r6
 800caec:	463b      	mov	r3, r7
 800caee:	4916      	ldr	r1, [pc, #88]	; (800cb48 <main+0x178>)
 800caf0:	9805      	ldr	r0, [sp, #20]
 800caf2:	f7fb fecd 	bl	8008890 <chprintf>
          break;
 800caf6:	bf00      	nop
    }
    chFifoReturnObject(&fifo, (void*)objp);
 800caf8:	9b07      	ldr	r3, [sp, #28]
 800cafa:	4619      	mov	r1, r3
 800cafc:	4806      	ldr	r0, [pc, #24]	; (800cb18 <main+0x148>)
 800cafe:	f7ff ff2f 	bl	800c960 <chFifoReturnObject>
    }
    chThdSleepMilliseconds(10);
 800cb02:	2064      	movs	r0, #100	; 0x64
 800cb04:	f7fa fce4 	bl	80074d0 <chThdSleep>
  while (true) {
 800cb08:	e798      	b.n	800ca3c <main+0x6c>
 800cb0a:	bf00      	nop
 800cb0c:	20000d9c 	.word	0x20000d9c
 800cb10:	0800c9b1 	.word	0x0800c9b1
 800cb14:	200015d8 	.word	0x200015d8
 800cb18:	20002698 	.word	0x20002698
 800cb1c:	0800c121 	.word	0x0800c121
 800cb20:	200017c8 	.word	0x200017c8
 800cb24:	0800c511 	.word	0x0800c511
 800cb28:	20001cb8 	.word	0x20001cb8
 800cb2c:	0800c7d1 	.word	0x0800c7d1
 800cb30:	200021a8 	.word	0x200021a8
 800cb34:	2000295c 	.word	0x2000295c
 800cb38:	200026dc 	.word	0x200026dc
 800cb3c:	20000834 	.word	0x20000834
 800cb40:	20000828 	.word	0x20000828
 800cb44:	0800f0e8 	.word	0x0800f0e8
 800cb48:	0800f0f4 	.word	0x0800f0f4

0800cb4c <cosf>:
 800cb4c:	4a17      	ldr	r2, [pc, #92]	; (800cbac <cosf+0x60>)
 800cb4e:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800cb52:	4293      	cmp	r3, r2
 800cb54:	dd1a      	ble.n	800cb8c <cosf+0x40>
 800cb56:	b500      	push	{lr}
 800cb58:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800cb5c:	b083      	sub	sp, #12
 800cb5e:	db05      	blt.n	800cb6c <cosf+0x20>
 800cb60:	4601      	mov	r1, r0
 800cb62:	f7f3 ffa5 	bl	8000ab0 <__aeabi_fsub>
 800cb66:	b003      	add	sp, #12
 800cb68:	f85d fb04 	ldr.w	pc, [sp], #4
 800cb6c:	4669      	mov	r1, sp
 800cb6e:	f000 fe33 	bl	800d7d8 <__ieee754_rem_pio2f>
 800cb72:	f000 0203 	and.w	r2, r0, #3
 800cb76:	2a01      	cmp	r2, #1
 800cb78:	9901      	ldr	r1, [sp, #4]
 800cb7a:	9800      	ldr	r0, [sp, #0]
 800cb7c:	d009      	beq.n	800cb92 <cosf+0x46>
 800cb7e:	2a02      	cmp	r2, #2
 800cb80:	d00f      	beq.n	800cba2 <cosf+0x56>
 800cb82:	b15a      	cbz	r2, 800cb9c <cosf+0x50>
 800cb84:	2201      	movs	r2, #1
 800cb86:	f001 fc29 	bl	800e3dc <__kernel_sinf>
 800cb8a:	e7ec      	b.n	800cb66 <cosf+0x1a>
 800cb8c:	2100      	movs	r1, #0
 800cb8e:	f000 bfef 	b.w	800db70 <__kernel_cosf>
 800cb92:	f001 fc23 	bl	800e3dc <__kernel_sinf>
 800cb96:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800cb9a:	e7e4      	b.n	800cb66 <cosf+0x1a>
 800cb9c:	f000 ffe8 	bl	800db70 <__kernel_cosf>
 800cba0:	e7e1      	b.n	800cb66 <cosf+0x1a>
 800cba2:	f000 ffe5 	bl	800db70 <__kernel_cosf>
 800cba6:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800cbaa:	e7dc      	b.n	800cb66 <cosf+0x1a>
 800cbac:	3f490fd8 	.word	0x3f490fd8

0800cbb0 <sinf>:
 800cbb0:	4a1a      	ldr	r2, [pc, #104]	; (800cc1c <sinf+0x6c>)
 800cbb2:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800cbb6:	4293      	cmp	r3, r2
 800cbb8:	dd1b      	ble.n	800cbf2 <sinf+0x42>
 800cbba:	b500      	push	{lr}
 800cbbc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800cbc0:	b083      	sub	sp, #12
 800cbc2:	db05      	blt.n	800cbd0 <sinf+0x20>
 800cbc4:	4601      	mov	r1, r0
 800cbc6:	f7f3 ff73 	bl	8000ab0 <__aeabi_fsub>
 800cbca:	b003      	add	sp, #12
 800cbcc:	f85d fb04 	ldr.w	pc, [sp], #4
 800cbd0:	4669      	mov	r1, sp
 800cbd2:	f000 fe01 	bl	800d7d8 <__ieee754_rem_pio2f>
 800cbd6:	f000 0003 	and.w	r0, r0, #3
 800cbda:	2801      	cmp	r0, #1
 800cbdc:	9901      	ldr	r1, [sp, #4]
 800cbde:	d00c      	beq.n	800cbfa <sinf+0x4a>
 800cbe0:	2802      	cmp	r0, #2
 800cbe2:	d013      	beq.n	800cc0c <sinf+0x5c>
 800cbe4:	b168      	cbz	r0, 800cc02 <sinf+0x52>
 800cbe6:	9800      	ldr	r0, [sp, #0]
 800cbe8:	f000 ffc2 	bl	800db70 <__kernel_cosf>
 800cbec:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800cbf0:	e7eb      	b.n	800cbca <sinf+0x1a>
 800cbf2:	2100      	movs	r1, #0
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	f001 bbf1 	b.w	800e3dc <__kernel_sinf>
 800cbfa:	9800      	ldr	r0, [sp, #0]
 800cbfc:	f000 ffb8 	bl	800db70 <__kernel_cosf>
 800cc00:	e7e3      	b.n	800cbca <sinf+0x1a>
 800cc02:	9800      	ldr	r0, [sp, #0]
 800cc04:	2201      	movs	r2, #1
 800cc06:	f001 fbe9 	bl	800e3dc <__kernel_sinf>
 800cc0a:	e7de      	b.n	800cbca <sinf+0x1a>
 800cc0c:	9800      	ldr	r0, [sp, #0]
 800cc0e:	2201      	movs	r2, #1
 800cc10:	f001 fbe4 	bl	800e3dc <__kernel_sinf>
 800cc14:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800cc18:	e7d7      	b.n	800cbca <sinf+0x1a>
 800cc1a:	bf00      	nop
 800cc1c:	3f490fd8 	.word	0x3f490fd8

0800cc20 <asinf>:
 800cc20:	b538      	push	{r3, r4, r5, lr}
 800cc22:	4604      	mov	r4, r0
 800cc24:	f000 f872 	bl	800cd0c <__ieee754_asinf>
 800cc28:	4621      	mov	r1, r4
 800cc2a:	4605      	mov	r5, r0
 800cc2c:	4620      	mov	r0, r4
 800cc2e:	f7f4 fa0f 	bl	8001050 <__aeabi_fcmpun>
 800cc32:	b938      	cbnz	r0, 800cc44 <asinf+0x24>
 800cc34:	4620      	mov	r0, r4
 800cc36:	f001 fd85 	bl	800e744 <fabsf>
 800cc3a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800cc3e:	f7f4 f9fd 	bl	800103c <__aeabi_fcmpgt>
 800cc42:	b908      	cbnz	r0, 800cc48 <asinf+0x28>
 800cc44:	4628      	mov	r0, r5
 800cc46:	bd38      	pop	{r3, r4, r5, pc}
 800cc48:	f001 fe2a 	bl	800e8a0 <__errno>
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	2221      	movs	r2, #33	; 0x21
 800cc50:	601a      	str	r2, [r3, #0]
 800cc52:	4802      	ldr	r0, [pc, #8]	; (800cc5c <asinf+0x3c>)
 800cc54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc58:	f001 bdc0 	b.w	800e7dc <nanf>
 800cc5c:	0800ef98 	.word	0x0800ef98

0800cc60 <atan2f>:
 800cc60:	f000 b9a0 	b.w	800cfa4 <__ieee754_atan2f>

0800cc64 <powf>:
 800cc64:	b570      	push	{r4, r5, r6, lr}
 800cc66:	460c      	mov	r4, r1
 800cc68:	4606      	mov	r6, r0
 800cc6a:	f000 fa23 	bl	800d0b4 <__ieee754_powf>
 800cc6e:	4621      	mov	r1, r4
 800cc70:	4605      	mov	r5, r0
 800cc72:	4620      	mov	r0, r4
 800cc74:	f7f4 f9ec 	bl	8001050 <__aeabi_fcmpun>
 800cc78:	b958      	cbnz	r0, 800cc92 <powf+0x2e>
 800cc7a:	2100      	movs	r1, #0
 800cc7c:	4630      	mov	r0, r6
 800cc7e:	f7f4 f9b5 	bl	8000fec <__aeabi_fcmpeq>
 800cc82:	b1a0      	cbz	r0, 800ccae <powf+0x4a>
 800cc84:	2100      	movs	r1, #0
 800cc86:	4620      	mov	r0, r4
 800cc88:	f7f4 f9b0 	bl	8000fec <__aeabi_fcmpeq>
 800cc8c:	b118      	cbz	r0, 800cc96 <powf+0x32>
 800cc8e:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
 800cc92:	4628      	mov	r0, r5
 800cc94:	bd70      	pop	{r4, r5, r6, pc}
 800cc96:	4620      	mov	r0, r4
 800cc98:	f001 fd58 	bl	800e74c <finitef>
 800cc9c:	2800      	cmp	r0, #0
 800cc9e:	d0f8      	beq.n	800cc92 <powf+0x2e>
 800cca0:	2100      	movs	r1, #0
 800cca2:	4620      	mov	r0, r4
 800cca4:	f7f4 f9ac 	bl	8001000 <__aeabi_fcmplt>
 800cca8:	2800      	cmp	r0, #0
 800ccaa:	d0f2      	beq.n	800cc92 <powf+0x2e>
 800ccac:	e023      	b.n	800ccf6 <powf+0x92>
 800ccae:	4628      	mov	r0, r5
 800ccb0:	f001 fd4c 	bl	800e74c <finitef>
 800ccb4:	b180      	cbz	r0, 800ccd8 <powf+0x74>
 800ccb6:	2100      	movs	r1, #0
 800ccb8:	4628      	mov	r0, r5
 800ccba:	f7f4 f997 	bl	8000fec <__aeabi_fcmpeq>
 800ccbe:	2800      	cmp	r0, #0
 800ccc0:	d0e7      	beq.n	800cc92 <powf+0x2e>
 800ccc2:	4630      	mov	r0, r6
 800ccc4:	f001 fd42 	bl	800e74c <finitef>
 800ccc8:	2800      	cmp	r0, #0
 800ccca:	d0e2      	beq.n	800cc92 <powf+0x2e>
 800cccc:	4620      	mov	r0, r4
 800ccce:	f001 fd3d 	bl	800e74c <finitef>
 800ccd2:	2800      	cmp	r0, #0
 800ccd4:	d0dd      	beq.n	800cc92 <powf+0x2e>
 800ccd6:	e00e      	b.n	800ccf6 <powf+0x92>
 800ccd8:	4630      	mov	r0, r6
 800ccda:	f001 fd37 	bl	800e74c <finitef>
 800ccde:	2800      	cmp	r0, #0
 800cce0:	d0e9      	beq.n	800ccb6 <powf+0x52>
 800cce2:	4620      	mov	r0, r4
 800cce4:	f001 fd32 	bl	800e74c <finitef>
 800cce8:	2800      	cmp	r0, #0
 800ccea:	d0e4      	beq.n	800ccb6 <powf+0x52>
 800ccec:	4629      	mov	r1, r5
 800ccee:	4628      	mov	r0, r5
 800ccf0:	f7f4 f9ae 	bl	8001050 <__aeabi_fcmpun>
 800ccf4:	b920      	cbnz	r0, 800cd00 <powf+0x9c>
 800ccf6:	f001 fdd3 	bl	800e8a0 <__errno>
 800ccfa:	2322      	movs	r3, #34	; 0x22
 800ccfc:	6003      	str	r3, [r0, #0]
 800ccfe:	e7c8      	b.n	800cc92 <powf+0x2e>
 800cd00:	f001 fdce 	bl	800e8a0 <__errno>
 800cd04:	2321      	movs	r3, #33	; 0x21
 800cd06:	6003      	str	r3, [r0, #0]
 800cd08:	e7c3      	b.n	800cc92 <powf+0x2e>
 800cd0a:	bf00      	nop

0800cd0c <__ieee754_asinf>:
 800cd0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd10:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800cd14:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800cd18:	4604      	mov	r4, r0
 800cd1a:	f000 80b1 	beq.w	800ce80 <__ieee754_asinf+0x174>
 800cd1e:	f300 80a7 	bgt.w	800ce70 <__ieee754_asinf+0x164>
 800cd22:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800cd26:	4606      	mov	r6, r0
 800cd28:	da0d      	bge.n	800cd46 <__ieee754_asinf+0x3a>
 800cd2a:	f1b5 5f48 	cmp.w	r5, #838860800	; 0x32000000
 800cd2e:	f280 80cc 	bge.w	800ceca <__ieee754_asinf+0x1be>
 800cd32:	498c      	ldr	r1, [pc, #560]	; (800cf64 <__ieee754_asinf+0x258>)
 800cd34:	f7f3 febe 	bl	8000ab4 <__addsf3>
 800cd38:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800cd3c:	f7f4 f97e 	bl	800103c <__aeabi_fcmpgt>
 800cd40:	2800      	cmp	r0, #0
 800cd42:	f040 80c0 	bne.w	800cec6 <__ieee754_asinf+0x1ba>
 800cd46:	4620      	mov	r0, r4
 800cd48:	f001 fcfc 	bl	800e744 <fabsf>
 800cd4c:	4601      	mov	r1, r0
 800cd4e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800cd52:	f7f3 fead 	bl	8000ab0 <__aeabi_fsub>
 800cd56:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800cd5a:	f7f3 ffb3 	bl	8000cc4 <__aeabi_fmul>
 800cd5e:	4982      	ldr	r1, [pc, #520]	; (800cf68 <__ieee754_asinf+0x25c>)
 800cd60:	4604      	mov	r4, r0
 800cd62:	f7f3 ffaf 	bl	8000cc4 <__aeabi_fmul>
 800cd66:	4981      	ldr	r1, [pc, #516]	; (800cf6c <__ieee754_asinf+0x260>)
 800cd68:	f7f3 fea4 	bl	8000ab4 <__addsf3>
 800cd6c:	4621      	mov	r1, r4
 800cd6e:	f7f3 ffa9 	bl	8000cc4 <__aeabi_fmul>
 800cd72:	497f      	ldr	r1, [pc, #508]	; (800cf70 <__ieee754_asinf+0x264>)
 800cd74:	f7f3 fe9c 	bl	8000ab0 <__aeabi_fsub>
 800cd78:	4621      	mov	r1, r4
 800cd7a:	f7f3 ffa3 	bl	8000cc4 <__aeabi_fmul>
 800cd7e:	497d      	ldr	r1, [pc, #500]	; (800cf74 <__ieee754_asinf+0x268>)
 800cd80:	f7f3 fe98 	bl	8000ab4 <__addsf3>
 800cd84:	4621      	mov	r1, r4
 800cd86:	f7f3 ff9d 	bl	8000cc4 <__aeabi_fmul>
 800cd8a:	497b      	ldr	r1, [pc, #492]	; (800cf78 <__ieee754_asinf+0x26c>)
 800cd8c:	f7f3 fe90 	bl	8000ab0 <__aeabi_fsub>
 800cd90:	4621      	mov	r1, r4
 800cd92:	f7f3 ff97 	bl	8000cc4 <__aeabi_fmul>
 800cd96:	4979      	ldr	r1, [pc, #484]	; (800cf7c <__ieee754_asinf+0x270>)
 800cd98:	f7f3 fe8c 	bl	8000ab4 <__addsf3>
 800cd9c:	4621      	mov	r1, r4
 800cd9e:	f7f3 ff91 	bl	8000cc4 <__aeabi_fmul>
 800cda2:	4977      	ldr	r1, [pc, #476]	; (800cf80 <__ieee754_asinf+0x274>)
 800cda4:	4680      	mov	r8, r0
 800cda6:	4620      	mov	r0, r4
 800cda8:	f7f3 ff8c 	bl	8000cc4 <__aeabi_fmul>
 800cdac:	4975      	ldr	r1, [pc, #468]	; (800cf84 <__ieee754_asinf+0x278>)
 800cdae:	f7f3 fe7f 	bl	8000ab0 <__aeabi_fsub>
 800cdb2:	4621      	mov	r1, r4
 800cdb4:	f7f3 ff86 	bl	8000cc4 <__aeabi_fmul>
 800cdb8:	4973      	ldr	r1, [pc, #460]	; (800cf88 <__ieee754_asinf+0x27c>)
 800cdba:	f7f3 fe7b 	bl	8000ab4 <__addsf3>
 800cdbe:	4621      	mov	r1, r4
 800cdc0:	f7f3 ff80 	bl	8000cc4 <__aeabi_fmul>
 800cdc4:	4971      	ldr	r1, [pc, #452]	; (800cf8c <__ieee754_asinf+0x280>)
 800cdc6:	f7f3 fe73 	bl	8000ab0 <__aeabi_fsub>
 800cdca:	4621      	mov	r1, r4
 800cdcc:	f7f3 ff7a 	bl	8000cc4 <__aeabi_fmul>
 800cdd0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800cdd4:	f7f3 fe6e 	bl	8000ab4 <__addsf3>
 800cdd8:	4681      	mov	r9, r0
 800cdda:	4620      	mov	r0, r4
 800cddc:	f000 fe70 	bl	800dac0 <__ieee754_sqrtf>
 800cde0:	4b6b      	ldr	r3, [pc, #428]	; (800cf90 <__ieee754_asinf+0x284>)
 800cde2:	429d      	cmp	r5, r3
 800cde4:	4607      	mov	r7, r0
 800cde6:	dc59      	bgt.n	800ce9c <__ieee754_asinf+0x190>
 800cde8:	4601      	mov	r1, r0
 800cdea:	f7f3 fe63 	bl	8000ab4 <__addsf3>
 800cdee:	4649      	mov	r1, r9
 800cdf0:	4605      	mov	r5, r0
 800cdf2:	4640      	mov	r0, r8
 800cdf4:	f7f4 f81a 	bl	8000e2c <__aeabi_fdiv>
 800cdf8:	4601      	mov	r1, r0
 800cdfa:	4628      	mov	r0, r5
 800cdfc:	f7f3 ff62 	bl	8000cc4 <__aeabi_fmul>
 800ce00:	f427 657f 	bic.w	r5, r7, #4080	; 0xff0
 800ce04:	f025 050f 	bic.w	r5, r5, #15
 800ce08:	4680      	mov	r8, r0
 800ce0a:	4629      	mov	r1, r5
 800ce0c:	4628      	mov	r0, r5
 800ce0e:	f7f3 ff59 	bl	8000cc4 <__aeabi_fmul>
 800ce12:	4601      	mov	r1, r0
 800ce14:	4620      	mov	r0, r4
 800ce16:	f7f3 fe4b 	bl	8000ab0 <__aeabi_fsub>
 800ce1a:	4629      	mov	r1, r5
 800ce1c:	4604      	mov	r4, r0
 800ce1e:	4638      	mov	r0, r7
 800ce20:	f7f3 fe48 	bl	8000ab4 <__addsf3>
 800ce24:	4601      	mov	r1, r0
 800ce26:	4620      	mov	r0, r4
 800ce28:	f7f4 f800 	bl	8000e2c <__aeabi_fdiv>
 800ce2c:	4601      	mov	r1, r0
 800ce2e:	f7f3 fe41 	bl	8000ab4 <__addsf3>
 800ce32:	4601      	mov	r1, r0
 800ce34:	4857      	ldr	r0, [pc, #348]	; (800cf94 <__ieee754_asinf+0x288>)
 800ce36:	f7f3 fe3b 	bl	8000ab0 <__aeabi_fsub>
 800ce3a:	4601      	mov	r1, r0
 800ce3c:	4640      	mov	r0, r8
 800ce3e:	f7f3 fe37 	bl	8000ab0 <__aeabi_fsub>
 800ce42:	4629      	mov	r1, r5
 800ce44:	4604      	mov	r4, r0
 800ce46:	4628      	mov	r0, r5
 800ce48:	f7f3 fe34 	bl	8000ab4 <__addsf3>
 800ce4c:	4601      	mov	r1, r0
 800ce4e:	4852      	ldr	r0, [pc, #328]	; (800cf98 <__ieee754_asinf+0x28c>)
 800ce50:	f7f3 fe2e 	bl	8000ab0 <__aeabi_fsub>
 800ce54:	4601      	mov	r1, r0
 800ce56:	4620      	mov	r0, r4
 800ce58:	f7f3 fe2a 	bl	8000ab0 <__aeabi_fsub>
 800ce5c:	4601      	mov	r1, r0
 800ce5e:	484e      	ldr	r0, [pc, #312]	; (800cf98 <__ieee754_asinf+0x28c>)
 800ce60:	f7f3 fe26 	bl	8000ab0 <__aeabi_fsub>
 800ce64:	2e00      	cmp	r6, #0
 800ce66:	dc09      	bgt.n	800ce7c <__ieee754_asinf+0x170>
 800ce68:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800ce6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce70:	4601      	mov	r1, r0
 800ce72:	f7f3 fe1d 	bl	8000ab0 <__aeabi_fsub>
 800ce76:	4601      	mov	r1, r0
 800ce78:	f7f3 ffd8 	bl	8000e2c <__aeabi_fdiv>
 800ce7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce80:	4946      	ldr	r1, [pc, #280]	; (800cf9c <__ieee754_asinf+0x290>)
 800ce82:	f7f3 ff1f 	bl	8000cc4 <__aeabi_fmul>
 800ce86:	4943      	ldr	r1, [pc, #268]	; (800cf94 <__ieee754_asinf+0x288>)
 800ce88:	4605      	mov	r5, r0
 800ce8a:	4620      	mov	r0, r4
 800ce8c:	f7f3 ff1a 	bl	8000cc4 <__aeabi_fmul>
 800ce90:	4601      	mov	r1, r0
 800ce92:	4628      	mov	r0, r5
 800ce94:	f7f3 fe0e 	bl	8000ab4 <__addsf3>
 800ce98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce9c:	4649      	mov	r1, r9
 800ce9e:	4640      	mov	r0, r8
 800cea0:	f7f3 ffc4 	bl	8000e2c <__aeabi_fdiv>
 800cea4:	4639      	mov	r1, r7
 800cea6:	f7f3 ff0d 	bl	8000cc4 <__aeabi_fmul>
 800ceaa:	4639      	mov	r1, r7
 800ceac:	f7f3 fe02 	bl	8000ab4 <__addsf3>
 800ceb0:	4601      	mov	r1, r0
 800ceb2:	f7f3 fdff 	bl	8000ab4 <__addsf3>
 800ceb6:	493a      	ldr	r1, [pc, #232]	; (800cfa0 <__ieee754_asinf+0x294>)
 800ceb8:	f7f3 fdfc 	bl	8000ab4 <__addsf3>
 800cebc:	4601      	mov	r1, r0
 800cebe:	4837      	ldr	r0, [pc, #220]	; (800cf9c <__ieee754_asinf+0x290>)
 800cec0:	f7f3 fdf6 	bl	8000ab0 <__aeabi_fsub>
 800cec4:	e7ce      	b.n	800ce64 <__ieee754_asinf+0x158>
 800cec6:	4620      	mov	r0, r4
 800cec8:	e7d8      	b.n	800ce7c <__ieee754_asinf+0x170>
 800ceca:	4601      	mov	r1, r0
 800cecc:	f7f3 fefa 	bl	8000cc4 <__aeabi_fmul>
 800ced0:	4925      	ldr	r1, [pc, #148]	; (800cf68 <__ieee754_asinf+0x25c>)
 800ced2:	4605      	mov	r5, r0
 800ced4:	f7f3 fef6 	bl	8000cc4 <__aeabi_fmul>
 800ced8:	4924      	ldr	r1, [pc, #144]	; (800cf6c <__ieee754_asinf+0x260>)
 800ceda:	f7f3 fdeb 	bl	8000ab4 <__addsf3>
 800cede:	4629      	mov	r1, r5
 800cee0:	f7f3 fef0 	bl	8000cc4 <__aeabi_fmul>
 800cee4:	4922      	ldr	r1, [pc, #136]	; (800cf70 <__ieee754_asinf+0x264>)
 800cee6:	f7f3 fde3 	bl	8000ab0 <__aeabi_fsub>
 800ceea:	4629      	mov	r1, r5
 800ceec:	f7f3 feea 	bl	8000cc4 <__aeabi_fmul>
 800cef0:	4920      	ldr	r1, [pc, #128]	; (800cf74 <__ieee754_asinf+0x268>)
 800cef2:	f7f3 fddf 	bl	8000ab4 <__addsf3>
 800cef6:	4629      	mov	r1, r5
 800cef8:	f7f3 fee4 	bl	8000cc4 <__aeabi_fmul>
 800cefc:	491e      	ldr	r1, [pc, #120]	; (800cf78 <__ieee754_asinf+0x26c>)
 800cefe:	f7f3 fdd7 	bl	8000ab0 <__aeabi_fsub>
 800cf02:	4629      	mov	r1, r5
 800cf04:	f7f3 fede 	bl	8000cc4 <__aeabi_fmul>
 800cf08:	491c      	ldr	r1, [pc, #112]	; (800cf7c <__ieee754_asinf+0x270>)
 800cf0a:	f7f3 fdd3 	bl	8000ab4 <__addsf3>
 800cf0e:	4629      	mov	r1, r5
 800cf10:	f7f3 fed8 	bl	8000cc4 <__aeabi_fmul>
 800cf14:	491a      	ldr	r1, [pc, #104]	; (800cf80 <__ieee754_asinf+0x274>)
 800cf16:	4606      	mov	r6, r0
 800cf18:	4628      	mov	r0, r5
 800cf1a:	f7f3 fed3 	bl	8000cc4 <__aeabi_fmul>
 800cf1e:	4919      	ldr	r1, [pc, #100]	; (800cf84 <__ieee754_asinf+0x278>)
 800cf20:	f7f3 fdc6 	bl	8000ab0 <__aeabi_fsub>
 800cf24:	4629      	mov	r1, r5
 800cf26:	f7f3 fecd 	bl	8000cc4 <__aeabi_fmul>
 800cf2a:	4917      	ldr	r1, [pc, #92]	; (800cf88 <__ieee754_asinf+0x27c>)
 800cf2c:	f7f3 fdc2 	bl	8000ab4 <__addsf3>
 800cf30:	4629      	mov	r1, r5
 800cf32:	f7f3 fec7 	bl	8000cc4 <__aeabi_fmul>
 800cf36:	4915      	ldr	r1, [pc, #84]	; (800cf8c <__ieee754_asinf+0x280>)
 800cf38:	f7f3 fdba 	bl	8000ab0 <__aeabi_fsub>
 800cf3c:	4629      	mov	r1, r5
 800cf3e:	f7f3 fec1 	bl	8000cc4 <__aeabi_fmul>
 800cf42:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800cf46:	f7f3 fdb5 	bl	8000ab4 <__addsf3>
 800cf4a:	4601      	mov	r1, r0
 800cf4c:	4630      	mov	r0, r6
 800cf4e:	f7f3 ff6d 	bl	8000e2c <__aeabi_fdiv>
 800cf52:	4621      	mov	r1, r4
 800cf54:	f7f3 feb6 	bl	8000cc4 <__aeabi_fmul>
 800cf58:	4621      	mov	r1, r4
 800cf5a:	f7f3 fdab 	bl	8000ab4 <__addsf3>
 800cf5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf62:	bf00      	nop
 800cf64:	7149f2ca 	.word	0x7149f2ca
 800cf68:	3811ef08 	.word	0x3811ef08
 800cf6c:	3a4f7f04 	.word	0x3a4f7f04
 800cf70:	3d241146 	.word	0x3d241146
 800cf74:	3e4e0aa8 	.word	0x3e4e0aa8
 800cf78:	3ea6b090 	.word	0x3ea6b090
 800cf7c:	3e2aaaab 	.word	0x3e2aaaab
 800cf80:	3d9dc62e 	.word	0x3d9dc62e
 800cf84:	3f303361 	.word	0x3f303361
 800cf88:	4001572d 	.word	0x4001572d
 800cf8c:	4019d139 	.word	0x4019d139
 800cf90:	3f799999 	.word	0x3f799999
 800cf94:	b33bbd2e 	.word	0xb33bbd2e
 800cf98:	3f490fdb 	.word	0x3f490fdb
 800cf9c:	3fc90fdb 	.word	0x3fc90fdb
 800cfa0:	333bbd2e 	.word	0x333bbd2e

0800cfa4 <__ieee754_atan2f>:
 800cfa4:	b570      	push	{r4, r5, r6, lr}
 800cfa6:	f021 4500 	bic.w	r5, r1, #2147483648	; 0x80000000
 800cfaa:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800cfae:	460a      	mov	r2, r1
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	dc2c      	bgt.n	800d00e <__ieee754_atan2f+0x6a>
 800cfb4:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800cfb8:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800cfbc:	4684      	mov	ip, r0
 800cfbe:	dc26      	bgt.n	800d00e <__ieee754_atan2f+0x6a>
 800cfc0:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800cfc4:	d035      	beq.n	800d032 <__ieee754_atan2f+0x8e>
 800cfc6:	178c      	asrs	r4, r1, #30
 800cfc8:	f004 0402 	and.w	r4, r4, #2
 800cfcc:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800cfd0:	b316      	cbz	r6, 800d018 <__ieee754_atan2f+0x74>
 800cfd2:	b33d      	cbz	r5, 800d024 <__ieee754_atan2f+0x80>
 800cfd4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800cfd8:	d033      	beq.n	800d042 <__ieee754_atan2f+0x9e>
 800cfda:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800cfde:	d021      	beq.n	800d024 <__ieee754_atan2f+0x80>
 800cfe0:	1b75      	subs	r5, r6, r5
 800cfe2:	f1b5 5ff4 	cmp.w	r5, #511705088	; 0x1e800000
 800cfe6:	ea4f 50e5 	mov.w	r0, r5, asr #23
 800cfea:	da28      	bge.n	800d03e <__ieee754_atan2f+0x9a>
 800cfec:	2900      	cmp	r1, #0
 800cfee:	da33      	bge.n	800d058 <__ieee754_atan2f+0xb4>
 800cff0:	303c      	adds	r0, #60	; 0x3c
 800cff2:	da31      	bge.n	800d058 <__ieee754_atan2f+0xb4>
 800cff4:	2000      	movs	r0, #0
 800cff6:	2c01      	cmp	r4, #1
 800cff8:	d03f      	beq.n	800d07a <__ieee754_atan2f+0xd6>
 800cffa:	2c02      	cmp	r4, #2
 800cffc:	d035      	beq.n	800d06a <__ieee754_atan2f+0xc6>
 800cffe:	b12c      	cbz	r4, 800d00c <__ieee754_atan2f+0x68>
 800d000:	4924      	ldr	r1, [pc, #144]	; (800d094 <__ieee754_atan2f+0xf0>)
 800d002:	f7f3 fd57 	bl	8000ab4 <__addsf3>
 800d006:	4924      	ldr	r1, [pc, #144]	; (800d098 <__ieee754_atan2f+0xf4>)
 800d008:	f7f3 fd52 	bl	8000ab0 <__aeabi_fsub>
 800d00c:	bd70      	pop	{r4, r5, r6, pc}
 800d00e:	4619      	mov	r1, r3
 800d010:	4610      	mov	r0, r2
 800d012:	f7f3 fd4f 	bl	8000ab4 <__addsf3>
 800d016:	bd70      	pop	{r4, r5, r6, pc}
 800d018:	2c02      	cmp	r4, #2
 800d01a:	d008      	beq.n	800d02e <__ieee754_atan2f+0x8a>
 800d01c:	2c03      	cmp	r4, #3
 800d01e:	d1f5      	bne.n	800d00c <__ieee754_atan2f+0x68>
 800d020:	481e      	ldr	r0, [pc, #120]	; (800d09c <__ieee754_atan2f+0xf8>)
 800d022:	bd70      	pop	{r4, r5, r6, pc}
 800d024:	f1bc 0f00 	cmp.w	ip, #0
 800d028:	db07      	blt.n	800d03a <__ieee754_atan2f+0x96>
 800d02a:	481d      	ldr	r0, [pc, #116]	; (800d0a0 <__ieee754_atan2f+0xfc>)
 800d02c:	bd70      	pop	{r4, r5, r6, pc}
 800d02e:	481a      	ldr	r0, [pc, #104]	; (800d098 <__ieee754_atan2f+0xf4>)
 800d030:	bd70      	pop	{r4, r5, r6, pc}
 800d032:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d036:	f001 ba6d 	b.w	800e514 <atanf>
 800d03a:	481a      	ldr	r0, [pc, #104]	; (800d0a4 <__ieee754_atan2f+0x100>)
 800d03c:	bd70      	pop	{r4, r5, r6, pc}
 800d03e:	4818      	ldr	r0, [pc, #96]	; (800d0a0 <__ieee754_atan2f+0xfc>)
 800d040:	e7d9      	b.n	800cff6 <__ieee754_atan2f+0x52>
 800d042:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800d046:	f104 34ff 	add.w	r4, r4, #4294967295
 800d04a:	d019      	beq.n	800d080 <__ieee754_atan2f+0xdc>
 800d04c:	2c02      	cmp	r4, #2
 800d04e:	d81d      	bhi.n	800d08c <__ieee754_atan2f+0xe8>
 800d050:	4b15      	ldr	r3, [pc, #84]	; (800d0a8 <__ieee754_atan2f+0x104>)
 800d052:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800d056:	bd70      	pop	{r4, r5, r6, pc}
 800d058:	4611      	mov	r1, r2
 800d05a:	4618      	mov	r0, r3
 800d05c:	f7f3 fee6 	bl	8000e2c <__aeabi_fdiv>
 800d060:	f001 fb70 	bl	800e744 <fabsf>
 800d064:	f001 fa56 	bl	800e514 <atanf>
 800d068:	e7c5      	b.n	800cff6 <__ieee754_atan2f+0x52>
 800d06a:	490a      	ldr	r1, [pc, #40]	; (800d094 <__ieee754_atan2f+0xf0>)
 800d06c:	f7f3 fd22 	bl	8000ab4 <__addsf3>
 800d070:	4601      	mov	r1, r0
 800d072:	4809      	ldr	r0, [pc, #36]	; (800d098 <__ieee754_atan2f+0xf4>)
 800d074:	f7f3 fd1c 	bl	8000ab0 <__aeabi_fsub>
 800d078:	bd70      	pop	{r4, r5, r6, pc}
 800d07a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800d07e:	bd70      	pop	{r4, r5, r6, pc}
 800d080:	2c02      	cmp	r4, #2
 800d082:	d805      	bhi.n	800d090 <__ieee754_atan2f+0xec>
 800d084:	4b09      	ldr	r3, [pc, #36]	; (800d0ac <__ieee754_atan2f+0x108>)
 800d086:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800d08a:	bd70      	pop	{r4, r5, r6, pc}
 800d08c:	2000      	movs	r0, #0
 800d08e:	bd70      	pop	{r4, r5, r6, pc}
 800d090:	4807      	ldr	r0, [pc, #28]	; (800d0b0 <__ieee754_atan2f+0x10c>)
 800d092:	bd70      	pop	{r4, r5, r6, pc}
 800d094:	33bbbd2e 	.word	0x33bbbd2e
 800d098:	40490fdb 	.word	0x40490fdb
 800d09c:	c0490fdb 	.word	0xc0490fdb
 800d0a0:	3fc90fdb 	.word	0x3fc90fdb
 800d0a4:	bfc90fdb 	.word	0xbfc90fdb
 800d0a8:	0800f114 	.word	0x0800f114
 800d0ac:	0800f108 	.word	0x0800f108
 800d0b0:	3f490fdb 	.word	0x3f490fdb

0800d0b4 <__ieee754_powf>:
 800d0b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0b8:	f031 4a00 	bics.w	sl, r1, #2147483648	; 0x80000000
 800d0bc:	b087      	sub	sp, #28
 800d0be:	460c      	mov	r4, r1
 800d0c0:	4607      	mov	r7, r0
 800d0c2:	4680      	mov	r8, r0
 800d0c4:	d10e      	bne.n	800d0e4 <__ieee754_powf+0x30>
 800d0c6:	f480 0880 	eor.w	r8, r0, #4194304	; 0x400000
 800d0ca:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800d0ce:	f518 0f00 	cmn.w	r8, #8388608	; 0x800000
 800d0d2:	f240 814e 	bls.w	800d372 <__ieee754_powf+0x2be>
 800d0d6:	4621      	mov	r1, r4
 800d0d8:	4638      	mov	r0, r7
 800d0da:	f7f3 fceb 	bl	8000ab4 <__addsf3>
 800d0de:	b007      	add	sp, #28
 800d0e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0e4:	f020 4900 	bic.w	r9, r0, #2147483648	; 0x80000000
 800d0e8:	f1b9 4fff 	cmp.w	r9, #2139095040	; 0x7f800000
 800d0ec:	dcf3      	bgt.n	800d0d6 <__ieee754_powf+0x22>
 800d0ee:	f1ba 4fff 	cmp.w	sl, #2139095040	; 0x7f800000
 800d0f2:	460d      	mov	r5, r1
 800d0f4:	f300 8132 	bgt.w	800d35c <__ieee754_powf+0x2a8>
 800d0f8:	2800      	cmp	r0, #0
 800d0fa:	f2c0 813f 	blt.w	800d37c <__ieee754_powf+0x2c8>
 800d0fe:	2600      	movs	r6, #0
 800d100:	f1ba 4fff 	cmp.w	sl, #2139095040	; 0x7f800000
 800d104:	f000 8154 	beq.w	800d3b0 <__ieee754_powf+0x2fc>
 800d108:	f1ba 5f7e 	cmp.w	sl, #1065353216	; 0x3f800000
 800d10c:	f000 8158 	beq.w	800d3c0 <__ieee754_powf+0x30c>
 800d110:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800d114:	f000 8147 	beq.w	800d3a6 <__ieee754_powf+0x2f2>
 800d118:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800d11c:	4638      	mov	r0, r7
 800d11e:	f040 8153 	bne.w	800d3c8 <__ieee754_powf+0x314>
 800d122:	f1b8 0f00 	cmp.w	r8, #0
 800d126:	f280 819b 	bge.w	800d460 <__ieee754_powf+0x3ac>
 800d12a:	f001 fb0b 	bl	800e744 <fabsf>
 800d12e:	f1b9 4fff 	cmp.w	r9, #2139095040	; 0x7f800000
 800d132:	f000 815d 	beq.w	800d3f0 <__ieee754_powf+0x33c>
 800d136:	f1b9 0f00 	cmp.w	r9, #0
 800d13a:	f000 8155 	beq.w	800d3e8 <__ieee754_powf+0x334>
 800d13e:	f1b9 5f7e 	cmp.w	r9, #1065353216	; 0x3f800000
 800d142:	f000 814a 	beq.w	800d3da <__ieee754_powf+0x326>
 800d146:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 800d14a:	3b01      	subs	r3, #1
 800d14c:	9300      	str	r3, [sp, #0]
 800d14e:	4333      	orrs	r3, r6
 800d150:	f000 818b 	beq.w	800d46a <__ieee754_powf+0x3b6>
 800d154:	f1ba 4f9a 	cmp.w	sl, #1291845632	; 0x4d000000
 800d158:	f340 818f 	ble.w	800d47a <__ieee754_powf+0x3c6>
 800d15c:	4bb1      	ldr	r3, [pc, #708]	; (800d424 <__ieee754_powf+0x370>)
 800d15e:	4599      	cmp	r9, r3
 800d160:	f340 82db 	ble.w	800d71a <__ieee754_powf+0x666>
 800d164:	4bb0      	ldr	r3, [pc, #704]	; (800d428 <__ieee754_powf+0x374>)
 800d166:	4599      	cmp	r9, r3
 800d168:	f300 82e3 	bgt.w	800d732 <__ieee754_powf+0x67e>
 800d16c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d170:	f7f3 fc9e 	bl	8000ab0 <__aeabi_fsub>
 800d174:	49ad      	ldr	r1, [pc, #692]	; (800d42c <__ieee754_powf+0x378>)
 800d176:	4607      	mov	r7, r0
 800d178:	f7f3 fda4 	bl	8000cc4 <__aeabi_fmul>
 800d17c:	49ac      	ldr	r1, [pc, #688]	; (800d430 <__ieee754_powf+0x37c>)
 800d17e:	4681      	mov	r9, r0
 800d180:	4638      	mov	r0, r7
 800d182:	f7f3 fd9f 	bl	8000cc4 <__aeabi_fmul>
 800d186:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 800d18a:	4680      	mov	r8, r0
 800d18c:	4638      	mov	r0, r7
 800d18e:	f7f3 fd99 	bl	8000cc4 <__aeabi_fmul>
 800d192:	4601      	mov	r1, r0
 800d194:	48a7      	ldr	r0, [pc, #668]	; (800d434 <__ieee754_powf+0x380>)
 800d196:	f7f3 fc8b 	bl	8000ab0 <__aeabi_fsub>
 800d19a:	4639      	mov	r1, r7
 800d19c:	f7f3 fd92 	bl	8000cc4 <__aeabi_fmul>
 800d1a0:	4601      	mov	r1, r0
 800d1a2:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800d1a6:	f7f3 fc83 	bl	8000ab0 <__aeabi_fsub>
 800d1aa:	4639      	mov	r1, r7
 800d1ac:	4682      	mov	sl, r0
 800d1ae:	4638      	mov	r0, r7
 800d1b0:	f7f3 fd88 	bl	8000cc4 <__aeabi_fmul>
 800d1b4:	4601      	mov	r1, r0
 800d1b6:	4650      	mov	r0, sl
 800d1b8:	f7f3 fd84 	bl	8000cc4 <__aeabi_fmul>
 800d1bc:	499e      	ldr	r1, [pc, #632]	; (800d438 <__ieee754_powf+0x384>)
 800d1be:	f7f3 fd81 	bl	8000cc4 <__aeabi_fmul>
 800d1c2:	4601      	mov	r1, r0
 800d1c4:	4640      	mov	r0, r8
 800d1c6:	f7f3 fc73 	bl	8000ab0 <__aeabi_fsub>
 800d1ca:	4601      	mov	r1, r0
 800d1cc:	4680      	mov	r8, r0
 800d1ce:	4648      	mov	r0, r9
 800d1d0:	f7f3 fc70 	bl	8000ab4 <__addsf3>
 800d1d4:	f420 677f 	bic.w	r7, r0, #4080	; 0xff0
 800d1d8:	f027 070f 	bic.w	r7, r7, #15
 800d1dc:	4649      	mov	r1, r9
 800d1de:	4638      	mov	r0, r7
 800d1e0:	f7f3 fc66 	bl	8000ab0 <__aeabi_fsub>
 800d1e4:	4601      	mov	r1, r0
 800d1e6:	4640      	mov	r0, r8
 800d1e8:	f7f3 fc62 	bl	8000ab0 <__aeabi_fsub>
 800d1ec:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800d1f0:	9b00      	ldr	r3, [sp, #0]
 800d1f2:	3e01      	subs	r6, #1
 800d1f4:	f025 050f 	bic.w	r5, r5, #15
 800d1f8:	4333      	orrs	r3, r6
 800d1fa:	4681      	mov	r9, r0
 800d1fc:	4629      	mov	r1, r5
 800d1fe:	4620      	mov	r0, r4
 800d200:	bf0c      	ite	eq
 800d202:	4e8e      	ldreq	r6, [pc, #568]	; (800d43c <__ieee754_powf+0x388>)
 800d204:	f04f 567e 	movne.w	r6, #1065353216	; 0x3f800000
 800d208:	f7f3 fc52 	bl	8000ab0 <__aeabi_fsub>
 800d20c:	4639      	mov	r1, r7
 800d20e:	f7f3 fd59 	bl	8000cc4 <__aeabi_fmul>
 800d212:	4621      	mov	r1, r4
 800d214:	4680      	mov	r8, r0
 800d216:	4648      	mov	r0, r9
 800d218:	f7f3 fd54 	bl	8000cc4 <__aeabi_fmul>
 800d21c:	4601      	mov	r1, r0
 800d21e:	4640      	mov	r0, r8
 800d220:	f7f3 fc48 	bl	8000ab4 <__addsf3>
 800d224:	4629      	mov	r1, r5
 800d226:	4681      	mov	r9, r0
 800d228:	4638      	mov	r0, r7
 800d22a:	f7f3 fd4b 	bl	8000cc4 <__aeabi_fmul>
 800d22e:	4605      	mov	r5, r0
 800d230:	4601      	mov	r1, r0
 800d232:	4648      	mov	r0, r9
 800d234:	f7f3 fc3e 	bl	8000ab4 <__addsf3>
 800d238:	2800      	cmp	r0, #0
 800d23a:	4607      	mov	r7, r0
 800d23c:	46ab      	mov	fp, r5
 800d23e:	4604      	mov	r4, r0
 800d240:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 800d244:	f340 8232 	ble.w	800d6ac <__ieee754_powf+0x5f8>
 800d248:	f1b8 4f86 	cmp.w	r8, #1124073472	; 0x43000000
 800d24c:	f300 82b1 	bgt.w	800d7b2 <__ieee754_powf+0x6fe>
 800d250:	f000 82a0 	beq.w	800d794 <__ieee754_powf+0x6e0>
 800d254:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 800d258:	f300 8236 	bgt.w	800d6c8 <__ieee754_powf+0x614>
 800d25c:	f04f 0800 	mov.w	r8, #0
 800d260:	4647      	mov	r7, r8
 800d262:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800d266:	f024 040f 	bic.w	r4, r4, #15
 800d26a:	4975      	ldr	r1, [pc, #468]	; (800d440 <__ieee754_powf+0x38c>)
 800d26c:	4620      	mov	r0, r4
 800d26e:	f7f3 fd29 	bl	8000cc4 <__aeabi_fmul>
 800d272:	4659      	mov	r1, fp
 800d274:	4682      	mov	sl, r0
 800d276:	4620      	mov	r0, r4
 800d278:	f7f3 fc1a 	bl	8000ab0 <__aeabi_fsub>
 800d27c:	4601      	mov	r1, r0
 800d27e:	4648      	mov	r0, r9
 800d280:	f7f3 fc16 	bl	8000ab0 <__aeabi_fsub>
 800d284:	496f      	ldr	r1, [pc, #444]	; (800d444 <__ieee754_powf+0x390>)
 800d286:	f7f3 fd1d 	bl	8000cc4 <__aeabi_fmul>
 800d28a:	496f      	ldr	r1, [pc, #444]	; (800d448 <__ieee754_powf+0x394>)
 800d28c:	4605      	mov	r5, r0
 800d28e:	4620      	mov	r0, r4
 800d290:	f7f3 fd18 	bl	8000cc4 <__aeabi_fmul>
 800d294:	4601      	mov	r1, r0
 800d296:	4628      	mov	r0, r5
 800d298:	f7f3 fc0c 	bl	8000ab4 <__addsf3>
 800d29c:	4605      	mov	r5, r0
 800d29e:	4601      	mov	r1, r0
 800d2a0:	4650      	mov	r0, sl
 800d2a2:	f7f3 fc07 	bl	8000ab4 <__addsf3>
 800d2a6:	4651      	mov	r1, sl
 800d2a8:	4604      	mov	r4, r0
 800d2aa:	f7f3 fc01 	bl	8000ab0 <__aeabi_fsub>
 800d2ae:	4601      	mov	r1, r0
 800d2b0:	4628      	mov	r0, r5
 800d2b2:	f7f3 fbfd 	bl	8000ab0 <__aeabi_fsub>
 800d2b6:	4621      	mov	r1, r4
 800d2b8:	4681      	mov	r9, r0
 800d2ba:	4620      	mov	r0, r4
 800d2bc:	f7f3 fd02 	bl	8000cc4 <__aeabi_fmul>
 800d2c0:	4962      	ldr	r1, [pc, #392]	; (800d44c <__ieee754_powf+0x398>)
 800d2c2:	4605      	mov	r5, r0
 800d2c4:	f7f3 fcfe 	bl	8000cc4 <__aeabi_fmul>
 800d2c8:	4961      	ldr	r1, [pc, #388]	; (800d450 <__ieee754_powf+0x39c>)
 800d2ca:	f7f3 fbf1 	bl	8000ab0 <__aeabi_fsub>
 800d2ce:	4629      	mov	r1, r5
 800d2d0:	f7f3 fcf8 	bl	8000cc4 <__aeabi_fmul>
 800d2d4:	495f      	ldr	r1, [pc, #380]	; (800d454 <__ieee754_powf+0x3a0>)
 800d2d6:	f7f3 fbed 	bl	8000ab4 <__addsf3>
 800d2da:	4629      	mov	r1, r5
 800d2dc:	f7f3 fcf2 	bl	8000cc4 <__aeabi_fmul>
 800d2e0:	495d      	ldr	r1, [pc, #372]	; (800d458 <__ieee754_powf+0x3a4>)
 800d2e2:	f7f3 fbe5 	bl	8000ab0 <__aeabi_fsub>
 800d2e6:	4629      	mov	r1, r5
 800d2e8:	f7f3 fcec 	bl	8000cc4 <__aeabi_fmul>
 800d2ec:	495b      	ldr	r1, [pc, #364]	; (800d45c <__ieee754_powf+0x3a8>)
 800d2ee:	f7f3 fbe1 	bl	8000ab4 <__addsf3>
 800d2f2:	4629      	mov	r1, r5
 800d2f4:	f7f3 fce6 	bl	8000cc4 <__aeabi_fmul>
 800d2f8:	4601      	mov	r1, r0
 800d2fa:	4620      	mov	r0, r4
 800d2fc:	f7f3 fbd8 	bl	8000ab0 <__aeabi_fsub>
 800d300:	4605      	mov	r5, r0
 800d302:	4601      	mov	r1, r0
 800d304:	4620      	mov	r0, r4
 800d306:	f7f3 fcdd 	bl	8000cc4 <__aeabi_fmul>
 800d30a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800d30e:	4682      	mov	sl, r0
 800d310:	4628      	mov	r0, r5
 800d312:	f7f3 fbcd 	bl	8000ab0 <__aeabi_fsub>
 800d316:	4601      	mov	r1, r0
 800d318:	4650      	mov	r0, sl
 800d31a:	f7f3 fd87 	bl	8000e2c <__aeabi_fdiv>
 800d31e:	4649      	mov	r1, r9
 800d320:	4605      	mov	r5, r0
 800d322:	4620      	mov	r0, r4
 800d324:	f7f3 fcce 	bl	8000cc4 <__aeabi_fmul>
 800d328:	4649      	mov	r1, r9
 800d32a:	f7f3 fbc3 	bl	8000ab4 <__addsf3>
 800d32e:	4601      	mov	r1, r0
 800d330:	4628      	mov	r0, r5
 800d332:	f7f3 fbbd 	bl	8000ab0 <__aeabi_fsub>
 800d336:	4621      	mov	r1, r4
 800d338:	f7f3 fbba 	bl	8000ab0 <__aeabi_fsub>
 800d33c:	4601      	mov	r1, r0
 800d33e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800d342:	f7f3 fbb5 	bl	8000ab0 <__aeabi_fsub>
 800d346:	4603      	mov	r3, r0
 800d348:	4443      	add	r3, r8
 800d34a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d34e:	f2c0 81ec 	blt.w	800d72a <__ieee754_powf+0x676>
 800d352:	4618      	mov	r0, r3
 800d354:	4631      	mov	r1, r6
 800d356:	f7f3 fcb5 	bl	8000cc4 <__aeabi_fmul>
 800d35a:	e6c0      	b.n	800d0de <__ieee754_powf+0x2a>
 800d35c:	f1b0 5f7e 	cmp.w	r0, #1065353216	; 0x3f800000
 800d360:	f47f aeb9 	bne.w	800d0d6 <__ieee754_powf+0x22>
 800d364:	f481 0580 	eor.w	r5, r1, #4194304	; 0x400000
 800d368:	006d      	lsls	r5, r5, #1
 800d36a:	f515 0f00 	cmn.w	r5, #8388608	; 0x800000
 800d36e:	f63f aeb2 	bhi.w	800d0d6 <__ieee754_powf+0x22>
 800d372:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800d376:	b007      	add	sp, #28
 800d378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d37c:	f1ba 4f97 	cmp.w	sl, #1266679808	; 0x4b800000
 800d380:	da0f      	bge.n	800d3a2 <__ieee754_powf+0x2ee>
 800d382:	f1ba 5f7e 	cmp.w	sl, #1065353216	; 0x3f800000
 800d386:	db0a      	blt.n	800d39e <__ieee754_powf+0x2ea>
 800d388:	ea4f 53ea 	mov.w	r3, sl, asr #23
 800d38c:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800d390:	fa4a f203 	asr.w	r2, sl, r3
 800d394:	fa02 f303 	lsl.w	r3, r2, r3
 800d398:	4553      	cmp	r3, sl
 800d39a:	f000 8182 	beq.w	800d6a2 <__ieee754_powf+0x5ee>
 800d39e:	2600      	movs	r6, #0
 800d3a0:	e6b2      	b.n	800d108 <__ieee754_powf+0x54>
 800d3a2:	2602      	movs	r6, #2
 800d3a4:	e6ac      	b.n	800d100 <__ieee754_powf+0x4c>
 800d3a6:	4639      	mov	r1, r7
 800d3a8:	4638      	mov	r0, r7
 800d3aa:	f7f3 fc8b 	bl	8000cc4 <__aeabi_fmul>
 800d3ae:	e696      	b.n	800d0de <__ieee754_powf+0x2a>
 800d3b0:	f1b9 5f7e 	cmp.w	r9, #1065353216	; 0x3f800000
 800d3b4:	d0dd      	beq.n	800d372 <__ieee754_powf+0x2be>
 800d3b6:	dd2a      	ble.n	800d40e <__ieee754_powf+0x35a>
 800d3b8:	2d00      	cmp	r5, #0
 800d3ba:	db26      	blt.n	800d40a <__ieee754_powf+0x356>
 800d3bc:	4620      	mov	r0, r4
 800d3be:	e68e      	b.n	800d0de <__ieee754_powf+0x2a>
 800d3c0:	2d00      	cmp	r5, #0
 800d3c2:	db29      	blt.n	800d418 <__ieee754_powf+0x364>
 800d3c4:	4638      	mov	r0, r7
 800d3c6:	e68a      	b.n	800d0de <__ieee754_powf+0x2a>
 800d3c8:	f001 f9bc 	bl	800e744 <fabsf>
 800d3cc:	f1b9 4fff 	cmp.w	r9, #2139095040	; 0x7f800000
 800d3d0:	d003      	beq.n	800d3da <__ieee754_powf+0x326>
 800d3d2:	f1b9 0f00 	cmp.w	r9, #0
 800d3d6:	f47f aeb2 	bne.w	800d13e <__ieee754_powf+0x8a>
 800d3da:	2d00      	cmp	r5, #0
 800d3dc:	da04      	bge.n	800d3e8 <__ieee754_powf+0x334>
 800d3de:	4601      	mov	r1, r0
 800d3e0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800d3e4:	f7f3 fd22 	bl	8000e2c <__aeabi_fdiv>
 800d3e8:	f1b8 0f00 	cmp.w	r8, #0
 800d3ec:	f6bf ae77 	bge.w	800d0de <__ieee754_powf+0x2a>
 800d3f0:	f1a9 597e 	sub.w	r9, r9, #1065353216	; 0x3f800000
 800d3f4:	ea59 0306 	orrs.w	r3, r9, r6
 800d3f8:	f040 814d 	bne.w	800d696 <__ieee754_powf+0x5e2>
 800d3fc:	4601      	mov	r1, r0
 800d3fe:	f7f3 fb57 	bl	8000ab0 <__aeabi_fsub>
 800d402:	4601      	mov	r1, r0
 800d404:	f7f3 fd12 	bl	8000e2c <__aeabi_fdiv>
 800d408:	e669      	b.n	800d0de <__ieee754_powf+0x2a>
 800d40a:	2000      	movs	r0, #0
 800d40c:	e667      	b.n	800d0de <__ieee754_powf+0x2a>
 800d40e:	2d00      	cmp	r5, #0
 800d410:	dafb      	bge.n	800d40a <__ieee754_powf+0x356>
 800d412:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
 800d416:	e662      	b.n	800d0de <__ieee754_powf+0x2a>
 800d418:	4639      	mov	r1, r7
 800d41a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800d41e:	f7f3 fd05 	bl	8000e2c <__aeabi_fdiv>
 800d422:	e65c      	b.n	800d0de <__ieee754_powf+0x2a>
 800d424:	3f7ffff3 	.word	0x3f7ffff3
 800d428:	3f800007 	.word	0x3f800007
 800d42c:	3fb8aa00 	.word	0x3fb8aa00
 800d430:	36eca570 	.word	0x36eca570
 800d434:	3eaaaaab 	.word	0x3eaaaaab
 800d438:	3fb8aa3b 	.word	0x3fb8aa3b
 800d43c:	bf800000 	.word	0xbf800000
 800d440:	3f317200 	.word	0x3f317200
 800d444:	3f317218 	.word	0x3f317218
 800d448:	35bfbe8c 	.word	0x35bfbe8c
 800d44c:	3331bb4c 	.word	0x3331bb4c
 800d450:	35ddea0e 	.word	0x35ddea0e
 800d454:	388ab355 	.word	0x388ab355
 800d458:	3b360b61 	.word	0x3b360b61
 800d45c:	3e2aaaab 	.word	0x3e2aaaab
 800d460:	b007      	add	sp, #28
 800d462:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d466:	f000 bb2b 	b.w	800dac0 <__ieee754_sqrtf>
 800d46a:	4639      	mov	r1, r7
 800d46c:	4638      	mov	r0, r7
 800d46e:	f7f3 fb1f 	bl	8000ab0 <__aeabi_fsub>
 800d472:	4601      	mov	r1, r0
 800d474:	f7f3 fcda 	bl	8000e2c <__aeabi_fdiv>
 800d478:	e631      	b.n	800d0de <__ieee754_powf+0x2a>
 800d47a:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 800d47e:	f040 814a 	bne.w	800d716 <__ieee754_powf+0x662>
 800d482:	f04f 4197 	mov.w	r1, #1266679808	; 0x4b800000
 800d486:	f7f3 fc1d 	bl	8000cc4 <__aeabi_fmul>
 800d48a:	f06f 0217 	mvn.w	r2, #23
 800d48e:	4681      	mov	r9, r0
 800d490:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800d494:	3b7f      	subs	r3, #127	; 0x7f
 800d496:	189a      	adds	r2, r3, r2
 800d498:	4bae      	ldr	r3, [pc, #696]	; (800d754 <__ieee754_powf+0x6a0>)
 800d49a:	9201      	str	r2, [sp, #4]
 800d49c:	f3c9 0916 	ubfx	r9, r9, #0, #23
 800d4a0:	4599      	cmp	r9, r3
 800d4a2:	f049 587e 	orr.w	r8, r9, #1065353216	; 0x3f800000
 800d4a6:	dd07      	ble.n	800d4b8 <__ieee754_powf+0x404>
 800d4a8:	4bab      	ldr	r3, [pc, #684]	; (800d758 <__ieee754_powf+0x6a4>)
 800d4aa:	4599      	cmp	r9, r3
 800d4ac:	f340 8149 	ble.w	800d742 <__ieee754_powf+0x68e>
 800d4b0:	3201      	adds	r2, #1
 800d4b2:	9201      	str	r2, [sp, #4]
 800d4b4:	f5a8 0800 	sub.w	r8, r8, #8388608	; 0x800000
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	461a      	mov	r2, r3
 800d4bc:	9305      	str	r3, [sp, #20]
 800d4be:	9204      	str	r2, [sp, #16]
 800d4c0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800d4c4:	2700      	movs	r7, #0
 800d4c6:	4619      	mov	r1, r3
 800d4c8:	4640      	mov	r0, r8
 800d4ca:	9302      	str	r3, [sp, #8]
 800d4cc:	f7f3 faf0 	bl	8000ab0 <__aeabi_fsub>
 800d4d0:	9b02      	ldr	r3, [sp, #8]
 800d4d2:	9303      	str	r3, [sp, #12]
 800d4d4:	4619      	mov	r1, r3
 800d4d6:	4682      	mov	sl, r0
 800d4d8:	4640      	mov	r0, r8
 800d4da:	f7f3 faeb 	bl	8000ab4 <__addsf3>
 800d4de:	4601      	mov	r1, r0
 800d4e0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800d4e4:	f7f3 fca2 	bl	8000e2c <__aeabi_fdiv>
 800d4e8:	4601      	mov	r1, r0
 800d4ea:	9002      	str	r0, [sp, #8]
 800d4ec:	4650      	mov	r0, sl
 800d4ee:	f7f3 fbe9 	bl	8000cc4 <__aeabi_fmul>
 800d4f2:	ea4f 0268 	mov.w	r2, r8, asr #1
 800d4f6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800d4fa:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
 800d4fe:	f420 6b7f 	bic.w	fp, r0, #4080	; 0xff0
 800d502:	4417      	add	r7, r2
 800d504:	f02b 0b0f 	bic.w	fp, fp, #15
 800d508:	46c1      	mov	r9, r8
 800d50a:	4639      	mov	r1, r7
 800d50c:	4680      	mov	r8, r0
 800d50e:	4658      	mov	r0, fp
 800d510:	f7f3 fbd8 	bl	8000cc4 <__aeabi_fmul>
 800d514:	4601      	mov	r1, r0
 800d516:	4650      	mov	r0, sl
 800d518:	f7f3 faca 	bl	8000ab0 <__aeabi_fsub>
 800d51c:	9b03      	ldr	r3, [sp, #12]
 800d51e:	4684      	mov	ip, r0
 800d520:	4619      	mov	r1, r3
 800d522:	4638      	mov	r0, r7
 800d524:	4667      	mov	r7, ip
 800d526:	f7f3 fac3 	bl	8000ab0 <__aeabi_fsub>
 800d52a:	4601      	mov	r1, r0
 800d52c:	4648      	mov	r0, r9
 800d52e:	f7f3 fabf 	bl	8000ab0 <__aeabi_fsub>
 800d532:	4659      	mov	r1, fp
 800d534:	f7f3 fbc6 	bl	8000cc4 <__aeabi_fmul>
 800d538:	4601      	mov	r1, r0
 800d53a:	4638      	mov	r0, r7
 800d53c:	f7f3 fab8 	bl	8000ab0 <__aeabi_fsub>
 800d540:	9902      	ldr	r1, [sp, #8]
 800d542:	f7f3 fbbf 	bl	8000cc4 <__aeabi_fmul>
 800d546:	4641      	mov	r1, r8
 800d548:	4681      	mov	r9, r0
 800d54a:	4640      	mov	r0, r8
 800d54c:	f7f3 fbba 	bl	8000cc4 <__aeabi_fmul>
 800d550:	4982      	ldr	r1, [pc, #520]	; (800d75c <__ieee754_powf+0x6a8>)
 800d552:	4607      	mov	r7, r0
 800d554:	f7f3 fbb6 	bl	8000cc4 <__aeabi_fmul>
 800d558:	4981      	ldr	r1, [pc, #516]	; (800d760 <__ieee754_powf+0x6ac>)
 800d55a:	f7f3 faab 	bl	8000ab4 <__addsf3>
 800d55e:	4639      	mov	r1, r7
 800d560:	f7f3 fbb0 	bl	8000cc4 <__aeabi_fmul>
 800d564:	497f      	ldr	r1, [pc, #508]	; (800d764 <__ieee754_powf+0x6b0>)
 800d566:	f7f3 faa5 	bl	8000ab4 <__addsf3>
 800d56a:	4639      	mov	r1, r7
 800d56c:	f7f3 fbaa 	bl	8000cc4 <__aeabi_fmul>
 800d570:	497d      	ldr	r1, [pc, #500]	; (800d768 <__ieee754_powf+0x6b4>)
 800d572:	f7f3 fa9f 	bl	8000ab4 <__addsf3>
 800d576:	4639      	mov	r1, r7
 800d578:	f7f3 fba4 	bl	8000cc4 <__aeabi_fmul>
 800d57c:	497b      	ldr	r1, [pc, #492]	; (800d76c <__ieee754_powf+0x6b8>)
 800d57e:	f7f3 fa99 	bl	8000ab4 <__addsf3>
 800d582:	4639      	mov	r1, r7
 800d584:	f7f3 fb9e 	bl	8000cc4 <__aeabi_fmul>
 800d588:	4979      	ldr	r1, [pc, #484]	; (800d770 <__ieee754_powf+0x6bc>)
 800d58a:	f7f3 fa93 	bl	8000ab4 <__addsf3>
 800d58e:	4639      	mov	r1, r7
 800d590:	4682      	mov	sl, r0
 800d592:	4638      	mov	r0, r7
 800d594:	f7f3 fb96 	bl	8000cc4 <__aeabi_fmul>
 800d598:	4601      	mov	r1, r0
 800d59a:	4650      	mov	r0, sl
 800d59c:	f7f3 fb92 	bl	8000cc4 <__aeabi_fmul>
 800d5a0:	4659      	mov	r1, fp
 800d5a2:	4607      	mov	r7, r0
 800d5a4:	4640      	mov	r0, r8
 800d5a6:	f7f3 fa85 	bl	8000ab4 <__addsf3>
 800d5aa:	4649      	mov	r1, r9
 800d5ac:	f7f3 fb8a 	bl	8000cc4 <__aeabi_fmul>
 800d5b0:	4639      	mov	r1, r7
 800d5b2:	f7f3 fa7f 	bl	8000ab4 <__addsf3>
 800d5b6:	4659      	mov	r1, fp
 800d5b8:	4682      	mov	sl, r0
 800d5ba:	4658      	mov	r0, fp
 800d5bc:	f7f3 fb82 	bl	8000cc4 <__aeabi_fmul>
 800d5c0:	496c      	ldr	r1, [pc, #432]	; (800d774 <__ieee754_powf+0x6c0>)
 800d5c2:	9002      	str	r0, [sp, #8]
 800d5c4:	f7f3 fa76 	bl	8000ab4 <__addsf3>
 800d5c8:	4651      	mov	r1, sl
 800d5ca:	f7f3 fa73 	bl	8000ab4 <__addsf3>
 800d5ce:	f420 677f 	bic.w	r7, r0, #4080	; 0xff0
 800d5d2:	f027 070f 	bic.w	r7, r7, #15
 800d5d6:	4639      	mov	r1, r7
 800d5d8:	4658      	mov	r0, fp
 800d5da:	f7f3 fb73 	bl	8000cc4 <__aeabi_fmul>
 800d5de:	4965      	ldr	r1, [pc, #404]	; (800d774 <__ieee754_powf+0x6c0>)
 800d5e0:	4683      	mov	fp, r0
 800d5e2:	4638      	mov	r0, r7
 800d5e4:	f7f3 fa64 	bl	8000ab0 <__aeabi_fsub>
 800d5e8:	9b02      	ldr	r3, [sp, #8]
 800d5ea:	4619      	mov	r1, r3
 800d5ec:	f7f3 fa60 	bl	8000ab0 <__aeabi_fsub>
 800d5f0:	4601      	mov	r1, r0
 800d5f2:	4650      	mov	r0, sl
 800d5f4:	f7f3 fa5c 	bl	8000ab0 <__aeabi_fsub>
 800d5f8:	4641      	mov	r1, r8
 800d5fa:	f7f3 fb63 	bl	8000cc4 <__aeabi_fmul>
 800d5fe:	4639      	mov	r1, r7
 800d600:	4680      	mov	r8, r0
 800d602:	4648      	mov	r0, r9
 800d604:	f7f3 fb5e 	bl	8000cc4 <__aeabi_fmul>
 800d608:	4601      	mov	r1, r0
 800d60a:	4640      	mov	r0, r8
 800d60c:	f7f3 fa52 	bl	8000ab4 <__addsf3>
 800d610:	4680      	mov	r8, r0
 800d612:	4601      	mov	r1, r0
 800d614:	4658      	mov	r0, fp
 800d616:	f7f3 fa4d 	bl	8000ab4 <__addsf3>
 800d61a:	f420 677f 	bic.w	r7, r0, #4080	; 0xff0
 800d61e:	f027 070f 	bic.w	r7, r7, #15
 800d622:	4955      	ldr	r1, [pc, #340]	; (800d778 <__ieee754_powf+0x6c4>)
 800d624:	4638      	mov	r0, r7
 800d626:	f7f3 fb4d 	bl	8000cc4 <__aeabi_fmul>
 800d62a:	4659      	mov	r1, fp
 800d62c:	4681      	mov	r9, r0
 800d62e:	4638      	mov	r0, r7
 800d630:	f7f3 fa3e 	bl	8000ab0 <__aeabi_fsub>
 800d634:	4601      	mov	r1, r0
 800d636:	4640      	mov	r0, r8
 800d638:	f7f3 fa3a 	bl	8000ab0 <__aeabi_fsub>
 800d63c:	494f      	ldr	r1, [pc, #316]	; (800d77c <__ieee754_powf+0x6c8>)
 800d63e:	f7f3 fb41 	bl	8000cc4 <__aeabi_fmul>
 800d642:	494f      	ldr	r1, [pc, #316]	; (800d780 <__ieee754_powf+0x6cc>)
 800d644:	4680      	mov	r8, r0
 800d646:	4638      	mov	r0, r7
 800d648:	f7f3 fb3c 	bl	8000cc4 <__aeabi_fmul>
 800d64c:	4601      	mov	r1, r0
 800d64e:	4640      	mov	r0, r8
 800d650:	f7f3 fa30 	bl	8000ab4 <__addsf3>
 800d654:	9904      	ldr	r1, [sp, #16]
 800d656:	f7f3 fa2d 	bl	8000ab4 <__addsf3>
 800d65a:	4680      	mov	r8, r0
 800d65c:	9801      	ldr	r0, [sp, #4]
 800d65e:	f7f3 fadd 	bl	8000c1c <__aeabi_i2f>
 800d662:	4641      	mov	r1, r8
 800d664:	4682      	mov	sl, r0
 800d666:	4648      	mov	r0, r9
 800d668:	f7f3 fa24 	bl	8000ab4 <__addsf3>
 800d66c:	f8dd b014 	ldr.w	fp, [sp, #20]
 800d670:	4659      	mov	r1, fp
 800d672:	f7f3 fa1f 	bl	8000ab4 <__addsf3>
 800d676:	4651      	mov	r1, sl
 800d678:	f7f3 fa1c 	bl	8000ab4 <__addsf3>
 800d67c:	f420 677f 	bic.w	r7, r0, #4080	; 0xff0
 800d680:	f027 070f 	bic.w	r7, r7, #15
 800d684:	4651      	mov	r1, sl
 800d686:	4638      	mov	r0, r7
 800d688:	f7f3 fa12 	bl	8000ab0 <__aeabi_fsub>
 800d68c:	4659      	mov	r1, fp
 800d68e:	f7f3 fa0f 	bl	8000ab0 <__aeabi_fsub>
 800d692:	4649      	mov	r1, r9
 800d694:	e5a4      	b.n	800d1e0 <__ieee754_powf+0x12c>
 800d696:	2e01      	cmp	r6, #1
 800d698:	f47f ad21 	bne.w	800d0de <__ieee754_powf+0x2a>
 800d69c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800d6a0:	e51d      	b.n	800d0de <__ieee754_powf+0x2a>
 800d6a2:	f002 0201 	and.w	r2, r2, #1
 800d6a6:	f1c2 0602 	rsb	r6, r2, #2
 800d6aa:	e52d      	b.n	800d108 <__ieee754_powf+0x54>
 800d6ac:	4b35      	ldr	r3, [pc, #212]	; (800d784 <__ieee754_powf+0x6d0>)
 800d6ae:	4598      	cmp	r8, r3
 800d6b0:	f300 8087 	bgt.w	800d7c2 <__ieee754_powf+0x70e>
 800d6b4:	f47f adce 	bne.w	800d254 <__ieee754_powf+0x1a0>
 800d6b8:	4629      	mov	r1, r5
 800d6ba:	f7f3 f9f9 	bl	8000ab0 <__aeabi_fsub>
 800d6be:	4649      	mov	r1, r9
 800d6c0:	f7f3 fcb2 	bl	8001028 <__aeabi_fcmpge>
 800d6c4:	2800      	cmp	r0, #0
 800d6c6:	d17c      	bne.n	800d7c2 <__ieee754_powf+0x70e>
 800d6c8:	ea4f 58e8 	mov.w	r8, r8, asr #23
 800d6cc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d6d0:	f1a8 087e 	sub.w	r8, r8, #126	; 0x7e
 800d6d4:	fa43 f808 	asr.w	r8, r3, r8
 800d6d8:	eb08 0304 	add.w	r3, r8, r4
 800d6dc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d6e0:	4929      	ldr	r1, [pc, #164]	; (800d788 <__ieee754_powf+0x6d4>)
 800d6e2:	f3c3 0716 	ubfx	r7, r3, #0, #23
 800d6e6:	3a7f      	subs	r2, #127	; 0x7f
 800d6e8:	4111      	asrs	r1, r2
 800d6ea:	f447 0700 	orr.w	r7, r7, #8388608	; 0x800000
 800d6ee:	f1c2 0217 	rsb	r2, r2, #23
 800d6f2:	4117      	asrs	r7, r2
 800d6f4:	2c00      	cmp	r4, #0
 800d6f6:	ea23 0101 	bic.w	r1, r3, r1
 800d6fa:	4628      	mov	r0, r5
 800d6fc:	bfb8      	it	lt
 800d6fe:	427f      	neglt	r7, r7
 800d700:	f7f3 f9d6 	bl	8000ab0 <__aeabi_fsub>
 800d704:	4601      	mov	r1, r0
 800d706:	4683      	mov	fp, r0
 800d708:	4648      	mov	r0, r9
 800d70a:	f7f3 f9d3 	bl	8000ab4 <__addsf3>
 800d70e:	ea4f 58c7 	mov.w	r8, r7, lsl #23
 800d712:	4604      	mov	r4, r0
 800d714:	e5a5      	b.n	800d262 <__ieee754_powf+0x1ae>
 800d716:	2200      	movs	r2, #0
 800d718:	e6ba      	b.n	800d490 <__ieee754_powf+0x3dc>
 800d71a:	2d00      	cmp	r5, #0
 800d71c:	db0b      	blt.n	800d736 <__ieee754_powf+0x682>
 800d71e:	2000      	movs	r0, #0
 800d720:	b007      	add	sp, #28
 800d722:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d726:	f000 beed 	b.w	800e504 <__math_uflowf>
 800d72a:	4639      	mov	r1, r7
 800d72c:	f001 f85a 	bl	800e7e4 <scalbnf>
 800d730:	e610      	b.n	800d354 <__ieee754_powf+0x2a0>
 800d732:	2d00      	cmp	r5, #0
 800d734:	ddf3      	ble.n	800d71e <__ieee754_powf+0x66a>
 800d736:	2000      	movs	r0, #0
 800d738:	b007      	add	sp, #28
 800d73a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d73e:	f000 bee5 	b.w	800e50c <__math_oflowf>
 800d742:	4b12      	ldr	r3, [pc, #72]	; (800d78c <__ieee754_powf+0x6d8>)
 800d744:	9305      	str	r3, [sp, #20]
 800d746:	4b12      	ldr	r3, [pc, #72]	; (800d790 <__ieee754_powf+0x6dc>)
 800d748:	9304      	str	r3, [sp, #16]
 800d74a:	f44f 1700 	mov.w	r7, #2097152	; 0x200000
 800d74e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800d752:	e6b8      	b.n	800d4c6 <__ieee754_powf+0x412>
 800d754:	001cc471 	.word	0x001cc471
 800d758:	005db3d6 	.word	0x005db3d6
 800d75c:	3e53f142 	.word	0x3e53f142
 800d760:	3e6c3255 	.word	0x3e6c3255
 800d764:	3e8ba305 	.word	0x3e8ba305
 800d768:	3eaaaaab 	.word	0x3eaaaaab
 800d76c:	3edb6db7 	.word	0x3edb6db7
 800d770:	3f19999a 	.word	0x3f19999a
 800d774:	40400000 	.word	0x40400000
 800d778:	3f763800 	.word	0x3f763800
 800d77c:	3f76384f 	.word	0x3f76384f
 800d780:	369dc3a0 	.word	0x369dc3a0
 800d784:	43160000 	.word	0x43160000
 800d788:	007fffff 	.word	0x007fffff
 800d78c:	3f15c000 	.word	0x3f15c000
 800d790:	35d1cfdc 	.word	0x35d1cfdc
 800d794:	490f      	ldr	r1, [pc, #60]	; (800d7d4 <__ieee754_powf+0x720>)
 800d796:	4648      	mov	r0, r9
 800d798:	f7f3 f98c 	bl	8000ab4 <__addsf3>
 800d79c:	4629      	mov	r1, r5
 800d79e:	4682      	mov	sl, r0
 800d7a0:	4638      	mov	r0, r7
 800d7a2:	f7f3 f985 	bl	8000ab0 <__aeabi_fsub>
 800d7a6:	4601      	mov	r1, r0
 800d7a8:	4650      	mov	r0, sl
 800d7aa:	f7f3 fc47 	bl	800103c <__aeabi_fcmpgt>
 800d7ae:	2800      	cmp	r0, #0
 800d7b0:	d08a      	beq.n	800d6c8 <__ieee754_powf+0x614>
 800d7b2:	2100      	movs	r1, #0
 800d7b4:	4630      	mov	r0, r6
 800d7b6:	f7f3 fc23 	bl	8001000 <__aeabi_fcmplt>
 800d7ba:	3800      	subs	r0, #0
 800d7bc:	bf18      	it	ne
 800d7be:	2001      	movne	r0, #1
 800d7c0:	e7ba      	b.n	800d738 <__ieee754_powf+0x684>
 800d7c2:	2100      	movs	r1, #0
 800d7c4:	4630      	mov	r0, r6
 800d7c6:	f7f3 fc1b 	bl	8001000 <__aeabi_fcmplt>
 800d7ca:	3800      	subs	r0, #0
 800d7cc:	bf18      	it	ne
 800d7ce:	2001      	movne	r0, #1
 800d7d0:	e7a6      	b.n	800d720 <__ieee754_powf+0x66c>
 800d7d2:	bf00      	nop
 800d7d4:	3338aa3c 	.word	0x3338aa3c

0800d7d8 <__ieee754_rem_pio2f>:
 800d7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7dc:	4aab      	ldr	r2, [pc, #684]	; (800da8c <__ieee754_rem_pio2f+0x2b4>)
 800d7de:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800d7e2:	4294      	cmp	r4, r2
 800d7e4:	b089      	sub	sp, #36	; 0x24
 800d7e6:	460d      	mov	r5, r1
 800d7e8:	dd6c      	ble.n	800d8c4 <__ieee754_rem_pio2f+0xec>
 800d7ea:	4aa9      	ldr	r2, [pc, #676]	; (800da90 <__ieee754_rem_pio2f+0x2b8>)
 800d7ec:	4294      	cmp	r4, r2
 800d7ee:	4607      	mov	r7, r0
 800d7f0:	dc1c      	bgt.n	800d82c <__ieee754_rem_pio2f+0x54>
 800d7f2:	2800      	cmp	r0, #0
 800d7f4:	49a7      	ldr	r1, [pc, #668]	; (800da94 <__ieee754_rem_pio2f+0x2bc>)
 800d7f6:	f340 811e 	ble.w	800da36 <__ieee754_rem_pio2f+0x25e>
 800d7fa:	f7f3 f959 	bl	8000ab0 <__aeabi_fsub>
 800d7fe:	4ba6      	ldr	r3, [pc, #664]	; (800da98 <__ieee754_rem_pio2f+0x2c0>)
 800d800:	f024 040f 	bic.w	r4, r4, #15
 800d804:	429c      	cmp	r4, r3
 800d806:	4606      	mov	r6, r0
 800d808:	d06b      	beq.n	800d8e2 <__ieee754_rem_pio2f+0x10a>
 800d80a:	49a4      	ldr	r1, [pc, #656]	; (800da9c <__ieee754_rem_pio2f+0x2c4>)
 800d80c:	f7f3 f950 	bl	8000ab0 <__aeabi_fsub>
 800d810:	4601      	mov	r1, r0
 800d812:	6028      	str	r0, [r5, #0]
 800d814:	4630      	mov	r0, r6
 800d816:	f7f3 f94b 	bl	8000ab0 <__aeabi_fsub>
 800d81a:	49a0      	ldr	r1, [pc, #640]	; (800da9c <__ieee754_rem_pio2f+0x2c4>)
 800d81c:	f7f3 f948 	bl	8000ab0 <__aeabi_fsub>
 800d820:	2601      	movs	r6, #1
 800d822:	6068      	str	r0, [r5, #4]
 800d824:	4630      	mov	r0, r6
 800d826:	b009      	add	sp, #36	; 0x24
 800d828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d82c:	4a9c      	ldr	r2, [pc, #624]	; (800daa0 <__ieee754_rem_pio2f+0x2c8>)
 800d82e:	4294      	cmp	r4, r2
 800d830:	dd6c      	ble.n	800d90c <__ieee754_rem_pio2f+0x134>
 800d832:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800d836:	da4d      	bge.n	800d8d4 <__ieee754_rem_pio2f+0xfc>
 800d838:	15e6      	asrs	r6, r4, #23
 800d83a:	3e86      	subs	r6, #134	; 0x86
 800d83c:	eba4 54c6 	sub.w	r4, r4, r6, lsl #23
 800d840:	4620      	mov	r0, r4
 800d842:	f7f3 fc1b 	bl	800107c <__aeabi_f2iz>
 800d846:	f7f3 f9e9 	bl	8000c1c <__aeabi_i2f>
 800d84a:	4601      	mov	r1, r0
 800d84c:	4620      	mov	r0, r4
 800d84e:	9105      	str	r1, [sp, #20]
 800d850:	f7f3 f92e 	bl	8000ab0 <__aeabi_fsub>
 800d854:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800d858:	f7f3 fa34 	bl	8000cc4 <__aeabi_fmul>
 800d85c:	4680      	mov	r8, r0
 800d85e:	f7f3 fc0d 	bl	800107c <__aeabi_f2iz>
 800d862:	f7f3 f9db 	bl	8000c1c <__aeabi_i2f>
 800d866:	4604      	mov	r4, r0
 800d868:	4621      	mov	r1, r4
 800d86a:	4640      	mov	r0, r8
 800d86c:	9406      	str	r4, [sp, #24]
 800d86e:	f7f3 f91f 	bl	8000ab0 <__aeabi_fsub>
 800d872:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800d876:	f7f3 fa25 	bl	8000cc4 <__aeabi_fmul>
 800d87a:	2100      	movs	r1, #0
 800d87c:	9007      	str	r0, [sp, #28]
 800d87e:	f7f3 fbb5 	bl	8000fec <__aeabi_fcmpeq>
 800d882:	2800      	cmp	r0, #0
 800d884:	f000 80b8 	beq.w	800d9f8 <__ieee754_rem_pio2f+0x220>
 800d888:	2100      	movs	r1, #0
 800d88a:	4620      	mov	r0, r4
 800d88c:	f7f3 fbae 	bl	8000fec <__aeabi_fcmpeq>
 800d890:	2800      	cmp	r0, #0
 800d892:	bf14      	ite	ne
 800d894:	2301      	movne	r3, #1
 800d896:	2302      	moveq	r3, #2
 800d898:	4a82      	ldr	r2, [pc, #520]	; (800daa4 <__ieee754_rem_pio2f+0x2cc>)
 800d89a:	9201      	str	r2, [sp, #4]
 800d89c:	2202      	movs	r2, #2
 800d89e:	9200      	str	r2, [sp, #0]
 800d8a0:	4629      	mov	r1, r5
 800d8a2:	4632      	mov	r2, r6
 800d8a4:	a805      	add	r0, sp, #20
 800d8a6:	f000 fa29 	bl	800dcfc <__kernel_rem_pio2f>
 800d8aa:	2f00      	cmp	r7, #0
 800d8ac:	4606      	mov	r6, r0
 800d8ae:	dab9      	bge.n	800d824 <__ieee754_rem_pio2f+0x4c>
 800d8b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d8b4:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800d8b8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d8bc:	602a      	str	r2, [r5, #0]
 800d8be:	606b      	str	r3, [r5, #4]
 800d8c0:	4246      	negs	r6, r0
 800d8c2:	e7af      	b.n	800d824 <__ieee754_rem_pio2f+0x4c>
 800d8c4:	2600      	movs	r6, #0
 800d8c6:	6028      	str	r0, [r5, #0]
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	4630      	mov	r0, r6
 800d8cc:	604a      	str	r2, [r1, #4]
 800d8ce:	b009      	add	sp, #36	; 0x24
 800d8d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8d4:	4601      	mov	r1, r0
 800d8d6:	f7f3 f8eb 	bl	8000ab0 <__aeabi_fsub>
 800d8da:	2600      	movs	r6, #0
 800d8dc:	6068      	str	r0, [r5, #4]
 800d8de:	6028      	str	r0, [r5, #0]
 800d8e0:	e7a0      	b.n	800d824 <__ieee754_rem_pio2f+0x4c>
 800d8e2:	4971      	ldr	r1, [pc, #452]	; (800daa8 <__ieee754_rem_pio2f+0x2d0>)
 800d8e4:	f7f3 f8e4 	bl	8000ab0 <__aeabi_fsub>
 800d8e8:	4970      	ldr	r1, [pc, #448]	; (800daac <__ieee754_rem_pio2f+0x2d4>)
 800d8ea:	4604      	mov	r4, r0
 800d8ec:	f7f3 f8e0 	bl	8000ab0 <__aeabi_fsub>
 800d8f0:	4601      	mov	r1, r0
 800d8f2:	6028      	str	r0, [r5, #0]
 800d8f4:	4620      	mov	r0, r4
 800d8f6:	f7f3 f8db 	bl	8000ab0 <__aeabi_fsub>
 800d8fa:	496c      	ldr	r1, [pc, #432]	; (800daac <__ieee754_rem_pio2f+0x2d4>)
 800d8fc:	f7f3 f8d8 	bl	8000ab0 <__aeabi_fsub>
 800d900:	2601      	movs	r6, #1
 800d902:	6068      	str	r0, [r5, #4]
 800d904:	4630      	mov	r0, r6
 800d906:	b009      	add	sp, #36	; 0x24
 800d908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d90c:	f000 ff1a 	bl	800e744 <fabsf>
 800d910:	4967      	ldr	r1, [pc, #412]	; (800dab0 <__ieee754_rem_pio2f+0x2d8>)
 800d912:	4680      	mov	r8, r0
 800d914:	f7f3 f9d6 	bl	8000cc4 <__aeabi_fmul>
 800d918:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800d91c:	f7f3 f8ca 	bl	8000ab4 <__addsf3>
 800d920:	f7f3 fbac 	bl	800107c <__aeabi_f2iz>
 800d924:	4606      	mov	r6, r0
 800d926:	f7f3 f979 	bl	8000c1c <__aeabi_i2f>
 800d92a:	495a      	ldr	r1, [pc, #360]	; (800da94 <__ieee754_rem_pio2f+0x2bc>)
 800d92c:	4683      	mov	fp, r0
 800d92e:	f7f3 f9c9 	bl	8000cc4 <__aeabi_fmul>
 800d932:	4601      	mov	r1, r0
 800d934:	4640      	mov	r0, r8
 800d936:	f7f3 f8bb 	bl	8000ab0 <__aeabi_fsub>
 800d93a:	4958      	ldr	r1, [pc, #352]	; (800da9c <__ieee754_rem_pio2f+0x2c4>)
 800d93c:	4682      	mov	sl, r0
 800d93e:	4658      	mov	r0, fp
 800d940:	f7f3 f9c0 	bl	8000cc4 <__aeabi_fmul>
 800d944:	2e1f      	cmp	r6, #31
 800d946:	4681      	mov	r9, r0
 800d948:	4601      	mov	r1, r0
 800d94a:	4650      	mov	r0, sl
 800d94c:	dc20      	bgt.n	800d990 <__ieee754_rem_pio2f+0x1b8>
 800d94e:	1e72      	subs	r2, r6, #1
 800d950:	4b58      	ldr	r3, [pc, #352]	; (800dab4 <__ieee754_rem_pio2f+0x2dc>)
 800d952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d956:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800d95a:	429a      	cmp	r2, r3
 800d95c:	d018      	beq.n	800d990 <__ieee754_rem_pio2f+0x1b8>
 800d95e:	f7f3 f8a7 	bl	8000ab0 <__aeabi_fsub>
 800d962:	4680      	mov	r8, r0
 800d964:	f8c5 8000 	str.w	r8, [r5]
 800d968:	4641      	mov	r1, r8
 800d96a:	4650      	mov	r0, sl
 800d96c:	f7f3 f8a0 	bl	8000ab0 <__aeabi_fsub>
 800d970:	4649      	mov	r1, r9
 800d972:	f7f3 f89d 	bl	8000ab0 <__aeabi_fsub>
 800d976:	2f00      	cmp	r7, #0
 800d978:	6068      	str	r0, [r5, #4]
 800d97a:	f6bf af53 	bge.w	800d824 <__ieee754_rem_pio2f+0x4c>
 800d97e:	f108 4800 	add.w	r8, r8, #2147483648	; 0x80000000
 800d982:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800d986:	f8c5 8000 	str.w	r8, [r5]
 800d98a:	6068      	str	r0, [r5, #4]
 800d98c:	4276      	negs	r6, r6
 800d98e:	e749      	b.n	800d824 <__ieee754_rem_pio2f+0x4c>
 800d990:	f7f3 f88e 	bl	8000ab0 <__aeabi_fsub>
 800d994:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800d998:	ebc3 53d4 	rsb	r3, r3, r4, lsr #23
 800d99c:	2b08      	cmp	r3, #8
 800d99e:	4680      	mov	r8, r0
 800d9a0:	ea4f 52e4 	mov.w	r2, r4, asr #23
 800d9a4:	ddde      	ble.n	800d964 <__ieee754_rem_pio2f+0x18c>
 800d9a6:	4940      	ldr	r1, [pc, #256]	; (800daa8 <__ieee754_rem_pio2f+0x2d0>)
 800d9a8:	9203      	str	r2, [sp, #12]
 800d9aa:	4658      	mov	r0, fp
 800d9ac:	f7f3 f98a 	bl	8000cc4 <__aeabi_fmul>
 800d9b0:	4680      	mov	r8, r0
 800d9b2:	4601      	mov	r1, r0
 800d9b4:	4650      	mov	r0, sl
 800d9b6:	f7f3 f87b 	bl	8000ab0 <__aeabi_fsub>
 800d9ba:	4604      	mov	r4, r0
 800d9bc:	4621      	mov	r1, r4
 800d9be:	4650      	mov	r0, sl
 800d9c0:	f7f3 f876 	bl	8000ab0 <__aeabi_fsub>
 800d9c4:	4641      	mov	r1, r8
 800d9c6:	f7f3 f873 	bl	8000ab0 <__aeabi_fsub>
 800d9ca:	4938      	ldr	r1, [pc, #224]	; (800daac <__ieee754_rem_pio2f+0x2d4>)
 800d9cc:	4680      	mov	r8, r0
 800d9ce:	4658      	mov	r0, fp
 800d9d0:	f7f3 f978 	bl	8000cc4 <__aeabi_fmul>
 800d9d4:	4641      	mov	r1, r8
 800d9d6:	f7f3 f86b 	bl	8000ab0 <__aeabi_fsub>
 800d9da:	4601      	mov	r1, r0
 800d9dc:	4681      	mov	r9, r0
 800d9de:	4620      	mov	r0, r4
 800d9e0:	f7f3 f866 	bl	8000ab0 <__aeabi_fsub>
 800d9e4:	9a03      	ldr	r2, [sp, #12]
 800d9e6:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800d9ea:	1ad2      	subs	r2, r2, r3
 800d9ec:	2a19      	cmp	r2, #25
 800d9ee:	4680      	mov	r8, r0
 800d9f0:	dc04      	bgt.n	800d9fc <__ieee754_rem_pio2f+0x224>
 800d9f2:	6028      	str	r0, [r5, #0]
 800d9f4:	46a2      	mov	sl, r4
 800d9f6:	e7b7      	b.n	800d968 <__ieee754_rem_pio2f+0x190>
 800d9f8:	2303      	movs	r3, #3
 800d9fa:	e74d      	b.n	800d898 <__ieee754_rem_pio2f+0xc0>
 800d9fc:	492e      	ldr	r1, [pc, #184]	; (800dab8 <__ieee754_rem_pio2f+0x2e0>)
 800d9fe:	4658      	mov	r0, fp
 800da00:	f7f3 f960 	bl	8000cc4 <__aeabi_fmul>
 800da04:	4601      	mov	r1, r0
 800da06:	4680      	mov	r8, r0
 800da08:	4620      	mov	r0, r4
 800da0a:	f7f3 f851 	bl	8000ab0 <__aeabi_fsub>
 800da0e:	4682      	mov	sl, r0
 800da10:	4651      	mov	r1, sl
 800da12:	4620      	mov	r0, r4
 800da14:	f7f3 f84c 	bl	8000ab0 <__aeabi_fsub>
 800da18:	4641      	mov	r1, r8
 800da1a:	f7f3 f849 	bl	8000ab0 <__aeabi_fsub>
 800da1e:	4927      	ldr	r1, [pc, #156]	; (800dabc <__ieee754_rem_pio2f+0x2e4>)
 800da20:	4604      	mov	r4, r0
 800da22:	4658      	mov	r0, fp
 800da24:	f7f3 f94e 	bl	8000cc4 <__aeabi_fmul>
 800da28:	4621      	mov	r1, r4
 800da2a:	f7f3 f841 	bl	8000ab0 <__aeabi_fsub>
 800da2e:	4681      	mov	r9, r0
 800da30:	4601      	mov	r1, r0
 800da32:	4650      	mov	r0, sl
 800da34:	e793      	b.n	800d95e <__ieee754_rem_pio2f+0x186>
 800da36:	f7f3 f83d 	bl	8000ab4 <__addsf3>
 800da3a:	4b17      	ldr	r3, [pc, #92]	; (800da98 <__ieee754_rem_pio2f+0x2c0>)
 800da3c:	f024 040f 	bic.w	r4, r4, #15
 800da40:	429c      	cmp	r4, r3
 800da42:	4606      	mov	r6, r0
 800da44:	d00e      	beq.n	800da64 <__ieee754_rem_pio2f+0x28c>
 800da46:	4915      	ldr	r1, [pc, #84]	; (800da9c <__ieee754_rem_pio2f+0x2c4>)
 800da48:	f7f3 f834 	bl	8000ab4 <__addsf3>
 800da4c:	4601      	mov	r1, r0
 800da4e:	6028      	str	r0, [r5, #0]
 800da50:	4630      	mov	r0, r6
 800da52:	f7f3 f82d 	bl	8000ab0 <__aeabi_fsub>
 800da56:	4911      	ldr	r1, [pc, #68]	; (800da9c <__ieee754_rem_pio2f+0x2c4>)
 800da58:	f7f3 f82c 	bl	8000ab4 <__addsf3>
 800da5c:	f04f 36ff 	mov.w	r6, #4294967295
 800da60:	6068      	str	r0, [r5, #4]
 800da62:	e6df      	b.n	800d824 <__ieee754_rem_pio2f+0x4c>
 800da64:	4910      	ldr	r1, [pc, #64]	; (800daa8 <__ieee754_rem_pio2f+0x2d0>)
 800da66:	f7f3 f825 	bl	8000ab4 <__addsf3>
 800da6a:	4910      	ldr	r1, [pc, #64]	; (800daac <__ieee754_rem_pio2f+0x2d4>)
 800da6c:	4604      	mov	r4, r0
 800da6e:	f7f3 f821 	bl	8000ab4 <__addsf3>
 800da72:	4601      	mov	r1, r0
 800da74:	6028      	str	r0, [r5, #0]
 800da76:	4620      	mov	r0, r4
 800da78:	f7f3 f81a 	bl	8000ab0 <__aeabi_fsub>
 800da7c:	490b      	ldr	r1, [pc, #44]	; (800daac <__ieee754_rem_pio2f+0x2d4>)
 800da7e:	f7f3 f819 	bl	8000ab4 <__addsf3>
 800da82:	f04f 36ff 	mov.w	r6, #4294967295
 800da86:	6068      	str	r0, [r5, #4]
 800da88:	e6cc      	b.n	800d824 <__ieee754_rem_pio2f+0x4c>
 800da8a:	bf00      	nop
 800da8c:	3f490fd8 	.word	0x3f490fd8
 800da90:	4016cbe3 	.word	0x4016cbe3
 800da94:	3fc90f80 	.word	0x3fc90f80
 800da98:	3fc90fd0 	.word	0x3fc90fd0
 800da9c:	37354443 	.word	0x37354443
 800daa0:	43490f80 	.word	0x43490f80
 800daa4:	0800f1a0 	.word	0x0800f1a0
 800daa8:	37354400 	.word	0x37354400
 800daac:	2e85a308 	.word	0x2e85a308
 800dab0:	3f22f984 	.word	0x3f22f984
 800dab4:	0800f120 	.word	0x0800f120
 800dab8:	2e85a300 	.word	0x2e85a300
 800dabc:	248d3132 	.word	0x248d3132

0800dac0 <__ieee754_sqrtf>:
 800dac0:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800dac4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800dac8:	b510      	push	{r4, lr}
 800daca:	4604      	mov	r4, r0
 800dacc:	d233      	bcs.n	800db36 <__ieee754_sqrtf+0x76>
 800dace:	b38a      	cbz	r2, 800db34 <__ieee754_sqrtf+0x74>
 800dad0:	2800      	cmp	r0, #0
 800dad2:	4603      	mov	r3, r0
 800dad4:	db41      	blt.n	800db5a <__ieee754_sqrtf+0x9a>
 800dad6:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 800dada:	ea4f 54e0 	mov.w	r4, r0, asr #23
 800dade:	d031      	beq.n	800db44 <__ieee754_sqrtf+0x84>
 800dae0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800dae4:	07e2      	lsls	r2, r4, #31
 800dae6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800daea:	f1a4 007f 	sub.w	r0, r4, #127	; 0x7f
 800daee:	bf58      	it	pl
 800daf0:	005b      	lslpl	r3, r3, #1
 800daf2:	2100      	movs	r1, #0
 800daf4:	1044      	asrs	r4, r0, #1
 800daf6:	005b      	lsls	r3, r3, #1
 800daf8:	f04f 0c19 	mov.w	ip, #25
 800dafc:	4608      	mov	r0, r1
 800dafe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800db02:	eb00 0e02 	add.w	lr, r0, r2
 800db06:	459e      	cmp	lr, r3
 800db08:	dc04      	bgt.n	800db14 <__ieee754_sqrtf+0x54>
 800db0a:	eb0e 0002 	add.w	r0, lr, r2
 800db0e:	eba3 030e 	sub.w	r3, r3, lr
 800db12:	4411      	add	r1, r2
 800db14:	f1bc 0c01 	subs.w	ip, ip, #1
 800db18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800db1c:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800db20:	d1ef      	bne.n	800db02 <__ieee754_sqrtf+0x42>
 800db22:	b113      	cbz	r3, 800db2a <__ieee754_sqrtf+0x6a>
 800db24:	3101      	adds	r1, #1
 800db26:	f021 0101 	bic.w	r1, r1, #1
 800db2a:	1048      	asrs	r0, r1, #1
 800db2c:	f100 507c 	add.w	r0, r0, #1056964608	; 0x3f000000
 800db30:	eb00 50c4 	add.w	r0, r0, r4, lsl #23
 800db34:	bd10      	pop	{r4, pc}
 800db36:	4601      	mov	r1, r0
 800db38:	f7f3 f8c4 	bl	8000cc4 <__aeabi_fmul>
 800db3c:	4621      	mov	r1, r4
 800db3e:	f7f2 ffb9 	bl	8000ab4 <__addsf3>
 800db42:	bd10      	pop	{r4, pc}
 800db44:	f410 0200 	ands.w	r2, r0, #8388608	; 0x800000
 800db48:	d10e      	bne.n	800db68 <__ieee754_sqrtf+0xa8>
 800db4a:	005b      	lsls	r3, r3, #1
 800db4c:	0218      	lsls	r0, r3, #8
 800db4e:	4611      	mov	r1, r2
 800db50:	f102 0201 	add.w	r2, r2, #1
 800db54:	d5f9      	bpl.n	800db4a <__ieee754_sqrtf+0x8a>
 800db56:	1a64      	subs	r4, r4, r1
 800db58:	e7c2      	b.n	800dae0 <__ieee754_sqrtf+0x20>
 800db5a:	4601      	mov	r1, r0
 800db5c:	f7f2 ffa8 	bl	8000ab0 <__aeabi_fsub>
 800db60:	4601      	mov	r1, r0
 800db62:	f7f3 f963 	bl	8000e2c <__aeabi_fdiv>
 800db66:	bd10      	pop	{r4, pc}
 800db68:	f04f 31ff 	mov.w	r1, #4294967295
 800db6c:	e7f3      	b.n	800db56 <__ieee754_sqrtf+0x96>
 800db6e:	bf00      	nop

0800db70 <__kernel_cosf>:
 800db70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db74:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800db78:	f1b5 5f48 	cmp.w	r5, #838860800	; 0x32000000
 800db7c:	4606      	mov	r6, r0
 800db7e:	4688      	mov	r8, r1
 800db80:	da4a      	bge.n	800dc18 <__kernel_cosf+0xa8>
 800db82:	f7f3 fa7b 	bl	800107c <__aeabi_f2iz>
 800db86:	2800      	cmp	r0, #0
 800db88:	f000 809f 	beq.w	800dcca <__kernel_cosf+0x15a>
 800db8c:	4631      	mov	r1, r6
 800db8e:	4630      	mov	r0, r6
 800db90:	f7f3 f898 	bl	8000cc4 <__aeabi_fmul>
 800db94:	494f      	ldr	r1, [pc, #316]	; (800dcd4 <__kernel_cosf+0x164>)
 800db96:	4604      	mov	r4, r0
 800db98:	f7f3 f894 	bl	8000cc4 <__aeabi_fmul>
 800db9c:	494e      	ldr	r1, [pc, #312]	; (800dcd8 <__kernel_cosf+0x168>)
 800db9e:	f7f2 ff89 	bl	8000ab4 <__addsf3>
 800dba2:	4621      	mov	r1, r4
 800dba4:	f7f3 f88e 	bl	8000cc4 <__aeabi_fmul>
 800dba8:	494c      	ldr	r1, [pc, #304]	; (800dcdc <__kernel_cosf+0x16c>)
 800dbaa:	f7f2 ff81 	bl	8000ab0 <__aeabi_fsub>
 800dbae:	4621      	mov	r1, r4
 800dbb0:	f7f3 f888 	bl	8000cc4 <__aeabi_fmul>
 800dbb4:	494a      	ldr	r1, [pc, #296]	; (800dce0 <__kernel_cosf+0x170>)
 800dbb6:	f7f2 ff7d 	bl	8000ab4 <__addsf3>
 800dbba:	4621      	mov	r1, r4
 800dbbc:	f7f3 f882 	bl	8000cc4 <__aeabi_fmul>
 800dbc0:	4948      	ldr	r1, [pc, #288]	; (800dce4 <__kernel_cosf+0x174>)
 800dbc2:	f7f2 ff75 	bl	8000ab0 <__aeabi_fsub>
 800dbc6:	4621      	mov	r1, r4
 800dbc8:	f7f3 f87c 	bl	8000cc4 <__aeabi_fmul>
 800dbcc:	4946      	ldr	r1, [pc, #280]	; (800dce8 <__kernel_cosf+0x178>)
 800dbce:	f7f2 ff71 	bl	8000ab4 <__addsf3>
 800dbd2:	4621      	mov	r1, r4
 800dbd4:	f7f3 f876 	bl	8000cc4 <__aeabi_fmul>
 800dbd8:	4607      	mov	r7, r0
 800dbda:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800dbde:	4620      	mov	r0, r4
 800dbe0:	f7f3 f870 	bl	8000cc4 <__aeabi_fmul>
 800dbe4:	4639      	mov	r1, r7
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	4620      	mov	r0, r4
 800dbea:	461c      	mov	r4, r3
 800dbec:	f7f3 f86a 	bl	8000cc4 <__aeabi_fmul>
 800dbf0:	4641      	mov	r1, r8
 800dbf2:	4605      	mov	r5, r0
 800dbf4:	4630      	mov	r0, r6
 800dbf6:	f7f3 f865 	bl	8000cc4 <__aeabi_fmul>
 800dbfa:	4601      	mov	r1, r0
 800dbfc:	4628      	mov	r0, r5
 800dbfe:	f7f2 ff57 	bl	8000ab0 <__aeabi_fsub>
 800dc02:	4601      	mov	r1, r0
 800dc04:	4620      	mov	r0, r4
 800dc06:	f7f2 ff53 	bl	8000ab0 <__aeabi_fsub>
 800dc0a:	4601      	mov	r1, r0
 800dc0c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800dc10:	f7f2 ff4e 	bl	8000ab0 <__aeabi_fsub>
 800dc14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc18:	4601      	mov	r1, r0
 800dc1a:	f7f3 f853 	bl	8000cc4 <__aeabi_fmul>
 800dc1e:	492d      	ldr	r1, [pc, #180]	; (800dcd4 <__kernel_cosf+0x164>)
 800dc20:	4604      	mov	r4, r0
 800dc22:	f7f3 f84f 	bl	8000cc4 <__aeabi_fmul>
 800dc26:	492c      	ldr	r1, [pc, #176]	; (800dcd8 <__kernel_cosf+0x168>)
 800dc28:	f7f2 ff44 	bl	8000ab4 <__addsf3>
 800dc2c:	4621      	mov	r1, r4
 800dc2e:	f7f3 f849 	bl	8000cc4 <__aeabi_fmul>
 800dc32:	492a      	ldr	r1, [pc, #168]	; (800dcdc <__kernel_cosf+0x16c>)
 800dc34:	f7f2 ff3c 	bl	8000ab0 <__aeabi_fsub>
 800dc38:	4621      	mov	r1, r4
 800dc3a:	f7f3 f843 	bl	8000cc4 <__aeabi_fmul>
 800dc3e:	4928      	ldr	r1, [pc, #160]	; (800dce0 <__kernel_cosf+0x170>)
 800dc40:	f7f2 ff38 	bl	8000ab4 <__addsf3>
 800dc44:	4621      	mov	r1, r4
 800dc46:	f7f3 f83d 	bl	8000cc4 <__aeabi_fmul>
 800dc4a:	4926      	ldr	r1, [pc, #152]	; (800dce4 <__kernel_cosf+0x174>)
 800dc4c:	f7f2 ff30 	bl	8000ab0 <__aeabi_fsub>
 800dc50:	4621      	mov	r1, r4
 800dc52:	f7f3 f837 	bl	8000cc4 <__aeabi_fmul>
 800dc56:	4924      	ldr	r1, [pc, #144]	; (800dce8 <__kernel_cosf+0x178>)
 800dc58:	f7f2 ff2c 	bl	8000ab4 <__addsf3>
 800dc5c:	4621      	mov	r1, r4
 800dc5e:	f7f3 f831 	bl	8000cc4 <__aeabi_fmul>
 800dc62:	4b22      	ldr	r3, [pc, #136]	; (800dcec <__kernel_cosf+0x17c>)
 800dc64:	429d      	cmp	r5, r3
 800dc66:	4607      	mov	r7, r0
 800dc68:	ddb7      	ble.n	800dbda <__kernel_cosf+0x6a>
 800dc6a:	4b21      	ldr	r3, [pc, #132]	; (800dcf0 <__kernel_cosf+0x180>)
 800dc6c:	429d      	cmp	r5, r3
 800dc6e:	dc28      	bgt.n	800dcc2 <__kernel_cosf+0x152>
 800dc70:	f105 457f 	add.w	r5, r5, #4278190080	; 0xff000000
 800dc74:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800dc78:	4629      	mov	r1, r5
 800dc7a:	f7f2 ff19 	bl	8000ab0 <__aeabi_fsub>
 800dc7e:	4681      	mov	r9, r0
 800dc80:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800dc84:	4620      	mov	r0, r4
 800dc86:	f7f3 f81d 	bl	8000cc4 <__aeabi_fmul>
 800dc8a:	4629      	mov	r1, r5
 800dc8c:	f7f2 ff10 	bl	8000ab0 <__aeabi_fsub>
 800dc90:	4639      	mov	r1, r7
 800dc92:	4603      	mov	r3, r0
 800dc94:	4620      	mov	r0, r4
 800dc96:	461c      	mov	r4, r3
 800dc98:	f7f3 f814 	bl	8000cc4 <__aeabi_fmul>
 800dc9c:	4641      	mov	r1, r8
 800dc9e:	4605      	mov	r5, r0
 800dca0:	4630      	mov	r0, r6
 800dca2:	f7f3 f80f 	bl	8000cc4 <__aeabi_fmul>
 800dca6:	4601      	mov	r1, r0
 800dca8:	4628      	mov	r0, r5
 800dcaa:	f7f2 ff01 	bl	8000ab0 <__aeabi_fsub>
 800dcae:	4601      	mov	r1, r0
 800dcb0:	4620      	mov	r0, r4
 800dcb2:	f7f2 fefd 	bl	8000ab0 <__aeabi_fsub>
 800dcb6:	4601      	mov	r1, r0
 800dcb8:	4648      	mov	r0, r9
 800dcba:	f7f2 fef9 	bl	8000ab0 <__aeabi_fsub>
 800dcbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dcc2:	f8df 9030 	ldr.w	r9, [pc, #48]	; 800dcf4 <__kernel_cosf+0x184>
 800dcc6:	4d0c      	ldr	r5, [pc, #48]	; (800dcf8 <__kernel_cosf+0x188>)
 800dcc8:	e7da      	b.n	800dc80 <__kernel_cosf+0x110>
 800dcca:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800dcce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dcd2:	bf00      	nop
 800dcd4:	ad47d74e 	.word	0xad47d74e
 800dcd8:	310f74f6 	.word	0x310f74f6
 800dcdc:	3493f27c 	.word	0x3493f27c
 800dce0:	37d00d01 	.word	0x37d00d01
 800dce4:	3ab60b61 	.word	0x3ab60b61
 800dce8:	3d2aaaab 	.word	0x3d2aaaab
 800dcec:	3e999999 	.word	0x3e999999
 800dcf0:	3f480000 	.word	0x3f480000
 800dcf4:	3f380000 	.word	0x3f380000
 800dcf8:	3e900000 	.word	0x3e900000

0800dcfc <__kernel_rem_pio2f>:
 800dcfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd00:	b0dd      	sub	sp, #372	; 0x174
 800dd02:	461c      	mov	r4, r3
 800dd04:	9306      	str	r3, [sp, #24]
 800dd06:	9109      	str	r1, [sp, #36]	; 0x24
 800dd08:	4ba6      	ldr	r3, [pc, #664]	; (800dfa4 <__kernel_rem_pio2f+0x2a8>)
 800dd0a:	9966      	ldr	r1, [sp, #408]	; 0x198
 800dd0c:	920b      	str	r2, [sp, #44]	; 0x2c
 800dd0e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dd12:	9303      	str	r3, [sp, #12]
 800dd14:	1d11      	adds	r1, r2, #4
 800dd16:	f104 33ff 	add.w	r3, r4, #4294967295
 800dd1a:	4605      	mov	r5, r0
 800dd1c:	9301      	str	r3, [sp, #4]
 800dd1e:	f2c0 82ee 	blt.w	800e2fe <__kernel_rem_pio2f+0x602>
 800dd22:	1ed3      	subs	r3, r2, #3
 800dd24:	bf48      	it	mi
 800dd26:	1d13      	addmi	r3, r2, #4
 800dd28:	10db      	asrs	r3, r3, #3
 800dd2a:	9305      	str	r3, [sp, #20]
 800dd2c:	3301      	adds	r3, #1
 800dd2e:	00db      	lsls	r3, r3, #3
 800dd30:	930a      	str	r3, [sp, #40]	; 0x28
 800dd32:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800dd36:	1a9b      	subs	r3, r3, r2
 800dd38:	9304      	str	r3, [sp, #16]
 800dd3a:	9a05      	ldr	r2, [sp, #20]
 800dd3c:	9b01      	ldr	r3, [sp, #4]
 800dd3e:	1ad6      	subs	r6, r2, r3
 800dd40:	9a03      	ldr	r2, [sp, #12]
 800dd42:	eb12 0803 	adds.w	r8, r2, r3
 800dd46:	d418      	bmi.n	800dd7a <__kernel_rem_pio2f+0x7e>
 800dd48:	f108 0801 	add.w	r8, r8, #1
 800dd4c:	f8dd 919c 	ldr.w	r9, [sp, #412]	; 0x19c
 800dd50:	44b0      	add	r8, r6
 800dd52:	2400      	movs	r4, #0
 800dd54:	af20      	add	r7, sp, #128	; 0x80
 800dd56:	e008      	b.n	800dd6a <__kernel_rem_pio2f+0x6e>
 800dd58:	f859 0026 	ldr.w	r0, [r9, r6, lsl #2]
 800dd5c:	f7f2 ff5e 	bl	8000c1c <__aeabi_i2f>
 800dd60:	3601      	adds	r6, #1
 800dd62:	4546      	cmp	r6, r8
 800dd64:	f847 0b04 	str.w	r0, [r7], #4
 800dd68:	d007      	beq.n	800dd7a <__kernel_rem_pio2f+0x7e>
 800dd6a:	2e00      	cmp	r6, #0
 800dd6c:	daf4      	bge.n	800dd58 <__kernel_rem_pio2f+0x5c>
 800dd6e:	3601      	adds	r6, #1
 800dd70:	4620      	mov	r0, r4
 800dd72:	4546      	cmp	r6, r8
 800dd74:	f847 0b04 	str.w	r0, [r7], #4
 800dd78:	d1f7      	bne.n	800dd6a <__kernel_rem_pio2f+0x6e>
 800dd7a:	9b03      	ldr	r3, [sp, #12]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	f2c0 8312 	blt.w	800e3a6 <__kernel_rem_pio2f+0x6aa>
 800dd82:	9b06      	ldr	r3, [sp, #24]
 800dd84:	9e01      	ldr	r6, [sp, #4]
 800dd86:	aa20      	add	r2, sp, #128	; 0x80
 800dd88:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 800dd8c:	009a      	lsls	r2, r3, #2
 800dd8e:	9200      	str	r2, [sp, #0]
 800dd90:	9a03      	ldr	r2, [sp, #12]
 800dd92:	1f29      	subs	r1, r5, #4
 800dd94:	9102      	str	r1, [sp, #8]
 800dd96:	f50d 7890 	add.w	r8, sp, #288	; 0x120
 800dd9a:	eb02 0903 	add.w	r9, r2, r3
 800dd9e:	eb01 0583 	add.w	r5, r1, r3, lsl #2
 800dda2:	9b01      	ldr	r3, [sp, #4]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	bfb8      	it	lt
 800dda8:	2400      	movlt	r4, #0
 800ddaa:	db10      	blt.n	800ddce <__kernel_rem_pio2f+0xd2>
 800ddac:	f8dd a008 	ldr.w	sl, [sp, #8]
 800ddb0:	46bb      	mov	fp, r7
 800ddb2:	2400      	movs	r4, #0
 800ddb4:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
 800ddb8:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 800ddbc:	f7f2 ff82 	bl	8000cc4 <__aeabi_fmul>
 800ddc0:	4601      	mov	r1, r0
 800ddc2:	4620      	mov	r0, r4
 800ddc4:	f7f2 fe76 	bl	8000ab4 <__addsf3>
 800ddc8:	45aa      	cmp	sl, r5
 800ddca:	4604      	mov	r4, r0
 800ddcc:	d1f2      	bne.n	800ddb4 <__kernel_rem_pio2f+0xb8>
 800ddce:	3601      	adds	r6, #1
 800ddd0:	454e      	cmp	r6, r9
 800ddd2:	f848 4b04 	str.w	r4, [r8], #4
 800ddd6:	f107 0704 	add.w	r7, r7, #4
 800ddda:	d1e2      	bne.n	800dda2 <__kernel_rem_pio2f+0xa6>
 800dddc:	9b02      	ldr	r3, [sp, #8]
 800ddde:	9d00      	ldr	r5, [sp, #0]
 800dde0:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800dde4:	441d      	add	r5, r3
 800dde6:	ab0b      	add	r3, sp, #44	; 0x2c
 800dde8:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800ddec:	9308      	str	r3, [sp, #32]
 800ddee:	ab0c      	add	r3, sp, #48	; 0x30
 800ddf0:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800ddf4:	3b08      	subs	r3, #8
 800ddf6:	9307      	str	r3, [sp, #28]
 800ddf8:	ab5c      	add	r3, sp, #368	; 0x170
 800ddfa:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800ddfe:	f1b9 0f00 	cmp.w	r9, #0
 800de02:	f853 ac50 	ldr.w	sl, [r3, #-80]
 800de06:	ea4f 0889 	mov.w	r8, r9, lsl #2
 800de0a:	dd21      	ble.n	800de50 <__kernel_rem_pio2f+0x154>
 800de0c:	af48      	add	r7, sp, #288	; 0x120
 800de0e:	eb07 0489 	add.w	r4, r7, r9, lsl #2
 800de12:	ae0c      	add	r6, sp, #48	; 0x30
 800de14:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800de18:	4650      	mov	r0, sl
 800de1a:	f7f2 ff53 	bl	8000cc4 <__aeabi_fmul>
 800de1e:	f7f3 f92d 	bl	800107c <__aeabi_f2iz>
 800de22:	f7f2 fefb 	bl	8000c1c <__aeabi_i2f>
 800de26:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800de2a:	4683      	mov	fp, r0
 800de2c:	f7f2 ff4a 	bl	8000cc4 <__aeabi_fmul>
 800de30:	4601      	mov	r1, r0
 800de32:	4650      	mov	r0, sl
 800de34:	f7f2 fe3c 	bl	8000ab0 <__aeabi_fsub>
 800de38:	f7f3 f920 	bl	800107c <__aeabi_f2iz>
 800de3c:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 800de40:	f846 0b04 	str.w	r0, [r6], #4
 800de44:	4658      	mov	r0, fp
 800de46:	f7f2 fe35 	bl	8000ab4 <__addsf3>
 800de4a:	42bc      	cmp	r4, r7
 800de4c:	4682      	mov	sl, r0
 800de4e:	d1e1      	bne.n	800de14 <__kernel_rem_pio2f+0x118>
 800de50:	9e04      	ldr	r6, [sp, #16]
 800de52:	4650      	mov	r0, sl
 800de54:	4631      	mov	r1, r6
 800de56:	f000 fcc5 	bl	800e7e4 <scalbnf>
 800de5a:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800de5e:	4604      	mov	r4, r0
 800de60:	f7f2 ff30 	bl	8000cc4 <__aeabi_fmul>
 800de64:	f000 fc7a 	bl	800e75c <floorf>
 800de68:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800de6c:	f7f2 ff2a 	bl	8000cc4 <__aeabi_fmul>
 800de70:	4601      	mov	r1, r0
 800de72:	4620      	mov	r0, r4
 800de74:	f7f2 fe1c 	bl	8000ab0 <__aeabi_fsub>
 800de78:	4604      	mov	r4, r0
 800de7a:	f7f3 f8ff 	bl	800107c <__aeabi_f2iz>
 800de7e:	4682      	mov	sl, r0
 800de80:	f7f2 fecc 	bl	8000c1c <__aeabi_i2f>
 800de84:	4601      	mov	r1, r0
 800de86:	4620      	mov	r0, r4
 800de88:	f7f2 fe12 	bl	8000ab0 <__aeabi_fsub>
 800de8c:	2e00      	cmp	r6, #0
 800de8e:	4604      	mov	r4, r0
 800de90:	f340 808a 	ble.w	800dfa8 <__kernel_rem_pio2f+0x2ac>
 800de94:	f109 30ff 	add.w	r0, r9, #4294967295
 800de98:	aa0c      	add	r2, sp, #48	; 0x30
 800de9a:	f1c6 0308 	rsb	r3, r6, #8
 800de9e:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 800dea2:	fa42 f103 	asr.w	r1, r2, r3
 800dea6:	fa01 f303 	lsl.w	r3, r1, r3
 800deaa:	1ad3      	subs	r3, r2, r3
 800deac:	f1c6 0607 	rsb	r6, r6, #7
 800deb0:	aa0c      	add	r2, sp, #48	; 0x30
 800deb2:	fa43 f606 	asr.w	r6, r3, r6
 800deb6:	2e00      	cmp	r6, #0
 800deb8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800debc:	448a      	add	sl, r1
 800debe:	dc7d      	bgt.n	800dfbc <__kernel_rem_pio2f+0x2c0>
 800dec0:	2100      	movs	r1, #0
 800dec2:	4620      	mov	r0, r4
 800dec4:	f7f3 f892 	bl	8000fec <__aeabi_fcmpeq>
 800dec8:	2800      	cmp	r0, #0
 800deca:	f000 80ce 	beq.w	800e06a <__kernel_rem_pio2f+0x36e>
 800dece:	9b03      	ldr	r3, [sp, #12]
 800ded0:	f109 34ff 	add.w	r4, r9, #4294967295
 800ded4:	42a3      	cmp	r3, r4
 800ded6:	dc10      	bgt.n	800defa <__kernel_rem_pio2f+0x1fe>
 800ded8:	f109 4380 	add.w	r3, r9, #1073741824	; 0x40000000
 800dedc:	aa0c      	add	r2, sp, #48	; 0x30
 800dede:	3b01      	subs	r3, #1
 800dee0:	9808      	ldr	r0, [sp, #32]
 800dee2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dee6:	2200      	movs	r2, #0
 800dee8:	f853 1904 	ldr.w	r1, [r3], #-4
 800deec:	4283      	cmp	r3, r0
 800deee:	ea42 0201 	orr.w	r2, r2, r1
 800def2:	d1f9      	bne.n	800dee8 <__kernel_rem_pio2f+0x1ec>
 800def4:	2a00      	cmp	r2, #0
 800def6:	f040 8110 	bne.w	800e11a <__kernel_rem_pio2f+0x41e>
 800defa:	9b03      	ldr	r3, [sp, #12]
 800defc:	aa0c      	add	r2, sp, #48	; 0x30
 800defe:	3b01      	subs	r3, #1
 800df00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df04:	2b00      	cmp	r3, #0
 800df06:	f040 8102 	bne.w	800e10e <__kernel_rem_pio2f+0x412>
 800df0a:	9b07      	ldr	r3, [sp, #28]
 800df0c:	2701      	movs	r7, #1
 800df0e:	f853 2904 	ldr.w	r2, [r3], #-4
 800df12:	3701      	adds	r7, #1
 800df14:	2a00      	cmp	r2, #0
 800df16:	d0fa      	beq.n	800df0e <__kernel_rem_pio2f+0x212>
 800df18:	eb09 0307 	add.w	r3, r9, r7
 800df1c:	f109 0a01 	add.w	sl, r9, #1
 800df20:	9300      	str	r3, [sp, #0]
 800df22:	46d0      	mov	r8, sl
 800df24:	9b06      	ldr	r3, [sp, #24]
 800df26:	9a67      	ldr	r2, [sp, #412]	; 0x19c
 800df28:	eb03 0609 	add.w	r6, r3, r9
 800df2c:	9b05      	ldr	r3, [sp, #20]
 800df2e:	4453      	add	r3, sl
 800df30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800df34:	3b01      	subs	r3, #1
 800df36:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 800df3a:	ab20      	add	r3, sp, #128	; 0x80
 800df3c:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 800df40:	ab48      	add	r3, sp, #288	; 0x120
 800df42:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 800df46:	f859 0f04 	ldr.w	r0, [r9, #4]!
 800df4a:	f7f2 fe67 	bl	8000c1c <__aeabi_i2f>
 800df4e:	9b01      	ldr	r3, [sp, #4]
 800df50:	6030      	str	r0, [r6, #0]
 800df52:	2b00      	cmp	r3, #0
 800df54:	4634      	mov	r4, r6
 800df56:	f106 0604 	add.w	r6, r6, #4
 800df5a:	db1a      	blt.n	800df92 <__kernel_rem_pio2f+0x296>
 800df5c:	f8dd b008 	ldr.w	fp, [sp, #8]
 800df60:	3c04      	subs	r4, #4
 800df62:	2700      	movs	r7, #0
 800df64:	e001      	b.n	800df6a <__kernel_rem_pio2f+0x26e>
 800df66:	f854 0904 	ldr.w	r0, [r4], #-4
 800df6a:	f85b 1f04 	ldr.w	r1, [fp, #4]!
 800df6e:	f7f2 fea9 	bl	8000cc4 <__aeabi_fmul>
 800df72:	4601      	mov	r1, r0
 800df74:	4638      	mov	r0, r7
 800df76:	f7f2 fd9d 	bl	8000ab4 <__addsf3>
 800df7a:	45ab      	cmp	fp, r5
 800df7c:	4607      	mov	r7, r0
 800df7e:	d1f2      	bne.n	800df66 <__kernel_rem_pio2f+0x26a>
 800df80:	9b00      	ldr	r3, [sp, #0]
 800df82:	f84a 7b04 	str.w	r7, [sl], #4
 800df86:	f108 0801 	add.w	r8, r8, #1
 800df8a:	4598      	cmp	r8, r3
 800df8c:	dddb      	ble.n	800df46 <__kernel_rem_pio2f+0x24a>
 800df8e:	4699      	mov	r9, r3
 800df90:	e732      	b.n	800ddf8 <__kernel_rem_pio2f+0xfc>
 800df92:	9b00      	ldr	r3, [sp, #0]
 800df94:	f108 0801 	add.w	r8, r8, #1
 800df98:	2700      	movs	r7, #0
 800df9a:	4598      	cmp	r8, r3
 800df9c:	f84a 7b04 	str.w	r7, [sl], #4
 800dfa0:	ddd1      	ble.n	800df46 <__kernel_rem_pio2f+0x24a>
 800dfa2:	e7f4      	b.n	800df8e <__kernel_rem_pio2f+0x292>
 800dfa4:	0800f4e4 	.word	0x0800f4e4
 800dfa8:	f040 8099 	bne.w	800e0de <__kernel_rem_pio2f+0x3e2>
 800dfac:	f109 33ff 	add.w	r3, r9, #4294967295
 800dfb0:	aa0c      	add	r2, sp, #48	; 0x30
 800dfb2:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 800dfb6:	11f6      	asrs	r6, r6, #7
 800dfb8:	2e00      	cmp	r6, #0
 800dfba:	dd81      	ble.n	800dec0 <__kernel_rem_pio2f+0x1c4>
 800dfbc:	f1b9 0f00 	cmp.w	r9, #0
 800dfc0:	f10a 0a01 	add.w	sl, sl, #1
 800dfc4:	f340 81a0 	ble.w	800e308 <__kernel_rem_pio2f+0x60c>
 800dfc8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800dfca:	2f00      	cmp	r7, #0
 800dfcc:	d17f      	bne.n	800e0ce <__kernel_rem_pio2f+0x3d2>
 800dfce:	f1b9 0f01 	cmp.w	r9, #1
 800dfd2:	d01b      	beq.n	800e00c <__kernel_rem_pio2f+0x310>
 800dfd4:	ab0c      	add	r3, sp, #48	; 0x30
 800dfd6:	2201      	movs	r2, #1
 800dfd8:	f853 7f04 	ldr.w	r7, [r3, #4]!
 800dfdc:	2f00      	cmp	r7, #0
 800dfde:	d079      	beq.n	800e0d4 <__kernel_rem_pio2f+0x3d8>
 800dfe0:	1c53      	adds	r3, r2, #1
 800dfe2:	a90c      	add	r1, sp, #48	; 0x30
 800dfe4:	f5c7 7780 	rsb	r7, r7, #256	; 0x100
 800dfe8:	4599      	cmp	r9, r3
 800dfea:	f841 7022 	str.w	r7, [r1, r2, lsl #2]
 800dfee:	dd0c      	ble.n	800e00a <__kernel_rem_pio2f+0x30e>
 800dff0:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800dff4:	4488      	add	r8, r1
 800dff6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800dffa:	e000      	b.n	800dffe <__kernel_rem_pio2f+0x302>
 800dffc:	681a      	ldr	r2, [r3, #0]
 800dffe:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 800e002:	f843 2b04 	str.w	r2, [r3], #4
 800e006:	4543      	cmp	r3, r8
 800e008:	d1f8      	bne.n	800dffc <__kernel_rem_pio2f+0x300>
 800e00a:	2701      	movs	r7, #1
 800e00c:	9b04      	ldr	r3, [sp, #16]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	dd0e      	ble.n	800e030 <__kernel_rem_pio2f+0x334>
 800e012:	2b01      	cmp	r3, #1
 800e014:	f000 8168 	beq.w	800e2e8 <__kernel_rem_pio2f+0x5ec>
 800e018:	2b02      	cmp	r3, #2
 800e01a:	d109      	bne.n	800e030 <__kernel_rem_pio2f+0x334>
 800e01c:	f109 32ff 	add.w	r2, r9, #4294967295
 800e020:	ab0c      	add	r3, sp, #48	; 0x30
 800e022:	a90c      	add	r1, sp, #48	; 0x30
 800e024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e028:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e02c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e030:	2e02      	cmp	r6, #2
 800e032:	f47f af45 	bne.w	800dec0 <__kernel_rem_pio2f+0x1c4>
 800e036:	4621      	mov	r1, r4
 800e038:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e03c:	f7f2 fd38 	bl	8000ab0 <__aeabi_fsub>
 800e040:	4604      	mov	r4, r0
 800e042:	2f00      	cmp	r7, #0
 800e044:	f43f af3c 	beq.w	800dec0 <__kernel_rem_pio2f+0x1c4>
 800e048:	9904      	ldr	r1, [sp, #16]
 800e04a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e04e:	f000 fbc9 	bl	800e7e4 <scalbnf>
 800e052:	4601      	mov	r1, r0
 800e054:	4620      	mov	r0, r4
 800e056:	f7f2 fd2b 	bl	8000ab0 <__aeabi_fsub>
 800e05a:	4604      	mov	r4, r0
 800e05c:	2100      	movs	r1, #0
 800e05e:	4620      	mov	r0, r4
 800e060:	f7f2 ffc4 	bl	8000fec <__aeabi_fcmpeq>
 800e064:	2800      	cmp	r0, #0
 800e066:	f47f af32 	bne.w	800dece <__kernel_rem_pio2f+0x1d2>
 800e06a:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
 800e06e:	4620      	mov	r0, r4
 800e070:	1a99      	subs	r1, r3, r2
 800e072:	9600      	str	r6, [sp, #0]
 800e074:	f000 fbb6 	bl	800e7e4 <scalbnf>
 800e078:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800e07c:	4604      	mov	r4, r0
 800e07e:	f7f2 ffd3 	bl	8001028 <__aeabi_fcmpge>
 800e082:	2800      	cmp	r0, #0
 800e084:	f000 816b 	beq.w	800e35e <__kernel_rem_pio2f+0x662>
 800e088:	9b04      	ldr	r3, [sp, #16]
 800e08a:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800e08e:	3308      	adds	r3, #8
 800e090:	4620      	mov	r0, r4
 800e092:	9304      	str	r3, [sp, #16]
 800e094:	f7f2 fe16 	bl	8000cc4 <__aeabi_fmul>
 800e098:	f7f2 fff0 	bl	800107c <__aeabi_f2iz>
 800e09c:	f7f2 fdbe 	bl	8000c1c <__aeabi_i2f>
 800e0a0:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800e0a4:	4605      	mov	r5, r0
 800e0a6:	f7f2 fe0d 	bl	8000cc4 <__aeabi_fmul>
 800e0aa:	4601      	mov	r1, r0
 800e0ac:	4620      	mov	r0, r4
 800e0ae:	f7f2 fcff 	bl	8000ab0 <__aeabi_fsub>
 800e0b2:	f7f2 ffe3 	bl	800107c <__aeabi_f2iz>
 800e0b6:	ab0c      	add	r3, sp, #48	; 0x30
 800e0b8:	f109 0401 	add.w	r4, r9, #1
 800e0bc:	f843 0029 	str.w	r0, [r3, r9, lsl #2]
 800e0c0:	4628      	mov	r0, r5
 800e0c2:	f7f2 ffdb 	bl	800107c <__aeabi_f2iz>
 800e0c6:	ab0c      	add	r3, sp, #48	; 0x30
 800e0c8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e0cc:	e03b      	b.n	800e146 <__kernel_rem_pio2f+0x44a>
 800e0ce:	2301      	movs	r3, #1
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	e786      	b.n	800dfe2 <__kernel_rem_pio2f+0x2e6>
 800e0d4:	3201      	adds	r2, #1
 800e0d6:	454a      	cmp	r2, r9
 800e0d8:	f47f af7e 	bne.w	800dfd8 <__kernel_rem_pio2f+0x2dc>
 800e0dc:	e796      	b.n	800e00c <__kernel_rem_pio2f+0x310>
 800e0de:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e0e2:	f7f2 ffa1 	bl	8001028 <__aeabi_fcmpge>
 800e0e6:	4606      	mov	r6, r0
 800e0e8:	2800      	cmp	r0, #0
 800e0ea:	f43f aee9 	beq.w	800dec0 <__kernel_rem_pio2f+0x1c4>
 800e0ee:	f1b9 0f00 	cmp.w	r9, #0
 800e0f2:	f10a 0a01 	add.w	sl, sl, #1
 800e0f6:	bfc8      	it	gt
 800e0f8:	2602      	movgt	r6, #2
 800e0fa:	f73f af65 	bgt.w	800dfc8 <__kernel_rem_pio2f+0x2cc>
 800e0fe:	4621      	mov	r1, r4
 800e100:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e104:	f7f2 fcd4 	bl	8000ab0 <__aeabi_fsub>
 800e108:	2602      	movs	r6, #2
 800e10a:	4604      	mov	r4, r0
 800e10c:	e6d8      	b.n	800dec0 <__kernel_rem_pio2f+0x1c4>
 800e10e:	f109 0a01 	add.w	sl, r9, #1
 800e112:	46d0      	mov	r8, sl
 800e114:	f8cd a000 	str.w	sl, [sp]
 800e118:	e704      	b.n	800df24 <__kernel_rem_pio2f+0x228>
 800e11a:	9b04      	ldr	r3, [sp, #16]
 800e11c:	9600      	str	r6, [sp, #0]
 800e11e:	f1a3 0208 	sub.w	r2, r3, #8
 800e122:	ab0c      	add	r3, sp, #48	; 0x30
 800e124:	9204      	str	r2, [sp, #16]
 800e126:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800e12a:	b963      	cbnz	r3, 800e146 <__kernel_rem_pio2f+0x44a>
 800e12c:	f109 4380 	add.w	r3, r9, #1073741824	; 0x40000000
 800e130:	3b02      	subs	r3, #2
 800e132:	a90c      	add	r1, sp, #48	; 0x30
 800e134:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800e138:	f853 1904 	ldr.w	r1, [r3], #-4
 800e13c:	3c01      	subs	r4, #1
 800e13e:	3a08      	subs	r2, #8
 800e140:	2900      	cmp	r1, #0
 800e142:	d0f9      	beq.n	800e138 <__kernel_rem_pio2f+0x43c>
 800e144:	9204      	str	r2, [sp, #16]
 800e146:	9904      	ldr	r1, [sp, #16]
 800e148:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e14c:	f000 fb4a 	bl	800e7e4 <scalbnf>
 800e150:	2c00      	cmp	r4, #0
 800e152:	4607      	mov	r7, r0
 800e154:	f2c0 812d 	blt.w	800e3b2 <__kernel_rem_pio2f+0x6b6>
 800e158:	00a3      	lsls	r3, r4, #2
 800e15a:	aa48      	add	r2, sp, #288	; 0x120
 800e15c:	eb02 0803 	add.w	r8, r2, r3
 800e160:	9301      	str	r3, [sp, #4]
 800e162:	3304      	adds	r3, #4
 800e164:	9302      	str	r3, [sp, #8]
 800e166:	3330      	adds	r3, #48	; 0x30
 800e168:	f04f 566e 	mov.w	r6, #998244352	; 0x3b800000
 800e16c:	eb0d 0903 	add.w	r9, sp, r3
 800e170:	f108 0504 	add.w	r5, r8, #4
 800e174:	f859 0d04 	ldr.w	r0, [r9, #-4]!
 800e178:	f7f2 fd50 	bl	8000c1c <__aeabi_i2f>
 800e17c:	4639      	mov	r1, r7
 800e17e:	f7f2 fda1 	bl	8000cc4 <__aeabi_fmul>
 800e182:	4631      	mov	r1, r6
 800e184:	f845 0d04 	str.w	r0, [r5, #-4]!
 800e188:	4638      	mov	r0, r7
 800e18a:	f7f2 fd9b 	bl	8000cc4 <__aeabi_fmul>
 800e18e:	ab0c      	add	r3, sp, #48	; 0x30
 800e190:	4599      	cmp	r9, r3
 800e192:	4607      	mov	r7, r0
 800e194:	d1ee      	bne.n	800e174 <__kernel_rem_pio2f+0x478>
 800e196:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800e19a:	f8cd a010 	str.w	sl, [sp, #16]
 800e19e:	f1a8 0804 	sub.w	r8, r8, #4
 800e1a2:	2700      	movs	r7, #0
 800e1a4:	46a3      	mov	fp, r4
 800e1a6:	f1b9 0f00 	cmp.w	r9, #0
 800e1aa:	bfb8      	it	lt
 800e1ac:	2500      	movlt	r5, #0
 800e1ae:	db15      	blt.n	800e1dc <__kernel_rem_pio2f+0x4e0>
 800e1b0:	4c88      	ldr	r4, [pc, #544]	; (800e3d4 <__kernel_rem_pio2f+0x6d8>)
 800e1b2:	4889      	ldr	r0, [pc, #548]	; (800e3d8 <__kernel_rem_pio2f+0x6dc>)
 800e1b4:	46c2      	mov	sl, r8
 800e1b6:	2500      	movs	r5, #0
 800e1b8:	2600      	movs	r6, #0
 800e1ba:	e003      	b.n	800e1c4 <__kernel_rem_pio2f+0x4c8>
 800e1bc:	42b7      	cmp	r7, r6
 800e1be:	db0d      	blt.n	800e1dc <__kernel_rem_pio2f+0x4e0>
 800e1c0:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800e1c4:	f85a 1f04 	ldr.w	r1, [sl, #4]!
 800e1c8:	f7f2 fd7c 	bl	8000cc4 <__aeabi_fmul>
 800e1cc:	4601      	mov	r1, r0
 800e1ce:	4628      	mov	r0, r5
 800e1d0:	f7f2 fc70 	bl	8000ab4 <__addsf3>
 800e1d4:	3601      	adds	r6, #1
 800e1d6:	45b1      	cmp	r9, r6
 800e1d8:	4605      	mov	r5, r0
 800e1da:	daef      	bge.n	800e1bc <__kernel_rem_pio2f+0x4c0>
 800e1dc:	ab5c      	add	r3, sp, #368	; 0x170
 800e1de:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800e1e2:	45bb      	cmp	fp, r7
 800e1e4:	f843 5ca0 	str.w	r5, [r3, #-160]
 800e1e8:	f1a8 0804 	sub.w	r8, r8, #4
 800e1ec:	f107 0301 	add.w	r3, r7, #1
 800e1f0:	d001      	beq.n	800e1f6 <__kernel_rem_pio2f+0x4fa>
 800e1f2:	461f      	mov	r7, r3
 800e1f4:	e7d7      	b.n	800e1a6 <__kernel_rem_pio2f+0x4aa>
 800e1f6:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800e1f8:	f8dd a010 	ldr.w	sl, [sp, #16]
 800e1fc:	2a02      	cmp	r2, #2
 800e1fe:	465c      	mov	r4, fp
 800e200:	dc18      	bgt.n	800e234 <__kernel_rem_pio2f+0x538>
 800e202:	2a00      	cmp	r2, #0
 800e204:	f300 8082 	bgt.w	800e30c <__kernel_rem_pio2f+0x610>
 800e208:	d10f      	bne.n	800e22a <__kernel_rem_pio2f+0x52e>
 800e20a:	9c02      	ldr	r4, [sp, #8]
 800e20c:	ad34      	add	r5, sp, #208	; 0xd0
 800e20e:	442c      	add	r4, r5
 800e210:	2000      	movs	r0, #0
 800e212:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 800e216:	f7f2 fc4d 	bl	8000ab4 <__addsf3>
 800e21a:	42a5      	cmp	r5, r4
 800e21c:	d1f9      	bne.n	800e212 <__kernel_rem_pio2f+0x516>
 800e21e:	9b00      	ldr	r3, [sp, #0]
 800e220:	b10b      	cbz	r3, 800e226 <__kernel_rem_pio2f+0x52a>
 800e222:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800e226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e228:	6018      	str	r0, [r3, #0]
 800e22a:	f00a 0007 	and.w	r0, sl, #7
 800e22e:	b05d      	add	sp, #372	; 0x174
 800e230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e234:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800e236:	2b03      	cmp	r3, #3
 800e238:	d1f7      	bne.n	800e22a <__kernel_rem_pio2f+0x52e>
 800e23a:	2c00      	cmp	r4, #0
 800e23c:	f000 80c6 	beq.w	800e3cc <__kernel_rem_pio2f+0x6d0>
 800e240:	9a01      	ldr	r2, [sp, #4]
 800e242:	f502 73b8 	add.w	r3, r2, #368	; 0x170
 800e246:	446b      	add	r3, sp
 800e248:	ae34      	add	r6, sp, #208	; 0xd0
 800e24a:	f853 5ca0 	ldr.w	r5, [r3, #-160]
 800e24e:	18b7      	adds	r7, r6, r2
 800e250:	f857 9c04 	ldr.w	r9, [r7, #-4]
 800e254:	4628      	mov	r0, r5
 800e256:	4649      	mov	r1, r9
 800e258:	f7f2 fc2c 	bl	8000ab4 <__addsf3>
 800e25c:	46a8      	mov	r8, r5
 800e25e:	4605      	mov	r5, r0
 800e260:	4629      	mov	r1, r5
 800e262:	4648      	mov	r0, r9
 800e264:	f7f2 fc24 	bl	8000ab0 <__aeabi_fsub>
 800e268:	4641      	mov	r1, r8
 800e26a:	f7f2 fc23 	bl	8000ab4 <__addsf3>
 800e26e:	6038      	str	r0, [r7, #0]
 800e270:	f847 5d04 	str.w	r5, [r7, #-4]!
 800e274:	42be      	cmp	r6, r7
 800e276:	d1eb      	bne.n	800e250 <__kernel_rem_pio2f+0x554>
 800e278:	2c01      	cmp	r4, #1
 800e27a:	f340 80a7 	ble.w	800e3cc <__kernel_rem_pio2f+0x6d0>
 800e27e:	9a01      	ldr	r2, [sp, #4]
 800e280:	f502 73b8 	add.w	r3, r2, #368	; 0x170
 800e284:	446b      	add	r3, sp
 800e286:	18b7      	adds	r7, r6, r2
 800e288:	f853 4ca0 	ldr.w	r4, [r3, #-160]
 800e28c:	463d      	mov	r5, r7
 800e28e:	f10d 08d4 	add.w	r8, sp, #212	; 0xd4
 800e292:	f855 bc04 	ldr.w	fp, [r5, #-4]
 800e296:	4620      	mov	r0, r4
 800e298:	4659      	mov	r1, fp
 800e29a:	f7f2 fc0b 	bl	8000ab4 <__addsf3>
 800e29e:	46a1      	mov	r9, r4
 800e2a0:	4604      	mov	r4, r0
 800e2a2:	4621      	mov	r1, r4
 800e2a4:	4658      	mov	r0, fp
 800e2a6:	f7f2 fc03 	bl	8000ab0 <__aeabi_fsub>
 800e2aa:	4649      	mov	r1, r9
 800e2ac:	f7f2 fc02 	bl	8000ab4 <__addsf3>
 800e2b0:	6028      	str	r0, [r5, #0]
 800e2b2:	f845 4d04 	str.w	r4, [r5, #-4]!
 800e2b6:	45a8      	cmp	r8, r5
 800e2b8:	d1eb      	bne.n	800e292 <__kernel_rem_pio2f+0x596>
 800e2ba:	3704      	adds	r7, #4
 800e2bc:	3608      	adds	r6, #8
 800e2be:	2000      	movs	r0, #0
 800e2c0:	f857 1d04 	ldr.w	r1, [r7, #-4]!
 800e2c4:	f7f2 fbf6 	bl	8000ab4 <__addsf3>
 800e2c8:	42be      	cmp	r6, r7
 800e2ca:	d1f9      	bne.n	800e2c0 <__kernel_rem_pio2f+0x5c4>
 800e2cc:	9b00      	ldr	r3, [sp, #0]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d14d      	bne.n	800e36e <__kernel_rem_pio2f+0x672>
 800e2d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e2d4:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 800e2d6:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 800e2d8:	6088      	str	r0, [r1, #8]
 800e2da:	f00a 0007 	and.w	r0, sl, #7
 800e2de:	600a      	str	r2, [r1, #0]
 800e2e0:	604b      	str	r3, [r1, #4]
 800e2e2:	b05d      	add	sp, #372	; 0x174
 800e2e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2e8:	f109 32ff 	add.w	r2, r9, #4294967295
 800e2ec:	ab0c      	add	r3, sp, #48	; 0x30
 800e2ee:	a90c      	add	r1, sp, #48	; 0x30
 800e2f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e2f8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e2fc:	e698      	b.n	800e030 <__kernel_rem_pio2f+0x334>
 800e2fe:	2308      	movs	r3, #8
 800e300:	930a      	str	r3, [sp, #40]	; 0x28
 800e302:	2300      	movs	r3, #0
 800e304:	9305      	str	r3, [sp, #20]
 800e306:	e514      	b.n	800dd32 <__kernel_rem_pio2f+0x36>
 800e308:	2700      	movs	r7, #0
 800e30a:	e67f      	b.n	800e00c <__kernel_rem_pio2f+0x310>
 800e30c:	ae34      	add	r6, sp, #208	; 0xd0
 800e30e:	eb06 0583 	add.w	r5, r6, r3, lsl #2
 800e312:	2000      	movs	r0, #0
 800e314:	f855 1d04 	ldr.w	r1, [r5, #-4]!
 800e318:	f7f2 fbcc 	bl	8000ab4 <__addsf3>
 800e31c:	42ae      	cmp	r6, r5
 800e31e:	d1f9      	bne.n	800e314 <__kernel_rem_pio2f+0x618>
 800e320:	9b00      	ldr	r3, [sp, #0]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d134      	bne.n	800e390 <__kernel_rem_pio2f+0x694>
 800e326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e328:	4601      	mov	r1, r0
 800e32a:	6018      	str	r0, [r3, #0]
 800e32c:	9834      	ldr	r0, [sp, #208]	; 0xd0
 800e32e:	f7f2 fbbf 	bl	8000ab0 <__aeabi_fsub>
 800e332:	2c00      	cmp	r4, #0
 800e334:	dd0c      	ble.n	800e350 <__kernel_rem_pio2f+0x654>
 800e336:	ae34      	add	r6, sp, #208	; 0xd0
 800e338:	2501      	movs	r5, #1
 800e33a:	f856 1f04 	ldr.w	r1, [r6, #4]!
 800e33e:	3501      	adds	r5, #1
 800e340:	f7f2 fbb8 	bl	8000ab4 <__addsf3>
 800e344:	42ac      	cmp	r4, r5
 800e346:	daf8      	bge.n	800e33a <__kernel_rem_pio2f+0x63e>
 800e348:	9b00      	ldr	r3, [sp, #0]
 800e34a:	b10b      	cbz	r3, 800e350 <__kernel_rem_pio2f+0x654>
 800e34c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800e350:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e352:	6058      	str	r0, [r3, #4]
 800e354:	f00a 0007 	and.w	r0, sl, #7
 800e358:	b05d      	add	sp, #372	; 0x174
 800e35a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e35e:	4620      	mov	r0, r4
 800e360:	f7f2 fe8c 	bl	800107c <__aeabi_f2iz>
 800e364:	ab0c      	add	r3, sp, #48	; 0x30
 800e366:	464c      	mov	r4, r9
 800e368:	f843 0029 	str.w	r0, [r3, r9, lsl #2]
 800e36c:	e6eb      	b.n	800e146 <__kernel_rem_pio2f+0x44a>
 800e36e:	e9dd 2334 	ldrd	r2, r3, [sp, #208]	; 0xd0
 800e372:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e374:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800e378:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800e37c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e380:	6088      	str	r0, [r1, #8]
 800e382:	f00a 0007 	and.w	r0, sl, #7
 800e386:	600a      	str	r2, [r1, #0]
 800e388:	604b      	str	r3, [r1, #4]
 800e38a:	b05d      	add	sp, #372	; 0x174
 800e38c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e390:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e392:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800e396:	4601      	mov	r1, r0
 800e398:	6013      	str	r3, [r2, #0]
 800e39a:	9834      	ldr	r0, [sp, #208]	; 0xd0
 800e39c:	f7f2 fb88 	bl	8000ab0 <__aeabi_fsub>
 800e3a0:	2c00      	cmp	r4, #0
 800e3a2:	dcc8      	bgt.n	800e336 <__kernel_rem_pio2f+0x63a>
 800e3a4:	e7d2      	b.n	800e34c <__kernel_rem_pio2f+0x650>
 800e3a6:	1f2b      	subs	r3, r5, #4
 800e3a8:	9302      	str	r3, [sp, #8]
 800e3aa:	9b06      	ldr	r3, [sp, #24]
 800e3ac:	009b      	lsls	r3, r3, #2
 800e3ae:	9300      	str	r3, [sp, #0]
 800e3b0:	e514      	b.n	800dddc <__kernel_rem_pio2f+0xe0>
 800e3b2:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800e3b4:	2b02      	cmp	r3, #2
 800e3b6:	dc05      	bgt.n	800e3c4 <__kernel_rem_pio2f+0x6c8>
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	dc09      	bgt.n	800e3d0 <__kernel_rem_pio2f+0x6d4>
 800e3bc:	f47f af35 	bne.w	800e22a <__kernel_rem_pio2f+0x52e>
 800e3c0:	2000      	movs	r0, #0
 800e3c2:	e72c      	b.n	800e21e <__kernel_rem_pio2f+0x522>
 800e3c4:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800e3c6:	2b03      	cmp	r3, #3
 800e3c8:	f47f af2f 	bne.w	800e22a <__kernel_rem_pio2f+0x52e>
 800e3cc:	2000      	movs	r0, #0
 800e3ce:	e77d      	b.n	800e2cc <__kernel_rem_pio2f+0x5d0>
 800e3d0:	2000      	movs	r0, #0
 800e3d2:	e7a5      	b.n	800e320 <__kernel_rem_pio2f+0x624>
 800e3d4:	0800f4b8 	.word	0x0800f4b8
 800e3d8:	3fc90000 	.word	0x3fc90000

0800e3dc <__kernel_sinf>:
 800e3dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3e0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800e3e4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800e3e8:	4604      	mov	r4, r0
 800e3ea:	460e      	mov	r6, r1
 800e3ec:	4690      	mov	r8, r2
 800e3ee:	da03      	bge.n	800e3f8 <__kernel_sinf+0x1c>
 800e3f0:	f7f2 fe44 	bl	800107c <__aeabi_f2iz>
 800e3f4:	2800      	cmp	r0, #0
 800e3f6:	d058      	beq.n	800e4aa <__kernel_sinf+0xce>
 800e3f8:	4621      	mov	r1, r4
 800e3fa:	4620      	mov	r0, r4
 800e3fc:	f7f2 fc62 	bl	8000cc4 <__aeabi_fmul>
 800e400:	4605      	mov	r5, r0
 800e402:	4601      	mov	r1, r0
 800e404:	4620      	mov	r0, r4
 800e406:	f7f2 fc5d 	bl	8000cc4 <__aeabi_fmul>
 800e40a:	4929      	ldr	r1, [pc, #164]	; (800e4b0 <__kernel_sinf+0xd4>)
 800e40c:	4681      	mov	r9, r0
 800e40e:	4628      	mov	r0, r5
 800e410:	f7f2 fc58 	bl	8000cc4 <__aeabi_fmul>
 800e414:	4927      	ldr	r1, [pc, #156]	; (800e4b4 <__kernel_sinf+0xd8>)
 800e416:	f7f2 fb4b 	bl	8000ab0 <__aeabi_fsub>
 800e41a:	4629      	mov	r1, r5
 800e41c:	f7f2 fc52 	bl	8000cc4 <__aeabi_fmul>
 800e420:	4925      	ldr	r1, [pc, #148]	; (800e4b8 <__kernel_sinf+0xdc>)
 800e422:	f7f2 fb47 	bl	8000ab4 <__addsf3>
 800e426:	4629      	mov	r1, r5
 800e428:	f7f2 fc4c 	bl	8000cc4 <__aeabi_fmul>
 800e42c:	4923      	ldr	r1, [pc, #140]	; (800e4bc <__kernel_sinf+0xe0>)
 800e42e:	f7f2 fb3f 	bl	8000ab0 <__aeabi_fsub>
 800e432:	4629      	mov	r1, r5
 800e434:	f7f2 fc46 	bl	8000cc4 <__aeabi_fmul>
 800e438:	4921      	ldr	r1, [pc, #132]	; (800e4c0 <__kernel_sinf+0xe4>)
 800e43a:	f7f2 fb3b 	bl	8000ab4 <__addsf3>
 800e43e:	4607      	mov	r7, r0
 800e440:	f1b8 0f00 	cmp.w	r8, #0
 800e444:	d022      	beq.n	800e48c <__kernel_sinf+0xb0>
 800e446:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e44a:	4630      	mov	r0, r6
 800e44c:	f7f2 fc3a 	bl	8000cc4 <__aeabi_fmul>
 800e450:	4639      	mov	r1, r7
 800e452:	4680      	mov	r8, r0
 800e454:	4648      	mov	r0, r9
 800e456:	f7f2 fc35 	bl	8000cc4 <__aeabi_fmul>
 800e45a:	4601      	mov	r1, r0
 800e45c:	4640      	mov	r0, r8
 800e45e:	f7f2 fb27 	bl	8000ab0 <__aeabi_fsub>
 800e462:	4629      	mov	r1, r5
 800e464:	f7f2 fc2e 	bl	8000cc4 <__aeabi_fmul>
 800e468:	4631      	mov	r1, r6
 800e46a:	f7f2 fb21 	bl	8000ab0 <__aeabi_fsub>
 800e46e:	4915      	ldr	r1, [pc, #84]	; (800e4c4 <__kernel_sinf+0xe8>)
 800e470:	4605      	mov	r5, r0
 800e472:	4648      	mov	r0, r9
 800e474:	f7f2 fc26 	bl	8000cc4 <__aeabi_fmul>
 800e478:	4601      	mov	r1, r0
 800e47a:	4628      	mov	r0, r5
 800e47c:	f7f2 fb1a 	bl	8000ab4 <__addsf3>
 800e480:	4601      	mov	r1, r0
 800e482:	4620      	mov	r0, r4
 800e484:	f7f2 fb14 	bl	8000ab0 <__aeabi_fsub>
 800e488:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e48c:	4601      	mov	r1, r0
 800e48e:	4628      	mov	r0, r5
 800e490:	f7f2 fc18 	bl	8000cc4 <__aeabi_fmul>
 800e494:	490b      	ldr	r1, [pc, #44]	; (800e4c4 <__kernel_sinf+0xe8>)
 800e496:	f7f2 fb0b 	bl	8000ab0 <__aeabi_fsub>
 800e49a:	4649      	mov	r1, r9
 800e49c:	f7f2 fc12 	bl	8000cc4 <__aeabi_fmul>
 800e4a0:	4621      	mov	r1, r4
 800e4a2:	f7f2 fb07 	bl	8000ab4 <__addsf3>
 800e4a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4aa:	4620      	mov	r0, r4
 800e4ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4b0:	2f2ec9d3 	.word	0x2f2ec9d3
 800e4b4:	32d72f34 	.word	0x32d72f34
 800e4b8:	3638ef1b 	.word	0x3638ef1b
 800e4bc:	39500d01 	.word	0x39500d01
 800e4c0:	3c088889 	.word	0x3c088889
 800e4c4:	3e2aaaab 	.word	0x3e2aaaab

0800e4c8 <with_errnof>:
 800e4c8:	b538      	push	{r3, r4, r5, lr}
 800e4ca:	4605      	mov	r5, r0
 800e4cc:	460c      	mov	r4, r1
 800e4ce:	f000 f9e7 	bl	800e8a0 <__errno>
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	4628      	mov	r0, r5
 800e4d6:	601c      	str	r4, [r3, #0]
 800e4d8:	bd38      	pop	{r3, r4, r5, pc}
 800e4da:	bf00      	nop

0800e4dc <xflowf>:
 800e4dc:	b508      	push	{r3, lr}
 800e4de:	b140      	cbz	r0, 800e4f2 <xflowf+0x16>
 800e4e0:	f101 4000 	add.w	r0, r1, #2147483648	; 0x80000000
 800e4e4:	f7f2 fbee 	bl	8000cc4 <__aeabi_fmul>
 800e4e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e4ec:	2122      	movs	r1, #34	; 0x22
 800e4ee:	f7ff bfeb 	b.w	800e4c8 <with_errnof>
 800e4f2:	4608      	mov	r0, r1
 800e4f4:	f7f2 fbe6 	bl	8000cc4 <__aeabi_fmul>
 800e4f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e4fc:	2122      	movs	r1, #34	; 0x22
 800e4fe:	f7ff bfe3 	b.w	800e4c8 <with_errnof>
 800e502:	bf00      	nop

0800e504 <__math_uflowf>:
 800e504:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 800e508:	f7ff bfe8 	b.w	800e4dc <xflowf>

0800e50c <__math_oflowf>:
 800e50c:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 800e510:	f7ff bfe4 	b.w	800e4dc <xflowf>

0800e514 <atanf>:
 800e514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e518:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800e51c:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800e520:	4604      	mov	r4, r0
 800e522:	4607      	mov	r7, r0
 800e524:	db07      	blt.n	800e536 <atanf+0x22>
 800e526:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800e52a:	dc71      	bgt.n	800e610 <atanf+0xfc>
 800e52c:	2800      	cmp	r0, #0
 800e52e:	dd7f      	ble.n	800e630 <atanf+0x11c>
 800e530:	4870      	ldr	r0, [pc, #448]	; (800e6f4 <atanf+0x1e0>)
 800e532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e536:	4b70      	ldr	r3, [pc, #448]	; (800e6f8 <atanf+0x1e4>)
 800e538:	429d      	cmp	r5, r3
 800e53a:	dc7c      	bgt.n	800e636 <atanf+0x122>
 800e53c:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800e540:	db6b      	blt.n	800e61a <atanf+0x106>
 800e542:	f04f 38ff 	mov.w	r8, #4294967295
 800e546:	4621      	mov	r1, r4
 800e548:	4620      	mov	r0, r4
 800e54a:	f7f2 fbbb 	bl	8000cc4 <__aeabi_fmul>
 800e54e:	4601      	mov	r1, r0
 800e550:	4606      	mov	r6, r0
 800e552:	f7f2 fbb7 	bl	8000cc4 <__aeabi_fmul>
 800e556:	4969      	ldr	r1, [pc, #420]	; (800e6fc <atanf+0x1e8>)
 800e558:	4605      	mov	r5, r0
 800e55a:	f7f2 fbb3 	bl	8000cc4 <__aeabi_fmul>
 800e55e:	4968      	ldr	r1, [pc, #416]	; (800e700 <atanf+0x1ec>)
 800e560:	f7f2 faa8 	bl	8000ab4 <__addsf3>
 800e564:	4629      	mov	r1, r5
 800e566:	f7f2 fbad 	bl	8000cc4 <__aeabi_fmul>
 800e56a:	4966      	ldr	r1, [pc, #408]	; (800e704 <atanf+0x1f0>)
 800e56c:	f7f2 faa2 	bl	8000ab4 <__addsf3>
 800e570:	4629      	mov	r1, r5
 800e572:	f7f2 fba7 	bl	8000cc4 <__aeabi_fmul>
 800e576:	4964      	ldr	r1, [pc, #400]	; (800e708 <atanf+0x1f4>)
 800e578:	f7f2 fa9c 	bl	8000ab4 <__addsf3>
 800e57c:	4629      	mov	r1, r5
 800e57e:	f7f2 fba1 	bl	8000cc4 <__aeabi_fmul>
 800e582:	4962      	ldr	r1, [pc, #392]	; (800e70c <atanf+0x1f8>)
 800e584:	f7f2 fa96 	bl	8000ab4 <__addsf3>
 800e588:	4629      	mov	r1, r5
 800e58a:	f7f2 fb9b 	bl	8000cc4 <__aeabi_fmul>
 800e58e:	4960      	ldr	r1, [pc, #384]	; (800e710 <atanf+0x1fc>)
 800e590:	f7f2 fa90 	bl	8000ab4 <__addsf3>
 800e594:	4631      	mov	r1, r6
 800e596:	f7f2 fb95 	bl	8000cc4 <__aeabi_fmul>
 800e59a:	495e      	ldr	r1, [pc, #376]	; (800e714 <atanf+0x200>)
 800e59c:	4606      	mov	r6, r0
 800e59e:	4628      	mov	r0, r5
 800e5a0:	f7f2 fb90 	bl	8000cc4 <__aeabi_fmul>
 800e5a4:	495c      	ldr	r1, [pc, #368]	; (800e718 <atanf+0x204>)
 800e5a6:	f7f2 fa83 	bl	8000ab0 <__aeabi_fsub>
 800e5aa:	4629      	mov	r1, r5
 800e5ac:	f7f2 fb8a 	bl	8000cc4 <__aeabi_fmul>
 800e5b0:	495a      	ldr	r1, [pc, #360]	; (800e71c <atanf+0x208>)
 800e5b2:	f7f2 fa7d 	bl	8000ab0 <__aeabi_fsub>
 800e5b6:	4629      	mov	r1, r5
 800e5b8:	f7f2 fb84 	bl	8000cc4 <__aeabi_fmul>
 800e5bc:	4958      	ldr	r1, [pc, #352]	; (800e720 <atanf+0x20c>)
 800e5be:	f7f2 fa77 	bl	8000ab0 <__aeabi_fsub>
 800e5c2:	4629      	mov	r1, r5
 800e5c4:	f7f2 fb7e 	bl	8000cc4 <__aeabi_fmul>
 800e5c8:	4956      	ldr	r1, [pc, #344]	; (800e724 <atanf+0x210>)
 800e5ca:	f7f2 fa71 	bl	8000ab0 <__aeabi_fsub>
 800e5ce:	4629      	mov	r1, r5
 800e5d0:	f7f2 fb78 	bl	8000cc4 <__aeabi_fmul>
 800e5d4:	f1b8 3fff 	cmp.w	r8, #4294967295
 800e5d8:	4601      	mov	r1, r0
 800e5da:	4630      	mov	r0, r6
 800e5dc:	d04a      	beq.n	800e674 <atanf+0x160>
 800e5de:	f7f2 fa69 	bl	8000ab4 <__addsf3>
 800e5e2:	4621      	mov	r1, r4
 800e5e4:	f7f2 fb6e 	bl	8000cc4 <__aeabi_fmul>
 800e5e8:	4b4f      	ldr	r3, [pc, #316]	; (800e728 <atanf+0x214>)
 800e5ea:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800e5ee:	f7f2 fa5f 	bl	8000ab0 <__aeabi_fsub>
 800e5f2:	4621      	mov	r1, r4
 800e5f4:	f7f2 fa5c 	bl	8000ab0 <__aeabi_fsub>
 800e5f8:	4b4c      	ldr	r3, [pc, #304]	; (800e72c <atanf+0x218>)
 800e5fa:	4601      	mov	r1, r0
 800e5fc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800e600:	f7f2 fa56 	bl	8000ab0 <__aeabi_fsub>
 800e604:	2f00      	cmp	r7, #0
 800e606:	da94      	bge.n	800e532 <atanf+0x1e>
 800e608:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800e60c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e610:	4601      	mov	r1, r0
 800e612:	f7f2 fa4f 	bl	8000ab4 <__addsf3>
 800e616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e61a:	4945      	ldr	r1, [pc, #276]	; (800e730 <atanf+0x21c>)
 800e61c:	f7f2 fa4a 	bl	8000ab4 <__addsf3>
 800e620:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e624:	f7f2 fd0a 	bl	800103c <__aeabi_fcmpgt>
 800e628:	2800      	cmp	r0, #0
 800e62a:	d08a      	beq.n	800e542 <atanf+0x2e>
 800e62c:	4620      	mov	r0, r4
 800e62e:	e780      	b.n	800e532 <atanf+0x1e>
 800e630:	4840      	ldr	r0, [pc, #256]	; (800e734 <atanf+0x220>)
 800e632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e636:	f000 f885 	bl	800e744 <fabsf>
 800e63a:	4b3f      	ldr	r3, [pc, #252]	; (800e738 <atanf+0x224>)
 800e63c:	429d      	cmp	r5, r3
 800e63e:	4604      	mov	r4, r0
 800e640:	dc23      	bgt.n	800e68a <atanf+0x176>
 800e642:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800e646:	429d      	cmp	r5, r3
 800e648:	dc41      	bgt.n	800e6ce <atanf+0x1ba>
 800e64a:	4601      	mov	r1, r0
 800e64c:	f7f2 fa32 	bl	8000ab4 <__addsf3>
 800e650:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e654:	f7f2 fa2c 	bl	8000ab0 <__aeabi_fsub>
 800e658:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800e65c:	4605      	mov	r5, r0
 800e65e:	4620      	mov	r0, r4
 800e660:	f7f2 fa28 	bl	8000ab4 <__addsf3>
 800e664:	4601      	mov	r1, r0
 800e666:	4628      	mov	r0, r5
 800e668:	f7f2 fbe0 	bl	8000e2c <__aeabi_fdiv>
 800e66c:	f04f 0800 	mov.w	r8, #0
 800e670:	4604      	mov	r4, r0
 800e672:	e768      	b.n	800e546 <atanf+0x32>
 800e674:	f7f2 fa1e 	bl	8000ab4 <__addsf3>
 800e678:	4621      	mov	r1, r4
 800e67a:	f7f2 fb23 	bl	8000cc4 <__aeabi_fmul>
 800e67e:	4601      	mov	r1, r0
 800e680:	4620      	mov	r0, r4
 800e682:	f7f2 fa15 	bl	8000ab0 <__aeabi_fsub>
 800e686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e68a:	4b2c      	ldr	r3, [pc, #176]	; (800e73c <atanf+0x228>)
 800e68c:	429d      	cmp	r5, r3
 800e68e:	dc16      	bgt.n	800e6be <atanf+0x1aa>
 800e690:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800e694:	f7f2 fa0c 	bl	8000ab0 <__aeabi_fsub>
 800e698:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800e69c:	4603      	mov	r3, r0
 800e69e:	4620      	mov	r0, r4
 800e6a0:	461c      	mov	r4, r3
 800e6a2:	f7f2 fb0f 	bl	8000cc4 <__aeabi_fmul>
 800e6a6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e6aa:	f7f2 fa03 	bl	8000ab4 <__addsf3>
 800e6ae:	4601      	mov	r1, r0
 800e6b0:	4620      	mov	r0, r4
 800e6b2:	f7f2 fbbb 	bl	8000e2c <__aeabi_fdiv>
 800e6b6:	f04f 0802 	mov.w	r8, #2
 800e6ba:	4604      	mov	r4, r0
 800e6bc:	e743      	b.n	800e546 <atanf+0x32>
 800e6be:	4621      	mov	r1, r4
 800e6c0:	481f      	ldr	r0, [pc, #124]	; (800e740 <atanf+0x22c>)
 800e6c2:	f7f2 fbb3 	bl	8000e2c <__aeabi_fdiv>
 800e6c6:	f04f 0803 	mov.w	r8, #3
 800e6ca:	4604      	mov	r4, r0
 800e6cc:	e73b      	b.n	800e546 <atanf+0x32>
 800e6ce:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e6d2:	f7f2 f9ed 	bl	8000ab0 <__aeabi_fsub>
 800e6d6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800e6da:	4605      	mov	r5, r0
 800e6dc:	4620      	mov	r0, r4
 800e6de:	f7f2 f9e9 	bl	8000ab4 <__addsf3>
 800e6e2:	4601      	mov	r1, r0
 800e6e4:	4628      	mov	r0, r5
 800e6e6:	f7f2 fba1 	bl	8000e2c <__aeabi_fdiv>
 800e6ea:	f04f 0801 	mov.w	r8, #1
 800e6ee:	4604      	mov	r4, r0
 800e6f0:	e729      	b.n	800e546 <atanf+0x32>
 800e6f2:	bf00      	nop
 800e6f4:	3fc90fdb 	.word	0x3fc90fdb
 800e6f8:	3edfffff 	.word	0x3edfffff
 800e6fc:	3c8569d7 	.word	0x3c8569d7
 800e700:	3d4bda59 	.word	0x3d4bda59
 800e704:	3d886b35 	.word	0x3d886b35
 800e708:	3dba2e6e 	.word	0x3dba2e6e
 800e70c:	3e124925 	.word	0x3e124925
 800e710:	3eaaaaab 	.word	0x3eaaaaab
 800e714:	bd15a221 	.word	0xbd15a221
 800e718:	3d6ef16b 	.word	0x3d6ef16b
 800e71c:	3d9d8795 	.word	0x3d9d8795
 800e720:	3de38e38 	.word	0x3de38e38
 800e724:	3e4ccccd 	.word	0x3e4ccccd
 800e728:	0800f500 	.word	0x0800f500
 800e72c:	0800f4f0 	.word	0x0800f4f0
 800e730:	7149f2ca 	.word	0x7149f2ca
 800e734:	bfc90fdb 	.word	0xbfc90fdb
 800e738:	3f97ffff 	.word	0x3f97ffff
 800e73c:	401bffff 	.word	0x401bffff
 800e740:	bf800000 	.word	0xbf800000

0800e744 <fabsf>:
 800e744:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e748:	4770      	bx	lr
 800e74a:	bf00      	nop

0800e74c <finitef>:
 800e74c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e750:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800e754:	bfac      	ite	ge
 800e756:	2000      	movge	r0, #0
 800e758:	2001      	movlt	r0, #1
 800e75a:	4770      	bx	lr

0800e75c <floorf>:
 800e75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e75e:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800e762:	3d7f      	subs	r5, #127	; 0x7f
 800e764:	2d16      	cmp	r5, #22
 800e766:	4604      	mov	r4, r0
 800e768:	f020 4700 	bic.w	r7, r0, #2147483648	; 0x80000000
 800e76c:	dc24      	bgt.n	800e7b8 <floorf+0x5c>
 800e76e:	2d00      	cmp	r5, #0
 800e770:	4606      	mov	r6, r0
 800e772:	db14      	blt.n	800e79e <floorf+0x42>
 800e774:	4f16      	ldr	r7, [pc, #88]	; (800e7d0 <floorf+0x74>)
 800e776:	412f      	asrs	r7, r5
 800e778:	4238      	tst	r0, r7
 800e77a:	d01b      	beq.n	800e7b4 <floorf+0x58>
 800e77c:	4915      	ldr	r1, [pc, #84]	; (800e7d4 <floorf+0x78>)
 800e77e:	f7f2 f999 	bl	8000ab4 <__addsf3>
 800e782:	2100      	movs	r1, #0
 800e784:	f7f2 fc5a 	bl	800103c <__aeabi_fcmpgt>
 800e788:	b1a0      	cbz	r0, 800e7b4 <floorf+0x58>
 800e78a:	2c00      	cmp	r4, #0
 800e78c:	da04      	bge.n	800e798 <floorf+0x3c>
 800e78e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e792:	fa43 f505 	asr.w	r5, r3, r5
 800e796:	442e      	add	r6, r5
 800e798:	ea26 0007 	bic.w	r0, r6, r7
 800e79c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e79e:	490d      	ldr	r1, [pc, #52]	; (800e7d4 <floorf+0x78>)
 800e7a0:	f7f2 f988 	bl	8000ab4 <__addsf3>
 800e7a4:	2100      	movs	r1, #0
 800e7a6:	f7f2 fc49 	bl	800103c <__aeabi_fcmpgt>
 800e7aa:	b118      	cbz	r0, 800e7b4 <floorf+0x58>
 800e7ac:	2c00      	cmp	r4, #0
 800e7ae:	db0a      	blt.n	800e7c6 <floorf+0x6a>
 800e7b0:	2000      	movs	r0, #0
 800e7b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7b4:	4620      	mov	r0, r4
 800e7b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7b8:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800e7bc:	d3fa      	bcc.n	800e7b4 <floorf+0x58>
 800e7be:	4601      	mov	r1, r0
 800e7c0:	f7f2 f978 	bl	8000ab4 <__addsf3>
 800e7c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7c6:	2f00      	cmp	r7, #0
 800e7c8:	d0f4      	beq.n	800e7b4 <floorf+0x58>
 800e7ca:	4803      	ldr	r0, [pc, #12]	; (800e7d8 <floorf+0x7c>)
 800e7cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7ce:	bf00      	nop
 800e7d0:	007fffff 	.word	0x007fffff
 800e7d4:	7149f2ca 	.word	0x7149f2ca
 800e7d8:	bf800000 	.word	0xbf800000

0800e7dc <nanf>:
 800e7dc:	4800      	ldr	r0, [pc, #0]	; (800e7e0 <nanf+0x4>)
 800e7de:	4770      	bx	lr
 800e7e0:	7fc00000 	.word	0x7fc00000

0800e7e4 <scalbnf>:
 800e7e4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	d025      	beq.n	800e838 <scalbnf+0x54>
 800e7ec:	f1bc 4fff 	cmp.w	ip, #2139095040	; 0x7f800000
 800e7f0:	b510      	push	{r4, lr}
 800e7f2:	d21d      	bcs.n	800e830 <scalbnf+0x4c>
 800e7f4:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 800e7f8:	4602      	mov	r2, r0
 800e7fa:	460c      	mov	r4, r1
 800e7fc:	d11d      	bne.n	800e83a <scalbnf+0x56>
 800e7fe:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800e802:	f7f2 fa5f 	bl	8000cc4 <__aeabi_fmul>
 800e806:	4a23      	ldr	r2, [pc, #140]	; (800e894 <scalbnf+0xb0>)
 800e808:	4294      	cmp	r4, r2
 800e80a:	4603      	mov	r3, r0
 800e80c:	db32      	blt.n	800e874 <scalbnf+0x90>
 800e80e:	f3c0 5cc7 	ubfx	ip, r0, #23, #8
 800e812:	4602      	mov	r2, r0
 800e814:	f1ac 0019 	sub.w	r0, ip, #25
 800e818:	eb00 0c04 	add.w	ip, r0, r4
 800e81c:	f1bc 0ffe 	cmp.w	ip, #254	; 0xfe
 800e820:	dd12      	ble.n	800e848 <scalbnf+0x64>
 800e822:	491d      	ldr	r1, [pc, #116]	; (800e898 <scalbnf+0xb4>)
 800e824:	4618      	mov	r0, r3
 800e826:	f361 001e 	bfi	r0, r1, #0, #31
 800e82a:	f7f2 fa4b 	bl	8000cc4 <__aeabi_fmul>
 800e82e:	bd10      	pop	{r4, pc}
 800e830:	4601      	mov	r1, r0
 800e832:	f7f2 f93f 	bl	8000ab4 <__addsf3>
 800e836:	bd10      	pop	{r4, pc}
 800e838:	4770      	bx	lr
 800e83a:	ea4f 50dc 	mov.w	r0, ip, lsr #23
 800e83e:	eb00 0c04 	add.w	ip, r0, r4
 800e842:	f1bc 0ffe 	cmp.w	ip, #254	; 0xfe
 800e846:	dcec      	bgt.n	800e822 <scalbnf+0x3e>
 800e848:	f1bc 0f00 	cmp.w	ip, #0
 800e84c:	dc0d      	bgt.n	800e86a <scalbnf+0x86>
 800e84e:	f11c 0f16 	cmn.w	ip, #22
 800e852:	da13      	bge.n	800e87c <scalbnf+0x98>
 800e854:	f24c 3250 	movw	r2, #50000	; 0xc350
 800e858:	4294      	cmp	r4, r2
 800e85a:	dce2      	bgt.n	800e822 <scalbnf+0x3e>
 800e85c:	490f      	ldr	r1, [pc, #60]	; (800e89c <scalbnf+0xb8>)
 800e85e:	4618      	mov	r0, r3
 800e860:	f361 001e 	bfi	r0, r1, #0, #31
 800e864:	f7f2 fa2e 	bl	8000cc4 <__aeabi_fmul>
 800e868:	bd10      	pop	{r4, pc}
 800e86a:	f022 40ff 	bic.w	r0, r2, #2139095040	; 0x7f800000
 800e86e:	ea40 50cc 	orr.w	r0, r0, ip, lsl #23
 800e872:	bd10      	pop	{r4, pc}
 800e874:	4909      	ldr	r1, [pc, #36]	; (800e89c <scalbnf+0xb8>)
 800e876:	f7f2 fa25 	bl	8000cc4 <__aeabi_fmul>
 800e87a:	bd10      	pop	{r4, pc}
 800e87c:	f10c 0019 	add.w	r0, ip, #25
 800e880:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800e884:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800e888:	ea42 50c0 	orr.w	r0, r2, r0, lsl #23
 800e88c:	f7f2 fa1a 	bl	8000cc4 <__aeabi_fmul>
 800e890:	bd10      	pop	{r4, pc}
 800e892:	bf00      	nop
 800e894:	ffff3cb0 	.word	0xffff3cb0
 800e898:	7149f2ca 	.word	0x7149f2ca
 800e89c:	0da24260 	.word	0x0da24260

0800e8a0 <__errno>:
 800e8a0:	4b01      	ldr	r3, [pc, #4]	; (800e8a8 <__errno+0x8>)
 800e8a2:	6818      	ldr	r0, [r3, #0]
 800e8a4:	4770      	bx	lr
 800e8a6:	bf00      	nop
 800e8a8:	20000838 	.word	0x20000838

0800e8ac <_strtol_l.part.0>:
 800e8ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8b0:	4681      	mov	r9, r0
 800e8b2:	4845      	ldr	r0, [pc, #276]	; (800e9c8 <_strtol_l.part.0+0x11c>)
 800e8b4:	468e      	mov	lr, r1
 800e8b6:	4675      	mov	r5, lr
 800e8b8:	f81e cb01 	ldrb.w	ip, [lr], #1
 800e8bc:	f810 400c 	ldrb.w	r4, [r0, ip]
 800e8c0:	f014 0408 	ands.w	r4, r4, #8
 800e8c4:	d1f7      	bne.n	800e8b6 <_strtol_l.part.0+0xa>
 800e8c6:	f1bc 0f2d 	cmp.w	ip, #45	; 0x2d
 800e8ca:	46e3      	mov	fp, ip
 800e8cc:	d054      	beq.n	800e978 <_strtol_l.part.0+0xcc>
 800e8ce:	f1bc 0f2b 	cmp.w	ip, #43	; 0x2b
 800e8d2:	bf08      	it	eq
 800e8d4:	f89e b000 	ldrbeq.w	fp, [lr]
 800e8d8:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 800e8dc:	bf08      	it	eq
 800e8de:	f105 0e02 	addeq.w	lr, r5, #2
 800e8e2:	b11b      	cbz	r3, 800e8ec <_strtol_l.part.0+0x40>
 800e8e4:	2b10      	cmp	r3, #16
 800e8e6:	d04f      	beq.n	800e988 <_strtol_l.part.0+0xdc>
 800e8e8:	461f      	mov	r7, r3
 800e8ea:	e004      	b.n	800e8f6 <_strtol_l.part.0+0x4a>
 800e8ec:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 800e8f0:	d055      	beq.n	800e99e <_strtol_l.part.0+0xf2>
 800e8f2:	230a      	movs	r3, #10
 800e8f4:	461f      	mov	r7, r3
 800e8f6:	2500      	movs	r5, #0
 800e8f8:	fbb8 f6f7 	udiv	r6, r8, r7
 800e8fc:	4628      	mov	r0, r5
 800e8fe:	fb07 8a16 	mls	sl, r7, r6, r8
 800e902:	e007      	b.n	800e914 <_strtol_l.part.0+0x68>
 800e904:	4286      	cmp	r6, r0
 800e906:	d315      	bcc.n	800e934 <_strtol_l.part.0+0x88>
 800e908:	d029      	beq.n	800e95e <_strtol_l.part.0+0xb2>
 800e90a:	fb07 c000 	mla	r0, r7, r0, ip
 800e90e:	2501      	movs	r5, #1
 800e910:	f81e bb01 	ldrb.w	fp, [lr], #1
 800e914:	f1ab 0c30 	sub.w	ip, fp, #48	; 0x30
 800e918:	f1bc 0f09 	cmp.w	ip, #9
 800e91c:	d906      	bls.n	800e92c <_strtol_l.part.0+0x80>
 800e91e:	f1ab 0c41 	sub.w	ip, fp, #65	; 0x41
 800e922:	f1bc 0f19 	cmp.w	ip, #25
 800e926:	d808      	bhi.n	800e93a <_strtol_l.part.0+0x8e>
 800e928:	f1ab 0c37 	sub.w	ip, fp, #55	; 0x37
 800e92c:	4563      	cmp	r3, ip
 800e92e:	dd0d      	ble.n	800e94c <_strtol_l.part.0+0xa0>
 800e930:	2d00      	cmp	r5, #0
 800e932:	dae7      	bge.n	800e904 <_strtol_l.part.0+0x58>
 800e934:	f04f 35ff 	mov.w	r5, #4294967295
 800e938:	e7ea      	b.n	800e910 <_strtol_l.part.0+0x64>
 800e93a:	f1ab 0c61 	sub.w	ip, fp, #97	; 0x61
 800e93e:	f1bc 0f19 	cmp.w	ip, #25
 800e942:	d803      	bhi.n	800e94c <_strtol_l.part.0+0xa0>
 800e944:	f1ab 0c57 	sub.w	ip, fp, #87	; 0x57
 800e948:	4563      	cmp	r3, ip
 800e94a:	dcf1      	bgt.n	800e930 <_strtol_l.part.0+0x84>
 800e94c:	2d00      	cmp	r5, #0
 800e94e:	db0b      	blt.n	800e968 <_strtol_l.part.0+0xbc>
 800e950:	b104      	cbz	r4, 800e954 <_strtol_l.part.0+0xa8>
 800e952:	4240      	negs	r0, r0
 800e954:	b10a      	cbz	r2, 800e95a <_strtol_l.part.0+0xae>
 800e956:	bb95      	cbnz	r5, 800e9be <_strtol_l.part.0+0x112>
 800e958:	6011      	str	r1, [r2, #0]
 800e95a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e95e:	45e2      	cmp	sl, ip
 800e960:	dad3      	bge.n	800e90a <_strtol_l.part.0+0x5e>
 800e962:	f04f 35ff 	mov.w	r5, #4294967295
 800e966:	e7d3      	b.n	800e910 <_strtol_l.part.0+0x64>
 800e968:	2322      	movs	r3, #34	; 0x22
 800e96a:	f8c9 3000 	str.w	r3, [r9]
 800e96e:	b31a      	cbz	r2, 800e9b8 <_strtol_l.part.0+0x10c>
 800e970:	f10e 31ff 	add.w	r1, lr, #4294967295
 800e974:	4640      	mov	r0, r8
 800e976:	e7ef      	b.n	800e958 <_strtol_l.part.0+0xac>
 800e978:	f89e b000 	ldrb.w	fp, [lr]
 800e97c:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800e980:	f105 0e02 	add.w	lr, r5, #2
 800e984:	2401      	movs	r4, #1
 800e986:	e7ac      	b.n	800e8e2 <_strtol_l.part.0+0x36>
 800e988:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 800e98c:	d1ac      	bne.n	800e8e8 <_strtol_l.part.0+0x3c>
 800e98e:	f89e 0000 	ldrb.w	r0, [lr]
 800e992:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800e996:	2858      	cmp	r0, #88	; 0x58
 800e998:	d007      	beq.n	800e9aa <_strtol_l.part.0+0xfe>
 800e99a:	461f      	mov	r7, r3
 800e99c:	e7ab      	b.n	800e8f6 <_strtol_l.part.0+0x4a>
 800e99e:	f89e 3000 	ldrb.w	r3, [lr]
 800e9a2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e9a6:	2b58      	cmp	r3, #88	; 0x58
 800e9a8:	d10b      	bne.n	800e9c2 <_strtol_l.part.0+0x116>
 800e9aa:	2710      	movs	r7, #16
 800e9ac:	f89e b001 	ldrb.w	fp, [lr, #1]
 800e9b0:	463b      	mov	r3, r7
 800e9b2:	f10e 0e02 	add.w	lr, lr, #2
 800e9b6:	e79e      	b.n	800e8f6 <_strtol_l.part.0+0x4a>
 800e9b8:	4640      	mov	r0, r8
 800e9ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9be:	4680      	mov	r8, r0
 800e9c0:	e7d6      	b.n	800e970 <_strtol_l.part.0+0xc4>
 800e9c2:	2308      	movs	r3, #8
 800e9c4:	461f      	mov	r7, r3
 800e9c6:	e796      	b.n	800e8f6 <_strtol_l.part.0+0x4a>
 800e9c8:	0800f511 	.word	0x0800f511

0800e9cc <strtol>:
 800e9cc:	2a01      	cmp	r2, #1
 800e9ce:	d009      	beq.n	800e9e4 <strtol+0x18>
 800e9d0:	2a24      	cmp	r2, #36	; 0x24
 800e9d2:	4613      	mov	r3, r2
 800e9d4:	d806      	bhi.n	800e9e4 <strtol+0x18>
 800e9d6:	4a07      	ldr	r2, [pc, #28]	; (800e9f4 <strtol+0x28>)
 800e9d8:	4684      	mov	ip, r0
 800e9da:	6810      	ldr	r0, [r2, #0]
 800e9dc:	460a      	mov	r2, r1
 800e9de:	4661      	mov	r1, ip
 800e9e0:	f7ff bf64 	b.w	800e8ac <_strtol_l.part.0>
 800e9e4:	b510      	push	{r4, lr}
 800e9e6:	f7ff ff5b 	bl	800e8a0 <__errno>
 800e9ea:	2316      	movs	r3, #22
 800e9ec:	6003      	str	r3, [r0, #0]
 800e9ee:	2000      	movs	r0, #0
 800e9f0:	bd10      	pop	{r4, pc}
 800e9f2:	bf00      	nop
 800e9f4:	20000838 	.word	0x20000838

0800e9f8 <strncmp>:
 800e9f8:	b3a2      	cbz	r2, 800ea64 <strncmp+0x6c>
 800e9fa:	b530      	push	{r4, r5, lr}
 800e9fc:	ea40 0401 	orr.w	r4, r0, r1
 800ea00:	07a4      	lsls	r4, r4, #30
 800ea02:	4684      	mov	ip, r0
 800ea04:	460b      	mov	r3, r1
 800ea06:	d02a      	beq.n	800ea5e <strncmp+0x66>
 800ea08:	f89c 0000 	ldrb.w	r0, [ip]
 800ea0c:	780c      	ldrb	r4, [r1, #0]
 800ea0e:	4284      	cmp	r4, r0
 800ea10:	d12f      	bne.n	800ea72 <strncmp+0x7a>
 800ea12:	2a01      	cmp	r2, #1
 800ea14:	d00d      	beq.n	800ea32 <strncmp+0x3a>
 800ea16:	46e6      	mov	lr, ip
 800ea18:	b160      	cbz	r0, 800ea34 <strncmp+0x3c>
 800ea1a:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
 800ea1e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ea22:	ea6f 030e 	mvn.w	r3, lr
 800ea26:	42a0      	cmp	r0, r4
 800ea28:	4413      	add	r3, r2
 800ea2a:	d122      	bne.n	800ea72 <strncmp+0x7a>
 800ea2c:	eb1c 0303 	adds.w	r3, ip, r3
 800ea30:	d1f2      	bne.n	800ea18 <strncmp+0x20>
 800ea32:	2000      	movs	r0, #0
 800ea34:	bd30      	pop	{r4, r5, pc}
 800ea36:	6804      	ldr	r4, [r0, #0]
 800ea38:	4619      	mov	r1, r3
 800ea3a:	f853 5b04 	ldr.w	r5, [r3], #4
 800ea3e:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
 800ea42:	42ac      	cmp	r4, r5
 800ea44:	4684      	mov	ip, r0
 800ea46:	ea2e 0e04 	bic.w	lr, lr, r4
 800ea4a:	f100 0004 	add.w	r0, r0, #4
 800ea4e:	d10b      	bne.n	800ea68 <strncmp+0x70>
 800ea50:	3a04      	subs	r2, #4
 800ea52:	4684      	mov	ip, r0
 800ea54:	4619      	mov	r1, r3
 800ea56:	d0ec      	beq.n	800ea32 <strncmp+0x3a>
 800ea58:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
 800ea5c:	d1e9      	bne.n	800ea32 <strncmp+0x3a>
 800ea5e:	2a03      	cmp	r2, #3
 800ea60:	d8e9      	bhi.n	800ea36 <strncmp+0x3e>
 800ea62:	e7d1      	b.n	800ea08 <strncmp+0x10>
 800ea64:	4610      	mov	r0, r2
 800ea66:	4770      	bx	lr
 800ea68:	f89c 0000 	ldrb.w	r0, [ip]
 800ea6c:	780c      	ldrb	r4, [r1, #0]
 800ea6e:	42a0      	cmp	r0, r4
 800ea70:	d0d1      	beq.n	800ea16 <strncmp+0x1e>
 800ea72:	1b00      	subs	r0, r0, r4
 800ea74:	bd30      	pop	{r4, r5, pc}
 800ea76:	bf00      	nop
